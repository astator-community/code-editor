<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary>当在某个地址读取或写入一个单元的数据，但该地址的数据大小不是该数据单元的整数倍时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary>初始化 <see cref="T:System.DataMisalignedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.DataMisalignedException" /> 类的新实例。</summary>
      <param name="message">描述错误的 <see cref="T:System.String" /> 对象。 <paramref name="message" /> 的内容设计为易于理解。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary>用指定的错误信息和基础异常初始化 <see cref="T:System.DataMisalignedException" /> 类的新实例。</summary>
      <param name="message">描述错误的 <see cref="T:System.String" /> 对象。 <paramref name="message" /> 的内容设计为易于理解。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前 <see cref="T:System.DataMisalignedException" /> 的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>当未找到在 DLL 导入中指定的 DLL 时所引发的异常。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary>提供从托管代码随机访问非托管内存块的能力。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary>初始化 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>使用指定的缓冲区、偏移量和容量初始化 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 类的新实例。</summary>
      <param name="buffer">要包含访问器的缓冲区。</param>
      <param name="offset">启动访问器的字节位置。</param>
      <param name="capacity">要分配的内存大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 与 <paramref name="capacity" /> 之和大于 <paramref name="buffer" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="capacity" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> 与 <paramref name="capacity" /> 之和将环绕地址空间的高端。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>使用指定的缓冲区、偏移量、容量和访问权限初始化 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 类的新实例。</summary>
      <param name="buffer">要包含访问器的缓冲区。</param>
      <param name="offset">启动访问器的字节位置。</param>
      <param name="capacity">要分配的内存大小（以字节为单位）。</param>
      <param name="access">内存允许的访问类型。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 与 <paramref name="capacity" /> 之和大于 <paramref name="buffer" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="capacity" /> 小于零。  
  
- 或 - 
 <paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> 与 <paramref name="capacity" /> 之和将环绕地址空间的高端。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary>释放由 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>设置访问器的初始值。</summary>
      <param name="buffer">要包含访问器的缓冲区。</param>
      <param name="offset">启动访问器的字节位置。</param>
      <param name="capacity">要分配的内存大小（以字节为单位）。</param>
      <param name="access">内存允许的访问类型。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 与 <paramref name="capacity" /> 之和大于 <paramref name="buffer" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="capacity" /> 小于零。  
  
- 或 - 
 <paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> 与 <paramref name="capacity" /> 之和将环绕地址空间的高端。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary>将 <paramref name="T" /> 类型的结构从访问器读取到提供的引用中。</summary>
      <param name="position">访问器中开始读取的位置。</param>
      <param name="structure">包含读取数据的结构。</param>
      <typeparam name="T">结构的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读入 <paramref name="T" /> 类型的结构。  
  
- 或 - 
 <see langword="T" /> 是包含一个或多个引用类型的值类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>将 <paramref name="T" /> 类型的结构从访问器读取到 <paramref name="T" /> 类型的数组中。</summary>
      <param name="position">访问器中的字节偏移量，从此处开始读取。</param>
      <param name="array">包含从访问器读取的结构的数组。</param>
      <param name="offset">
        <paramref name="array" /> 中要将第一个复制的结构放置到的索引。</param>
      <param name="count">要从访问器读取的 <c>T</c> 类型的结构数。</param>
      <typeparam name="T">结构的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不足够大，无法包含结构的 <paramref name="count" />（从 <paramref name="position" /> 开始）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读入 <paramref name="array" /> 的结构数。 如果可用结构较少，则此值可能小于 <paramref name="count" />；如果到达访问器末尾，则为零。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary>从访问器读取一个布尔值。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>
        <see langword="true" /> 或 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary>从访问器读取一个字节值。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary>从访问器读取一个字符。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary>从访问器读取一个小数值。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。  
  
- 或 - 
要读取的小数无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary>从访问器读取一个双精度浮点值。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary>从访问器读取一个 16 位整数。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary>从访问器读取一个 32 位整数。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary>从访问器读取一个 64 位整数。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary>从访问器读取一个 8 位带符号整数。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary>从访问器读取一个单精度浮点值。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary>从访问器读取一个 16 位无符号整数。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary>从访问器读取一个 32 位无符号整数。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary>从访问器读取一个 64 位无符号整数。</summary>
      <param name="position">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
      <returns>读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary>将一个布尔值写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary>将一个字节值写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary>将一个字符写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary>将一个小数值写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。  
  
- 或 - 
小数无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary>将一个 <see cref="T:System.Double" /> 值写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary>将一个 16 位整数写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary>将一个 32 位整数写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary>将一个 64 位整数写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">position 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary>将一个 8 位整数写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary>将一个 <see cref="T:System.Single" /> 写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary>将一个 16 位无符号整数写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary>将一个 32 位无符号整数写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary>将一个 64 位无符号整数写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary>将一个结构写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="structure">要写入的结构。</param>
      <typeparam name="T">结构的类型。</typeparam>
      <exception cref="T:System.ArgumentException">取值函数的 <paramref name="position" /> 后面没有足够的字节数可供写入 <paramref name="T" /> 类型的结构。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>将结构从 <paramref name="T" /> 类型的数组写入访问器。</summary>
      <param name="position">访问器中起始写入位置的字节偏移量。</param>
      <param name="array">要写入访问器的数组。</param>
      <param name="offset">在 <paramref name="array" /> 中从其开始写入的索引。</param>
      <param name="count">要写入的 <paramref name="array" /> 中的结构数。</param>
      <typeparam name="T">结构的类型。</typeparam>
      <exception cref="T:System.ArgumentException">取值函数的 <paramref name="position" /> 后面没有足够的字节数可供写入 <paramref name="count" /> 所指定数量的结构。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 小于零或大于访问器的容量。  
  
- 或 - 
 <paramref name="offset" /> 或 <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放访问器。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary>确定访问器是否可读。</summary>
      <returns>如果访问器可读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary>确定访问器是否可写。</summary>
      <returns>如果访问器可写，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary>获取访问器的容量。</summary>
      <returns>访问器的容量。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary>确定访问器当前是否由进程打开。</summary>
      <returns>如果访问器已打开，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary>指示特性化字段或参数的默认值是 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 的实例，其中 <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> 为 <see langword="null" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary>获取存储在此特性中的 <see langword="IDispatch" /> 常数。</summary>
      <returns>存储在此特性中的 <see langword="IDispatch" /> 常数。 只有 <see langword="null" /> 可以作为 <see langword="IDispatch" /> 常数的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary>指示特性化字段或参数的默认值是 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> 的实例，其中 <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> 为 <see langword="null" />。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary>获取存储在此特性中的 <see langword="IUnknown" /> 常数。</summary>
      <returns>存储在此特性中的 <see langword="IUnknown" /> 常数。 只有 <see langword="null" /> 可以作为 <see langword="IUnknown" /> 常数的值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary>允许非托管方法调用托管方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>封装指定数组内的数组和偏移量。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 结构的新实例。</summary>
      <param name="array">托管数组。</param>
      <param name="offset">要通过平台调用传递的元素的偏移量（以字节为单位）。</param>
      <exception cref="T:System.ArgumentException">数组大于 2 GB。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>指示指定的对象是否与当前的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象匹配。</summary>
      <param name="obj">要与该实例进行比较的对象。</param>
      <returns>如果对象与此 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 匹配，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>指示指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否与当前实例匹配。</summary>
      <param name="obj">要与此实例比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
      <returns>如果指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象与当前实例相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>返回此 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 引用的托管数组。</summary>
      <returns>此实例引用的托管数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>返回此值类型的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>返回当构造此 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 时提供的偏移量。</summary>
      <returns>此实例的偏移量。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>确定两个指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否具有相同的值。</summary>
      <param name="a">与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
      <param name="b">与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
      <returns>如果 <see langword="true" /> 的值与 <paramref name="a" /> 的值相同，则为 <paramref name="b" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>确定两个指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否具有不同值。</summary>
      <param name="a">与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
      <param name="b">与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
      <returns>如果 <paramref name="a" /> 的值与 <paramref name="b" /> 的值不相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary>指定应使用自动化封送处理程序还是自定义代理和存根对类型进行封送处理。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" /> 类的新实例。</summary>
      <param name="val">如果应使用“自动化封送拆收器”封送类，则为 <see langword="true" />；如果应使用代理存根封送拆收器，则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary>获取一个值，该值指示要使用的封送拆收器的类型。</summary>
      <returns>如果应使用“自动化封送拆收器”封送类，则为 <see langword="true" />；如果应使用代理存根封送拆收器，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary>控制是否将 Unicode 字符转换为最接近的匹配 ANSI 字符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary>启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> 类的新实例，并将其设置为 <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> 属性的值。</summary>
      <param name="BestFitMapping">
        <see langword="true" /> 指示启用最佳映射；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary>获取将 Unicode 字符转换为 ANSI 字符时的最佳映射行为。</summary>
      <returns>如果启用最佳映射则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary>将 <see langword="VT_BSTR" /> 类型的数据从托管代码封送到非托管代码。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary>使用指定的 <see cref="T:System.Object" /> 对象初始化 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 类的新实例。</summary>
      <param name="value">要包装并作为 <see langword="VT_BSTR" /> 进行封送的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary>使用指定的 <see cref="T:System.String" /> 对象初始化 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 类的新实例。</summary>
      <param name="value">要包装并作为 <see langword="VT_BSTR" /> 进行封送的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary>获取将作为 <see langword="VT_BSTR" /> 类型进行封送的包装的 <see cref="T:System.String" /> 对象。</summary>
      <returns>由 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>指定调用在非托管代码中实现的方法所需的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>调用方清理堆栈。 这使你能够调用具有 <see langword="varargs" /> 的函数（如 <see langword="Printf" />），使之可用于接受可变数目的参数的方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>不支持此调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>被调用方清理堆栈。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>第一个参数是 <see langword="this" /> 指针，它存储在寄存器 ECX 中。 其他参数被推送到堆栈上。 此调用约定用于对从非托管 DLL 导出的类调用方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>此成员实际上不是调用约定，而是使用了默认平台调用约定。 例如，在 Windows x86 上默认为 <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" />，在 Linux x86 上默认为 <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>指示在完全生成某个接口后为要向 COM 公开的类生成的类接口类型。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 枚举值初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 类的新实例。</summary>
      <param name="classInterfaceType">描述为类生成的接口的类型。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 类的新实例。</summary>
      <param name="classInterfaceType">
        <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值之一，描述为类生成的接口的类型。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值，该值描述应为该类生成的接口的类型。</summary>
      <returns>描述应该为该类生成哪种类型的接口的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>标识为类生成的类接口类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>
        <para>指示该类只支持 COM 客户端的后期绑定。 在请求时，该类的 <see langword="dispinterface" /> 会自动向 COM 客户端公开。 Tlbexp.exe（类型库导出程序） 生成的类型库不包含 <see langword="dispinterface" /> 的类型信息，以防止客户端缓存接口的 DISPID。 由于客户端只能后期绑定到接口，因此 <see langword="dispinterface" /> 不会出现 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 中所述的版本控制问题。</para>
        <para>这是 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 的默认设置。</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>指示自动为类生成双重类接口并向 COM 公开。 为该类接口生成类型信息并在类型库中发布。 由于 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 中描述的版本控制方面的限制，极力建议不要使用 <see langword="AutoDual" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>指示不为类生成类接口。 如果未显式实现任何接口，则该类只能通过 <see langword="IDispatch" /> 接口提供后期绑定访问。 这是 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 的推荐设置。 要通过由类显式实现的接口公开功能，唯一的方法是使用 <see langword="ClassInterfaceType.None" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>指定从类型库导入的组件类的类标识符。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>用原始 coclass 的类标识符初始化 <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> 的新实例。</summary>
      <param name="coClass">一个 <see cref="T:System.Type" />，它包含原始 coclass 的类标识符。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>获取原始 coclass 的类标识符。</summary>
      <returns>一个 <see cref="T:System.Type" />，它包含原始 coclass 的类标识符。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CollectionsMarshal">
      <summary>一种不安全的类，它提供一组方法来访问集合的基础数据表示形式。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})">
      <summary>获取针对列表中的数据的 <see cref="T:System.Span`1" /> 视图。
使用 <see cref="T:System.Span`1" /> 时，不得在 <see cref="T:System.Collections.Generic.List`1" /> 中添加或删除项。</summary>
      <param name="list">从中创建 <see cref="T:System.Span`1" /> 的列表</param>
      <typeparam name="T">列表中项的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> 上的 <see cref="T:System.Span`1" /> 实例</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary>指示参数或字段类型的 COM 别名。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary>使用特性化字段或参数的别名初始化 <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> 类的新实例。</summary>
      <param name="alias">导入字段或参数时在类型库中找到的别名。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary>获取导入字段或参数时在类型库中找到的别名。</summary>
      <returns>导入字段或参数时在类型库中找到的别名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>允许事件处理程序的后期绑定注册。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>使用指定类型和该类型的事件名称来初始化 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 类的新实例。</summary>
      <param name="type">对象的类型。</param>
      <param name="eventName">有关 <paramref name="type" /> 的事件的名称。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>将事件处理程序附加到 COM 对象。</summary>
      <param name="target">事件委托应绑定到的目标对象。</param>
      <param name="handler">事件委托。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>获取用于将事件处理程序委托添加到事件源的方法。</summary>
      <param name="nonPublic">如果返回非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 为 <see langword="true" />，表示用于添加事件处理程序委托的方法为非公共的，并且调用方无权对非公共方法进行反射。</exception>
      <returns>用于将事件处理程序委托添加到事件源的方法。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>在派生类中重写时，获取一个包含应用于此成员的所有自定义特性的数组。</summary>
      <param name="inherit">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">此成员属于加载到仅反射的上下文的类型。 请参阅如何：将程序集加载到仅反射上下文中。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <returns>一个包含所有自定义特性的数组，如果未定义任何特性，则为一个包含零个元素的数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>在派生类中重写时，获取一个数组，该数组包含应用于此成员的指定类型的所有自定义特性。</summary>
      <param name="attributeType">要搜索的特性类型。 只能返回可分配给此类型的特性。</param>
      <param name="inherit">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">此成员属于加载到仅反射的上下文的类型。 请参阅如何：将程序集加载到仅反射上下文中</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <returns>一个包含指定类型的所有自定义特性的数组，如果未定义任何特性，则为一个包含零个元素的数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary>返回当前 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 的 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表。</summary>
      <returns>
        <see cref="T:System.Reflection.CustomAttributeData" /> 对象的泛型列表，表示已应用到当前 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 的特性的相关数据。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary>返回在元数据中与某事件相关联的公共或非公共方法。</summary>
      <param name="nonPublic">如果包括非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个数组，表示在元数据中已与事件相关联的方法。 如果没有此类方法，则返回空数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>在派生类中重写时，返回引发该事件时调用的方法。</summary>
      <param name="nonPublic">如果返回非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 为 <see langword="true" />，表示用于添加事件处理程序委托的方法为非公共的，并且调用方无权对非公共方法进行反射。</exception>
      <returns>引发该事件时调用的对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>在派生类中重写时，检索用于移除该事件的方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象。</summary>
      <param name="nonPublic">如果返回非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 为 <see langword="true" />，表示用于添加事件处理程序委托的方法为非公共的，并且调用方无权对非公共方法进行反射。</exception>
      <returns>用于从事件源中移除事件处理程序委托的方法。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>指示是否对此成员应用指定特性的一个或多个实例。</summary>
      <param name="attributeType">要搜索的特性类型。</param>
      <param name="inherit">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>如果已对此成员应用指定特性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>将事件处理程序从 COM 对象分离。</summary>
      <param name="target">事件委托所绑定的目标对象。</param>
      <param name="handler">事件委托。</param>
      <exception cref="T:System.InvalidOperationException">该事件没有公共 <see langword="remove" /> 访问器。</exception>
      <exception cref="T:System.ArgumentException">无法使用传入的处理程序。</exception>
      <exception cref="T:System.Reflection.TargetException">
        <block subset="none" type="note">
          <para>  
 在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获 <see cref="T:System.Exception" />。</para>
        </block>
        <paramref name="target" /> 参数为 <see langword="null" />，并且此事件不是静态事件。  
  
- 或 - 
未在目标上声明 <see cref="T:System.Reflection.EventInfo" /> 。</exception>
      <exception cref="T:System.MethodAccessException">
        <block subset="none" type="note">
          <para>  
 在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。</para>
        </block>  
  
 调用方没有对成员的访问权限。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>获取此事件的属性。</summary>
      <returns>此事件的只读特性。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>获取声明该成员的类。</summary>
      <returns>声明该成员的类的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary>获取与当前 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 对象关联的元数据令牌。</summary>
      <returns>表示元数据标记的32位整数。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary>获取与当前 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 对象关联的模块。</summary>
      <returns>与当前对象关联的模块 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>获取当前成员的名称。</summary>
      <returns>此成员的名称。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>获取用于初始化此实例的类对象。</summary>
      <returns>用于初始化当前对象的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary>向 COM 客户端指示程序集当前版本中的所有类与该程序集早期版本中的类兼容。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用程序集的主版本、次版本、内部版本号和修订号初始化 <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> 类的新实例。</summary>
      <param name="major">程序集的主版本号。</param>
      <param name="minor">程序集的次版本号。</param>
      <param name="build">程序集的生成号。</param>
      <param name="revision">程序集的修订号。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary>获取程序集的生成号。</summary>
      <returns>程序集的生成号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary>获取程序集的主版本号。</summary>
      <returns>程序集的主版本号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary>获取程序集的次版本号。</summary>
      <returns>程序集的次版本号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary>获取程序集的修订号。</summary>
      <returns>程序集的修订号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary>指示从类型库向程序集导入类或接口时丢失了有关信息。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary>初始化 <see langword="ComConversionLossAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>指定要向 COM 公开的默认接口。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>以指定的 <see cref="T:System.Type" /> 对象作为向 COM 公开的默认接口初始化 <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> 类的新实例。</summary>
      <param name="defaultInterface">一个 <see cref="T:System.Type" /> 值，指示要向 COM 公开的默认接口。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>获取 <see cref="T:System.Type" /> 对象，该对象指定要向 COM 公开的默认接口。</summary>
      <returns>指定要向 COM 公开的默认接口的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>标识源接口和实现事件接口方法的类，事件接口在从 COM 类型库中导入组件类时生成。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>用源接口和事件提供程序类初始化 <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> 类的新实例。</summary>
      <param name="SourceInterface">一个 <see cref="T:System.Type" />，其中包含类型库中的原始源接口。 COM 使用此接口回调到托管类。</param>
      <param name="EventProvider">一个 <see cref="T:System.Type" />，其中包含实现事件接口方法的类。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>获取实现事件接口方法的类。</summary>
      <returns>一个 <see cref="T:System.Type" />，其中包含实现事件接口方法的类。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>从类型库获取原始源接口。</summary>
      <returns>一个包含源接口的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary>提供允许 .NET Framework 委托的方法，这些委托处理将从 COM 对象添加和删除的事件。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>将委托添加到源自 COM 对象的事件的调用列表。</summary>
      <param name="rcw">触发事件的 COM 对象，调用方希望响应这些事件。</param>
      <param name="iid">COM 对象用来触发事件的源接口的标识符。</param>
      <param name="dispid">源接口上的方法的调度标识符。</param>
      <param name="d">要在激发 COM 事件时调用的委托。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>从源自 COM 对象的事件的调用列表中移除委托。</summary>
      <param name="rcw">委托附加到的 COM 对象。</param>
      <param name="iid">COM 对象用来触发事件的源接口的标识符。</param>
      <param name="dispid">源接口上的方法的调度标识符。</param>
      <param name="d">要从调用列表中移除的委托。</param>
      <returns>已从调用列表中移除的委托。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>当 COM 方法调用返回一个无法识别的 HRESULT 时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从序列化数据初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">提供有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="message">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>使用指定的消息和错误代码初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="message">指示所发生异常的原因的消息。</param>
      <param name="errorCode">与此异常关联的错误代码 (HRESULT) 值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>将异常的内容转换为字符串。</summary>
      <returns>包含异常的 <see cref="P:System.Exception.HResult" />、<see cref="P:System.Exception.Message" />、<see cref="P:System.Exception.InnerException" /> 和 <see cref="P:System.Exception.StackTrace" /> 属性的字符串。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>指示先前在 COM 中定义的特性化类型。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>标识如何向 COM 公开接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>指示接口作为双重接口对 COM 公开，从而启用早期绑定和后期绑定。 默认值为 <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>指示接口作为 dispinterface 对 COM 公开，这样将只启用后期绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary>指示接口作为 Windows 运行时 接口对 COM 公开。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>指示接口作为从 IUnknown 派生的接口对 COM 公开，这样将只启用早期绑定。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>描述 COM 成员的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>该成员是一个一般方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>该成员获取属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>该成员设置属性。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary>指定从 COM 中注册使用的程序集时要调用的方法；这样可以在注册进程中执行用户编写的代码。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>标识针对特性化类作为 COM 事件源公开的接口列表。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>使用事件源接口名称初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterfaces">事件源接口的完全限定名列表，名称之间用 null 分隔。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>使用要用作源接口的类型初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface">源接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>使用要用作源接口的类型初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface1">默认源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2">源接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>使用要用作源接口的类型初始化 <see langword="ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface1">默认源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2">源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface3">源接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>使用要用作源接口的类型初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface1">默认源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2">源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface3">源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface4">源接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>获取事件源接口的完全限定名。</summary>
      <returns>事件源接口的完全限定名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary>当设置建议接收器或缓存与对象的连接时，指定请求的行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary>对于数据通知连接，请确保数据的可访问性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary>对于数据通知连接（<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />），此标志请求数据对象在它调用 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 时不要发送数据。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary>请求对象在删除连接前只进行一次更改通知或缓存更新。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary>请求对象在对 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 进行初始调用（对于数据或视图通知连接）或更新缓存（对于缓存连接）之前不要等待数据或视图更改。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary>此值由执行对象绘制的 DLL 对象应用程序和对象处理程序使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary>
        <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" /> 的同义词，该词更为常用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary>对于缓存连接，此标志只在保存包含缓存的对象时更新缓存的表示形式。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary>存储名字对象绑定操作中使用的参数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary>指定 <see langword="BIND_OPTS" /> 结构的大小（以字节为单位）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary>指示调用方指定的用于完成绑定操作的时间（由 <see langword="GetTickCount" /> 函数返回的以毫秒为单位的时钟时间）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary>控制名字对象绑定操作的各个方面。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary>表示当打开包含由该名字对象标识的对象的文件时应使用的标志。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary>包含指向绑定到 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构、<see cref="T:System.Runtime.InteropServices.VARDESC" /> 结构或 <see langword="ITypeComp" /> 接口的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary>表示指向 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary>表示指向 <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" /> 接口的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary>表示指向 <see cref="T:System.Runtime.InteropServices.VARDESC" /> 结构的指针。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary>标识 METHODDATA 结构中描述的方法所使用的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary>指示对方法使用 C 声明 (CDECL) 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary>指示对方法使用 Macintosh Pascal (MACPASCAL) 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary>指示 <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> 枚举的结尾。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary>指示对方法使用 Macintosh Programmers' Workbench (MPW) CDECL 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary>指示对方法使用 Macintosh Programmers' Workbench (MPW) PASCAL 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary>指示对方法使用 MSC Pascal (MSCPASCAL) 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary>指示对方法使用 Pascal 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary>保留此值供将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary>指示对方法使用标准调用约定 (STDCALL)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary>指示对方法使用标准 SYSCALL 调用约定。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary>描述与给定连接点存在的连接。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary>表示从 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 调用中返回的连接标记。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary>表示指向已连接的通知接收器上的 <see langword="IUnknown" /> 接口的指针。 当不再需要 <see langword="IUnknown::Release" /> 结构时，调用方必须在此指针上调用 <see langword="CONNECTDATA" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary>在 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 方法的 <paramref name="dwDirection" /> 参数中指定数据流的方向。 这确定了生成的枚举器可枚举的格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary>请求 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 为可在 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 中指定的格式提供枚举数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary>请求 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 为可在 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> 中指定的格式提供枚举数。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary>标识要绑定到的类型说明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary>指示返回了 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>指示返回了 <see langword="IMPLICITAPPOBJ" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary>指示枚举结尾标记。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary>指示未找到任何匹配项。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary>指示返回了 <see langword="TYPECOMP" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary>指示返回了 <see langword="VARDESC" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary>包含由 <see langword="IDispatch::Invoke" /> 传递到方法或属性的参数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary>表示参数的计数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary>表示命名参数的计数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary>表示命名参数的调度 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary>表示对参数数组的引用。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary>在绘制或获取数据时，指定所需对象数据或对象视图方位。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary>对象的表示形式，它使该对象在容器内显示为嵌入的对象。 通常为复合文档对象指定此值。 该演示可提供给屏幕或打印机。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary>对象在屏幕上的表示形式，与使用“文件”菜单上的“打印”命令在打印机上打印出的效果相同********。 该描述数据可以表示页序列。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary>对象的图标表示形式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary>对象的缩略图表示形式，使对象可在浏览工具中显示。 该缩略图大约为 120 x 120 像素、16 色（推荐）、独立于设备的位图，该位图可能包含在图元文件中。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary>包含变量、函数或函数参数的类型说明和进程传输信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary>包含有关元素的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary>标识元素的类型。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary>包含有关元素的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary>包含有关远程处理该元素的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary>包含有关参数的信息。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary>描述在 <see langword="IDispatch::Invoke" /> 过程中发生的异常。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary>描述用户可能遇到的错误。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary>包含帮助文件的完全限定驱动器、路径和文件名，该帮助文件包含有关错误的更多信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary>指示异常源的名称。 该名称通常是一个应用程序名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary>指示该主题在帮助文件中的帮助上下文 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary>表示指向一个函数的指针，该函数采用 <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> 结构作为参数并返回 HRESULT 值。 如果不想推迟填充，则将此字段设置为 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary>此字段为保留字段；必须将其设置为 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary>描述错误的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary>表示用于标识错误的错误代码。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary>此字段为保留字段；必须将其设置为 0。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary>表示从 1601 年 1 月 1 日起 100 纳秒间隔的数量。 此结构是 64 位值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary>指定 <see langword="FILETIME" /> 的高 32 位。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary>指定 <see langword="FILETIME" /> 的低 32 位。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary>表示通用的剪贴板格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary>指定有意义的特殊剪贴板格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary>指定一个 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 枚举常数，用以确定呈现中应包含多少详细信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary>在必须跨页边界拆分数据时指定方位的部分。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary>指定指向 <see langword="DVTARGETDEVICE" /> 结构的指针，该结构中包含有关该数据所构成的目标设备的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary>指定一个 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 枚举常数，该常数指示用于传输对象数据的存储介质的类型。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary>定义函数说明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary>指定函数的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary>计算参数的总数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary>计算可选参数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary>计算允许的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary>包含函数的返回类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary>指定函数是虚拟的、静态的还是仅支持调度的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary>指定属性函数的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary>指示 <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" /> 的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary>存储函数可在 16 位系统中返回的错误的计数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary>标识函数成员 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary>指定 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" /> 在 VTBL 中的偏移量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary>指示函数的 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary>标识定义函数属性的常量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>支持数据绑定的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>最佳表示此对象的函数。 一个类型中只能有一个函数可以具有此特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>允许进行一种优化，使编译器查找“abc”类型上名为“xyz”的成员。 如果找到这样的成员，而且该成员标志为默认集合的某元素的访问器函数，则生成对该成员函数的调用。 可以对调度接口和接口中的成员使用；不能对模块使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>作为可绑定函数显示给用户的函数。 还必须设置 <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>不应将此函数显示给用户，尽管它存在并且为可绑定函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>作为单独的可绑定属性映射。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>该属性出现在对象浏览器而非属性浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>将该接口标记为具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>设置后，任何对设置此属性的方法的调用都首先导致对 <see langword="IPropertyNotifySink::OnRequestEdit" /> 的调用。 <see langword="OnRequestEdit" /> 的实现确定是否允许该调用设置属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>此函数不应该是可从宏语言访问的。 此标志适用于系统级函数或类型浏览器不应显示的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>该函数返回一个对象，此对象为事件的源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>类型信息成员是在用户界面中显示的默认成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>该函数支持 <see langword="GetLastError" />。 如果在函数过程中发生错误，则调用方可以调用 <see langword="GetLastError" /> 来检索错误代码。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary>定义如何访问函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary>该函数只能通过 <see langword="IDispatch" /> 访问。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>该函数通过 <see langword="static" /> 地址访问，并采用隐式 <see langword="this" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>该函数通过虚函数表 (VTBL) 访问，并采用隐式 <see langword="this" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary>该函数通过 <see langword="static" /> 地址访问，不采用隐式 <see langword="this" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary>该函数与 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" /> 的访问方式相同，不同之处在于该函数具有实现。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary>提供 <see langword="IAdviseSink" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary>向所有已注册的通知接收器通知以下情况：对象已从运行状态更改为加载状态。  此方法由服务器调用。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>向当前已注册通知接收器的所有数据对象通知以下情况：对象中的数据已更改。</summary>
      <param name="format">一个由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />，它描述调用数据对象的格式、目标设备、呈现和存储信息。</param>
      <param name="stgmedium">一个由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />，它为调用数据对象定义存储介质（共用内存、磁盘文件、存储对象、流对象、图形设备接口 (GDI) 对象或未定义介质）和该介质的所属权。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>向所有已注册的通知接收器通知以下情况：对象已重命名。 此方法由服务器调用。</summary>
      <param name="moniker">一个指针，它指向对象的新的、完整的名字对象上的 <see langword="IMoniker" /> 接口。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary>向所有已注册的通知接收器通知以下情况：对象已保存。 此方法由服务器调用。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary>向对象的已注册通知接收器通知以下情况：其视图已更改。 此方法由服务器调用。</summary>
      <param name="aspect">对象的方位或视图。 包含一个从 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 枚举中提取的值。</param>
      <param name="index">已更改的视图部分。 当前，只有 -1 有效。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary>提供 <see langword="IBindCtx" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>枚举字符串，这些字符串是在内部维护的上下文对象参数表的项。</summary>
      <param name="ppenum">此方法返回时，包含对对象参数枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>返回当前存储在当前绑定上下文中的绑定选项。</summary>
      <param name="pbindopts">指向接收绑定选项的结构的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary>在内部维护的上下文对象参数表中查找给定的项并返回相应的对象（如果此对象存在的话）。</summary>
      <param name="pszKey">要搜索的对象名称。</param>
      <param name="ppunk">此方法返回时，包含对象接口指针。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary>返回对与此绑定进程相关的运行对象表 (ROT) 的访问权。</summary>
      <param name="pprot">此方法返回时，包含对运行对象表 (ROT) 的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary>将传递的对象注册为已在名字对象操作期间绑定且应在此操作完成之后释放的对象之一。</summary>
      <param name="punk">要为释放而注册的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary>以内部维护的对象指针表中的指定名称注册指定的对象指针。</summary>
      <param name="pszKey">用于注册 <paramref name="punk" /> 的名称。</param>
      <param name="punk">要注册的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary>释放所有当前由 <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" /> 方法用绑定上下文注册的对象。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary>从需要释放的注册对象集中移除该对象。</summary>
      <param name="punk">要为释放而注销的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary>撤消当前在指定项（位于内部维护的上下文对象参数表中）下可找到的对象的注册（如果该项当前已注册）。</summary>
      <param name="pszKey">要注销的键。</param>
      <returns>如果从表中成功移除指定键，则为 <see langword="S_OK" /><see langword="HRESULT" /> 值；否则为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>在绑定上下文中存储参数块。 这些参数将应用于稍后使用此绑定上下文的 <see langword="UCOMIMoniker" /> 操作。</summary>
      <param name="pbindopts">包含要设置的绑定选项的结构。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary>提供 <see langword="IConnectionPoint" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary>在连接点和调用方的接收器对象之间建立一个通知连接。</summary>
      <param name="pUnkSink">对接收器的引用，该接收器为此连接点所管理的输出接口接收调用。</param>
      <param name="pdwCookie">此方法返回时，包含连接 Cookie。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>创建枚举数对象，以便循环访问到此连接点的现有连接。</summary>
      <param name="ppEnum">此方法返回时，包含新创建的枚举数。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary>返回由此连接点管理的输出接口的 IID。</summary>
      <param name="pIID">此参数返回时，包含由此连接点管理的输出接口的 IID。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary>检索指向在概念上拥有此连接点的可连接对象的 <see langword="IConnectionPointContainer" /> 接口指针。</summary>
      <param name="ppCPC">此参数返回时，包含可连接对象的 <see langword="IConnectionPointContainer" /> 接口。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary>终止先前通过 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 方法建立的顾问连接。</summary>
      <param name="dwCookie">先前从 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 方法返回的连接 cookie。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary>提供 <see langword="IConnectionPointContainer" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>创建在可连接对象中支持的所有连接点的枚举数，每个 IID 一个连接点。</summary>
      <param name="ppEnum">此方法返回时，包含枚举数的接口指针。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary>询问可连接对象是否具有某个特定 IID 的连接点，如果是，则返回指向此连接点的 <see langword="IConnectionPoint" /> 接口指针。</summary>
      <param name="riid">对输出接口 IID 的引用，此输出接口 IID 的连接点正在被请求。</param>
      <param name="ppCP">此方法返回时，包含管理输出接口 <paramref name="riid" /> 的连接点。 此参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary>提供 <see langword="IDataObject" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>在数据对象和通知接收器之间创建连接。 此方法由对象进行调用，该对象支持通知接收器并使通知接收器能收到有关对象数据中的更改的通知。</summary>
      <param name="pFormatetc">由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，它定义以后的通知将使用的格式、目标设备、方面和介质。</param>
      <param name="advf">一个 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 值，它指定用于控制通知连接的一组标志。</param>
      <param name="adviseSink">指向将接收更改通知的通知接收器上的 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 接口的指针。</param>
      <param name="connection">此方法返回时，包含指向标识此连接的 DWORD 标记的指针。 以后可以使用此标记来删除通知连接，方法是将该标记发送至 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />。 如果此值为零，则未建立连接。 此参数未经初始化即被传递。</param>
      <returns>此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 
 <list type="table"><listheader><term> 值</term><description> 说明</description></listheader><item><term> S_OK</term><description> 已创建通知连接。</description></item><item><term> E_NOTIMPL</term><description> 此方法未在数据对象上实现。</description></item><item><term> DV_E_LINDEX</term><description><see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> 有一个无效值；当前，只支持 -1。</description></item><item><term> DV_E_FORMATETC</term><description><paramref name="pFormatetc" /> 参数有一个无效值。</description></item><item><term> OLE_E_ADVISENOTSUPPORTED</term><description> 该数据对象不支持更改通知。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary>销毁以前建立的通知连接。</summary>
      <param name="connection">指定要移除的连接的 DWORD 标记。 使用最初建立连接时 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 返回的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>创建可用于对当前的通知连接进行枚举的对象。</summary>
      <param name="enumAdvise">此方法返回时，包含 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" />，它接收指向新枚举数对象的接口指针。 如果该实现将 <paramref name="enumAdvise" /> 设置为 <see langword="null" />，则此时没有到通知接收器的连接。 此参数未经初始化即被传递。</param>
      <returns>此方法支持标准返回值 E_OUTOFMEMORY 以及下面的值：  
  
 <list type="table"><listheader><term> 值</term><description> 说明</description></listheader><item><term> S_OK</term><description> 枚举数对象已成功实例化或没有连接。</description></item><item><term> OLE_E_ADVISENOTSUPPORTED</term><description> 此对象不支持通知。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>创建一个用于枚举数据对象的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的对象。 这些结构用于对 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> 的调用中。</summary>
      <param name="direction">指定数据方向的 <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> 值之一。</param>
      <returns>此方法支持 E_INVALIDARG 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 
 <list type="table"><listheader><term> 值</term><description> 说明</description></listheader><item><term> S_OK</term><description> 已成功创建枚举数对象。</description></item><item><term> E_NOTIMPL</term><description> 由 <paramref name="direction" /> 参数指定的方向不受支持。</description></item><item><term> OLE_S_USEREG</term><description> OLE 枚举注册表中的格式的请求。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>提供一个在逻辑上与更复杂的结构等效的标准 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构。 使用此方法可以确定两个不同的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构是否将返回相同的数据，从而无需重复呈现。</summary>
      <param name="formatIn">由引用传递的、指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针，该结构定义调用方在后续调用（如 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />）中检索数据时将要使用的格式、介质和目标设备。 在此情况下，<see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 成员并无意义，应将其忽略。</param>
      <param name="formatOut">此方法返回时，结果包含指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针（该结构中包含可能用于特定呈现的最常规信息），使其规范地等效于 <c>formatetcIn</c>。 调用方必须分配此结构，并且 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> 方法必须填充数据。 为了在后续调用（如 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />）中检索数据，调用方将使用提供的 <paramref name="formatOut" /> 值，除非提供的值为 <see langword="null" />。 如果方法返回 <see langword="null" />，则此值为 <see langword="DATA_S_SAMEFORMATETC" />。 在此情况下，<see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 成员并无意义，应将其忽略。 此参数未经初始化即被传递。</param>
      <returns>此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 
 <list type="table"><listheader><term> 值</term><description> 说明</description></listheader><item><term> S_OK</term><description> 返回的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构与传递的结构不同。</description></item><item><term> DATA_S_SAMEFORMATETC</term><description><see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构都相同，并且在 <paramref name="formatOut" /> 参数中返回 <see langword="null" />。</description></item><item><term> DV_E_LINDEX</term><description><see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> 有一个无效值；当前，只支持 -1。</description></item><item><term> DV_E_FORMATETC</term><description><paramref name="pFormatetc" /> 参数有一个无效值。</description></item><item><term> OLE_E_NOTRUNNING</term><description> 应用程序未运行。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>从源数据对象中获取数据。 数据使用者调用的 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 方法将呈现指定的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构中描述的数据，并通过指定的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构传输该数据。 然后，调用方对释放 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构的责任进行假定。</summary>
      <param name="format">由引用传递的、指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针，该结构定义传递数据时将使用的格式、介质和目标设备。 使用布尔型 OR 运算符可以指定多个介质，从而允许方法在指定的介质中做出最佳选择。</param>
      <param name="medium">此方法返回时，包含一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构的指针，该结构通过其 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> 成员指示包含返回数据的存储介质，并通过其 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员的值指示释放介质的责任。 如果 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 为 <see langword="null" />，则介质接收方负责释放介质；否则，<see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 指向相应对象上的 <see langword="IUnknown" /> 接口，以便调用其 <see langword="Release" /> 方法。 介质必须由 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 进行分配和填充。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>从源数据对象中获取数据。 数据使用者调用的此方法与 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 方法的区别在于调用方必须分配并释放指定的存储介质。</summary>
      <param name="format">由引用传递的、指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针，该结构定义传递数据时将使用的格式、介质和目标设备。 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 中只能指定一个介质，并且只有下列 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 值有效：<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" /> 或 <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />。</param>
      <param name="medium">由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />，它定义包含正在传输的数据的存储介质。 介质必须由调用方分配并由 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 填充。 调用方还必须释放介质。 此方法的实现必须始终为此参数指向的 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 结构的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 成员提供一个 <see langword="null" /> 值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>确定数据对象是否能够呈现 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构中所描述的数据。 尝试执行粘贴或删除操作的对象可以在调用 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 来获取操作是否成功的指示之前调用此方法。</summary>
      <param name="format">由引用传递的、指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针，该结构定义要用于查询的格式、介质和目标设备。</param>
      <returns>此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 
 <list type="table"><listheader><term> 值</term><description> 说明</description></listheader><item><term> S_OK</term><description> 对 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 的后续调用可能会成功。</description></item><item><term> DV_E_LINDEX</term><description><see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> 的无效值；当前，只支持 -1。</description></item><item><term> DV_E_FORMATETC</term><description><paramref name="pFormatetc" /> 参数的无效值。</description></item><item><term> DV_E_TYMED</term><description> 无效的 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> 值。</description></item><item><term> DV_E_DVASPECT</term><description> 无效的 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> 值。</description></item><item><term> OLE_E_NOTRUNNING</term><description> 应用程序未运行。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>将数据传输至实现此方法的对象。 此方法由包含数据源的对象调用。</summary>
      <param name="formatIn">由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，该结构定义数据对象在解释存储介质中包含的数据时所使用的格式。</param>
      <param name="medium">由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构，该结构定义其中正在传递数据的存储介质。</param>
      <param name="release">
        <see langword="true" /> 指定调用的数据对象，该对象实现 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />，并在调用返回后拥有存储介质。 这意味着，数据对象在使用介质后，必须调用 <see langword="ReleaseStgMedium" /> 函数来释放该介质。 如果为 <see langword="false" />，则指定调用方保留存储介质的所有权，所调用的数据对象只能在调用期间使用存储介质。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary>包含在进程间传输结构元素、参数或函数返回值所需的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary>保留；设置为 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary>指示描述类型的 <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> 值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary>说明如何在进程间传输结构元素、参数或函数返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary>参数将信息从调用方传递给被调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary>参数是客户端应用程序的本地标识符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary>参数将信息从调用方返回到被调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>参数是该成员的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary>不会指定该参数传递还是接收信息。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary>管理 <see langword="IEnumConnectionPoints" /> 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="ppenum">此方法返回时，包含对该新创建的枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary>检索枚举序列中指定数目的项。</summary>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的 <see langword="IConnectionPoint" /> 引用的数目。</param>
      <param name="rgelt">此方法返回时，包含对枚举连接的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含对 <paramref name="rgelt" /> 中枚举的连接的实际数目的引用。</param>
      <returns>如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary>将枚举序列重置到开头。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <param name="celt">枚举中要跳过的元素数目。</param>
      <returns>如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary>管理 <see langword="IEnumConnections" /> 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="ppenum">此方法返回时，包含对该新创建的枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary>检索枚举序列中指定数目的项。</summary>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的 <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> 结构的数目。</param>
      <param name="rgelt">此方法返回时，包含对枚举连接的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含对 <paramref name="rgelt" /> 中枚举的连接的实际数目的引用。</param>
      <returns>如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary>将枚举序列重置到开头。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <param name="celt">枚举中要跳过的元素数目。</param>
      <returns>如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary>提供 <see langword="IEnumFORMATETC" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="newEnum">此方法返回时，包含对该新创建的枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary>检索枚举序列中指定数目的项。</summary>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 引用的数目。</param>
      <param name="rgelt">此方法返回时，包含对枚举的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 引用的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含对 <paramref name="rgelt" /> 中枚举的实际引用数的引用。 此参数未经初始化即被传递。</param>
      <returns>如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary>将枚举序列重置到开头。</summary>
      <returns>具有值 <see langword="S_OK" /> 的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <param name="celt">枚举中要跳过的元素数目。</param>
      <returns>如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary>管理 <see langword="IEnumMoniker" /> 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="ppenum">此方法返回时，包含对该新创建的枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary>检索枚举序列中指定数目的项。</summary>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的名字对象的数目。</param>
      <param name="rgelt">此方法返回时，包含对枚举的名字对象的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含对在 <paramref name="rgelt" /> 中枚举的名字对象的实际数目的引用。</param>
      <returns>如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary>将枚举序列重置到开头。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <param name="celt">枚举中要跳过的元素数目。</param>
      <returns>如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary>提供 <see langword="IEnumSTATDATA" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="newEnum">此方法返回时，包含对该新创建的枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary>检索枚举序列中指定数目的项。</summary>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 引用的数目。</param>
      <param name="rgelt">此方法返回时，包含对枚举的 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 引用的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched">此参数返回时，包含对 <paramref name="rgelt" /> 中枚举的实际引用数的引用。 此参数未经初始化即被传递。</param>
      <returns>如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary>将枚举序列重置到开头。</summary>
      <returns>具有值 <see langword="S_OK" /> 的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <param name="celt">枚举中要跳过的元素数目。</param>
      <returns>如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary>管理 <see langword="IEnumString" /> 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="ppenum">此方法返回时，包含对该新创建的枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary>检索枚举序列中指定数目的项。</summary>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的字符串的数目。</param>
      <param name="rgelt">此方法返回时，包含对枚举字符串的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含对在 <paramref name="rgelt" /> 中枚举的字符串的实际数目的引用。</param>
      <returns>如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary>将枚举序列重置到开头。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <param name="celt">枚举中要跳过的元素数目。</param>
      <returns>如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary>管理 <see langword="IEnumVARIANT" /> 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <returns>对新创建枚举器的 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> 引用。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary>检索枚举序列中指定数目的项。</summary>
      <param name="celt">要在 rgelt<c></c> 中返回的元素的数目。</param>
      <param name="rgVar">此方法返回时，包含对枚举元素的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含对在 <c>rgelt</c> 中枚举的元素的实际数目的引用。</param>
      <returns>如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary>将枚举序列重置到开头。</summary>
      <returns>具有值 <see langword="S_OK" /> 的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <param name="celt">枚举中要跳过的元素数目。</param>
      <returns>如果跳过的元素的数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary>提供 <see langword="IMoniker" /> 接口的托管定义，具有 <see langword="IPersist" /> 和 <see langword="IPersistStream" /> 中的 COM 功能。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>使用名字对象绑定到它所标识的对象。</summary>
      <param name="pbc">对在此绑定操作中使用的绑定上下文对象上的 <see langword="IBindCtx" /> 接口的引用。</param>
      <param name="pmkToLeft">如果名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="riidResult">接口的接口标识符 (IID)，客户端打算使用该接口与名字对象标识的对象进行通信。</param>
      <param name="ppvResult">此方法返回时，包含对 <paramref name="riidResult" /> 请求的接口的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>检索指向存储（该存储包含名字对象所标识的对象）的接口指针。</summary>
      <param name="pbc">对在此绑定操作过程中使用的绑定上下文对象上的 <see langword="IBindCtx" /> 接口的引用。</param>
      <param name="pmkToLeft">如果名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="riid">所请求的存储接口的接口标识符 (IID)。</param>
      <param name="ppvObj">此方法返回时，包含对 <paramref name="riid" /> 请求的接口的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>基于此名字对象与另一名字对象共有的公共前缀创建新的名字对象。</summary>
      <param name="pmkOther">对另一名字对象上的 <see langword="IMoniker" /> 接口的引用，将使用该名字对象与当前名字对象进行比较，以获得公共前缀。</param>
      <param name="ppmkPrefix">此方法返回时，包含作为当前名字对象和 <paramref name="pmkOther" /> 的公共前缀的名字对象。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>将当前名字对象与另一名字对象组合，创建一个新的复合名字对象。</summary>
      <param name="pmkRight">对名字对象上的 <see langword="IMoniker" /> 接口的引用，该引用将追加到当前名字对象的末尾。</param>
      <param name="fOnlyIfNotGeneric">
        <see langword="true" /> 指示调用方需要非通用复合。 仅当 <paramref name="pmkRight" /> 为当前名字对象可以采用不同于构成通用复合的方式与其组合的名字对象类时，该操作才继续。 而 <see langword="false" /> 指示该方法可以在必要时创建通用复合。</param>
      <param name="ppmkComposite">此方法返回时，包含对结果复合名字对象的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>提供一个指向枚举器（该枚举器可枚举复合名字对象的组件）的指针。</summary>
      <param name="fForward">
        <see langword="true" /> 表示按从左到右的顺序枚举名字对象。 而 <see langword="false" /> 表示按从右到左的顺序枚举。</param>
      <param name="ppenumMoniker">此方法返回时，包含对名字对象的枚举数对象的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary>检索对象的类标识符 (CLSID)。</summary>
      <param name="pClassID">此方法返回时，包含 CLSID。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary>获取显示名称，该名称是当前名字对象的用户可读表示形式。</summary>
      <param name="pbc">对在此操作中使用的绑定上下文的引用。</param>
      <param name="pmkToLeft">如果名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="ppszDisplayName">此方法返回时，包含显示名称字符串。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary>返回保存该对象所需的流的大小（以字节为单位）。</summary>
      <param name="pcbSize">此方法返回时，包含 <see langword="long" /> 值，该值指示保存此对象所需的流的大小（以字节为单位）。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>提供一个数字，该数字表示当前名字对象所标识的对象的上次更改时间。</summary>
      <param name="pbc">对要在此绑定操作中使用的绑定上下文的引用。</param>
      <param name="pmkToLeft">如果名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="pFileTime">此方法返回时，包含上次更改时间。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary>使用该名字对象的内部状态计算 32 位整数。</summary>
      <param name="pdwHash">此方法返回时，包含此名字对象的哈希值。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>提供一个名字对象，该名字对象在被复合到当前名字对象或一个结构相似的名字对象的右边时，将不复合到任何对象。</summary>
      <param name="ppmk">此方法返回时，包含一个名字对象，它是当前名字对象的逆命题。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary>检查该对象自上次保存以来所发生的更改。</summary>
      <returns>如果该对象已更改，则为 <see langword="S_OK" /><see langword="HRESULT" /> 值；否则为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>将当前名字对象与指定的名字对象进行比较，并指示它们是否相同。</summary>
      <param name="pmkOtherMoniker">对用于比较的名字对象的引用。</param>
      <returns>如果名字对象相同，则为 <see langword="S_OK" /><see langword="HRESULT" /> 值；否则为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>确定由当前名字对象标识的对象当前是否已加载并正在运行。</summary>
      <param name="pbc">对要在此绑定操作中使用的绑定上下文的引用。</param>
      <param name="pmkToLeft">如果当前名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="pmkNewlyRunning">对最近添加到运行对象表 (ROT) 的名字对象的引用。</param>
      <returns>如果名字对象处于运行状态，则为 <see langword="S_OK" /><see langword="HRESULT" /> 值；如果名字对象不处于运行状态，则为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值；否则为 <see langword="E_UNEXPECTED" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary>指示此名字对象是否属于系统提供的名字对象类之一。</summary>
      <param name="pdwMksys">此方法返回时，包含指向一个整数的指针，该整数是 <see langword="MKSYS" /> 枚举值之一并引用 COM 名字对象类之一。 此参数未经初始化即被传递。</param>
      <returns>如果名字对象为系统名字对象，则为 <see langword="S_OK" /><see langword="HRESULT" /> 值；否则为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary>从以前保存对象的流中初始化对象。</summary>
      <param name="pStm">从中加载对象的流。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>读取指定的显示名称中 <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> 能够理解的全部字符并生成一个与读取的部分相对应的名字对象。</summary>
      <param name="pbc">对要在此绑定操作中使用的绑定上下文的引用。</param>
      <param name="pmkToLeft">对迄今为止已经从显示名称生成的名字对象的引用。</param>
      <param name="pszDisplayName">对包含要分析的剩余显示名称的字符串的引用。</param>
      <param name="pchEaten">此方法返回时，包含分析 <paramref name="pszDisplayName" /> 时所使用的字符数。 此参数未经初始化即被传递。</param>
      <param name="ppmkOut">此方法返回时，包含对从 <paramref name="pszDisplayName" /> 生成的名字对象的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>返回简化的名字对象，它是与当前名字对象引用同一对象但能够用相等或更高的效率绑定的另一个名字对象。</summary>
      <param name="pbc">对在此绑定操作中使用的绑定上下文中的 <see langword="IBindCtx" /> 接口的引用。</param>
      <param name="dwReduceHowFar">指定当前名字对象简化程度的值。</param>
      <param name="ppmkToLeft">对当前名字对象左边的名字对象的引用。</param>
      <param name="ppmkReduced">此方法返回时，包含对当前名字对象的简化形式的引用（如果发生错误或当前名字对象被简化为无，则可以为 <see langword="null" />）。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>提供一个名字对象，该名字对象在被追加到当前名字对象（或一个有相似结构的名字对象）时生成指定名字对象。</summary>
      <param name="pmkOther">对应该对其采用相对路径的名字对象的引用。</param>
      <param name="ppmkRelPath">此方法返回时，包含对相关名字对象的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary>将对象保存到指定流。</summary>
      <param name="pStm">将对象保存到的流。</param>
      <param name="fClearDirty">若在保存完成之后清除修改后的标志，则为 <see langword="true" />；否则为 <see langword="false" /></param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary>定义类型的实现接口或继承接口的属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>该接口或调度接口表示源或接收器的默认值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>接收器通过虚函数表 (VTBL) 接收事件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>不应显示该成员，用户也不应对该成员进行编程。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>调用而不是实现 coclass 的此成员。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary>指定如何通过 <see langword="IDispatch::Invoke" /> 来调用函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary>使用常规函数调用语法调用该成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>使用常规属性访问语法来调用该函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>使用属性值赋值语法调用该函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>使用属性引用赋值语法调用该函数。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary>提供具有 <see langword="IPersistFile" /> 中的功能的 <see langword="IPersist" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary>检索对象的类标识符 (CLSID)。</summary>
      <param name="pClassID">此方法返回时，包含对 CLSID 的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary>检索该对象的当前工作文件的绝对路径，或者，如果没有当前工作文件，则检索该对象的默认文件名提示。</summary>
      <param name="ppszFileName">此方法返回时，包含指向一个以零终止的字符串的指针的地址，该字符串中包含当前文件的路径或者默认的文件名提示（如 *.txt）。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary>检查对象自上次保存到其当前文件以来是否更改。</summary>
      <returns>如果文件自上次保存以来已经更改，则为 <see langword="S_OK" />；如果文件自上次保存以来尚未更改，则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary>打开指定文件并从文件内容初始化对象。</summary>
      <param name="pszFileName">以零结尾的字符串，包含要打开的文件的绝对路径。</param>
      <param name="dwMode">
        <see langword="STGM" /> 枚举中值的组合，指示用来打开 <paramref name="pszFileName" /> 的访问模式。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary>将该对象的副本保存到指定文件。</summary>
      <param name="pszFileName">以零结尾的字符串，包含将该对象保存到的文件的绝对路径。</param>
      <param name="fRemember">将 <paramref name="pszFileName" /> 参数用作当前工作文件时为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary>通知该对象它可以写入它的文件。</summary>
      <param name="pszFileName">以前保存该对象的文件的绝对路径。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary>提供 <see langword="IRunningObjectTable" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>枚举当前注册为运行对象的对象。</summary>
      <param name="ppenumMoniker">此方法返回时，包含运行对象表 (ROT) 的新枚举器。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary>如果提供的对象名注册为运行对象，则返回该注册对象。</summary>
      <param name="pmkObjectName">对要在运行对象表 (ROT) 中搜索的名字对象的引用。</param>
      <param name="ppunkObject">此方法返回时，包含请求的运行对象。 此参数未经初始化即被传递。</param>
      <returns>一个 <see langword="HRESULT" /> 值，该值指示操作是成功还是失败。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>在运行对象表 (ROT) 中搜索此名字对象并报告所记录的更改时间（如果存在的话）。</summary>
      <param name="pmkObjectName">对要在运行对象表 (ROT) 中搜索的名字对象的引用。</param>
      <param name="pfiletime">此对象返回时，包含对象的上次更改时间。 此参数未经初始化即被传递。</param>
      <returns>一个 <see langword="HRESULT" /> 值，该值指示操作是成功还是失败。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>确定指定名字对象当前是否在运行对象表 (ROT) 中注册。</summary>
      <param name="pmkObjectName">对要在运行对象表 (ROT) 中搜索的名字对象的引用。</param>
      <returns>一个 <see langword="HRESULT" /> 值，该值指示操作是成功还是失败。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>记录特定对象发生更改的时间，以便 <see langword="IMoniker::GetTimeOfLastChange" /> 可以报告相应更改时间。</summary>
      <param name="dwRegister">已更改对象的运行对象表 (ROT) 项。</param>
      <param name="pfiletime">对对象的上次更改时间的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>注册提供的对象已进入运行状态。</summary>
      <param name="grfFlags">指定运行对象表 (ROT) 对 <paramref name="punkObject" /> 的引用是弱引用还是强引用，并通过对象在 ROT 中的项控制对它的访问。</param>
      <param name="punkObject">对注册为运行对象的对象的引用。</param>
      <param name="pmkObjectName">对标识 <paramref name="punkObject" /> 的名字对象的引用。</param>
      <returns>一个值，该值可用于在随后对 <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" /> 的调用中标识此 ROT 项。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary>从运行对象表 (ROT) 中注销指定的对象。</summary>
      <param name="dwRegister">要撤消的运行对象表 (ROT) 项。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary>提供具有 <see langword="ISequentialStream" /> 功能的 <see langword="IStream" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary>创建具有自己的搜索指针的一个新的流对象，该指针引用与原始流相同的字节。</summary>
      <param name="ppstm">在此方法返回时，包含新的流对象。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary>确保对在事务模式中打开的流对象的任何更改都在父存储中反映出来。</summary>
      <param name="grfCommitFlags">控制如何提交对流对象的更改的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary>将指定的字节数从流中的当前搜索指针复制到其他流中的当前搜索指针。</summary>
      <param name="pstm">对目标流的引用。</param>
      <param name="cb">要从源流复制的字节数。</param>
      <param name="pcbRead">成功返回时包含从源读取的实际字节数。</param>
      <param name="pcbWritten">成功返回时包含写入到目标的实际字节数。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>限制对流中特定范围的字节的访问。</summary>
      <param name="libOffset">范围开始的字节偏移量。</param>
      <param name="cb">要限制的范围的长度，以字节为单位。</param>
      <param name="dwLockType">针对访问该范围的请求的限制。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary>将指定数目的字节从流对象读入到以当前搜索指针开始的内存。</summary>
      <param name="pv">在此方法返回时，包含从流读取的数据。 此参数未经初始化即被传递。</param>
      <param name="cb">要从流对象读取的字节数。</param>
      <param name="pcbRead">一个指向 <see langword="ULONG" /> 变量的指针，该变量接收从流对象实际读取的字节数。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary>放弃自上一个 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" /> 调用后对事务流进行的所有更改。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary>将搜索指针更改为相对于流开始、流结束或当前搜索指针的新位置。</summary>
      <param name="dlibMove">要添加到 <paramref name="dwOrigin" /> 的位移。</param>
      <param name="dwOrigin">搜索的源点。 该起始地址可以是文件的开头、当前查找指针或文件的结尾。</param>
      <param name="plibNewPosition">在成功返回时，包含距流的开始的搜索指针的偏移量。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary>更改流对象的大小。</summary>
      <param name="libNewSize">以字节数为单位的流的新大小。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary>检索此流的 <see cref="T:System.Runtime.InteropServices.STATSTG" /> 结构。</summary>
      <param name="pstatstg">此方法返回时，包含描述此流对象的 <see langword="STATSTG" /> 结构。 此参数未经初始化即被传递。</param>
      <param name="grfStatFlag">在 <see langword="STATSTG" /> 结构中指定此方法不返回的成员，这样就省去了一些内存分配操作。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>取消对以前使用 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> 方法限制的对某一范围字节的访问限制。</summary>
      <param name="libOffset">范围开始的字节偏移量。</param>
      <param name="cb">要限制的范围的长度，以字节为单位。</param>
      <param name="dwLockType">以前对范围施加的访问限制。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary>将指定数目的字节写入以当前搜索指针开始的流对象。</summary>
      <param name="pv">要从此流写入到的缓冲区。</param>
      <param name="cb">要写入流的字节数。</param>
      <param name="pcbWritten">在成功返回时，包含写入流对象的实际字节数。 如果调用方将此指针设置为 <see cref="F:System.IntPtr.Zero" />，则此方法不提供写入的实际字节数。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary>提供 <see langword="ITypeComp" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary>将名称映射到类型的成员，或者绑定类型库中包含的全局变量和函数。</summary>
      <param name="szName">要绑定的名称。</param>
      <param name="lHashVal">由 <see langword="LHashValOfNameSys" /> 计算的 <paramref name="szName" /> 的哈希值。</param>
      <param name="wFlags">标志字，包含一个或多个在 <see langword="INVOKEKIND" /> 枚举中定义的调用标志。</param>
      <param name="ppTInfo">此方法返回时，包含对类型说明（包含将其绑定到的项）的引用（如果返回了 <see langword="FUNCDESC" /> 或 <see langword="VARDESC" />）。 此参数未经初始化即被传递。</param>
      <param name="pDescKind">此方法返回时，包含对 <see langword="DESCKIND" /> 枚举数的引用，该枚举数指示绑定到的名称是 <see langword="VARDESC" />、<see langword="FUNCDESC" /> 还是 <see langword="TYPECOMP" />。 此参数未经初始化即被传递。</param>
      <param name="pBindPtr">此方法返回时，包含对绑定到的 <see langword="VARDESC" />、<see langword="FUNCDESC" /> 或 <see langword="ITypeComp" /> 接口的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>绑定到包含在类型库中的类型说明。</summary>
      <param name="szName">要绑定的名称。</param>
      <param name="lHashVal">由 <see langword="LHashValOfNameSys" /> 确定的 <paramref name="szName" /> 的哈希值。</param>
      <param name="ppTInfo">此方法返回时，包含对将 <paramref name="szName" /> 绑定到的类型的 <see langword="ITypeInfo" /> 的引用。 此参数未经初始化即被传递。</param>
      <param name="ppTComp">此方法返回时，包含对 <see langword="ITypeComp" /> 变量的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary>提供组件自动化 ITypeInfo 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>检索静态函数或变量（如那些在 DLL 中定义的静态函数或变量）的地址。</summary>
      <param name="memid">要检索的 <see langword="static" /> 成员地址的成员 ID。</param>
      <param name="invKind">指定该成员是否为属性（如果是，还将指定它属于哪种属性）的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="ppv">此方法返回时，包含对 <see langword="static" /> 成员的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>创建描述组件类 (coclass) 的类型的新实例。</summary>
      <param name="pUnkOuter">作为控制 <see langword="IUnknown" /> 的对象。</param>
      <param name="riid">接口的 IID，调用方将使用该接口与结果对象进行通信。</param>
      <param name="ppvObj">此方法返回时，包含对已创建对象的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>检索类型库，该类型库包含此类型说明和它在该类型库中的索引。</summary>
      <param name="ppTLB">此方法返回时，包含对包含类型库的引用。 此参数未经初始化即被传递。</param>
      <param name="pIndex">此方法返回时，包含对包含类型库中的类型说明的索引的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>检索 DLL 中函数的入口点的说明或规范。</summary>
      <param name="memid">成员函数的 ID，要返回该成员函数的 DLL 入口说明。</param>
      <param name="invKind">指定由 <paramref name="memid" /> 标识的成员种类的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="pBstrDllName">如果不为 <see langword="null" />，则此函数将 <paramref name="pBstrDllName" /> 设置为包含 DLL 名称的 <see langword="BSTR" />。</param>
      <param name="pBstrName">如果不为 <see langword="null" />，则此函数将 lpbstrName<c></c> 设置为包含入口点名称的 <see langword="BSTR" />。</param>
      <param name="pwOrdinal">如果不为 <see langword="null" />，并且此函数是按序号定义的，则 lpwOrdinal<c></c> 被设置为指向该序号。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>从文档字符串、完整的帮助文件名和路径以及帮助主题的上下文 ID 中检索指定的类型说明。</summary>
      <param name="index">要返回其文档的成员的 ID。</param>
      <param name="strName">此方法返回时，包含项方法的名称。 此参数未经初始化即被传递。</param>
      <param name="strDocString">此方法返回时，包含指定项的文档字符串。 此参数未经初始化即被传递。</param>
      <param name="dwHelpContext">此方法返回时，包含对与指定项相关联的帮助上下文的引用。 此参数未经初始化即被传递。</param>
      <param name="strHelpFile">此方法返回时，包含帮助文件的完全限定名。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>检索包含有关指定函数的信息的 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构。</summary>
      <param name="index">要返回的函数说明的索引。</param>
      <param name="ppFuncDesc">此方法返回时，包含对描述指定函数的 <see langword="FUNCDESC" /> 结构的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>在成员名和成员 ID 之间以及参数名和参数 ID 之间映射。</summary>
      <param name="rgszNames">要映射的名称数组。</param>
      <param name="cNames">要映射的名称计数。</param>
      <param name="pMemId">此方法返回时，包含对在其中放置名称映射的数组的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>在类型说明中检索某个已实现的接口或基接口的 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 值。</summary>
      <param name="index">已实现的接口或基接口的索引。</param>
      <param name="pImplTypeFlags">此方法返回时，包含对 <see langword="IMPLTYPEFLAGS" /> 枚举的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary>检索封送处理信息。</summary>
      <param name="memid">成员 ID，它指示需要哪些封送处理信息。</param>
      <param name="pBstrMops">此方法返回时，包含对 <see langword="opcode" /> 字符串的引用，该字符串用于封送处理由引用类型说明描述的结构的字段；如果没有要返回的信息，则返回 <see langword="null" />。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>检索具有与指定函数 ID 相对应的指定成员 ID（或者属性或方法的名称及其参数）的变量。</summary>
      <param name="memid">要返回其名称的成员的 ID。</param>
      <param name="rgBstrNames">此方法返回时，包含与成员相关联的名称。 此参数未经初始化即被传递。</param>
      <param name="cMaxNames">
        <paramref name="rgBstrNames" /> 数组的长度。</param>
      <param name="pcNames">此方法返回时，包含 <paramref name="rgBstrNames" /> 数组中的名称数。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>检索被引用的类型说明（如果该类型说明引用其他类型说明）。</summary>
      <param name="hRef">要返回的被引用类型说明的句柄。</param>
      <param name="ppTI">此方法返回时，包含被引用的类型说明。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>检索实现的接口类型的类型说明（如果类型说明描述 COM 类）。</summary>
      <param name="index">返回其句柄的已实现类型的索引。</param>
      <param name="href">此方法返回时，包含对已实现接口的句柄的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary>检索包含类型说明的特性的 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 结构。</summary>
      <param name="ppTypeAttr">此方法返回时，包含对包含此类型说明的特性的结构的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>检索类型说明的 <see langword="ITypeComp" /> 接口，此接口使客户端编译器可以绑定到类型说明的成员。</summary>
      <param name="ppTComp">此方法返回时，包含对包含类型库的 <see langword="ITypeComp" /> 接口的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>检索描述指定变量的 <see langword="VARDESC" /> 结构。</summary>
      <param name="index">要返回的变量说明的索引。</param>
      <param name="ppVarDesc">此方法返回时，包含对描述指定变量的 <see langword="VARDESC" /> 结构的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>调用对象的方法或访问对象的属性，该方法或属性实现由类型说明描述的接口。</summary>
      <param name="pvInstance">对由此类型说明描述的接口的引用。</param>
      <param name="memid">用于标识接口成员的值。</param>
      <param name="wFlags">描述 Invoke 调用的上下文的标志。</param>
      <param name="pDispParams">对结构的引用，该结构包含一个参数数组、一个命名参数的 DISPID 数组和每个数组中元素数的计数。</param>
      <param name="pVarResult">对用于存储结果的位置的引用。 如果 <paramref name="wFlags" /> 指定 <see langword="DISPATCH_PROPERTYPUT" /> 或 <see langword="DISPATCH_PROPERTYPUTREF" />，则忽略 <paramref name="pVarResult" />。 如果不需要任何结果，则设置为 <see langword="null" />。</param>
      <param name="pExcepInfo">指向异常信息结构的指针，该结构仅在返回 <see langword="DISP_E_EXCEPTION" /> 时才被填充。</param>
      <param name="puArgErr">如果 <see langword="Invoke" /> 返回 <see langword="DISP_E_TYPEMISMATCH" />，<paramref name="puArgErr" /> 则指示具有错误类型的参数的 <c>rgvarg</c> 中的索引。 如果多个参数返回错误，则 <paramref name="puArgErr" /> 仅指示第一个具有错误的参数。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary>释放先前由 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 方法返回的一个 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 结构。</summary>
      <param name="pFuncDesc">对要释放的 <see langword="FUNCDESC" /> 结构的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary>释放先前由 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 方法返回的一个 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 结构。</summary>
      <param name="pTypeAttr">对要释放的 <see langword="TYPEATTR" /> 结构的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary>释放先前由 <see langword="VARDESC" /> 方法返回的一个 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 结构。</summary>
      <param name="pVarDesc">对要释放的 <see langword="VARDESC" /> 结构的引用。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary>提供 <see langword="ITypeInfo2" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>检索静态函数或变量（如那些在 DLL 中定义的静态函数或变量）的地址。</summary>
      <param name="memid">要检索的 <see langword="static" /> 成员地址的成员 ID。</param>
      <param name="invKind">指定该成员是否为属性（如果是，还将指定它属于哪种属性）的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="ppv">此方法返回时，包含对 <see langword="static" /> 成员的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>创建描述组件类 (coclass) 的类型的新实例。</summary>
      <param name="pUnkOuter">作为控制 <see langword="IUnknown" /> 的对象。</param>
      <param name="riid">接口的 IID，调用方将使用该接口与结果对象进行通信。</param>
      <param name="ppvObj">此方法返回时，包含对已创建对象的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary>获取库中所有自定义数据项。</summary>
      <param name="pCustData">指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary>从指定函数中获取所有自定义数据。</summary>
      <param name="index">要为其获取自定义数据的函数的索引。</param>
      <param name="pCustData">指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary>获取指定实现类型的所有自定义数据。</summary>
      <param name="index">自定义数据的实现类型的索引。</param>
      <param name="pCustData">一个<see langword="CUSTDATA" /> 指针，它指向保留所有自定义数据项的 。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary>获取指定的函数参数的所有自定义数据。</summary>
      <param name="indexFunc">要为其获取自定义数据的函数的索引。</param>
      <param name="indexParam">要获取自定义数据的此函数参数的索引。</param>
      <param name="pCustData">指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary>获取自定义数据的变量。</summary>
      <param name="index">要获取自定义数据的变量的索引。</param>
      <param name="pCustData">指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>检索类型库，该类型库包含此类型说明和它在该类型库中的索引。</summary>
      <param name="ppTLB">此方法返回时，包含对包含类型库的引用。 此参数未经初始化即被传递。</param>
      <param name="pIndex">此方法返回时，包含对包含类型库中的类型说明的索引的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary>获取自定义数据。</summary>
      <param name="guid">用于标识数据的 GUID。</param>
      <param name="pVarVal">此方法返回时，将包含一个 <see langword="Object" />，可指定放置检索到的数据的位置。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>检索 DLL 中函数的入口点的说明或规范。</summary>
      <param name="memid">成员函数的 ID，要返回该成员函数的 DLL 入口说明。</param>
      <param name="invKind">指定由 <paramref name="memid" /> 标识的成员种类的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="pBstrDllName">如果不为 <see langword="null" />，则此函数将 <paramref name="pBstrDllName" /> 设置为包含 DLL 名称的 <see langword="BSTR" />。</param>
      <param name="pBstrName">如果不为 <see langword="null" />，则此函数将 lpbstrName<c></c> 设置为包含入口点名称的 <see langword="BSTR" />。</param>
      <param name="pwOrdinal">如果不为 <see langword="null" />，并且此函数是按序号定义的，则 lpwOrdinal<c></c> 被设置为指向该序号。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>从文档字符串、完整的帮助文件名和路径以及帮助主题的上下文 ID 中检索指定的类型说明。</summary>
      <param name="index">要返回其文档的成员的 ID。</param>
      <param name="strName">此方法返回时，包含项方法的名称。 此参数未经初始化即被传递。</param>
      <param name="strDocString">此方法返回时，包含指定项的文档字符串。 此参数未经初始化即被传递。</param>
      <param name="dwHelpContext">此方法返回时，包含对与指定项相关联的帮助上下文的引用。 此参数未经初始化即被传递。</param>
      <param name="strHelpFile">此方法返回时，包含帮助文件的完全限定名。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>检索文档字符串、完整的帮助文件名称和路径、要使用的本地化上下文以及帮助文件中库帮助主题的上下文 ID。</summary>
      <param name="memid">类型描述的成员标识符。</param>
      <param name="pbstrHelpString">此方法返回时，将包含一个含有指定项名称的 <see langword="BSTR" />。 如果调用方不需要项名称，则 <paramref name="pbstrHelpString" /> 可以是 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <param name="pdwHelpStringContext">此方法返回时，将包含帮助文件的本地化上下文。 如果调用方不需要帮助上下文，则 <paramref name="pdwHelpStringContext" /> 可以是 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <param name="pbstrHelpStringDll">此方法返回时，将包含 <see langword="BSTR" />，其中包含某个文件的完全限定名称，该文件包含用于帮助文件的 DLL。 如果调用方不需要文件名称，则 <paramref name="pbstrHelpStringDll" /> 可以是 <see langword="null" />。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>从指定函数获取自定义数据。</summary>
      <param name="index">要为其获取自定义数据的函数的索引。</param>
      <param name="guid">用于标识数据的 GUID。</param>
      <param name="pVarVal">此方法返回时，会包含一个 <see langword="Object" />，指定放置数据的位置。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>检索包含有关指定函数的信息的 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构。</summary>
      <param name="index">要返回的函数说明的索引。</param>
      <param name="ppFuncDesc">此方法返回时，包含对描述指定函数的 <see langword="FUNCDESC" /> 结构的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary>根据已知 DISPID 绑定到特定成员，其中成员名称未知（例如，绑定到默认成员时）。</summary>
      <param name="memid">成员标识符。</param>
      <param name="invKind">
        <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一，该值指定由 memid 标识的成员种类。</param>
      <param name="pFuncIndex">它在此方法返回时会将一个索引包含到函数中。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>在成员名和成员 ID 之间以及参数名和参数 ID 之间映射。</summary>
      <param name="rgszNames">要映射的名称数组。</param>
      <param name="cNames">要映射的名称计数。</param>
      <param name="pMemId">此方法返回时，包含对在其中放置名称映射的数组的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>获取自定义数据的实现类型。</summary>
      <param name="index">自定义数据的实现类型的索引。</param>
      <param name="guid">用于标识数据的 GUID。</param>
      <param name="pVarVal">此方法返回时，将包含一个 <see langword="Object" />，可指定放置检索到的数据的位置。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>在类型说明中检索某个已实现的接口或基接口的 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 值。</summary>
      <param name="index">已实现的接口或基接口的索引。</param>
      <param name="pImplTypeFlags">此方法返回时，包含对 <see langword="IMPLTYPEFLAGS" /> 枚举的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary>检索封送处理信息。</summary>
      <param name="memid">成员 ID，它指示需要哪些封送处理信息。</param>
      <param name="pBstrMops">此方法返回时，包含对 <see langword="opcode" /> 字符串的引用，该字符串用于封送处理由引用类型说明描述的结构的字段；如果没有要返回的信息，则返回 <see langword="null" />。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>检索具有与指定函数 ID 相对应的指定成员 ID（或者属性或方法的名称及其参数）的变量。</summary>
      <param name="memid">要返回其名称的成员的 ID。</param>
      <param name="rgBstrNames">此方法返回时，包含与成员相关联的名称。 此参数未经初始化即被传递。</param>
      <param name="cMaxNames">
        <paramref name="rgBstrNames" /> 数组的长度。</param>
      <param name="pcNames">此方法返回时，包含 <paramref name="rgBstrNames" /> 数组中的名称数。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary>获取指定的自定义数据参数。</summary>
      <param name="indexFunc">要为其获取自定义数据的函数的索引。</param>
      <param name="indexParam">要获取自定义数据的此函数参数的索引。</param>
      <param name="guid">用于标识数据的 GUID。</param>
      <param name="pVarVal">此方法返回时，将包含一个 <see langword="Object" />，可指定放置检索到的数据的位置。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>检索被引用的类型说明（如果该类型说明引用其他类型说明）。</summary>
      <param name="hRef">要返回的被引用类型说明的句柄。</param>
      <param name="ppTI">此方法返回时，包含被引用的类型说明。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>检索已实现接口类型的类型说明（如果类型说明描述 COM 类）。</summary>
      <param name="index">返回其句柄的已实现类型的索引。</param>
      <param name="href">此方法返回时，包含对已实现接口的句柄的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary>检索包含类型说明的特性的 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 结构。</summary>
      <param name="ppTypeAttr">此方法返回时，包含对包含此类型说明的特性的结构的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>检索类型说明的 <see langword="ITypeComp" /> 接口，此接口使客户端编译器可以绑定到类型说明的成员。</summary>
      <param name="ppTComp">此方法返回时，包含对包含类型库的 <see langword="ITypeComp" /> 的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary>在没有任何分配的情况下，返回类型标志。 此方法返回 <see langword="DWORD" /> 类型标志，其可在不增加 <see langword="TYPEATTR" />（类型属性）的情况下扩展类型标志。</summary>
      <param name="pTypeFlags">此方法返回时，包含对 <see langword="TYPEFLAG" /> 的 <see langword="DWORD" /> 引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>快速返回 <see langword="TYPEKIND" /> 枚举，无需执行任何分配。</summary>
      <param name="pTypeKind">此方法返回时，会包含对 <see langword="TYPEKIND" /> 枚举的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>获取自定义数据的变量。</summary>
      <param name="index">要获取自定义数据的变量的索引。</param>
      <param name="guid">用于标识数据的 GUID。</param>
      <param name="pVarVal">此方法返回时，将包含一个 <see langword="Object" />，可指定放置检索到的数据的位置。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>检索描述指定变量的 <see langword="VARDESC" /> 结构。</summary>
      <param name="index">要返回的变量说明的索引。</param>
      <param name="ppVarDesc">此方法返回时，包含对描述指定变量的 <see langword="VARDESC" /> 结构的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary>根据已知 <see langword="DISPID" /> 绑定到特定成员，其中成员名称未知（例如，绑定到默认成员时）。</summary>
      <param name="memid">成员标识符。</param>
      <param name="pVarIndex">此方法返回时会包含一个 <paramref name="memid" /> 索引。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>调用对象的方法或访问对象的属性，该方法或属性实现由类型说明描述的接口。</summary>
      <param name="pvInstance">对由此类型说明描述的接口的引用。</param>
      <param name="memid">接口成员的标识符。</param>
      <param name="wFlags">描述 Invoke 调用的上下文的标志。</param>
      <param name="pDispParams">对结构的引用，该结构包含一个参数数组、一个命名参数的 DISPID 数组和每个数组中元素数的计数。</param>
      <param name="pVarResult">对用于存储结果的位置的引用。 如果 <paramref name="wFlags" /> 指定 <see langword="DISPATCH_PROPERTYPUT" /> 或 <see langword="DISPATCH_PROPERTYPUTREF" />，则忽略 <paramref name="pVarResult" />。 如果不需要任何结果，则设置为 <see langword="null" />。</param>
      <param name="pExcepInfo">指向异常信息结构的指针，该结构仅在返回 <see langword="DISP_E_EXCEPTION" /> 时才被填充。</param>
      <param name="puArgErr">如果 <see langword="Invoke" /> 返回 <see langword="DISP_E_TYPEMISMATCH" />，则 <paramref name="puArgErr" /> 指示具有错误类型的参数的索引。 如果多个参数返回错误，则 <paramref name="puArgErr" /> 仅指示第一个具有错误的参数。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary>释放先前由 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 方法返回的一个 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 结构。</summary>
      <param name="pFuncDesc">对要释放的 <see langword="FUNCDESC" /> 结构的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary>释放先前由 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 方法返回的一个 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 结构。</summary>
      <param name="pTypeAttr">对要释放的 <see langword="TYPEATTR" /> 结构的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary>释放先前由 <see langword="VARDESC" /> 方法返回的一个 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 结构。</summary>
      <param name="pVarDesc">对要释放的 <see langword="VARDESC" /> 结构的引用。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary>提供 <see langword="ITypeLib" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>在类型库中查找类型说明的匹配项。</summary>
      <param name="szNameBuf">要搜索的名称。 这是一个输入/输出参数。</param>
      <param name="lHashVal">一个用于加快搜索速度的哈希值，由 <see langword="LHashValOfNameSys" /> 函数计算。 如果 <paramref name="lHashVal" /> 为 0，则计算一个值。</param>
      <param name="ppTInfo">此方法返回时，包含一个指向类型说明的指针数组，这些类型说明中包含 <paramref name="szNameBuf" /> 中指定的名称。 此参数未经初始化即被传递。</param>
      <param name="rgMemId">所找到的项的 <see langword="MEMBERID" /> 数组；<paramref name="rgMemId" />[i] 是由 <paramref name="ppTInfo" />[i] 指定的类型说明中建立索引的 <see langword="MEMBERID" />。 不能为 <see langword="null" />。</param>
      <param name="pcFound">在进入时指示要查找的实例数。 例如，可以调用 <paramref name="pcFound" />= 1 以查找第一个匹配项。 找到一个实例时停止搜索。  
  
在退出时指示找到的实例数。 如果 <paramref name="pcFound" /> 的 <see langword="in" /> 和 <see langword="out" /> 值完全相同，则可能存在其他包含此名称的类型说明。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>检索库的文档字符串、完整的帮助文件名和路径以及帮助文件中的库帮助主题的上下文标识符。</summary>
      <param name="index">要返回其文档的类型说明的索引。</param>
      <param name="strName">此方法返回时，包含一个表示指定项的名称的字符串。 此参数未经初始化即被传递。</param>
      <param name="strDocString">此方法返回时，包含一个表示指定项的文档字符串的字符串。 此参数未经初始化即被传递。</param>
      <param name="dwHelpContext">此方法返回时，包含与指定项关联的帮助上下文标识符。 此参数未经初始化即被传递。</param>
      <param name="strHelpFile">此方法返回时，包含一个表示帮助文件的完全限定名的字符串。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>检索包含库的特性的结构。</summary>
      <param name="ppTLibAttr">此方法返回时，包含一个结构，该结构包含库的特性。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>使客户端编译器能够绑定到库的类型、变量、常数和全局函数。</summary>
      <param name="ppTComp">此方法返回时，包含此 <see langword="ITypeComp" /> 的 <see langword="ITypeLib" /> 实例的一个实例。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>在库中检索指定的类型说明。</summary>
      <param name="index">要返回的 <see langword="ITypeInfo" /> 接口的索引。</param>
      <param name="ppTI">此方法返回时，包含一个 <see langword="ITypeInfo" />，它描述 <paramref name="index" /> 引用的类型。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary>返回类型库中的类型说明的数量。</summary>
      <returns>类型库中的类型说明的数量。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>检索与指定的 GUID 相对应的类型说明。</summary>
      <param name="guid">请求其类型信息的类的接口的 IID 或 CLSID。</param>
      <param name="ppTInfo">此方法返回时，包含请求的 <see langword="ITypeInfo" /> 接口。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>检索类型说明的类型。</summary>
      <param name="index">类型库中类型说明的索引。</param>
      <param name="pTKind">此方法返回时，包含对用于类型说明的 <see langword="TYPEKIND" /> 枚举的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary>指示传入的字符串是否包含库中描述的类型或成员的名称。</summary>
      <param name="szNameBuf">要测试的字符串。 这是一个输入/输出参数。</param>
      <param name="lHashVal">
        <paramref name="szNameBuf" /> 的哈希值。</param>
      <returns>如果在类型库中找到 <paramref name="szNameBuf" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>释放最初通过 <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 方法获取的 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 结构。</summary>
      <param name="pTLibAttr">要释放的 <see langword="TLIBATTR" /> 结构。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary>提供 <see langword="ITypeLib2" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>在类型库中查找类型说明的匹配项。</summary>
      <param name="szNameBuf">要搜索的名称。</param>
      <param name="lHashVal">一个用于加快搜索速度的哈希值，由 <see langword="LHashValOfNameSys" /> 函数计算。 如果 <paramref name="lHashVal" /> 为 0，则计算一个值。</param>
      <param name="ppTInfo">此方法返回时，包含一个指向类型说明的指针数组，这些类型说明中包含 <paramref name="szNameBuf" /> 中指定的名称。 此参数未经初始化即被传递。</param>
      <param name="rgMemId">此方法返回时，包含所找到的项的 <see langword="MEMBERID" /> 数组；<paramref name="rgMemId" /> [i] 是用于通过索引访问 <paramref name="ppTInfo" /> [i] 指定的类型说明的 <see langword="MEMBERID" />。 此参数不能为 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <param name="pcFound">输入时由引用传递的一个值，该值指示要查找的实例数。 例如，可以调用 <paramref name="pcFound" />= 1 以查找第一个匹配项。 找到一个实例时停止搜索。  
  
在退出时指示找到的实例数。 如果 <paramref name="pcFound" /> 的 <see langword="in" /> 和 <see langword="out" /> 值完全相同，则可能存在其他包含此名称的类型说明。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary>获取库中所有自定义数据项。</summary>
      <param name="pCustData">指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary>获取自定义数据。</summary>
      <param name="guid">由引用传递的用于标识该数据的 <see cref="T:System.Guid" />。</param>
      <param name="pVarVal">返回此方法时，会包含一个对象，可指定放置检索到的数据的位置。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>检索库的文档字符串、完整的帮助文件名和路径以及帮助文件中的库帮助主题的上下文标识符。</summary>
      <param name="index">要返回其文档的类型说明的索引。</param>
      <param name="strName">该参数在此方法返回时包含一个字符串，该字符串指定了指定项的名称。 此参数未经初始化即被传递。</param>
      <param name="strDocString">此方法返回时，包含指定项的文档字符串。 此参数未经初始化即被传递。</param>
      <param name="dwHelpContext">此方法返回时，包含与指定项关联的帮助上下文标识符。 此参数未经初始化即被传递。</param>
      <param name="strHelpFile">此方法返回时，包含指定帮助文件的完全限定名的字符串。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>检索库的文档字符串、完整的帮助文件名称和路径、要使用的本地化上下文以及帮助文件中库帮助主题的上下文 ID。</summary>
      <param name="index">要返回其文档的类型描述的索引；如果 <paramref name="index" /> 为 -1，则返回库的文档。</param>
      <param name="pbstrHelpString">此方法返回时，将包含用于指定特定项名称的 BSTR。 如果调用方不需要项名称，则 <paramref name="pbstrHelpString" /> 可以是 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <param name="pdwHelpStringContext">此方法返回时，将包含帮助文件的本地化上下文。 如果调用方不需要帮助上下文，则 <paramref name="pdwHelpStringContext" /> 可以是 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <param name="pbstrHelpStringDll">此方法返回时，将包含 BSTR，其指定包含用于帮助文件的 DLL 的文件的完全限定名称。 如果调用方不需要文件名称，则 <paramref name="pbstrHelpStringDll" /> 可以是 <see langword="null" />。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary>检索包含库的特性的结构。</summary>
      <param name="ppTLibAttr">此方法返回时，包含一个结构，该结构包含库的特性。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary>返回有关类型库的统计信息，该信息是有效调整哈希表的大小所必需的。</summary>
      <param name="pcUniqueNames">指向唯一名称的计数的指针。 如果调用方不需要此信息，则将其设置为 <see langword="null" />。</param>
      <param name="pcchUniqueNames">此方法返回时，包含一个指向唯一名称计数中的更改的指针。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>使客户端编译器能够绑定到库的类型、变量、常数和全局函数。</summary>
      <param name="ppTComp">此方法返回时，包含一个用于此 <see langword="ITypeComp" /> 的 <see langword="ITypeLib" /> 实例。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>在库中检索指定的类型说明。</summary>
      <param name="index">要返回的 <see langword="ITypeInfo" /> 接口的索引。</param>
      <param name="ppTI">此方法返回时，包含一个 <see langword="ITypeInfo" />，它描述 <paramref name="index" /> 引用的类型。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary>返回类型库中的类型说明的数量。</summary>
      <returns>类型库中的类型说明的数量。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>检索与指定的 GUID 相对应的类型说明。</summary>
      <param name="guid">由引用传递的 <see cref="T:System.Guid" />，它表示被请求了类型信息的类的 <see langword="CLSID" /> 接口的 IID。</param>
      <param name="ppTInfo">此方法返回时，包含请求的 <see langword="ITypeInfo" /> 接口。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>检索类型说明的类型。</summary>
      <param name="index">类型库中类型说明的索引。</param>
      <param name="pTKind">此方法返回时，包含对用于类型说明的 <see langword="TYPEKIND" /> 枚举的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary>指示传入的字符串是否包含库中描述的类型或成员的名称。</summary>
      <param name="szNameBuf">要测试的字符串。</param>
      <param name="lHashVal">
        <paramref name="szNameBuf" /> 的哈希值。</param>
      <returns>如果在类型库中找到 <paramref name="szNameBuf" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary>释放最初通过 <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 方法获取的 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 结构。</summary>
      <param name="pTLibAttr">要释放的 <see langword="TLIBATTR" /> 结构。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary>定义应用于类型库的标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>类型库描述控件，并且不应在供非可视对象使用的类型浏览器中显示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>类型库以一种持久形式存在于磁盘上。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>不应将类型库显示给用户，虽然它的使用并未受到限制。 类型库应该由控件使用。 宿主应创建用扩展属性包装控件的新类型库。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>类型库受到限制且不应显示给用户。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary>包含关于如何在进程间传输结构元素、参数或函数返回值的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary>表示指向正在进程之间传递的值的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary>表示描述结构元素、参数或返回值的位屏蔽值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary>说明如何在进程间传输结构元素、参数或函数返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary>该参数具有自定义数据。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary>参数定义了默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary>参数将信息从调用方传递给被调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary>参数是客户端应用程序的本地标识符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary>参数是可选的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary>参数将信息从调用方返回到被调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary>参数是该成员的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary>不会指定该参数传递还是接收信息。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary>提供 <see langword="STATDATA" /> 结构的托管定义。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary>表示用于确定何时向通知接收器通知数据更改的 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 枚举值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary>表示将接收更改通知的 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary>表示唯一标识通知连接的标记。 此标记由设置通知连接的方法返回。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary>表示对通知接收器有意义的数据的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构。 通知接收器将接收对 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构所指定数据的更改通知。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary>包含关于开源存储器、流或字节数组对象的统计信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary>指定此存储、流或字节数组的上次访问时间。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary>指定流或字节数组的大小（以字节为单位）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary>指示存储对象的类标识符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary>指示此存储、流或字节数组的创建时间。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary>指示受该流或字节数组支持的区域锁定的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary>指示打开对象时指定的访问模式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary>指示存储对象的当前状态位（最近由 <see langword="IStorage::SetStateBits" /> 方法设置的值）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary>指示此存储、流或字节数组的上次修改时间。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary>表示指向以 NULL 结尾的字符串的指针，该字符串包含此结构所描述的对象的名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary>留待将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary>指示存储对象的类型，该类型为 <see langword="STGTY" /> 枚举值之一。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary>提供 <see langword="STGMEDIUM" /> 结构的托管定义。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary>表示指向接口实例的指针，该指针允许发送进程控制当接收进程调用 <see langword="ReleaseStgMedium" /> 函数时释放存储的方式。 如果 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 为 <see langword="null" />，则 <see langword="ReleaseStgMedium" /> 使用默认过程来释放存储；否则 <see langword="ReleaseStgMedium" /> 将使用指定的 <see langword="IUnknown" /> 接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary>指定存储介质的类型。 封送和取消封送例程使用此值来确定所使用的联合成员。 此值必须是 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 枚举的元素之一。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary>表示接收进程可用于访问正在传输的数据的句柄、字符串或接口。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary>标识目标操作系统平台。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary>类型库的目标操作系统为 Apple Macintosh。 默认情况下，所有数据字段在偶字节边界对齐。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary>类型库的目标操作系统是 16 位 Windows 系统。 默认情况下，打包数据字段。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary>类型库的目标操作系统是 32 位 Windows 系统。 默认情况下，数据字段自然对齐（例如，2 字节整数在偶字节边界对齐；4 字节整数在四字边界对齐，依此类推）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary>类型库的目标操作系统是 64 位 Windows 系统。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary>提供 <see langword="TYMED" /> 结构的托管定义。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary>该存储介质是增强型图元文件。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 <see langword="null" />，目标进程应使用 <see langword="DeleteEnhMetaFile" /> 删除位图。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary>该存储介质是由路径标识的磁盘文件。 如果 <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 <see langword="null" />，目标进程应使用 <see langword="OpenFile" /> 删除文件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary>该存储介质是图形设备接口 (GDI) 组件 (HBITMAP)。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 <see langword="null" />，目标进程应使用 <see langword="DeleteObject" /> 删除位图。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary>该存储介质是全局内存句柄 (HGLOBAL)。 使用 GMEM_SHARE 标志分配全局句柄。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 <see langword="null" />，目标进程应使用 <see langword="GlobalFree" /> 释放内存。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary>该存储介质是由 <see langword="IStorage" /> 指针标识的存储组件。 数据位于此 <see langword="IStorage" /> 实例所包含的流和存储中。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员不为 <see langword="null" />，则目标进程应使用 <see langword="IStorage::Release" /> 释放存储组件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary>该存储介质是由 <see langword="IStream" /> 指针标识的流对象。 使用 <see langword="ISequentialStream::Read" /> 读取数据。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员不为 <see langword="null" />，则目标进程应使用 <see langword="IStream::Release" /> 释放流组件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary>该存储介质是图元文件 (HMETAFILE)。 使用 Windows 或 WIN32 函数来访问该图元文件的数据。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 <see langword="null" />，目标进程应使用 <see langword="DeleteMetaFile" /> 删除位图。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary>当前没有传递任何数据。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary>包含 <see langword="UCOMITypeInfo" /> 的特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary>指定此类型实例的字节对齐方式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary>此类型的实例的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary>此类型的虚拟方法表 (VTBL) 的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary>指示此结构描述的接口上的函数数目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary>指示此结构描述的接口上实现的接口的数量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary>指示此结构所描述的接口上的变量和数据字段的数目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary>留待将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary>类型信息的 GUID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary>所描述类型的 IDL 属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary>成员名称和文档字符串的区域设置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary>留待将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary>与 <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> 和 <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" /> 字段一起使用的常数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary>构造函数的 ID，如果没有，则为 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary>析构函数的 ID，如果没有，则为 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary>如果 <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />，则指定该类型（此类型为该类型的别名）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary>
        <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> 值描述此信息所描述的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary>主版本号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary>次版本号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary>描述此信息的 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary>描述变量的类型、函数的返回类型或函数参数的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary>如果变量为 <see langword="VT_SAFEARRAY" /> 或 <see langword="VT_PTR" />，则 <see langword="lpValue" /> 字段包含指向指定元素类型的 <see langword="TYPEDESC" /> 的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary>指示由此 <see langword="TYPEDESC" /> 描述的项的 Variant 类型。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary>定义类型说明的属性和特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary>该类支持聚合。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary>描述 <see langword="Application" /> 对象的类型说明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary>可由 <see langword="ITypeInfo::CreateInstance" /> 创建该类型的实例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary>该类型是将派生其他类型的控件，而且不应显示给用户。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary>指示该接口直接或间接从 <see langword="IDispatch" /> 派生。 此标志为计算所得，没有此标志的对象描述语言。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary>该接口同时支持 <see langword="IDispatch" /> 和 VTBL 绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary>该类型不应显示在浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary>该类型已授权。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary>该接口在运行时无法添加成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary>该接口中使用的类型与自动化（包括 VTBL 绑定支持）完全兼容。 设置双重接口时，将同时设置此标志和 <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" />。 不允许在调度接口上设置此标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary>该类型是预定义的。 该客户端应用程序应自动创建具有此属性的对象的单个实例。 指向该对象的变量名称与该对象的类名相同。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary>指示接口将使用 proxy/stub 动态链接库。 此标志指定注销类型库时不应注销类型库代理。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary>该对象支持 <see langword="IConnectionPointWithDefault" />，并且具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary>不应是可从宏语言访问的。 此标志适用于系统级类型或类型浏览器不应显示的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary>指示检查子级前应先检查基接口以进行名称解析，这与默认行为相反。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary>指定各种类型的数据和函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary>类型，它是另一个类型的别名。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary>已实现的组件接口集。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary>可通过 <see langword="IDispatch::Invoke" /> 访问的方法和属性集。 默认情况下，双重接口返回 <see langword="TKIND_DISPATCH" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary>枚举数集。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary>类型，它具有虚函数（全部为纯虚函数）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary>枚举结尾标记。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary>模块，它只能包含静态函数和数据（例如 DLL）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary>没有方法的结构。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary>偏移量为零的所有成员的联合。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary>标识特定的类型库，并为成员名称提供本地化支持。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary>表示类型库的全局唯一库 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary>表示类型库的区域设置 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary>表示类型库的目标硬件平台。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary>表示库标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary>表示类型库的主版本号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary>表示类型库的次版本号。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary>描述变量、常量或数据成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary>包含有关变量的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary>包含变量类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary>保留此字段供将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary>指示变量的成员 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary>定义如何封送变量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary>定义变量的属性。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary>包含有关变量的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary>描述符号常数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary>指示此变量在该实例中的偏移量。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary>标识定义变量属性的常量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary>该变量支持数据绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary>该变量是最佳地表示此对象的唯一属性。 类型信息中仅有一个变量可以具有此特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary>允许进行一种优化，使编译器查找“abc”类型上名为“xyz”的成员。 如果找到这样的成员，而且该成员标志为默认集合的某元素的访问函数，则生成对该成员函数的调用。 可以对调度接口和接口中的成员使用；不能对模块使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary>该变量作为可绑定变量显示给用户。 还必须设置 <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary>尽管该变量存在并且是可绑定的，但不应在浏览器中将它显示给用户。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary>该变量作为单独的可绑定属性映射。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary>该变量出现在对象浏览器而非属性浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary>不应允许给该变量赋值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary>将该接口标记为具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary>设置后，任何直接更改该属性的尝试都会导致对 <see langword="IPropertyNotifySink::OnRequestEdit" /> 的调用。 <see langword="OnRequestEdit" /> 的实现确定是否接受此更改。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary>该变量不应该是可以从宏语言访问的。 此标志用于系统级变量或不想让类型浏览器显示的变量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary>该变量返回一个对象，该对象为事件的源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary>该变量是用户界面中的默认显示。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary>定义变量的种类。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary>
        <see langword="VARDESC" /> 结构描述符号常量。 没有与之关联的内存。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary>该变量只能通过 <see langword="IDispatch::Invoke" /> 访问。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary>该变量是类型的一个字段或成员。 它在类型的每个实例中存在于固定的偏移量处。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary>该变量只有一个实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary>指定从 COM 中注销使用的程序集时要调用的方法；这可以在注销过程中执行用户编写的代码。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers">
      <summary>用于管理 COM IUnknown 类型包装器的类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.#ctor">
      <summary>实例构造函数。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ComputeVtables(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags,System.Int32@)">
      <summary>采用 <paramref name="flags" /> 的值计算 <paramref name="obj" /> 所需的 Vtable。</summary>
      <param name="obj">返回的 VTable 的目标。</param>
      <param name="flags">用于计算 VTable 的标志。</param>
      <param name="count">返回的内存中包含的元素数。</param>
      <returns>包含所有 COM 接口项的内存的 <see cref="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry" /> 指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.CreateObject(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary>采用 <paramref name="flags" /> 的值为 <paramref name="externalComObject" /> 指向的对象创建托管对象。</summary>
      <param name="externalComObject">要导入便于在 .NET 运行时中使用的对象。</param>
      <param name="flags">用于描述外部对象的标志。</param>
      <returns>与所提供的外部 COM 对象关联的托管对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl(System.IntPtr@,System.IntPtr@,System.IntPtr@)">
      <summary>获取运行时提供的 IUnknown 实现。</summary>
      <param name="fpQueryInterface">指向 QueryInterface 的函数指针。</param>
      <param name="fpAddRef">指向 AddRef 的函数指针。</param>
      <param name="fpRelease">要发布的函数指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)">
      <summary>创建提供的对象的 COM 表示形式，该对象可传递给非托管环境。</summary>
      <param name="instance">要在 .NET 运行时外部公开的托管对象。</param>
      <param name="flags">用于配置生成的接口的标志。</param>
      <returns>生成的 COM 接口，它可在 .NET 运行时外部传递。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary>获取当前注册的托管对象，或创建新的托管对象并对其进行注册。</summary>
      <param name="externalComObject">要导入便于在 .NET 运行时中使用的对象。</param>
      <param name="flags">用于描述外部对象的标志。</param>
      <returns>与所提供的外部 COM 对象关联的托管对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrRegisterObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object)">
      <summary>获取当前注册的托管对象，或使用提供的托管对象并对其进行注册。</summary>
      <param name="externalComObject">要导入便于在 .NET 运行时中使用的对象。</param>
      <param name="flags">用于描述外部对象的标志。</param>
      <param name="wrapper">要用作外部对象的包装器的对象。</param>
      <exception cref="T:System.NotSupportedException">包装器实例已与外部对象关联。</exception>
      <returns>与所提供的外部 COM 对象关联的托管对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.RegisterForMarshalling(System.Runtime.InteropServices.ComWrappers)">
      <summary>注册具有以下用途的 <see cref="T:System.Runtime.InteropServices.ComWrappers" /> 实例：用作在运行时进行封送的全局实例。</summary>
      <param name="instance">要注册的实例。</param>
      <exception cref="T:System.InvalidOperationException">该方法被调用了多次。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.RegisterForTrackerSupport(System.Runtime.InteropServices.ComWrappers)">
      <summary>注册具有以下用途的 <see cref="T:System.Runtime.InteropServices.ComWrappers" /> 实例：用作引用跟踪器支持的全局实例。</summary>
      <param name="instance">要注册的实例。</param>
      <exception cref="T:System.InvalidOperationException">该方法被调用了多次。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ReleaseObjects(System.Collections.IEnumerable)">
      <summary>释放普通对象或 COM 接口生存期之外的对象的集合。</summary>
      <param name="objects">要释放的对象的集合。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch">
      <summary>一个应用程序二进制接口，它用于 COM 接口的函数调度。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.Vtable">
      <summary>表示 IUnknown 实例布局中虚拟函数表 (vtable) 的字段。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance``1(System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*)">
      <summary>如果 <see cref="T:System.IntPtr" /> 来自生成的 Vtable，则将它转换为目标类型。</summary>
      <param name="dispatchPtr">指向 Vtable 函数项的指针。</param>
      <typeparam name="T">所需类型。</typeparam>
      <returns>与调度的函数调用相关联的类型的实例。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry">
      <summary>指向目标 VTable 的接口类型和指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry.IID">
      <summary>接口标识符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry.Vtable">
      <summary>指向函数的虚拟查找表的指针。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CreateComInterfaceFlags">
      <summary>指定 <see cref="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)" /> 方法的标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.CallerDefinedIUnknown">
      <summary>调用方将提供 IUnknown Vtable。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.None">
      <summary>用于指示未设置任何标志的标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.TrackerSupport">
      <summary>用于指示 COM 接口应实现 IReferenceTrackerTarget 的标志。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CreateObjectFlags">
      <summary>指定 <see cref="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)" /> 方法的标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.None">
      <summary>用于指示未设置任何标志的标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject">
      <summary>指示所提供的外部 COM 对象实现 IReferenceTracker。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.UniqueInstance">
      <summary>指示忽略内部缓存并始终创建唯一实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>对封送处理程序应该将其作为 <see langword="VT_CY" /> 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>用要包装并作为 <see langword="Decimal" /> 类型进行封送的 <see langword="VT_CY" /> 来初始化 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 类的新实例。</summary>
      <param name="obj">要包装并作为 <see langword="Decimal" /> 进行封送的 <see langword="VT_CY" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>用包含要包装并作为 <see langword="Decimal" /> 类型进行封送的 <see langword="VT_CY" /> 的对象来初始化 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 类的新实例。</summary>
      <param name="obj">包含要包装并作为 <see langword="Decimal" /> 进行封送的 <see langword="VT_CY" /> 的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 参数不是 <see cref="T:System.Decimal" /> 类型。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>获取将作为 <see langword="VT_CY" /> 类型进行封送的包装对象。</summary>
      <returns>将作为 <see langword="VT_CY" /> 类型进行封送的包装对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary>指示 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 方法的 IUnknown::QueryInterface 调用是否可以使用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary>IUnknown::QueryInterface 方法调用可以使用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 接口。 使用此值时，<see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 方法重载的功能与 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> 重载的功能类似。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary>IUnknown::QueryInterface 方法调用应忽略 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 接口。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary>提供 <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 方法的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary>特定接口 ID 的接口不可用。 在这种情况下，返回的接口为 <see langword="null" />。 E_NOINTERFACE 会返回给 IUnknown::QueryInterface 的调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary>从 <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 方法返回的接口指针可用作 IUnknown::QueryInterface 的结果。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary>未使用自定义的 <see langword="QueryInterface" />。 相反，应该使用 IUnknown::QueryInterface 的默认实现。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>指定 <see cref="T:System.Runtime.InteropServices.CharSet" /> 枚举的值。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 值初始化 <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> 类的新实例。</summary>
      <param name="charSet">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 值之一。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>获取对 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 的任何调用的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 的默认值。</summary>
      <returns>对 <see cref="T:System.Runtime.InteropServices.CharSet" /> 的任何调用的 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 的默认值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary>指定用于搜索提供平台调用函数的 DLL 的路径。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 类的新实例，该实例指定在搜索目标平台调用时使用的路径。</summary>
      <param name="paths">用于指定平台调用期间 LoadLibraryEx<c></c> 函数搜索路径的枚举值的按位组合。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary>获取用于指定平台调用期间 LoadLibraryEx<c></c> 函数搜索路径的枚举值的按位组合。</summary>
      <returns>指定平台调用搜索路径的枚举值的按位组合。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary>设置当从支持默认参数的语言中调用参数时参数的默认值。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary>用参数的默认值初始化 <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> 类的新实例。</summary>
      <param name="value">表示参数默认值的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary>获取参数的默认值。</summary>
      <returns>表示参数默认值的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>对封送处理程序应该将其作为 <see langword="VT_DISPATCH" /> 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>使用正在包装的对象初始化 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 类的新实例。</summary>
      <param name="obj">要包装并转换成 <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" /> 的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是类或数组。  
  
- 或 - 
 <paramref name="obj" /> 不支持 <see langword="IDispatch" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="obj" /> 参数是用被传递了一个 <see langword="false" /> 值的 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 特性标记的。  
  
- 或 - 
<paramref name="obj" /> 参数继承自一个类型，该类型是用一个被传递了 <see langword="false" /> 值的 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 特性标记的。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>获取由 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 包装的对象。</summary>
      <returns>由 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>指定方法、字段或属性的 COM 调度标识符 (DISPID)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>用指定的 DISPID 初始化 <see langword="DispIdAttribute" /> 类的新实例。</summary>
      <param name="dispId">成员的 DISPID。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>获取成员的 DISPID。</summary>
      <returns>成员的 DISPID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>指示由非托管动态链接库 (DLL) 公开为静态入口点的特性化方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>将 Unicode 字符转换为 ANSI 字符时，启用或禁用最佳映射行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>指示入口点的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>指示如何向方法封送字符串参数，并控制名称重整。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>指示要调用的 DLL 入口点的名称或序号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>控制 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 字段是否使公共语言运行时在非托管 DLL 中搜索入口点名称，而不使用指定的入口点名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>指示是否直接转换具有 <see langword="HRESULT" /> 或 <see langword="retval" /> 返回值的非托管方法，或是否自动将 <see langword="HRESULT" /> 或 <see langword="retval" /> 返回值转换为异常。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>指示被调用方在从属性化方法返回之前是否调用 <see langword="SetLastError" /> Windows API 函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary>启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>使用包含要导入的方法的 DLL 的名称初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 类的新实例。</summary>
      <param name="dllName">包含非托管方法的 DLL 的名称。 如果 DLL 包含在某个程序集中，则可以包含程序集显示名称。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>获取包含入口点的 DLL 文件的名称。</summary>
      <returns>包含入口点的 DLL 文件的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary>提供用于通过回调解析本机库的委托。</summary>
      <param name="libraryName">要解析的本机库。</param>
      <param name="assembly">请求解析的程序集。</param>
      <param name="searchPath">PInvoke 上的 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />（如果有）。 否则为程序集上的 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />（如果有）。 否则为 <see langword="null" />。</param>
      <returns>成功时的已加载本机库的句柄，或失败时的 <see cref="F:System.IntPtr.Zero" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary>指定用于搜索提供平台调用功能的 DLL 的路径。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary>在 DLL 的搜索路径中包含了应用程序目录。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary>当搜索程序集依赖项时，请包括包含程序集本身的目录并首先查找该目录。 在路径传递到 Win32 LoadLibraryEx 函数之前，通过 .NET Framework 使用此值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary>搜索应用程序目录，然后调用有 <c>LOAD_WITH_ALTERED_SEARCH_PATH</c> 标志的 Win32 LoadLibraryEx 函数。 如果指定任何其他值，则忽略该值。 不支持 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 特性使用此值并忽略其他值的操作系统。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary>在 DLL 搜索路径中包含了应用程序目录、<see langword="%WinDir%\System32" /> 目录和用户目录。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary>在 DLL 搜索路径中包含了 <see langword="%WinDir%\System32" /> 目录。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary>搜索在搜索其他文件夹之前 DLL 所在文件夹中的依赖项。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary>通过使用 Win32 <c>AddDllDirectory</c> 函数，包含了显式添加了过程搜索路径的所有路径。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute">
      <summary>
        <see cref="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)" /> 返回的任何类型所需的特性。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute.#ctor">
      <summary>实例构造函数。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>对封送处理程序应该将其作为 <see langword="VT_ERROR" /> 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>使用与所提供的异常相对应的 HRESULT 初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类的新实例。</summary>
      <param name="e">要转换为错误代码的异常。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>使用错误的 HRESULT 初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类的新实例。</summary>
      <param name="errorCode">错误的 HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>使用包含错误 HRESULT 的对象初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类的新实例。</summary>
      <param name="errorCode">包含错误的 HRESULT 的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="errorCode" /> 参数不是 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>获取包装的错误代码。</summary>
      <returns>错误的 HRESULT。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>当不需要自动 GUID 时提供显式的 <see cref="T:System.Guid" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>用指定的 GUID 初始化 <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> 类的新实例。</summary>
      <param name="guid">要分配的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>获取类的 <see cref="T:System.Guid" />。</summary>
      <returns>类的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary>跟踪未完成的句柄并在达到指定阈值时强制实施垃圾回收。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary>使用一个名称以及一个阈值（在达到该值时开始执行图柄回收）初始化 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 类的新实例。</summary>
      <param name="name">收集器的名称。 此参数允许你为跟踪图柄类型的收集器分别命名。</param>
      <param name="initialThreshold">指定何时开始执行回收的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialThreshold" /> 参数小于 0。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary>使用一个名称、一个指定何时开始执行图柄回收的阈值，以及一个指定必须进行图柄回收的时间的阈值初始化 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 类的新实例。</summary>
      <param name="name">收集器的名称。  此参数允许你为跟踪图柄类型的收集器分别命名。</param>
      <param name="initialThreshold">指定何时开始执行回收的值。</param>
      <param name="maximumThreshold">指定必须开始进行回收的时间的值。 此值应设置为可用图柄的最大数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialThreshold" /> 参数小于 0。  
  
- 或 - 
<paramref name="maximumThreshold" /> 参数小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="maximumThreshold" /> 参数小于 <paramref name="initialThreshold" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary>增加当前图柄计数。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 属性小于 0。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary>减少当前图柄计数。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 属性小于 0。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary>获取回收的图柄的数量。</summary>
      <returns>回收的句柄的数量。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary>获取一个值，该值指定了何时开始执行回收。</summary>
      <returns>指定何时开始执行回收的值。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary>获取指定必须开始进行回收的时间的值。</summary>
      <returns>指定必须开始进行回收的时间的值。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 对象的名称。</summary>
      <returns>此 <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> 属性允许您为跟踪句柄类型的回收器分别命名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary>将包含句柄的托管对象包装到通过平台调用传递到非托管代码的资源中。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary>用要包装的对象和由非托管代码使用的资源的句柄初始化 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 类的新实例。</summary>
      <param name="wrapper">在平台 invoke 调用返回前不应完成的托管对象。</param>
      <param name="handle">
        <see cref="T:System.IntPtr" /> 指示资源的句柄。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary>返回指定的 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象的资源的句柄。</summary>
      <param name="value">需要句柄的对象。</param>
      <returns>指定的 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象的资源的句柄。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary>返回 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象的内部整数表示形式。</summary>
      <param name="value">要从中检索内部整数表示形式的 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象。</param>
      <returns>表示 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象的 <see cref="T:System.IntPtr" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary>获取资源的句柄。</summary>
      <returns>资源的句柄。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary>获取保存资源句柄的对象。</summary>
      <returns>保存资源句柄的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>为客户提供访问实际对象的方法，而不是访问自定义封送处理程序分发的适配器对象的方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>提供对自定义封送处理程序包装的基础对象的访问权限。</summary>
      <returns>适配器对象包含的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary>使用户能够为扩展 <see cref="T:System.MarshalByRefObject" /> 的托管对象编写激活代码。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary>创建指定类型的新实例。</summary>
      <param name="serverType">要激活的类型。</param>
      <returns>与指定类型关联的 <see cref="T:System.MarshalByRefObject" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary>提供用于处理方法调用的自定义包装器。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary>不再需要时执行必要的托管数据的清除。</summary>
      <param name="ManagedObj">要销毁的托管对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary>不再需要时执行必要的非托管数据的清除。</summary>
      <param name="pNativeData">指向要销毁的非托管数据的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary>返回要封送的本机数据的大小。</summary>
      <returns>本机数据的大小（以字节为单位）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary>将托管数据转换为非托管数据。</summary>
      <param name="ManagedObj">要转换的托管对象。</param>
      <returns>指向托管对象的 COM 视图的指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary>将非托管数据转换为托管数据。</summary>
      <param name="pNativeData">指向要包装的非托管数据的指针。</param>
      <returns>表示 COM 数据的托管视图的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary>允许开发人员提供 IUnknown::QueryInterface(REFIID riid, void **ppvObject) 方法的自定义托管实现。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary>根据指定的接口 ID 返回接口。</summary>
      <param name="iid">请求的接口的 GUID。</param>
      <param name="ppv">此方法返回时，对所请求的接口的引用。</param>
      <returns>枚举值之一，指示是否使用了 IUnknown::QueryInterface 的自定义实现。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.IDynamicInterfaceCastable">
      <summary>用于参与类型强制转换失败的接口。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)">
      <summary>当类的元数据中找不到给定接口类型时，在接口调度期间调用。</summary>
      <param name="interfaceType">接口类型。</param>
      <exception cref="T:System.InvalidOperationException">返回的类型不是接口类型，或者未使用 <see cref="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute" /> 进行标记。</exception>
      <returns>应该用于在当前对象上为 <paramref name="interfaceType" /> 调度的类型。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)">
      <summary>在将实现的类实例强制转换为该类的元数据中不包含的接口类型时调用。</summary>
      <param name="interfaceType">接口类型。</param>
      <param name="throwIfNotImplemented">指示函数是应引发异常，还是应返回 <see langword="false" />。</param>
      <returns>如果此对象可以强制转换为给定接口，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary>指示在程序集内定义的类型原来在类型库中定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary>用原始类型库文件的名称初始化 <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> 类的新实例。</summary>
      <param name="tlbFile">原始类型库文件的位置。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary>获取原始类型库文件的名称。</summary>
      <returns>原始类型库文件的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>指示向 COM 公开时，托管接口是双重的、仅支持调度的、还是仅支持 <see langword="IUnknown" /> 的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 类的新实例。</summary>
      <param name="interfaceType">描述应如何向 COM 客户端公开接口。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 类的新实例。</summary>
      <param name="interfaceType">
        <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值之一，指定如何向 COM 客户端公开接口。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值，该值描述应如何向 COM 公开接口。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值，该值描述应如何向 COM 公开接口。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>当使用无效的 COM 对象时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>用默认属性初始化 <see langword="InvalidComObjectException" /> 的实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从序列化数据初始化 <see langword="COMException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>用消息初始化 <see langword="InvalidComObjectException" /> 的实例。</summary>
      <param name="message">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>当封送处理程序遇到无法封送到托管代码的变量类型参数时，由该封送处理程序引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>使用默认值初始化 <see langword="InvalidOleVariantTypeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从序列化数据初始化 <see langword="InvalidOleVariantTypeException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see langword="InvalidOleVariantTypeException" /> 类的新实例。</summary>
      <param name="message">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary>指示方法的非托管签名需要区域设置标识符 (LCID) 参数。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary>用非托管签名中 LCID 的位置初始化 <see langword="LCIDConversionAttribute" /> 类的新实例。</summary>
      <param name="lcid">指示非托管签名中 LCID 参数的位置，其中 0 是第一个参数。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary>获取非托管签名中 LCID 参数的位置。</summary>
      <returns>非托管签名中 LCID 参数的位置，其中 0 是第一个参数。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary>为用户在托管与 COM 互操作方案中自定义互操作存根提供支持。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary>使用指定的类类型和方法名称初始化 <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> 类的新实例。</summary>
      <param name="classType">包含所需的存根方法的类。</param>
      <param name="methodName">存根方法的名称。</param>
      <exception cref="T:System.ArgumentException">找不到 <paramref name="methodName" />。  
  
- 或 - 
该方法不是静态或非泛型方法。  
  
- 或 - 
该方法的参数列表与存根的预期参数列表不匹配。</exception>
      <exception cref="T:System.MethodAccessException">由于存根方法具有私有或受保护的可访问性，或由于安全问题，包含托管互操作方法的接口无权访问存根方法。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary>获取包含所需存根方法的类。</summary>
      <returns>包含自定义的互操作存根的类。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary>获取存根方法的名称。</summary>
      <returns>自定义的互操作存根的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>提供了一个方法集合，这些方法用于分配非托管内存、复制非托管内存块、将托管类型转换为非托管类型，此外还提供了在与非托管代码交互时使用的其他杂项方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>表示系统上的默认字符大小；Unicode 系统上默认值为 2，ANSI 系统上默认值为 1。 此字段为只读。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary>表示用于当前操作系统的双字节字符集 (DBCS) 的最大大小（以字节为单位）。 此字段为只读。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>递增指定接口上的引用计数。</summary>
      <param name="pUnk">要递增的接口引用计数。</param>
      <returns>
        <paramref name="pUnk" /> 参数上的引用计数的新值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>从 COM 任务内存分配器分配指定大小的内存块。</summary>
      <param name="cb">要分配的内存块的大小。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的内存来满足该请求。</exception>
      <returns>一个整数，表示分配的内存块的地址。 必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> 释放该内存。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>通过使用指定的字节数，从进程的非托管内存中分配内存。</summary>
      <param name="cb">内存中的所需字节数。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的内存来满足该请求。</exception>
      <returns>指向新分配的内存的指针。 必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法释放该内存。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>通过使用指向指定字节数的指针，从进程的非托管内存中分配内存。</summary>
      <param name="cb">内存中的所需字节数。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的内存来满足该请求。</exception>
      <returns>指向新分配的内存的指针。 必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法释放该内存。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary>指示是否可以清除任何上下文中的运行时可调用包装器 (RCW)。</summary>
      <returns>如果存在任何可清除的 RCW，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary>获取由指定的名字对象标识的接口指针。</summary>
      <param name="monikerName">与所需接口指针相对应的名字对象。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">非托管的 <see langword="BindToMoniker" /> 方法返回无法识别的 HRESULT。</exception>
      <returns>一个对象，它包含对由 <paramref name="monikerName" /> 参数标识的接口指针的引用。 名字对象是一个名称，在此情况下，名字对象由接口定义。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary>更改对象的 COM 可调用包装器 (CCW) 句柄的强度。</summary>
      <param name="otp">一个对象，其 CCW 包含带有引用计数的句柄。 如果 CCW 上的引用计数大于零，则该句柄是强句柄；否则为弱句柄。</param>
      <param name="fIsWeak">为 <see langword="true" /> 时，忽略 <paramref name="otp" /> 的引用计数，将其句柄强度改为弱；为 <see langword="false" /> 时，重置要进行引用计数的 <paramref name="otp" /> 上的句柄强度。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary>通知运行时清理当前上下文中分配的所有运行时可调用包装器 (RCW)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维托管 8 位无符号整数数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维托管字符数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维托管双精度浮点数数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维托管 16 位带符号整数数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维托管 32 位带符号整数数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维托管 64 位带符号整数数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>将数据从非托管内存指针复制到托管 8 位无符号整数数组。</summary>
      <param name="source">从中进行复制的内存指针。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>将数据从非托管内存指针复制到托管字符数组。</summary>
      <param name="source">从中进行复制的内存指针。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>将数据从非托管内存指针复制到托管双精度浮点数数组。</summary>
      <param name="source">从中进行复制的内存指针。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>将数据从非托管内存指针复制到托管 16 位带符号整数数组。</summary>
      <param name="source">从中进行复制的内存指针。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>将数据从非托管内存指针复制到托管 32 位带符号整数数组。</summary>
      <param name="source">从中进行复制的内存指针。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>将数据从非托管内存指针复制到托管 64 位带符号整数数组。</summary>
      <param name="source">从中进行复制的内存指针。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary>将数据从非托管的内存指针复制到托管的 <see cref="T:System.IntPtr" /> 数组。</summary>
      <param name="source">从中进行复制的内存指针。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>将数据从非托管内存指针复制到托管单精度浮点数数组。</summary>
      <param name="source">从中进行复制的内存指针。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="startIndex">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维托管的 <see cref="T:System.IntPtr" /> 数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>将数据从一维托管单精度浮点数数组复制到非托管内存指针。</summary>
      <param name="source">从中进行复制的一维数组。</param>
      <param name="startIndex">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination">要复制到的内存指针。</param>
      <param name="length">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary>聚合托管对象和指定的 COM 对象。</summary>
      <param name="pOuter">外部 <see langword="IUnknown" /> 指针。</param>
      <param name="o">要聚合的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 是一个 Windows 运行时 对象。</exception>
      <returns>托管对象的内部 <see langword="IUnknown" /> 指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 聚合指定类型的托管对象和指定的 COM 对象。</summary>
      <param name="pOuter">外部 IUnknown 指针。</param>
      <param name="o">要集合的托管对象。</param>
      <typeparam name="T">要聚合的托管对象的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 是一个 Windows 运行时 对象。</exception>
      <returns>托管对象的内部 IUnknown 指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>在指定类型的对象中包装指定的 COM 对象。</summary>
      <param name="o">要包装的对象。</param>
      <param name="t">要创建的包装器的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 必须派生自 <see langword="__ComObject" />。  
  
- 或 - 
 <paramref name="t" /> 是 Windows 运行时 类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 不支持所有必需的接口，因此无法转换为目标类型。</exception>
      <returns>新包装的对象，该对象是所需类型的实例。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 在指定类型的对象中包装指定的 COM 对象。</summary>
      <param name="o">要包装的对象。</param>
      <typeparam name="T">要包装的对象的类型。</typeparam>
      <typeparam name="TWrapper">要返回的对象的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> 必须派生自 <see langword="__ComObject" />。  
  
- 或 - 
 <typeparamref name="T" /> 是 Windows 运行时 类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 无法转换为 <paramref name="TWrapper" />，因为它不支持所有需要的接口。</exception>
      <returns>新包装的对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>释放指定的非托管内存块所指向的所有子结构。</summary>
      <param name="ptr">指向非托管内存块的指针。</param>
      <param name="structuretype">格式化类的类型。 该类型提供删除 <paramref name="ptr" /> 参数指向的缓冲区时必需的布局信息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> 具有自动布局。 但请该用连续或显式布局。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 释放指定的非托管内存块所指向的所有指定类型的子结构。</summary>
      <param name="ptr">指向非托管内存块的指针。</param>
      <typeparam name="T">格式化结构的类型。 该类型提供删除 <paramref name="ptr" /> 参数指向的缓冲区时必需的布局信息。</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> 具有自动布局。 但请该用连续或显式布局。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>通过将运行时可调用包装器 (RCW) 的引用计数设置为 0，释放对它的所有引用。</summary>
      <param name="o">要释放的 RCW。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 不是有效的 COM 对象。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 为 <see langword="null" />。</exception>
      <returns>与 <paramref name="o" /> 参数关联的 RCW 的新引用计数值，如果释放成功，则为 0（零）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>使用 COM SysFreeString 函数释放 <see langword="BSTR" />。</summary>
      <param name="ptr">要释放的 BSTR 的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>释放由非托管 COM 任务内存分配器分配的内存块。</summary>
      <param name="ptr">要释放的内存的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>释放以前从进程的非托管内存中分配的内存。</summary>
      <param name="hglobal">由对 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 的原始匹配调用返回的句柄。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary>返回指定类型的全局唯一标识符 (GUID)，或使用类型库导出程序 (Tlbexp.exe) 所用的算法生成 GUID。</summary>
      <param name="type">要为其生成 GUID 的类型。</param>
      <returns>指定类型的标识符。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary>返回指定类型的编程标识符 (ProgID)。</summary>
      <param name="type">要获取其 ProgID 的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 参数不是由 COM 创建的类。 该类必须是公共的，必须具有公共的无参数构造函数，而且必须是 COM 可见的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
      <returns>指定类型的 ProgID。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>返回一个指向 IUnknown 接口的指针，该指针表示指定对象上的指定接口。 默认情况下，启用自定义查询接口访问。</summary>
      <param name="o">提供接口的对象。</param>
      <param name="T">所请求接口的类型。</param>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> 参数不是接口。  
  
- 或 - 
该类型对 COM 不可见。  
  
- 或 - 
<typeparamref name="T" /> 参数是泛型类型定义。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 参数不支持请求的接口。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 参数为 <see langword="null" />。  
  
- 或 - 
<typeparamref name="T" /> 参数为 <see langword="null" />。</exception>
      <returns>表示对象的指定接口的接口指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary>返回一个指向 IUnknown 接口的指针，该指针表示指定对象上的指定接口。 自定义查询接口访问由指定的自定义模式控制。</summary>
      <param name="o">提供接口的对象。</param>
      <param name="T">所请求接口的类型。</param>
      <param name="mode">枚举值之一，用于指示是否要应用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 提供的 <see langword="IUnknown::QueryInterface" /> 自定义。</param>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> 参数不是接口。  
  
- 或 - 
该类型对 COM 不可见。  
  
- 或 - 
<typeparamref name="T" /> 参数是泛型类型定义。</exception>
      <exception cref="T:System.InvalidCastException">对象 <paramref name="o" /> 不支持请求的接口。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 参数为 <see langword="null" />。  
  
- 或 - 
<typeparamref name="T" /> 参数为 <see langword="null" />。</exception>
      <returns>表示对象的接口的接口指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持] 
返回一个指向 IUnknown 接口的指针，该指针表示指定类型的对象上的指定接口。 默认情况下，启用自定义查询接口访问。</summary>
      <param name="o">提供接口的对象。</param>
      <typeparam name="T">
        <paramref name="o" /> 的类型。</typeparam>
      <typeparam name="TInterface">要返回的接口的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TInterface" /> 参数不是接口。  
  
- 或 - 
该类型对 COM 不可见。  
  
- 或 - 
<typeparamref name="T" /> 参数是开放式泛型类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 参数不支持 <paramref name="TInterface" /> 接口。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 参数为 <see langword="null" />。</exception>
      <returns>表示 <paramref name="TInterface" /> 接口的接口指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary>从指定的 COM 对象检索指定键所引用的数据。</summary>
      <param name="obj">包含所需数据的 COM 对象。</param>
      <param name="key">要从中检索数据的 <paramref name="obj" /> 的内部哈希表中的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 COM 对象。  
  
- 或 - 
 <paramref name="obj" /> 是一个 Windows 运行时 对象。</exception>
      <returns>
        <paramref name="obj" /> 参数的内部哈希表中 <paramref name="key" /> 参数所表示的数据。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>将非托管函数指针转换为委托。</summary>
      <param name="ptr">要转换的非托管函数指针。</param>
      <param name="t">要返回的委托的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 参数不是委托或泛型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> 参数为 <see langword="null" />。  
  
- 或 - 
<paramref name="t" /> 参数为 <see langword="null" />。</exception>
      <returns>可转换为适当的委托类型的委托实例。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将非托管函数指针转换为指定类型的委托。</summary>
      <param name="ptr">要转换的非托管函数指针。</param>
      <typeparam name="TDelegate">要返回的委托的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 泛型参数不是代理，或者它是开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> 参数为 <see langword="null" />。</exception>
      <returns>指定委托类型的实例。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary>检索向 COM 公开时某个类型的虚拟功能表（v 表或 VTBL）中的最后一个槽。</summary>
      <param name="t">表示接口或类的类型。</param>
      <returns>向 COM 公开时接口的最后一个 VTBL 槽。 如果 <paramref name="t" /> 参数是一个类，则返回的 VTBL 槽是从该类生成的接口中的最后一个槽。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>检索标识所发生异常的类型的代码。</summary>
      <returns>异常的类型。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>将指定的 HRESULT 错误代码转换为对应的 <see cref="T:System.Exception" /> 对象。</summary>
      <param name="errorCode">要转换的 HRESULT。</param>
      <returns>一个对象，表示转换后的 HRESULT；或者，如果 HRESULT 值不表示错误代码（例如，<see langword="S_OK" /> 或 <see langword="S_FALSE" />），则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>将指定的 HRESULT 错误代码转换为对应的 <see cref="T:System.Exception" /> 对象，其中包括通过此异常对象的 IErrorInfo 接口传递的其他错误信息。</summary>
      <param name="errorCode">要转换的 HRESULT。</param>
      <param name="errorInfo">指向 <see langword="IErrorInfo" /> 接口的指针，用于提供有关错误的详细信息。 可以指定 <c>IntPtr(0)</c> 以使用当前 <see langword="IErrorInfo" /> 接口，或者指定 <c>IntPtr(-1)</c> 以忽略当前 <see langword="IErrorInfo" /> 接口，仅从错误代码构造异常。</param>
      <returns>一个对象，表示转换后的 HRESULT 的对象和从 <paramref name="errorInfo" /> 获得的信息；或者，如果 HRESULT 值不表示错误代码（例如，<see langword="S_OK" /> 或 <see langword="S_FALSE" />），则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary>检索与计算机无关的异常描述，以及有关异常发生时线程的状态信息。</summary>
      <returns>一个指向 EXCEPTION_POINTERS 结构的指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>将委托转换为可从非托管代码调用的函数指针。</summary>
      <param name="d">要传递给非托管代码的委托。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 参数是泛型类型定义。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 参数为 <see langword="null" />。</exception>
      <returns>一个可传递给非托管代码的值，非托管代码使用该值来调用基础托管委托。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将指定类型的委托转换为可从非托管代码调用的函数指针。</summary>
      <param name="d">要传递给非托管代码的委托。</param>
      <typeparam name="TDelegate">要转换的委托的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 参数是泛型类型定义。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 参数为 <see langword="null" />。</exception>
      <returns>一个可传递给非托管代码的值，非托管代码使用该值来调用基础托管委托。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary>返回指定模块的实例句柄 (HINSTANCE)。</summary>
      <param name="m">具有所需 HINSTANCE 的模块。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="m" /> 参数为 <see langword="null" />。</exception>
      <returns>
        <paramref name="m" /> 的 INSTANCE；如果该模块没有 HINSTANCE，则为 -1。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>将指定异常转换为 HRESULT。</summary>
      <param name="e">要转换为 HRESULT 的异常。</param>
      <returns>映射到所提供的异常的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>返回 HRESULT，它对应于使用 <see cref="T:System.Runtime.InteropServices.Marshal" /> 执行的 Win32 代码引起的最后一个错误。</summary>
      <returns>对应于最后一个 Win32 错误代码的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary>从托管对象返回一个 IDispatch 接口。</summary>
      <param name="o">其 <see langword="IDispatch" /> 接口被请求的对象。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 不支持请求的接口。</exception>
      <returns>
        <paramref name="o" /> 参数的 <see langword="IDispatch" /> 指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>从托管对象返回 IUnknown 接口。</summary>
      <param name="o">其 <see langword="IUnknown" /> 接口被请求的对象。</param>
      <returns>
        <paramref name="o" /> 参数的 <see langword="IUnknown" /> 指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>返回由上一个非托管函数返回的错误代码，该函数是使用设置了 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> 标志的平台调用来的。</summary>
      <returns>通过调用 Win32 SetLastError 函数设置的最后一个错误代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>将对象转换为 COM VARIANT。</summary>
      <param name="obj">为其获取 COM VARIANT 的对象。</param>
      <param name="pDstNativeVariant">一个指针，接收对应于 <paramref name="obj" /> 参数的 VARIANT。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 参数是泛型类型的实例。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将指定类型的对象转换为 COM VARIANT。</summary>
      <param name="obj">为其获取 COM VARIANT 的对象。</param>
      <param name="pDstNativeVariant">一个指针，接收对应于 <paramref name="obj" /> 参数的 VARIANT。</param>
      <typeparam name="T">要转换的对象的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>返回一个类型实例，该实例通过指向 COM 对象的 IUnknown 接口的指针表示该对象。</summary>
      <param name="pUnk">指向 <see langword="IUnknown" /> 接口的指针。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pUnk" /> 为 <see cref="F:System.IntPtr.Zero" />。</exception>
      <returns>一个对象，表示指定的非托管 COM 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>将 COM VARIANT 转换为对象。</summary>
      <param name="pSrcNativeVariant">指向 COM VARIANT 的指针。</param>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> 不是有效的 VARIANT 类型。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> 包含不受支持的类型。</exception>
      <returns>对应于 <paramref name="pSrcNativeVariant" /> 参数的对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将 COM VARIANT 转换为指定类型的对象。</summary>
      <param name="pSrcNativeVariant">指向 COM VARIANT 的指针。</param>
      <typeparam name="T">要将 COM VARIANT 转换为的类型。</typeparam>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> 不是有效的 VARIANT 类型。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> 包含不受支持的类型。</exception>
      <returns>一个与 <paramref name="pSrcNativeVariant" /> 参数对应的指定类型的对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary>将 COM VARIANT 数组转换为对象数组。</summary>
      <param name="aSrcNativeVariant">指向 COM VARIANT 数组中第一个元素的指针。</param>
      <param name="cVars">
        <paramref name="aSrcNativeVariant" /> 中的 COM VARIANT 的计数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> 为负数。</exception>
      <returns>对应于 <paramref name="aSrcNativeVariant" /> 的对象数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将 COM VARIANT 数组转换为指定类型的数组。</summary>
      <param name="aSrcNativeVariant">指向 COM VARIANT 数组中第一个元素的指针。</param>
      <param name="cVars">
        <paramref name="aSrcNativeVariant" /> 中的 COM VARIANT 的计数。</param>
      <typeparam name="T">要返回的数组的类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> 为负数。</exception>
      <returns>对应于 <paramref name="aSrcNativeVariant" /> 的 <typeparamref name="T" /> 对象的数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary>获取虚拟功能表（v 表或 VTBL）中包含用户定义的方法的第一个槽。</summary>
      <param name="t">表示接口或类的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 在 COM 中不可见。</exception>
      <returns>包含用户定义的方法的第一个 VTBL 槽。 如果接口基于 IUnknown，则第一个槽为 3；如果接口基于 IDispatch，则为 7。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary>返回表示 COM 对象的指定类型的托管对象。</summary>
      <param name="pUnk">指向非托管对象的 <see langword="IUnknown" /> 接口的指针。</param>
      <param name="t">请求的托管类的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 并不具有 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 特性。  
  
- 或 - 
 <paramref name="t" /> 是 Windows 运行时 类型。</exception>
      <returns>类的实例，与表示所请求的非托管 COM 对象的 <see cref="T:System.Type" /> 对象相对应。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary>返回与指定的类标识符 (CLSID) 关联的类型。</summary>
      <param name="clsid">要返回的类型的 CLSID。</param>
      <returns>
        <see langword="System.__ComObject" />，无论 CLSID 是否有效。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary>检索由 ITypeInfo 对象表示的类型的名称。</summary>
      <param name="typeInfo">一个表示 <see langword="ITypeInfo" /> 指针的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeInfo" /> 参数为 <see langword="null" />。</exception>
      <returns>
        <paramref name="typeInfo" /> 参数指向的类型的名称。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary>为给定的 IUnknown 接口创建唯一的运行时可调用包装器 (RCW) 对象。</summary>
      <param name="unknown">指向 <see langword="IUnknown" /> 接口的托管指针。</param>
      <returns>指定的 <see langword="IUnknown" /> 接口的唯一 RCW。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>指示指定对象是否表示 COM 对象。</summary>
      <param name="o">要检查的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 为 <see langword="null" />。</exception>
      <returns>如果 <paramref name="o" /> 参数是 COM 类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary>指示类型对 COM 客户端是否可见。</summary>
      <param name="t">要检查其 COM 可见性的类型。</param>
      <returns>如果该类型对 COM 可见，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary>返回托管类的非托管形式的字段偏移量。</summary>
      <param name="t">指定托管类的值类型或格式化引用类型。 必须将 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 应用于该类。</param>
      <param name="fieldName">
        <paramref name="t" /> 参数中的字段。</param>
      <exception cref="T:System.ArgumentException">该类无法作为结构导出，或者字段为非公共字段。 从 .NET Framework 2.0 版开始，该字段可以是私有的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 参数为 <see langword="null" />。</exception>
      <returns>平台调用声明的指定类中 <paramref name="fieldName" /> 参数的偏移量（以字节为单位）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 返回指定托管类的非托管形式的字段偏移量。</summary>
      <param name="fieldName">
        <paramref name="T" /> 类型中字段的名称。</param>
      <typeparam name="T">托管值类型或格式化引用类型。 必须将 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 属性应用于该类。</typeparam>
      <returns>平台调用声明的指定类中 <paramref name="fieldName" /> 参数的偏移量（以字节为单位）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>在不调用方法的情况下执行一次性方法设置任务。</summary>
      <param name="m">要检查的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="m" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="m" /> 参数不是 <see cref="T:System.Reflection.MethodInfo" /> 对象。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>对类上的所有方法执行预链接检查。</summary>
      <param name="c">要检查其方法的类。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>将非托管 ANSI 或 UTF-8 字符串中第一个空字符之前的所有字符复制到托管 <see cref="T:System.String" />，并将每个字符扩展为 UTF-16 字符。</summary>
      <param name="ptr">非托管字符串的第一个字符的地址。</param>
      <returns>一个包含非托管字符串副本的托管字符串。 如果 <paramref name="ptr" /> 为 <see langword="null" />，则该方法返回一个 Null 字符串。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>分配托管 <see cref="T:System.String" />，然后从非托管 ANSI 或 UTF-8 字符串向其复制指定数目的字符，并将每个字符扩展为 UTF-16 字符。</summary>
      <param name="ptr">非托管字符串的第一个字符的地址。</param>
      <param name="len">要复制的输入字符串的字节数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> 小于零。</exception>
      <returns>如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为包含本机字符串副本的托管字符串；否则此，方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary>分配托管 <see cref="T:System.String" />，并从非托管内存中存储的字符串向其复制第一个空字符之前的所有字符。</summary>
      <param name="ptr">对于 Unicode 平台，表示第一个 Unicode 字符的地址。  
  
 - 或 -  
  
 对于 ANSI 平台，表示第一个 ANSI 字符的地址。</param>
      <returns>如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary>分配托管 <see cref="T:System.String" />，并从存储在非托管内存中的字符串向其复制指定数目的字符。</summary>
      <param name="ptr">对于 Unicode 平台，表示第一个 Unicode 字符的地址。  
  
 - 或 -  
  
 对于 ANSI 平台，表示第一个 ANSI 字符的地址。</param>
      <param name="len">要复制的字符数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> 小于零。</exception>
      <returns>如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为包含本机字符串副本的托管字符串；否则此，方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary>分配已托管的 <see cref="T:System.String" />，并向其中复制非托管内存中存储的 二进制字符串 (BSTR)。</summary>
      <param name="ptr">非托管字符串的第一个字符的地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> 等于 <see cref="F:System.IntPtr.Zero" />。</exception>
      <returns>一个包含非托管字符串副本的托管字符串。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>分配托管 <see cref="T:System.String" />，并从非托管 Unicode 字符串向其复制第一个空字符之前的所有字符。</summary>
      <param name="ptr">非托管字符串的第一个字符的地址。</param>
      <returns>如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>分配托管 <see cref="T:System.String" />，并从非托的 Unicode 字符串向其复制指定数目的字符。</summary>
      <param name="ptr">非托管字符串的第一个字符的地址。</param>
      <param name="len">要复制的 Unicode 字符数。</param>
      <returns>如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <summary>分配托管的 <see cref="T:System.String" />，并从非托管的 UTF-8 字符串向其复制第一个空字符之前的所有字符。</summary>
      <param name="ptr">非托管字符串的第一个字符的地址。</param>
      <returns>如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <summary>分配托管的 <see cref="T:System.String" />，并从非托管的 UTF8 字符串向其复制指定数目的字符。</summary>
      <param name="ptr">非托管字符串的第一个字符的地址。</param>
      <param name="byteLen">要复制的字节数。</param>
      <returns>如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>将数据从非托管内存块封送到托管对象。</summary>
      <param name="ptr">指向非托管内存块的指针。</param>
      <param name="structure">将数据复制到其中的对象。 这必须是格式化类的实例。</param>
      <exception cref="T:System.ArgumentException">结构布局不是连续或显式的。  
  
 - 或 -  
  
 结构为装箱的值类型。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>将数据从非托管内存块封送到新分配的指定类型的托管对象。</summary>
      <param name="ptr">指向非托管内存块的指针。</param>
      <param name="structureType">要创建的对象的类型。 此对象必须表示格式化类或结构。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> 参数布局不是连续或显式的。  
  
- 或 - 
<paramref name="structureType" /> 参数是泛型类型定义。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structureType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">
        <paramref name="structureType" /> 指定的类没有可访问的无参数构造函数。</exception>
      <returns>一个包含 <paramref name="ptr" /> 参数指向的数据的托管对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将数据从非托管内存块封送到泛型类型参数指定的类型的新分配托管对象。</summary>
      <param name="ptr">指向非托管内存块的指针。</param>
      <typeparam name="T">要将数据复制到其中的对象的类型。 这必须是格式化类或结构。</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> 的布局不是连续或显式的。</exception>
      <exception cref="T:System.MissingMethodException">
        <typeparamref name="T" /> 指定的类没有可访问的无参数构造函数。</exception>
      <returns>一个包含 <paramref name="ptr" /> 参数指向的数据的托管对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将数据从非托管内存块封送到指定类型的托管内存对象。</summary>
      <param name="ptr">指向非托管内存块的指针。</param>
      <param name="structure">将数据复制到其中的对象。</param>
      <typeparam name="T">
        <paramref name="structure" /> 的类型。 这必须是格式化的类。</typeparam>
      <exception cref="T:System.ArgumentException">结构布局不是连续或显式的。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>从 COM 对象请求指向指定接口的指针。</summary>
      <param name="pUnk">要查询的接口。</param>
      <param name="iid">所请求的接口的接口标识符 (IID)。</param>
      <param name="ppv">此方法返回时，包含对返回接口的引用。</param>
      <returns>一个 HRESULT，指示调用成功还是失败。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>从非托管内存读取单个字节。</summary>
      <param name="ptr">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
      <returns>从非托管内存读取的字节。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>从非托管内存按给定的偏移量（或索引）读取单个字节。</summary>
      <param name="ptr">非托管内存中开始读取的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <returns>从非托管内存按给定的偏移量读取的字节。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary>从非托管内存按给定的偏移量（或索引）读取单个字节。</summary>
      <param name="ptr">非托管内存中源对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <returns>从非托管内存按给定的偏移量读取的字节。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>从非托管内存中读取一个 16 位带符号整数。</summary>
      <param name="ptr">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
      <returns>从非托管内存中读取的 16 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取一个 16 位带符号整数。</summary>
      <param name="ptr">非托管内存中开始读取的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <returns>从非托管内存按给定的偏移量读取的 16 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取一个 16 位带符号整数。</summary>
      <param name="ptr">非托管内存中源对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <returns>从非托管内存按给定的偏移量读取的 16 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>从非托管内存中读取一个 32 位带符号整数。</summary>
      <param name="ptr">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
      <returns>从非托管内存中读取的 32 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取一个 32 位带符号整数。</summary>
      <param name="ptr">非托管内存中开始读取的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <returns>从非托管内存中读取的 32 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取一个 32 位带符号整数。</summary>
      <param name="ptr">非托管内存中源对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <returns>从非托管内存按给定的偏移量读取的 32 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>从非托管内存中读取一个 64 位带符号整数。</summary>
      <param name="ptr">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
      <returns>从非托管内存中读取的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取一个 64 位带符号整数。</summary>
      <param name="ptr">非托管内存中开始读取的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <returns>从非托管内存按给定的偏移量读取的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取一个 64 位带符号整数。</summary>
      <param name="ptr">非托管内存中源对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <returns>从非托管内存按给定的偏移量读取的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>从非托管内存读取处理器本机大小的整数。</summary>
      <param name="ptr">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
      <returns>从非托管内存读取的整数。 在 32 位计算机上返回 32 位整数，在 64 位计算机上返回 64 位整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>从非托管内存按给定的偏移量读取处理器本机大小的整数。</summary>
      <param name="ptr">非托管内存中开始读取的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <returns>从非托管内存按给定的偏移量读取的整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary>从非托管内存读取处理器本机大小的整数。</summary>
      <param name="ptr">非托管内存中源对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <returns>从非托管内存按给定的偏移量读取的整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary>调整之前用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> 分配的内存块的大小。</summary>
      <param name="pv">指向用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> 分配的内存的指针。</param>
      <param name="cb">已分配块的新大小。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的内存来满足该请求。</exception>
      <returns>一个整数，表示重新分配的内存块的地址。 必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> 释放该内存。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary>调整之前用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 分配的内存块的大小。</summary>
      <param name="pv">指向用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 分配的内存的指针。</param>
      <param name="cb">已分配块的新大小。 这不是指针；它是你请求的字节计数，转换为类型 <see cref="T:System.IntPtr" />。 如果你传递指针，则将其视为大小。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的内存来满足该请求。</exception>
      <returns>指向重新分配的内存的指针。 必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 释放该内存。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>递减指定接口上的引用计数。</summary>
      <param name="pUnk">要释放的接口。</param>
      <returns>
        <paramref name="pUnk" /> 参数指定的接口上的新引用计数值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>递减与指定的 COM 对象关联的运行时可调用包装器 (RCW) 的引用计数。</summary>
      <param name="o">要释放的 COM 对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 不是有效的 COM 对象。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="o" /> 为 <see langword="null" />。</exception>
      <returns>与 <paramref name="o" /> 关联的 RCW 的新引用计数值。 此值通常为零，因为无论调用包装 COM 对象的托管客户端有多少，RCW 仅保留对该对象的一次引用。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary>分配非托管二进制字符串 (BSTR)并将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到其中。</summary>
      <param name="s">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <returns>非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <returns>非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <returns>非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>将托管 <see cref="T:System.Security.SecureString" /> 的内容复制到非托管内存，并在复制时转换为 ANSI 格式。</summary>
      <param name="s">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <returns>非托管内存中将 <paramref name="s" /> 参数复制到的地址，或者，如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到非托管内存中。</summary>
      <param name="s">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <returns>非托管内存中复制 <paramref name="s" /> 的地址，如果 <paramref name="s" /> 是长度为 0 的 <see cref="T:System.Security.SecureString" /> 对象，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary>设置由指定 COM 对象中的指定键引用的数据。</summary>
      <param name="obj">用于存储数据的 COM 对象。</param>
      <param name="key">用于存储数据的 COM 对象的内部哈希表中的键。</param>
      <param name="data">要设置的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 COM 对象。  
  
- 或 - 
 <paramref name="obj" /> 是一个 Windows 运行时 对象。</exception>
      <returns>如果数据设置成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>返回对象的非托管大小（以字节为单位）。</summary>
      <param name="structure">要返回其大小的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structure" /> 参数为 <see langword="null" />。</exception>
      <returns>非托管代码中指定对象的大小。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>返回非托管类型的大小（以字节为单位）。</summary>
      <param name="t">要返回其大小的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 参数是泛型类型定义。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 参数为 <see langword="null" />。</exception>
      <returns>非托管代码中指定类型的大小。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 返回非托管类型的大小（以字节为单位）。</summary>
      <typeparam name="T">要返回其大小的类型。</typeparam>
      <returns>
        <typeparamref name="T" /> 泛型类型参数指定的类型的大小（以字节为单位）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 返回指定类型的对象的非托管大小（以字节为单位）。</summary>
      <param name="structure">要返回其大小的对象。</param>
      <typeparam name="T">
        <paramref name="structure" /> 参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structure" /> 参数为 <see langword="null" />。</exception>
      <returns>非托管代码中指定对象的大小（以字节为单位）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary>分配 BSTR 并向其复制托管 <see cref="T:System.String" /> 的内容。</summary>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 的长度超出范围。</exception>
      <returns>指向 <see langword="BSTR" /> 的非托管指针；如果 <paramref name="s" /> 为 Null，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary>将托管 <see cref="T:System.String" /> 的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <returns>一个整数，表示指向字符串的内存块的指针；如果 <paramref name="s" /> 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary>将托管 <see cref="T:System.String" /> 的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 的长度超出范围。</exception>
      <returns>已分配的内存块；如果 <paramref name="s" /> 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary>将托管 <see cref="T:System.String" /> 的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <returns>一个整数，表示指向为字符串分配的内存块的指针；如果 s 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <summary>将托管 <see cref="T:System.String" /> 的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <returns>一个整数，表示指向字符串的内存块的指针；如果 <paramref name="s" /> 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary>将托管 <see cref="T:System.String" /> 的内容复制到非托管内存，并在复制时转换为 ANSI 格式。</summary>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <returns>非托管内存中将 <paramref name="s" /> 复制到其中的地址；如果 <paramref name="s" /> 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary>将托管 <see cref="T:System.String" /> 的内容复制到非托管内存，并在需要时转换为 ANSI 格式。</summary>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <returns>非托管内存中将字符串复制到其中的地址；如果 <paramref name="s" /> 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary>将托管 <see cref="T:System.String" /> 的内容复制到非托管内存。</summary>
      <param name="s">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException">此方法未能分配足够的本机堆内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <returns>非托管内存中将 <paramref name="s" /> 复制到其中的地址；如果 <paramref name="s" /> 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>将数据从托管对象封送到非托管内存块。</summary>
      <param name="structure">包含要封送的数据的托管对象。 该对象必须是格式化类的结构或实例。</param>
      <param name="ptr">指向非托管内存块的指针，必须在调用此方法之前分配该指针。</param>
      <param name="fDeleteOld">如果在此方法复制该数据前在 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> 参数上调用 <paramref name="ptr" />，则为 <see langword="true" />。 该块必须包含有效的数据。 请注意，在内存块已包含数据时传递 <see langword="false" /> 可能会导致内存泄漏。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> 为不是格式化类的引用类型。  
  
- 或 - 
 <paramref name="structure" /> 是泛型类型的实例（仅限 .NET Framework 4.5 和更低版本）。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将数据从指定类型的托管对象封送到非托管内存块。</summary>
      <param name="structure">包含要封送的数据的托管对象。 该对象必须是格式化类的结构或实例。</param>
      <param name="ptr">指向非托管内存块的指针，必须在调用此方法之前分配该指针。</param>
      <param name="fDeleteOld">如果在此方法复制该数据前在 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> 参数上调用 <paramref name="ptr" />，则为 <see langword="true" />。 该块必须包含有效的数据。 请注意，在内存块已包含数据时传递 <see langword="false" /> 可能会导致内存泄漏。</param>
      <typeparam name="T">托管对象的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> 为不是格式化类的引用类型。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>用特定的失败 HRESULT 值引发异常。</summary>
      <param name="errorCode">与所需异常相对应的 HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>基于指定的 IErrorInfo 接口，用特定的失败 HRESULT 引发异常。</summary>
      <param name="errorCode">与所需异常相对应的 HRESULT。</param>
      <param name="errorInfo">指向 IErrorInfo 接口的指针，该接口提供有关错误的详细信息。 可以指定 <c>IntPtr(0)</c> 以使用当前的 IErrorInfo 接口，或者 <c>IntPtr(-1)</c> 以忽略当前的 IErrorInfo 接口，并仅从错误代码构造异常。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>获取指定数组中指定索引处的元素的地址。</summary>
      <param name="arr">包含所需元素的数组。</param>
      <param name="index">所需元素的 <paramref name="arr" /> 参数中的索引。</param>
      <returns>
        <paramref name="arr" /> 内的 <paramref name="index" /> 地址。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 获取指定类型的数组中指定索引处的元素地址。</summary>
      <param name="arr">包含所需元素的数组。</param>
      <param name="index">
        <paramref name="arr" /> 数组中所需元素的索引。</param>
      <typeparam name="T">数组的类型。</typeparam>
      <returns>
        <paramref name="arr" /> 中的 <paramref name="index" /> 地址。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>将单个字节值写入到非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的地址。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>按指定偏移量将单字节值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary>按指定偏移量将单字节值写入非托管内存。</summary>
      <param name="ptr">非托管内存中目标对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary>将一个字符作为 16 位整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的地址。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>将 16 位整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的地址。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary>按指定偏移量将 16 位带符号整数值写入非托管内存。</summary>
      <param name="ptr">本机堆中要写入的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>按指定偏移量将 16 位带符号整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary>按指定偏移量将 16 位带符号整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中目标对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary>按指定偏移量将 16 位带符号整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中目标对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>将 32 位带符号整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的地址。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>按指定偏移量将 32 位带符号整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary>按指定偏移量将 32 位带符号整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中目标对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>按指定偏移量将 64 位带符号整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>将 64 位带符号整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的地址。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary>按指定偏移量将 64 位带符号整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中目标对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>按指定的偏移量将一个处理器本机大小的整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>将一个处理器本机大小的整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中要写入的地址。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary>将一个处理器本机大小的整数值写入非托管内存。</summary>
      <param name="ptr">非托管内存中目标对象的基址。</param>
      <param name="ofs">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val">要写入的值。</param>
      <exception cref="T:System.AccessViolationException">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary>释放 BSTR 指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s">要释放的 <see langword="BSTR" /> 的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary>释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s">要释放的非托管字符串的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary>释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s">要释放的非托管字符串的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <summary>释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)" /> 方法分配的。</summary>
      <param name="s">要释放的非托管字符串的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary>释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s">要释放的非托管字符串的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary>释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s">要释放的非托管字符串的地址。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>指示如何在托管代码与非托管代码之间封送数据。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>指定非托管 <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" /> 的元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary>指定 COM 使用的非托管 <see langword="iid_is" /> 特性的参数索引。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>向自定义封送处理程序提供附加信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>指定自定义封送处理程序的完全限定名。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>将 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 作为类型实现。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary>指示 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> 的元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary>指示用户定义的 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> 元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>指示固定长度数组中的元素数，或要导入的字符串中的字符（不是字节）数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>指示从零开始的参数，该参数包含数组元素的计数，与 COM 中的 <see langword="size_is" /> 类似。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 类的新实例。</summary>
      <param name="unmanagedType">数据将作为该值封送的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 类的新实例。</summary>
      <param name="unmanagedType">数据将作为该值封送的值。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值，数据将被作为该值封送。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值，数据将被作为该值封送。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>当封送拆收器遇到它不支持的 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 时由该封送拆收器引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary>使用默认属性初始化 <see langword="MarshalDirectiveException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从序列化数据初始化 <see langword="MarshalDirectiveException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see langword="MarshalDirectiveException" /> 类的新实例。</summary>
      <param name="message">指定异常原因的错误信息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary>提供用于管理本机库的 API。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary>使用给定的 OS 句柄释放已加载的库，或在输入句柄为 <see cref="F:System.IntPtr.Zero" /> 时不执行任何操作。</summary>
      <param name="handle">要释放的本机库 OS 句柄。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary>获取导出的符号的地址。</summary>
      <param name="handle">本机库 OS 句柄。</param>
      <param name="name">导出的符号的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> 或 <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.EntryPointNotFoundException">未找到符号。</exception>
      <returns>符号的地址。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary>提供一个简单 API，用于加载包装 OS 加载程序并使用模式标志的本机库。</summary>
      <param name="libraryPath">要加载的本机库的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.DllNotFoundException">找不到库。</exception>
      <exception cref="T:System.BadImageFormatException">库无效。</exception>
      <returns>已加载的本机库的 OS 句柄。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary>提供用于加载本机库的高级 API。</summary>
      <param name="libraryName">要加载的本机库的名称。</param>
      <param name="assembly">用于加载本机库的程序集。</param>
      <param name="searchPath">搜索路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryName" /> 或 <paramref name="assembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> 不是 <see langword="RuntimeAssembly" />。</exception>
      <exception cref="T:System.DllNotFoundException">找不到库。</exception>
      <exception cref="T:System.BadImageFormatException">库无效。</exception>
      <returns>已加载的库的 OS 句柄。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary>设置回调，用于解析从程序集进行的本机库导入。</summary>
      <param name="assembly">已为其注册解析程序的程序集。</param>
      <param name="resolver">要注册的解析程序回调。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 或 <paramref name="resolver" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">已为此程序集设置解析程序。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary>获取导出的符号的地址，并返回一个指示方法调用是否成功的值。</summary>
      <param name="handle">本机库 OS 句柄。</param>
      <param name="name">导出的符号的名称。</param>
      <param name="address">当方法返回时，包含符号地址（如果存在）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> 或 <paramref name="name" /> 为 <see langword="null" />。</exception>
      <returns>如果方法成功返回，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary>提供一个简单 API，用于加载本机库并返回一个指示操作是否成功的值。</summary>
      <param name="libraryPath">要加载的本机库的名称。</param>
      <param name="handle">当方法返回时，已加载的本机库的 OS 句柄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> 为 <see langword="null" />。</exception>
      <returns>如果已成功加载本机库，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary>提供一个高级 API，用于加载本机库并返回一个指示操作是否成功的值。</summary>
      <param name="libraryName">要加载的本机库的名称。</param>
      <param name="assembly">用于加载本机库的程序集。</param>
      <param name="searchPath">搜索路径。</param>
      <param name="handle">当方法返回时，已加载的本机库的 OS 句柄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> 或 <paramref name="assembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> 不是 <see langword="RuntimeAssembly" />。</exception>
      <returns>如果加载操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>指示参数是可选的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>使用默认值初始化 <see langword="OptionalAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>指示应取消在 COM 互操作调用期间发生的 HRESULT 或 <see langword="retval" /> 签名转换。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary>指示该特性化的程序集是主互操作程序集。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary>使用类型库（此程序集是该类型库的主互操作程序集）的主版本号及次版本号初始化 <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> 类的新实例。</summary>
      <param name="major">程序集是其主互操作程序集的类型库的主版本号。</param>
      <param name="minor">程序集是其主互操作程序集的类型库的次版本号。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary>获取程序集是其主互操作程序集的类型库的主版本号。</summary>
      <returns>程序集是其主 Interop 程序集的类型库的主要版本号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary>获取程序集是其主互操作程序集的类型库的次版本号。</summary>
      <returns>程序集是其主 Interop 程序集的类型库的次要版本号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary>允许用户指定类的 ProgID。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary>用指定的 ProgID 初始化 <see langword="ProgIdAttribute" /> 的新实例。</summary>
      <param name="progId">要分配给类的 ProgID。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary>获取类的 ProgID。</summary>
      <returns>类的 ProgID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary>提供一个返回有关公共语言运行时环境的信息的 <see langword="static" /> 方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary>测试是否将指定的程序集加载到全局程序集缓存中。</summary>
      <param name="a">要测试的程序集。</param>
      <returns>如果程序集已加载到全局程序集缓存中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary>返回公共语言运行时的安装目录。</summary>
      <returns>包含语言运行时安装目录的路径的字符串。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary>返回指定类上的指定接口。</summary>
      <param name="clsid">所需类的标识符。</param>
      <param name="riid">所需接口的标识符。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">IUnknown::QueryInterface 失败。</exception>
      <returns>指向所请求接口的非托管指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary>返回通过指向其 <see langword="IUnknown" /> 接口的指针表示 COM 对象的类型实例。</summary>
      <param name="clsid">所需类的标识符。</param>
      <param name="riid">所需接口的标识符。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">IUnknown::QueryInterface 失败。</exception>
      <returns>一个对象，表示指定的非托管 COM 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary>获取正在运行当前进程的公共语言运行时的版本号。</summary>
      <returns>包含公共语言运行时的版本号的字符串。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary>获取系统配置文件的路径。</summary>
      <returns>系统配置文件的路径。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary>传入的 <see langword="SAFEARRAY" /> 的设置级别与托管签名中指定的设置级别不匹配时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary>使用默认值初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从序列化数据初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see langword="SafeArrayRankMismatchException" /> 类的新实例。</summary>
      <param name="message">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary>传入的 <see langword="SAFEARRAY" /> 的类型与托管签名中指定的类型不匹配时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary>使用默认值初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从序列化数据初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="message">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>表示结构化异常处理 (SEH) 错误。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从序列化数据初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。</summary>
      <param name="message">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary>指示是否可以从异常中恢复，以及代码是否可以从引发异常的地方继续。</summary>
      <returns>始终为 <see langword="false" />，因为未实现可恢复的异常。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary>用标准 OLE STA 封送拆收器替换标准公共语言运行时 (CLR) 自由线程封送拆收器。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary>为类型等效提供支持。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary>创建 <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary>用指定的范围和标识符创建 <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 类的新实例。</summary>
      <param name="scope">第一个类型等效性字符串。</param>
      <param name="identifier">第二个类型等效性字符串。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary>获取传递给 <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 构造函数的 <paramref name="identifier" /> 参数的值。</summary>
      <returns>构造函数的 <paramref name="identifier" /> 参数的值。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary>获取传递给 <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 构造函数的 <paramref name="scope" /> 参数的值。</summary>
      <returns>构造函数的 <paramref name="scope" /> 参数的值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary>包含最初从 COM 类型库为此方法导入的 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值初始化 <see langword="TypeLibFuncAttribute" /> 类的新实例。</summary>
      <param name="flags">该特性化方法的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值，是在从中导入的类型库中找到的。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值初始化 <see langword="TypeLibFuncAttribute" /> 类的新实例。</summary>
      <param name="flags">该特性化方法的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值，是在从中导入的类型库中找到的。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary>获取该方法的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值。</summary>
      <returns>该方法的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary>描述从中导入该方法的 COM 类型库中 <see langword="FUNCFLAGS" /> 的原始设置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary>支持数据绑定的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary>最佳表示此对象的函数。 类型信息中只有一个函数可以具有此特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary>允许进行这样的优化，在该优化中，编译器查找“abc”类型上的名为“xyz”的成员。 如果找到这样的成员，而且该成员标志为默认集合的某元素的访问函数，则生成对该成员函数的调用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary>作为可绑定函数显示给用户的函数。 还必须设置 <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary>不应将此函数显示给用户，尽管它存在并且为可绑定函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary>该函数作为单独的可绑定属性进行映射。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary>该属性出现在对象浏览器而非属性浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary>将该接口标记为具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary>设置后，任何对设置此属性的方法的调用都首先导致对 <see langword="IPropertyNotifySink::OnRequestEdit" /> 的调用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary>此标志适用于系统级函数或类型浏览器不应显示的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary>该函数返回一个对象，此对象为事件的源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary>类型信息成员是在用户界面中显示的默认成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary>该函数支持 <see langword="GetLastError" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary>指定哪个 <see cref="T:System.Type" /> 独占使用接口。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" /> 类的新实例，指定独占使用接口的 <see cref="T:System.Type" />。</summary>
      <param name="importClass">独占使用接口的 <see cref="T:System.Type" /> 对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary>获取独占使用接口的 <see cref="T:System.Type" /> 对象的名称。</summary>
      <returns>独占使用接口的 <see cref="T:System.Type" /> 对象的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary>包含最初为此类型从 COM 类型库导入的 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值初始化 <see langword="TypeLibTypeAttribute" /> 类的新实例。</summary>
      <param name="flags">特性化类型的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值，是在此值从中导入的类型库中找到的。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值初始化 <see langword="TypeLibTypeAttribute" /> 类的新实例。</summary>
      <param name="flags">特性化类型的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值，是在此值从中导入的类型库中找到的。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary>获取此类型的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值。</summary>
      <returns>此类型的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary>描述从中导入该类型的 COM 类型库中 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 的原始设置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary>该类支持聚合。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary>描述 <see langword="Application" /> 对象的类型说明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary>可由 <see langword="ITypeInfo::CreateInstance" /> 创建该类型的实例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary>该类型是派生其他类型的控件，并且不应显示给用户。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary>指示该接口直接或间接从 <see langword="IDispatch" /> 派生。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary>该接口提供 <see langword="IDispatch" /> 和 V 表绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary>该类型不应显示在浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary>该类型已授权。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary>该接口在运行时无法添加成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary>该接口中使用的类型与自动化（包括 vtable 绑定支持）完全兼容。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary>该类型是预定义的。 该客户端应用程序应自动创建具有此属性的对象的单个实例。 指向该对象的变量名称与该对象的类名相同。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary>该对象支持 <see langword="IConnectionPointWithDefault" />，并且具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary>此标志适用于系统级类型或类型浏览器不应显示的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary>指示检查子接口前应先检查基接口的名称解析。 这与默认行为相反。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary>包含最初为此字段从 COM 类型库导入的 <see cref="T:System.Runtime.InteropServices.VARFLAGS" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值初始化 <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> 类的新实例。</summary>
      <param name="flags">特性化字段的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值，是在此值从中导入的类型库中找到的。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值初始化 <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> 类的新实例。</summary>
      <param name="flags">特性化字段的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值，是在此值从中导入的类型库中找到的。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary>获取此字段的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值。</summary>
      <returns>此字段的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary>描述从中导入该变量的 COM 类型库中 <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> 的原始设置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary>该变量支持数据绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary>该变量是最佳地表示此对象的唯一属性。 类型信息中仅有一个变量可具有此值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary>允许进行这样的优化，在该优化中，编译器查找“abc”类型上的名为“xyz”的成员。 如果找到这样的成员，而且该成员标志为默认集合的某元素的访问函数，则生成对该成员函数的调用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary>该变量显示为可绑定变量。 还必须设置 <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary>该变量不应显示在浏览器中，尽管它存在并且是可绑定的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary>该变量作为单独的可绑定属性映射。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary>该变量出现在对象浏览器而非属性浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary>不应允许给该变量赋值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary>将该接口标记为具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary>指示该属性支持 COM <see langword="OnRequestEdit" /> 通知。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary>此标志适用于系统级函数或类型浏览器不应显示的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary>该变量返回一个对象，该对象为事件的源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary>用户界面中的默认显示。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary>指定已导出类型库的版本号。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary>使用类型库的主版本号和次版本号初始化 <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> 类的新实例。</summary>
      <param name="major">类型库的主版本号。</param>
      <param name="minor">类型库的次版本号。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary>获取类型库的主版本号。</summary>
      <returns>类型库的主版本号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary>获取类型库的次版本号。</summary>
      <returns>类型库的次版本号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary>对封送处理程序应该将其作为 <see langword="VT_UNKNOWN" /> 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary>使用要被包装的对象初始化 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> 类的新实例。</summary>
      <param name="obj">被包装的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary>获取此包装包含的对象。</summary>
      <returns>被包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
      <summary>标记有 <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> 的任何方法均可从本机代码中直接调用。 可以使用 C# 的 address-of  运算符将函数令牌加载到局部变量，并作为回叫传递给本机方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
      <summary>可选。 如果省略，则运行时将使用默认平台调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
      <summary>可选。 如果省略，编译过程中便不会发出任何已命名导出。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.#ctor">
      <summary>初始化一个新 <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> 实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary>控制作为非托管函数指针传递到非托管代码（或从非托管代码中传递）的委托签名的封送处理行为。 此类不能被继承。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary>将 Unicode 字符转换为 ANSI 字符时，启用或禁用最佳映射行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary>指示如何向方法封送字符串参数，并控制名称重整。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary>指示被调用方在从属性化方法返回之前是否调用 <see langword="SetLastError" /> Windows API 函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary>启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary>使用指定的调用约定初始化 <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> 类的新实例。</summary>
      <param name="callingConvention">指定的调用约定。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary>获取调用约定的值。</summary>
      <returns>
        <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> 构造函数指定的调用约定的值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>指定如何将参数或字段封送到非托管代码。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>ANSI 字符串是一个带有长度前缀的单字节字符串。 可以在 <see cref="T:System.String" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>一个动态类型，将在运行时确定对象的类型，并将该对象作为所确定的类型进行封送处理。 该成员仅对平台调用方法有效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>4 字节布尔值 (<see langword="true" /> != 0, <see langword="false" /> = 0)。 这是 Win32 BOOL 类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>长度前缀为双字节的 Unicode 字符串。 可以在 <see cref="T:System.String" /> 数据类型上使用此成员（它是 COM 中的默认字符串）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>当 <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> 属性被设置为 <see langword="ByValArray" /> 时，必须设置 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 字段以指示该数组中的元素数。 当需要区分字符串类型时，<see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> 字段可以选择包含数组元素的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" />。 此 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 只可用于结构中其元素作为字段出现的数组。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>用于在结构中出现的内联定长字符数组。 <see langword="ByValTStr" /> 类型的行为类似于结构中大小固定的字符串 C 样式（例如，<c>char s[5]</c>）。 与 <see langword="ByValTStr" /> 一起使用的字符类型由应用于包含结构的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 属性的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 参数确定。 应始终使用 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 字段来指示数组的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>货币类型。 在 <see cref="T:System.Decimal" /> 上使用，以将十进制数值作为 COM 货币类型而不是 <see langword="Decimal" /> 封送。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>当与 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 或 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" /> 字段一起使用时，指定自定义封送拆收器类。 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> 字段可用于将附加信息传递给自定义封送拆收器。 可以在任何引用类型上使用此成员。 此成员仅在参数和返回值有效。 不能用于字段。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>一个本机类型，此类型与 <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> 关联且将导致参数作为导出类型库中的 HRESULT 导出。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>一个可用作 C 样式函数指针的整数。 可将此成员用于 <see cref="T:System.Delegate" /> 数据类型或从 <see cref="T:System.Delegate" /> 继承的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>Windows 运行时 字符串。 可以在 <see cref="T:System.String" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>1 字节有符号整数。 可使用此成员将布尔值转换为 1 字节、C 样式的 <see langword="bool" /> (<see langword="true" /> = 1, <see langword="false" /> = 0)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>2 字节有符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>4 字节有符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>8 字节有符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>COM <see langword="IDispatch" /> 指针（Microsoft Visual Basic 6.0 中的 <see langword="Object" />）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>Windows 运行时 接口指针。 可以在 <see cref="T:System.Object" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>COM 接口指针。 接口的 <see cref="T:System.Guid" /> 可从类元数据获得。 如果将此成员应用于类，则可以使用该成员指定确切的接口类型或默认的接口类型。 应用于 <see cref="T:System.Object" /> 数据类型时，此成员将产生与 <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> 相同的行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>COM <see langword="IUnknown" /> 指针。 可以在 <see cref="T:System.Object" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>指向 C 样式数组的第一个元素的指针。 当从托管到非托管代码进行封送处理时，该数组的长度由托管数组的长度确定。 从非托管到托管代码进行封送处理时，将根据 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 和 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> 字段确定该数组的长度，当需要区分字符串类型时，还可以后跟数组中元素的非托管类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>单字节、以 null 结尾的 ANSI 字符串。 可以在 <see cref="T:System.String" /> 和 <see cref="T:System.Text.StringBuilder" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>一个指针，它指向用于封送托管格式化类的 C 样式结构。 该成员仅对平台调用方法有效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>与平台相关的字符串：在 Windows 98 上为 ANSI，在 Windows NT 和 Windows XP 上为 Unicode。 该值仅支持平台调用而不支持 COM 互操作，因为不支持导出 <see langword="LPTStr" /> 类型的字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>指向 UTF-8 编码字符串的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>一个 2 字节、以 null 结尾的 Unicode 字符串。 不能将 <see langword="LPWStr" /> 值用于未托管的字符串，除非该字符串使用未托管的 <see langword="CoTaskMemAlloc" /> 函数创建。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>4 字节浮点数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>8 字节浮点数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>
        <see langword="SafeArray" /> 是自我描述的数组，它带有关联数组数据的类型、秩和界限。 可将此成员与 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> 字段一起使用，以替代默认元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>一个用于封送托管格式化类和值类型的 VARIANT。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>与平台相关的有符号整数：在 32 位 Windows 上为 4 个字节，在 64 位 Windows 上为 8 个字节。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>与平台相关的无符号整数：在 32 位 Windows 上为 4 个字节，在 64 位 Windows 上为 8 个字节。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>一个有长度前缀的与平台相关的 <see langword="char" /> 字符串：在 Windows 98 上为 ANSI，在 Windows NT 上为 Unicode。 很少用到这个类似于 BSTR 的成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>1 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>2 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>4 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>8 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>2 字节、OLE 定义的 VARIANT_BOOL 类型 (<see langword="true" /> = -1, <see langword="false" /> = 0)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>一个值，该值使 Visual Basic 能够更改非托管代码中的字符串，并使结果在托管代码中反映出来。 该值仅支持平台调用。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary>指示当数组作为 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> 从托管代码封送到非托管代码时，如何封送该数组的元素。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary>指示 <see langword="SAFEARRAY" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary>指示以长度为前缀的字节。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary>指示 Blob 包含对象。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary>指示一个布尔值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary>指示 BSTR 字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary>指示值为引用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary>指示 C 样式数组。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary>指示剪贴板格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary>指示类 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary>指示货币值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary>指示 DATE 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary>指示 <see langword="decimal" /> 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary>指示 <see langword="IDispatch" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary>指示未指定值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary>指示 SCODE。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary>指示 FILETIME 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary>指示 HRESULT。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary>指示 <see langword="char" /> 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary>指示 <see langword="short" /> 整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary>指示 <see langword="long" /> 整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary>指示 64 位整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary>指示整数值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary>指示一个以 NULL 结尾的字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary>指示由 <see langword="null" /> 终止的宽字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary>指示空值（类似于 SQL 中的空值）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary>指示指针类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary>指示 <see langword="float" /> 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary>指示 <see langword="double" /> 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary>指示用户定义的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary>指示 SAFEARRAY。 在 VARIANT 中无效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary>指示随后是存储的名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary>指示存储包含对象。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary>指示随后是流的名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary>指示流包含对象。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary>指示 <see langword="byte" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary>指示 <see langword="unsigned" /><see langword="short" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary>指示 <see langword="unsigned" /><see langword="long" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary>指示 64 位无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary>指示 <see langword="unsigned" /> 整数值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary>指示 <see langword="IUnknown" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary>指示用户定义的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary>指示 VARIANT<see langword="far" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary>指示简单的已计数数组。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary>指示 C 样式 <see langword="void" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary>将 <see langword="VT_VARIANT | VT_BYREF" /> 类型的数据从托管代码封送到非托管代码。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary>使用指定的 <see cref="T:System.Object" /> 参数初始化 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 类的新实例。</summary>
      <param name="obj">要封送的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary>获取由 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 对象包装的对象。</summary>
      <returns>由 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 对象包装的对象。</returns>
    </member>
    <member name="T:System.Security.SecureString">
      <summary>表示应保密的文本，例如在不再需要时将其从计算机内存中删除。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此实例的值时出错。</exception>
      <exception cref="T:System.NotSupportedException">此平台上不支持此操作。</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary>用 <see cref="T:System.Char" /> 对象的子数组初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。  
  
此构造函数不符合 CLS。 符合 CLS 的替代方法是 <see cref="M:System.Security.SecureString.#ctor" />。</summary>
      <param name="value">指向 <see cref="T:System.Char" /> 对象的数组的指针。</param>
      <param name="length">要包括到新实例中的 <paramref name="value" /> 的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于零或大于 65,536。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此安全字符串的值时出错。</exception>
      <exception cref="T:System.NotSupportedException">此平台上不支持此操作。</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary>在当前安全字符串的末尾追加一个字符。</summary>
      <param name="c">要追加到此安全字符串的字符。</param>
      <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
      <exception cref="T:System.InvalidOperationException">此安全字符串是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">执行此操作将使此安全字符串的长度超过 65,536 个字符。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此安全字符串的值时出错。</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary>删除当前安全字符串的值。</summary>
      <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
      <exception cref="T:System.InvalidOperationException">此安全字符串是只读的。</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary>创建当前安全字符串的副本。</summary>
      <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此安全字符串的值时出错。</exception>
      <returns>此安全字符串的副本。</returns>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary>释放由当前 <see cref="T:System.Security.SecureString" /> 对象使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary>在此安全字符串中的指定索引位置插入一个字符。</summary>
      <param name="index">插入参数 <paramref name="c" /> 的索引位置。</param>
      <param name="c">要插入的字符。</param>
      <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
      <exception cref="T:System.InvalidOperationException">此安全字符串是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零，或大于此安全字符串的长度。  
  
- 或 - 
执行此操作将使此安全字符串的长度超过 65,536 个字符。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此安全字符串的值时出错。</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary>指示此安全字符串是否标记为只读。</summary>
      <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
      <returns>如果此安全字符串标记为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary>将此安全字符串的文本值设置为只读。</summary>
      <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary>从此安全字符串中的指定索引位置移除字符。</summary>
      <param name="index">此安全字符串中的字符的索引位置。</param>
      <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
      <exception cref="T:System.InvalidOperationException">此安全字符串是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零，或者大于或等于此安全字符串的长度。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此安全字符串的值时出错。</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary>将指定索引位置上的现有字符替换为其他字符。</summary>
      <param name="index">此安全字符串中的某个现有字符的索引位置。</param>
      <param name="c">替换现有字符的字符。</param>
      <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
      <exception cref="T:System.InvalidOperationException">此安全字符串是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零，或者大于或等于此安全字符串的长度。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">保护或取消保护此安全字符串的值时出错。</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary>获取当前安全字符串中的字符数。</summary>
      <exception cref="T:System.ObjectDisposedException">已处置此安全字符串。</exception>
      <returns>此安全字符串中 <see cref="T:System.Char" /> 对象的数目。</returns>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary>提供用于分配非托管内存和复制非托管内存块的方法的集合。</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <returns>非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <returns>非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>将托管 <see cref="T:System.Security.SecureString" /> 的内容复制到非托管内存，并在复制时转换为 ANSI 格式。</summary>
      <param name="s">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <returns>非托管内存中将 <paramref name="s" /> 参数复制到的地址，或者，如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到非托管内存中。</summary>
      <param name="s">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">没有足够的可用内存。</exception>
      <returns>非托管内存中复制 <paramref name="s" /> 的地址，如果 <paramref name="s" /> 是长度为 0 的 <see cref="T:System.Security.SecureString" /> 对象，则为 0。</returns>
    </member>
  </members>
</doc>