<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary>表示键/值对的不可变集合。  

 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary>将具有指定键和值的元素添加到字典。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
      <exception cref="T:System.ArgumentException">字典中已存在给定的键，但具有不同的值。</exception>
      <returns>一个新的不可变字典，其中包含其他键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>将指定的键/值对添加到字典中。</summary>
      <param name="pairs">要添加的键/值对。</param>
      <exception cref="T:System.ArgumentException">字典中已存在其中一个给定的键，但具有不同的值。</exception>
      <returns>一个新的不可变字典，其中包含其他键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary>检索排序规则和键/值比较规则与此字典实例相同的空字典。</summary>
      <returns>具有等效排序规则和键/值比较规则的空字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>确定不可变字典是否包含指定的键/值对。</summary>
      <param name="pair">要查找的键/值对。</param>
      <returns>如果在字典中找到指定的键/值对，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary>从不可变字典中移除具有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <returns>已移除指定元素的新不可变字典；如果在字典中找不到指定的键，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>从不可变字典中移除具有指定键的元素。</summary>
      <param name="keys">要移除的元素的键。</param>
      <returns>已移除指定键的新不可变字典；如果在字典中找不到指定的键，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary>在不可变字典中设置指定的键和值，可能的设置方法是覆盖该键的现有值。</summary>
      <param name="key">要添加的条目的键。</param>
      <param name="value">要设置的键值。</param>
      <returns>一个新的不可变字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>在不可变字典中设置指定的键/值对，可能的设置方法是覆盖键的现有值。</summary>
      <param name="items">要在字典中设置的键/值对。 如果字典中已存在任何键，则此方法将覆盖这些键的先前值。</param>
      <returns>一个新的不可变字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>确定此字典是否包含指定的键。</summary>
      <param name="equalKey">要搜索的键。</param>
      <param name="actualKey">如果已在字典中找到匹配键，则为该匹配键；如果找不到任何匹配键，则为 <c>equalkey</c>。</param>
      <returns>如果找到了 <paramref name="equalKey" /> 的匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary>表示无法修改的元素的列表。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T">列表中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary>生成列表的副本，并将指定的对象添加到所复制列表的末尾。</summary>
      <param name="value">要添加到列表中的对象。</param>
      <returns>已添加对象的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>生成列表的副本，并将指定的对象添加到所复制列表的末尾。</summary>
      <param name="items">要添加到列表中的对象。</param>
      <returns>已添加元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary>创建一个已移除所有项，但排序和顺序语义与此列表相同的列表。</summary>
      <returns>排序和顺序语义与此实例相同的空列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>搜索指定对象并返回 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始索引。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中定位的对象。 对于引用类型，此值可以为 null。</param>
      <param name="index">搜索从零开始的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="equalityComparer">用于查找 <paramref name="item" /> 的相等性比较器。</param>
      <returns>如果在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中从 <paramref name="index" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary>将指定元素插入到不可变列表中的指定索引位置。</summary>
      <param name="index">从零开始的索引，值将插入到此处。</param>
      <param name="element">要插入的对象。</param>
      <returns>包含指定元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>将指定元素插入到不可变列表中的指定索引位置。</summary>
      <param name="index">应在此处插入新元素的从零开始的索引。</param>
      <param name="items">要插入的元素。</param>
      <returns>包含指定元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>搜索指定对象并返回 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始索引。</summary>
      <param name="item">要在列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="index">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="equalityComparer">用于匹配 <paramref name="item" /> 的相等性比较器。</param>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>从此不可变列表中移除指定对象的第一个匹配项。</summary>
      <param name="value">要从列表中移除的对象。</param>
      <param name="equalityComparer">用于查找 <paramref name="value" /> 的相等性比较器。</param>
      <returns>删除了指定对象的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <param name="match">用于定义要移除的元素应满足的条件的委托。</param>
      <returns>已移除元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary>移除不可变列表中指定索引处的元素。</summary>
      <param name="index">要移除的元素的索引。</param>
      <returns>已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>从列表中移除指定的对象。</summary>
      <param name="items">要从列表中移除的对象。</param>
      <param name="equalityComparer">用于确定 <paramref name="items" /> 是否与列表中的任何对象相匹配的相等性比较器。</param>
      <returns>如果 <paramref name="items" /> 与列表中的对象匹配，则返回已移除指定对象的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中移除一系列元素。</summary>
      <param name="index">要移除的元素范围的从零开始的起始索引。</param>
      <param name="count">要移除的元素数。</param>
      <returns>已移除元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>返回一个新列表，其中的第一个匹配元素已被替换为指定的元素。</summary>
      <param name="oldValue">要替换的元素。</param>
      <param name="newValue">用于替换 <paramref name="oldValue" /> 第一个匹配项的元素</param>
      <param name="equalityComparer">用于匹配 <paramref name="oldValue" /> 的相等性比较器。</param>
      <exception cref="T:System.ArgumentException">列表中不存在 <paramref name="oldValue" />。</exception>
      <returns>一个新列表，即使 <paramref name="oldvalue" /> 与 <paramref name="newValue" /> 相同，该列表也包含 <paramref name="newValue" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary>将列表中位于给定位置的元素替换为指定的元素。</summary>
      <param name="index">要替换的元素在列表中的位置。</param>
      <param name="value">用于替换旧元素的元素。</param>
      <returns>一个新列表，即使位于指定位置的元素与新元素相同，该列表也包含新元素。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary>表示对象的不可变先进先出集合。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T">队列中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary>返回已移除所有元素的新队列。</summary>
      <returns>空的不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary>移除不可变队列中的第一个元素，并返回新队列。</summary>
      <exception cref="T:System.InvalidOperationException">队列为空。</exception>
      <returns>新的不可变队列，其第一个元素已被移除。 此值永不为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary>将元素添加到不可变队列的末尾，并返回新队列。</summary>
      <param name="value">要添加的元素。</param>
      <returns>新的不可变队列，其中已添加指定的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary>返回位于不可变队列开始处的元素但不将其移除。</summary>
      <exception cref="T:System.InvalidOperationException">队列为空。</exception>
      <returns>位于队列开始处的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary>获取一个值，该值指示此不可变队列是否为空。</summary>
      <returns>如果此队列为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary>表示一个只能通过创建集的新实例进行修改的元素集。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T">集内存储的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary>将指定的元素添加到此不可变集。</summary>
      <param name="value">要添加的元素。</param>
      <returns>已添加元素的新集，或者此集（如果该元素已在此集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary>检索排序和顺序语义与此实例相同的空不可变集。</summary>
      <returns>排序和顺序语义与此实例相同的空集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary>确定此不可变集是否包含指定的元素。</summary>
      <param name="value">要在集内定位的元素。</param>
      <returns>如果该集包含指定值，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前不可变集内移除指定集合中的元素。</summary>
      <param name="other">要从此集内移除的项的集合。</param>
      <returns>已移除项的新集；如果原始集不包含任何项，则为原始集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个不可变集，其中只包含存在于此集和指定集内的元素。</summary>
      <param name="other">要与当前 <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> 进行比较的集合。</param>
      <returns>一个新的不可变集，其中包含同时存在于两个集内的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变集是否为指定集合的真（严格）子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是指定集合的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变集是否为指定集合的真（严格）超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是指定集合的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变集是否为指定集合的子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是指定集合的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变集是否为指定集合的超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是指定集合的超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变集是否与指定的集合重叠。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集与指定的集合至少共享一个通用元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary>从此不可变集内移除指定的元素。</summary>
      <param name="value">要移除的元素。</param>
      <returns>已移除指定元素的新集，或者当前集（如果在该集内找不到该元素）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变集与指定的集合是否包含相同的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果集相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个不可变集，该集仅包含存在于当前集或指定集合（但不同时存在于两者中）中的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>一个新集，该集包含仅存在于当前集或指定集合中（但不同时存在于两者中）的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary>确定集是否包含指定的值。</summary>
      <param name="equalValue">要搜索的值。</param>
      <param name="actualValue">集内的匹配值（如果已找到）；如果未找到匹配项，则为 <c>equalvalue</c>。</param>
      <returns>如果找到了匹配值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个新的不可变集，该集包含存在于当前集或指定集合中的所有元素。</summary>
      <param name="other">从中添加元素的集合。</param>
      <returns>已添加项的新不可变集；或者原始集（如果所有项已在该集内）。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary>表示一个不可变后进先出 (LIFO) 集合。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T">堆栈中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary>从不可变堆栈中移除所有对象。</summary>
      <returns>空的不可变堆栈。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary>返回位于不可变堆栈顶部的元素但不将其移除。</summary>
      <exception cref="T:System.InvalidOperationException">堆栈为空。</exception>
      <returns>位于堆栈顶部的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary>移除位于不可变堆栈顶部的元素，并返回新堆栈。</summary>
      <exception cref="T:System.InvalidOperationException">堆栈为空。</exception>
      <returns>新堆栈；永不为 <see langword="null" /></returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary>在不可变堆栈顶部插入一个元素，并返回新堆栈。</summary>
      <param name="value">要推送到堆栈中的元素。</param>
      <returns>新堆栈。</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary>获取一个值，该值指示此不可变堆栈是否为空。</summary>
      <returns>如果此堆栈为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary>提供用于创建不可变数组的方法；这意味着，该数组在创建后不可更改。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary>使用默认比较器在已排序的数组中搜索指定的元素，如果已找到，则返回该元素的从零开始的索引。</summary>
      <param name="array">要搜索的已排序数组。</param>
      <param name="value">要搜索的对象。</param>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不实现 <see cref="T:System.IComparable" />或搜索遇到不实现 <see cref="T:System.IComparable" /> 的元素。</exception>
      <returns>如果找到该项，则为数组中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的按位求补。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>在已排序的不可变数组中搜索指定的元素，如果已找到，则返回该元素的从零开始的索引。</summary>
      <param name="array">要搜索的已排序数组。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的比较器实现，或者为 null，表示使用默认比较器。</param>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，且 <paramref name="value" /> 不实现 <see cref="T:System.IComparable" /> 或搜索遇到不实现 <see cref="T:System.IComparable" /> 的元素。</exception>
      <returns>如果找到该项，则为数组中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的按位求补。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary>在已排序的不可变数组中搜索指定的元素，如果已找到，则返回该元素的从零开始的索引。</summary>
      <param name="array">要搜索的已排序数组。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不实现 <see cref="T:System.IComparable" />或搜索遇到不实现 <see cref="T:System.IComparable" /> 的元素。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。
        
- 或 -

<paramref name="length" /> 小于零。</exception>
      <returns>如果找到该项，则为数组中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的按位求补。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>在已排序的不可变数组中搜索指定的元素，并返回该元素的从零开始的索引。</summary>
      <param name="array">要搜索的已排序数组。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素的相等性时要使用的比较器，或者为 <see langword="null" />，表示使用默认比较器。</param>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，且 <paramref name="value" /> 不实现 <see cref="T:System.IComparable" /> 或搜索遇到不实现 <see cref="T:System.IComparable" /> 的元素。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。
        
- 或 -

<paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 的类型与 <paramref name="array" /> 的元素不兼容。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。

- 或 -

<paramref name="length" /> 小于零。</exception>
      <returns>如果找到该项，则为数组中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的按位求补。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary>创建一个空的不可变数组。</summary>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <returns>空的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary>创建一个包含指定对象的不可变数组。</summary>
      <param name="item">要存储在数组中的对象。</param>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <returns>一个包含指定对象的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary>创建一个包含指定对象的不可变数组。</summary>
      <param name="item1">要存储在数组中的第一个对象。</param>
      <param name="item2">要存储在数组中的第二个对象。</param>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <returns>一个包含指定对象的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary>创建一个包含指定对象的不可变数组。</summary>
      <param name="item1">要存储在数组中的第一个对象。</param>
      <param name="item2">要存储在数组中的第二个对象。</param>
      <param name="item3">要存储在数组中的第三个对象。</param>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <returns>一个包含指定对象的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary>创建一个包含指定对象的不可变数组。</summary>
      <param name="item1">要存储在数组中的第一个对象。</param>
      <param name="item2">要存储在数组中的第二个对象。</param>
      <param name="item3">要存储在数组中的第三个对象。</param>
      <param name="item4">要存储在数组中的第四个对象。</param>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <returns>一个包含指定对象的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary>从指定的对象数组创建一个不可变数组。</summary>
      <param name="items">用于填充该数组的对象的数组。</param>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <returns>包含项数组的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary>从另一个数组创建包含指定对象的不可变数组。</summary>
      <param name="items">对象的源数组。</param>
      <param name="start">要从 <paramref name="items" /> 复制的第一个元素的索引。</param>
      <param name="length">
        <paramref name="items" /> 中要包括在此不可变数组内的元素数。</param>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <returns>一个不可变数组，其中包含源数组中的指定对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary>从另一个不可变数组创建包含指定对象的不可变数组。</summary>
      <param name="items">对象的源数组。</param>
      <param name="start">要从 <paramref name="items" /> 复制的第一个元素的索引。</param>
      <param name="length">
        <paramref name="items" /> 中要包括在此不可变数组内的元素数。</param>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <returns>一个不可变数组，其中包含源数组中的指定对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary>创建无需分配新内存就能转换为 <see cref="T:System.Collections.Immutable.ImmutableArray" /> 的可变数组。</summary>
      <typeparam name="T">生成器中存储的元素的类型。</typeparam>
      <returns>可以有效地转换为不可变数组的、指定类型的可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary>创建无需分配新内存就能转换为 <see cref="T:System.Collections.Immutable.ImmutableArray" /> 的可变数组。</summary>
      <param name="initialCapacity">生成器的初始容量。</param>
      <typeparam name="T">生成器中存储的元素的类型。</typeparam>
      <returns>可以有效地转换为不可变数组的、指定类型的可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>创建一个填充了指定项的新 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />。</summary>
      <param name="items">要添加到数组中的元素。</param>
      <typeparam name="T">数组中存储的元素的类型。</typeparam>
      <returns>一个包含指定项的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 结构的新实例。</summary>
      <param name="items">用于初始化所生成数组的源数组。</param>
      <param name="selector">应用于源数组的每个元素的函数。</param>
      <typeparam name="TSource">存储在源数组中的元素的类型。</typeparam>
      <typeparam name="TResult">要存储在目标数组中的元素的类型。</typeparam>
      <returns>一个包含指定项的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary>初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 结构的新实例。</summary>
      <param name="items">用于初始化所生成数组的源数组。</param>
      <param name="start">源数组中要包括在所生成数组内的第一个元素的索引。</param>
      <param name="length">源数组中要包括在所生成数组内的元素数。</param>
      <param name="selector">应用于源数组中要包括在所生成数组内的每个元素的函数。</param>
      <typeparam name="TSource">存储在源数组中的元素的类型。</typeparam>
      <typeparam name="TResult">要存储在目标数组中的元素的类型。</typeparam>
      <returns>一个包含指定项的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary>初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 结构的新实例。</summary>
      <param name="items">用于初始化所生成数组的源数组。</param>
      <param name="selector">应用于源数组的每个元素的函数。</param>
      <param name="arg">要传递到选择器映射函数的参数。</param>
      <typeparam name="TSource">存储在源数组中的元素的类型。</typeparam>
      <typeparam name="TArg">要传递给选择器映射函数的自变量的类型。</typeparam>
      <typeparam name="TResult">要存储在目标数组中的元素的类型。</typeparam>
      <returns>一个包含指定项的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary>初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 结构的新实例。</summary>
      <param name="items">用于初始化所生成数组的源数组。</param>
      <param name="start">源数组中要包括在所生成数组内的第一个元素的索引。</param>
      <param name="length">源数组中要包括在所生成数组内的元素数。</param>
      <param name="selector">应用于源数组中要包括在所生成数组内的每个元素的函数。</param>
      <param name="arg">要传递到选择器映射函数的参数。</param>
      <typeparam name="TSource">存储在源数组中的元素的类型。</typeparam>
      <typeparam name="TArg">要传递到选择器映射函数的自变量的类型。</typeparam>
      <typeparam name="TResult">要存储在目标数组中的元素的类型。</typeparam>
      <returns>一个包含指定项的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>从指定的集合创建一个不可变数组。</summary>
      <param name="items">要复制到不可变数组的对象集合。</param>
      <typeparam name="TSource">
        <paramref name="items" /> 中包含的元素的类型。</typeparam>
      <returns>一个包含指定对象集合的不可变数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>从生成器数组的当前内容创建不可变数组。</summary>
      <param name="builder">要从中创建不可变数组的生成器。</param>
      <typeparam name="TSource">不可变数组中包含的元素的类型。</typeparam>
      <returns>包含生成器数组的当前内容的不可变数组。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary>表示不可变的数组；这意味着，该数组在创建后不可更改。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T">数组存储的元素的类型。</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary>获取空的不可变数组。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary>返回末尾添加了指定项的原始数组的副本。</summary>
      <param name="item">要添加到数组末尾的项。</param>
      <returns>末尾添加了指定项的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>返回原始数组的副本，该数组的末尾添加了指定项。</summary>
      <param name="items">要添加到数组中的元素。</param>
      <returns>包含所添加元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>返回原始数组的副本，该数组的末尾添加了指定项。</summary>
      <param name="items">要添加到数组中的元素。</param>
      <returns>包含所添加元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary>返回一个新的不可变数组，其中包含此数组的已转换成不同类型的元素。</summary>
      <typeparam name="TOther">要返回的数组元素类型。</typeparam>
      <returns>一个不可变数组，其中包含此数组的已转换成不同类型的元素。 如果转换失败，则返回其 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性将返回 <see langword="true" /> 的数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary>通过此不可变数组创建新的只读内存区域。</summary>
      <returns>此不可变数组的只读内存表示形式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary>通过此不可变数组创建新的只读范围。</summary>
      <returns>此不可变数组的只读范围表示形式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary>通过将基础数组转换为 <typeparamref name="TOther" /> 类型的数组，初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 结构的新实例。</summary>
      <typeparam name="TOther">要返回的数组元素类型。</typeparam>
      <exception cref="T:System.InvalidCastException">当转换非法时引发。</exception>
      <returns>其元素已转换为新类型的不可变数组实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>基于现有实例的内容，初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 结构的新实例，允许协变静态转换，以便高效重用现有数组。</summary>
      <param name="items">用于初始化该数组的数组。 不创建任何副本。</param>
      <typeparam name="TDerived">要返回的数组元素类型。</typeparam>
      <returns>其元素已转换为新类型的不可变数组实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary>返回已移除所有元素的数组。</summary>
      <returns>已移除所有元素的数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary>确定指定的项是否存在于数组中。</summary>
      <param name="item">要搜索的项。</param>
      <returns>如果在数组中找到了指定的项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary>将此数组的内容复制到指定的数组。</summary>
      <param name="destination">要复制到的数组。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary>从指定目标索引处开始，将此数组的内容复制到指定的数组。</summary>
      <param name="destination">要复制到的数组。</param>
      <param name="destinationIndex">
        <paramref name="array" /> 中复制开始处的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>将此数组中的指定项复制到指定数组中的指定起始索引处。</summary>
      <param name="sourceIndex">此数组中复制开始处的索引。</param>
      <param name="destination">要复制到的数组。</param>
      <param name="destinationIndex">
        <paramref name="array" /> 中复制开始处的索引。</param>
      <param name="length">要从此数组中复制的元素数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>指示指定的数组是否等于此数组。</summary>
      <param name="other">一个与此对象进行比较的对象。</param>
      <returns>如果 <paramref name="other" /> 等于此数组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary>确定此数组是否等于指定的对象。</summary>
      <param name="obj">要与此数组进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果此数组等于 <paramref name="obj" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary>返回循环访问数组内容的枚举器。</summary>
      <returns>枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码，适合在哈希算法和类似哈希表的数据结构中使用。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary>搜索指定项的数组。</summary>
      <param name="item">要搜索的项。</param>
      <returns>如果找到该项，则为该项的从零开始的索引位置；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary>搜索指定项的数组。</summary>
      <param name="item">要搜索的项。</param>
      <param name="startIndex">在其处开始搜索的索引。</param>
      <returns>如果找到该项，则为该项的从零开始的索引位置；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>搜索指定项的数组。</summary>
      <param name="item">要搜索的项。</param>
      <param name="startIndex">在其处开始搜索的索引。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>如果找到该项，则为该项的从零开始的索引位置；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>搜索指定项的数组。</summary>
      <param name="item">要搜索的项。</param>
      <param name="startIndex">在其处开始搜索的索引。</param>
      <param name="count">要搜索的元素数。</param>
      <returns>如果找到该项，则为该项的从零开始的索引位置；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>搜索指定项的数组。</summary>
      <param name="item">要搜索的项。</param>
      <param name="startIndex">在其处开始搜索的索引。</param>
      <param name="count">要搜索的元素数。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>如果找到该项，则为该项的从零开始的索引位置；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary>返回一个新数组，指定的值已插入到该数组的指定位置。</summary>
      <param name="index">数组中从 0 开始的索引，新项应插入到该位置。</param>
      <param name="item">要插入到数组开始处的项。</param>
      <returns>一个新数组，项已插入到该数组的指定索引处。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>在指定索引处插入指定的值。</summary>
      <param name="index">插入值的索引位置。</param>
      <param name="items">要插入的元素。</param>
      <returns>一个新的不可变数组，项已插入到该数组的指定索引处。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary>在指定索引处插入指定的值。</summary>
      <param name="index">插入值的索引位置。</param>
      <param name="items">要插入的元素。</param>
      <returns>一个新的不可变数组，项已插入到该数组的指定索引处。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary>获取对位于只读列表中指定 <paramref name="index" /> 处的元素的只读索引。</summary>
      <param name="index">要获取其引用的元素的从零开始的索引。</param>
      <returns>对位于只读列表中指定 <paramref name="index" /> 处的元素的只读索引。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary>搜索指定项的数组；从该数组的末尾处开始。</summary>
      <param name="item">要搜索的项。</param>
      <returns>在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary>搜索指定项的数组；从该数组的末尾处开始。</summary>
      <param name="item">要搜索的项。</param>
      <param name="startIndex">在其处开始搜索的索引。</param>
      <returns>在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>搜索指定项的数组；从该数组的末尾处开始。</summary>
      <param name="item">要搜索的项。</param>
      <param name="startIndex">在其处开始搜索的索引。</param>
      <param name="count">要搜索的元素数。</param>
      <returns>在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>搜索指定项的数组；从该数组的末尾处开始。</summary>
      <param name="item">要搜索的项。</param>
      <param name="startIndex">在其处开始搜索的索引。</param>
      <param name="count">要搜索的元素数。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary>筛选此数组的元素，以仅显示可分配给指定类型的元素。</summary>
      <typeparam name="TResult">筛选序列元素所根据的类型。</typeparam>
      <returns>一个 <see cref="T:System.Collections.IEnumerable" />，其中包含类型为 <paramref name="TResult" /> 的输入序列中的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>返回一个值，该值指示两个数组是否相等。</summary>
      <param name="left">运算符左边的数组。</param>
      <param name="right">运算符右边的数组。</param>
      <returns>如果数组相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>返回一个值，该值指示两个数组是否相等。</summary>
      <param name="left">运算符左边的数组。</param>
      <param name="right">运算符右边的数组。</param>
      <returns>如果数组相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>返回一个值，该值指示两个数组是否不相等。</summary>
      <param name="left">运算符左边的数组。</param>
      <param name="right">运算符右边的数组。</param>
      <returns>如果数组不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>检查两个数组是否不相等。</summary>
      <param name="left">运算符左边的对象。</param>
      <param name="right">运算符右边的对象。</param>
      <returns>如果两个数组不相等，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary>返回一个数组，其中包含已从数组中移除的指定元素的第一个匹配项。 如果未找到匹配项，则返回当前的数组。</summary>
      <param name="item">要移除的项。</param>
      <returns>已移除项的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>返回一个数组，其中包含已从数组中移除的指定元素的第一个匹配项。  
  
 如果未找到匹配项，则返回当前的数组。</summary>
      <param name="item">要移除的项。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>已移除指定项的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary>从数组中移除满足指定条件的所有项。</summary>
      <param name="match">用于定义要移除的元素应满足的条件的委托。</param>
      <returns>一个新数组，其中满足指定条件的项已被移除。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary>返回一个数组，其中位于指定位置的元素已被移除。</summary>
      <param name="index">要从返回的数组中移除的元素的从 0 开始的索引。</param>
      <returns>一个新数组，其中位于指定索引处的项已被移除。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>从此数组中移除指定的项。</summary>
      <param name="items">在此列表中找到匹配项时要移除的项。</param>
      <returns>已移除元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>从此数组中移除指定的项。</summary>
      <param name="items">在此列表中找到匹配项时要移除的项。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>已移除元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>从此列表中移除指定的值。</summary>
      <param name="items">在此列表中找到匹配项时要移除的项。</param>
      <returns>已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>从此列表中移除指定的项。</summary>
      <param name="items">在此列表中找到匹配项时要移除的项。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>已移除元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary>返回一个数组，其中位于指定位置的元素已被移除。</summary>
      <param name="index">要从数组中移除的起始元素的从 0 开始的索引。</param>
      <param name="length">要从数组中移除的元素数。</param>
      <returns>已移除指定元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary>查找数组中与指定值相等的第一个元素，并将该值替换为指定的新值。</summary>
      <param name="oldValue">要在数组中查找并替换的值。</param>
      <param name="newValue">用于替换 <c>oldvalue</c> 的值。</param>
      <exception cref="T:System.ArgumentException">在数组中找不到 <paramref name="oldValue" />。</exception>
      <returns>一个新数组，即使新值和旧值相同，该数组也包含 <paramref name="newValue" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>查找数组中与指定值相等的第一个元素，并将该值替换为指定的新值。</summary>
      <param name="oldValue">要在数组中查找并替换的值。</param>
      <param name="newValue">用于替换 <c>oldvalue</c> 的值。</param>
      <param name="equalityComparer">用于比较值的相等性比较器。</param>
      <exception cref="T:System.ArgumentException">在数组中找不到 <paramref name="oldValue" />。</exception>
      <returns>一个新数组，即使新值和旧值相同，该数组也包含 <paramref name="newValue" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary>使用指定项替换指定索引处的项。</summary>
      <param name="index">要替换的项的索引。</param>
      <param name="item">要添加到列表的项。</param>
      <returns>一个新数组，其指定索引处包含 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary>使用默认比较器对不可变数组中的元素进行排序。</summary>
      <returns>一个新的不可变数组，其中包含已排序的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器对不可变数组中的元素进行排序。</summary>
      <param name="comparer">比较元素时要使用的实现，若要使用默认比较器，则为 <see langword="null" /></param>
      <returns>一个新的不可变数组，其中包含已排序的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary>使用指定的 <see cref="T:System.Comparison`1" />，对整个 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 中的元素进行排序。</summary>
      <param name="comparison">比较元素时要使用的 <see cref="T:System.Comparison`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> 为 null。</exception>
      <returns>已排序的列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器对不可变数组中的指定元素进行排序。</summary>
      <param name="index">要排序的第一个元素的索引。</param>
      <param name="count">要包括在排序中的元素数。</param>
      <param name="comparer">比较元素时要使用的实现，若要使用默认比较器，则为 <see langword="null" /></param>
      <returns>一个新的不可变数组，其中包含已排序的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要添加到数组末尾的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要从数组中移除的对象。</param>
      <returns>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回循环访问数组的枚举器。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 <see langword="true" />。</exception>
      <returns>一个可用于循环访问数组的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要插入项的位置的索引。</param>
      <param name="item">要插入的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从指定的索引开始，将此数组复制到另一个数组。</summary>
      <param name="array">此数组要复制到的数组。</param>
      <param name="index">目标数组中开始复制操作处的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问不可变数组的枚举器。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 <see langword="true" />。</exception>
      <returns>一个循环访问不可变数组的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要添加到数组中的值。</param>
      <exception cref="T:System.NotSupportedException">在所有情况下均引发。</exception>
      <returns>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">在所有情况下均引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要检查的值。</param>
      <returns>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>获取位于指定索引处的值。</summary>
      <param name="value">要返回其索引的值。</param>
      <returns>位于指定索引处的元素的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">指示项插入位置的索引。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.NotSupportedException">在所有情况下均引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要从数组中移除的值。</param>
      <exception cref="T:System.NotSupportedException">在所有情况下均引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>在所有情况下均引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除的项的索引。</param>
      <exception cref="T:System.NotSupportedException">在所有情况下均引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>返回末尾添加了指定项的原始数组的副本。</summary>
      <param name="value">要添加到数组末尾的值。</param>
      <returns>末尾添加了指定项的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>返回原始数组的副本，该数组的末尾添加了指定项。</summary>
      <param name="items">要添加到数组末尾的元素。</param>
      <returns>一个新数组，其末尾已添加了元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>返回已移除所有元素的数组。</summary>
      <returns>已移除所有元素的数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>返回一个新数组，指定的值已插入到该数组的指定位置。</summary>
      <param name="index">数组中从 0 开始的索引，新项应插入到该位置。</param>
      <param name="element">要插入到数组开始处的项。</param>
      <returns>已插入指定值的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>在指定索引处插入指定的值。</summary>
      <param name="index">插入值的索引位置。</param>
      <param name="items">要插入的元素。</param>
      <returns>已插入指定值的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>返回一个数组，其中包含已从数组中移除的指定元素的第一个匹配项；如果未找到匹配项，则返回当前数组。</summary>
      <param name="value">要从数组中移除的值。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>已移除值的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>从数组中移除满足指定条件的所有项。</summary>
      <param name="match">用于定义要移除的元素应满足的条件的委托。</param>
      <returns>一个新数组，其中满足指定条件的项已被移除。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>返回一个数组，其中位于指定位置的元素已被移除。</summary>
      <param name="index">要从返回的数组中移除的元素的从 0 开始的索引。</param>
      <returns>已移除指定项的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>从此数组中移除指定的项。</summary>
      <param name="items">在此列表中找到匹配项时要移除的项。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>已移除元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>返回一个数组，其中位于指定位置的元素已被移除。</summary>
      <param name="index">要从数组中移除的起始元素的从 0 开始的索引。</param>
      <param name="count">要从数组中移除的元素数。</param>
      <returns>已移除指定元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>查找数组中与指定值相等的第一个元素，并将该值替换为指定的新值。</summary>
      <param name="oldValue">要在数组中查找并替换的值。</param>
      <param name="newValue">用于替换 <c>oldvalue</c> 的值。</param>
      <param name="equalityComparer">用于比较值的相等性比较器。</param>
      <exception cref="T:System.ArgumentException">在数组中找不到 <paramref name="oldValue" />。</exception>
      <returns>一个新数组，即使新值和旧值相同，该数组也包含 <paramref name="newValue" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>使用指定项替换指定索引处的项。</summary>
      <param name="index">要替换的项的索引。</param>
      <param name="value">要添加到列表中的值。</param>
      <returns>一个新数组，其指定索引处包含 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>确定当前集合元素在排序顺序中的位置是位于另一个元素之前、之后还是与其位置相同。</summary>
      <param name="other">要与当前实例进行比较的元素。</param>
      <param name="comparer">用于将当前数组的成员与另一个数组的对应成员进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">该数组的长度不同。</exception>
      <returns>一个整数，指示当前元素是位于另一个元素之前、之后还是与其位置相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>确定此数组在结构上是否等于指定的数组。</summary>
      <param name="other">与当前实例进行比较的数组。</param>
      <param name="comparer">一个对象，用于确定当前实例在结构上是否与另一个实例相等。</param>
      <returns>如果两个数组在结构上相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>返回当前实例的哈希代码。</summary>
      <param name="comparer">一个计算当前对象的哈希代码的对象。</param>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary>创建一个其内容与此数组相同，并且可使用标准可变接口在多个操作之间有效转变的不可变数组。</summary>
      <returns>内容与此数组相同的新生成器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary>获取一个值，该值指示此数组是否已声明但未初始化。</summary>
      <returns>如果 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 为 <see langword="null" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary>获取一个值，该值指示此 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 是否为空或未初始化。</summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 为 <see langword="null" /> 或 <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" /> ，则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary>获取一个值，该值指示此 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 是否为空。</summary>
      <returns>如果 <see langword="true" /> 为空，则为 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary>获取位于不可变数组中指定索引处的元素。</summary>
      <param name="index">要获取的元素的索引(索引从零开始)。</param>
      <returns>位于不可变数组中指定索引处的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary>获取数组中的元素数。</summary>
      <returns>数组中的元素数</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary>获取集合中的项数。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 true 时引发。</exception>
      <returns>集合中的项数。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示此实例是否为只读。</summary>
      <returns>如果该实例为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>获取或设置位于只读列表中指定索引处的元素。</summary>
      <param name="index">要获取的元素的索引(索引从零开始)。</param>
      <exception cref="T:System.NotSupportedException">始终从资源库引发。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 true 时引发。</exception>
      <returns>在只读列表中指定索引处的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary>获取集合中的项数。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 true 时引发。</exception>
      <returns>集合中项的数目。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>获取指定索引处的元素。</summary>
      <param name="index">索引。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 true 时引发。</exception>
      <returns>元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary>获取数组的大小。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 true 时引发。</exception>
      <returns>集合中项的数目。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary>请参阅 <see cref="T:System.Collections.ICollection" /> 接口。 始终返回 <see langword="true" />，因为不可变集合是线程安全的。</summary>
      <returns>确定集合是否为线程安全集合的布尔值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary>获取同步根目录。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示此实例是否为固定大小。</summary>
      <returns>
        <see langword="true" /> 如果此实例为固定大小，则为;否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示此实例是否为只读。</summary>
      <returns>如果该实例为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Object" />。</summary>
      <param name="index">索引。</param>
      <exception cref="T:System.NotSupportedException">始终从资源库引发。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 属性返回 true 时引发。</exception>
      <returns>指定索引处的对象。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary>无需分配额外的内存就能转换为 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 实例的可写数组访问器。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary>将指定项添加到数组。</summary>
      <param name="item">要添加到数组中的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary>将指定项添加到数组的末尾。</summary>
      <param name="items">要添加到数组中的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary>将指定项添加到数组的末尾。</summary>
      <param name="items">要添加到数组中的项。</param>
      <param name="length">要从源数组中添加的元素数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>将指定项添加到数组的末尾。</summary>
      <param name="items">要添加到数组中的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary>将指定项添加到数组的末尾。</summary>
      <param name="items">要添加到数组中的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>将指定项添加到数组的末尾。</summary>
      <param name="items">要添加到数组中的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary>将指定项添加到数组的末尾。</summary>
      <param name="items">要添加到数组中的项。</param>
      <param name="length">要从源数组中添加的元素数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary>将派生自当前位于数组中的类型的指定项添加到数组末尾。</summary>
      <param name="items">要添加到数组末尾的项。</param>
      <typeparam name="TDerived">派生自数组中已存在的项类型的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>将派生自当前位于数组中的类型的指定项添加到数组末尾。</summary>
      <param name="items">要添加到数组末尾的项。</param>
      <typeparam name="TDerived">派生自数组中已存在的项类型的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>将派生自当前位于数组中的类型的指定项添加到数组末尾。</summary>
      <param name="items">要添加到数组末尾的项。</param>
      <typeparam name="TDerived">派生自数组中已存在的项类型的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary>从数组中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary>确定数组是否包含特定值。</summary>
      <param name="item">要在数组中查找的对象。</param>
      <returns>如果找到该对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>将当前内容复制到指定的数组。</summary>
      <param name="array">要复制到的数组。</param>
      <param name="index">开始复制操作的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary>获取一个可用于循环访问集合的对象。</summary>
      <returns>一个可用于循环访问集合的对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary>确定数组中特定项的索引。</summary>
      <param name="item">要在数组中查找的项。</param>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary>确定指定项的索引。</summary>
      <param name="item">要在数组中查找的项。</param>
      <param name="startIndex">搜索的起始位置。</param>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>确定指定项的索引。</summary>
      <param name="item">要在数组中查找的项。</param>
      <param name="startIndex">搜索的起始位置。</param>
      <param name="count">要搜索的元素数。</param>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>确定指定项的索引。</summary>
      <param name="item">要在数组中查找的项。</param>
      <param name="startIndex">在其处开始搜索的索引。</param>
      <param name="count">搜索的起始位置。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器</param>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary>在数组中指定索引的位置插入项。</summary>
      <param name="index">从零开始的索引，项将插入到此处。</param>
      <param name="item">要插入到数组中的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary>获取对指定索引处的元素的只读引用。</summary>
      <param name="index">项索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 大于或等于数组计数。</exception>
      <returns>对指定索引处的元素的只读引用。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary>确定此数组中指定项的最后一个匹配项的从 0 开始的索引。</summary>
      <param name="item">要搜索的项。</param>
      <returns>在其中找到了项的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>确定此数组中指定项的最后一个匹配项的从 0 开始的索引。</summary>
      <param name="item">要搜索的项。</param>
      <param name="startIndex">搜索的起始位置。</param>
      <returns>在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>确定此数组中指定项的最后一个匹配项的从 0 开始的索引。</summary>
      <param name="item">要搜索的项。</param>
      <param name="startIndex">搜索的起始位置。</param>
      <param name="count">要搜索的元素数。</param>
      <returns>在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>确定此数组中指定项的最后一个匹配项的从 0 开始的索引。</summary>
      <param name="item">要搜索的项。</param>
      <param name="startIndex">搜索的起始位置。</param>
      <param name="count">要搜索的元素数。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>在其中找到了项的数组的从 0 开始的索引；如果未找到该项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary>将内部数组提取为 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />，并替换为零长度数组。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> 不等于 <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" /> 时。</exception>
      <returns>一个不可变数组，其中包含生成器的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary>移除指定的元素。</summary>
      <param name="element">要移除的项。</param>
      <returns>如果找到并移除了 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary>从数组中移除指定索引位置的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary>将集合中元素的顺序反转。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary>对数组的内容进行排序。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>对数组的内容进行排序。</summary>
      <param name="comparer">用于排序的比较器。 如果比较器是 <see langword="null" />，将使用数组中元素类型的默认比较器。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary>使用指定的 <see cref="T:System.Comparison`1" />，对整个数组中的元素进行排序。</summary>
      <param name="comparison">比较元素时要使用的 <see cref="T:System.Comparison`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>对数组的内容进行排序。</summary>
      <param name="index">排序起始索引。</param>
      <param name="count">要包括在排序中的元素数。</param>
      <param name="comparer">用于排序的比较器。 如果比较器是 <see langword="null" />，将使用数组中元素类型的默认比较器。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回循环访问数组的枚举器。</summary>
      <returns>一个循环访问数组的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问数组的枚举器。</summary>
      <returns>一个循环访问数组的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary>创建一个新数组，其中包含此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 的当前内容。</summary>
      <returns>一个新数组，其中包含此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 的内容。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary>返回一个不可变数组，其中包含此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 的当前内容。</summary>
      <returns>一个不可变数组，其中包含此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 的当前内容。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary>获取或设置内部数组的长度。 设置后，如果内部数组已不是指定长度，则重新分配给定容量。</summary>
      <returns>内部数组的长度。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary>获取或设置数组中的项数。</summary>
      <returns>数组中的项数。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary>获取或设置指定索引处的项。</summary>
      <param name="index">要获取或设置的项的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不在数组内。</exception>
      <returns>指定索引处的项。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary>数组枚举器。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary>推进到数组中的下一个值。</summary>
      <returns>如果数组中存在另一个项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary>获取当前项。</summary>
      <returns>当前项。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary>针对 <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> 类的实例提供一组初始化方法。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>确定指定的不可变字典是否包含指定的键/值对。</summary>
      <param name="map">要搜索的不可变字典。</param>
      <param name="key">要在不可变字典中查找的键。</param>
      <param name="value">找到指定的键时，要在该键中查找的值。</param>
      <typeparam name="TKey">不可变字典中键的类型。</typeparam>
      <typeparam name="TValue">不可变字典中值的类型。</typeparam>
      <returns>如果此映射包含指定的键/值对，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary>创建一个空的不可变字典。</summary>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>空的不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>创建使用指定键比较器的空不可变字典。</summary>
      <param name="keyComparer">用于确定字典中键的相等性的实现。</param>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>空的不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>创建使用指定键和值比较器的空不可变字典。</summary>
      <param name="keyComparer">用于确定字典中键的相等性的实现。</param>
      <param name="valueComparer">用于确定字典中值的相等性的实现。</param>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>空的不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary>创建一个新的不可变字典生成器。</summary>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>新的生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>创建一个新的不可变字典生成器。</summary>
      <param name="keyComparer">键比较器。</param>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>新的生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>创建一个新的不可变字典生成器。</summary>
      <param name="keyComparer">键比较器。</param>
      <param name="valueComparer">值比较器。</param>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>新的生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>创建包含指定项的新不可变字典。</summary>
      <param name="items">在字典不可变之前用于填充该字典的项。</param>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中值的类型。</typeparam>
      <returns>包含指定项的新不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>创建包含指定项并使用指定键比较器的新不可变字典。</summary>
      <param name="keyComparer">用于比较键的相等性的比较器实现。</param>
      <param name="items">在字典不可变之前要添加到该字典中的项。</param>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中值的类型。</typeparam>
      <returns>包含指定项并使用指定比较器的新不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>创建包含指定项并使用指定键比较器的新不可变字典。</summary>
      <param name="keyComparer">用于比较键的相等性的比较器实现。</param>
      <param name="valueComparer">用于比较值的相等性的比较器实现。</param>
      <param name="items">在字典不可变之前要添加到该字典中的项。</param>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中值的类型。</typeparam>
      <returns>包含指定项并使用指定比较器的新不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary>如果字典中存在匹配的键，则获取给定键的值。</summary>
      <param name="dictionary">要从中检索值的字典。</param>
      <param name="key">要搜索的键。</param>
      <typeparam name="TKey">键的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
      <returns>该键的值；如果找不到匹配的键，则为 <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>如果字典中存在匹配的键，则获取给定键的值。</summary>
      <param name="dictionary">要从中检索值的字典。</param>
      <param name="key">要搜索的键。</param>
      <param name="defaultValue">在字典中找不到匹配键时返回的默认值。</param>
      <typeparam name="TKey">键的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
      <returns>该键的值；如果找不到匹配的键，则为 <paramref name="defaultValue" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>通过向源键应用转换函数，从现有元素集合构造一个不可变字典。</summary>
      <param name="source">用于生成不可变字典的源集合。</param>
      <param name="keySelector">用于转换不可变字典键的函数。</param>
      <typeparam name="TSource">源集合中元素的类型。</typeparam>
      <typeparam name="TKey">生成的不可变字典中键的类型。</typeparam>
      <returns>包含 <paramref name="source" /> 中的元素的不可变字典，其键已通过应用 <paramref name="keySelector" /> 进行转换。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>基于对序列进行某种形式的转换来构造一个不可变字典。</summary>
      <param name="source">用于生成不可变字典的源集合。</param>
      <param name="keySelector">用于转换不可变字典键的函数。</param>
      <param name="keyComparer">用于字典的键比较器。</param>
      <typeparam name="TSource">源集合中元素的类型。</typeparam>
      <typeparam name="TKey">生成的不可变字典中键的类型。</typeparam>
      <returns>包含 <paramref name="source" /> 中的元素的不可变字典，其键已通过应用 <paramref name="keySelector" /> 进行转换。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>枚举键/值对的序列，并生成其内容的不可变字典。</summary>
      <param name="source">要枚举的键/值对的序列。</param>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中的值的类型。</typeparam>
      <returns>一个不可变字典，其中包含指定序列中的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>枚举键/值对的序列，并使用指定的键比较器生成其内容的不可变字典。</summary>
      <param name="source">要枚举的键/值对的序列。</param>
      <param name="keyComparer">生成不可变字典时要使用的键比较器。</param>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中的值的类型。</typeparam>
      <returns>一个不可变字典，其中包含指定序列中的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>枚举键/值对的序列，并使用指定的键和值比较器生成其内容的不可变字典。</summary>
      <param name="source">要枚举的键/值对的序列。</param>
      <param name="keyComparer">生成不可变字典时要使用的键比较器。</param>
      <param name="valueComparer">用于不可变字典的值比较器。</param>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中的值的类型。</typeparam>
      <returns>一个不可变字典，其中包含指定序列中的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary>从生成器字典的当前内容创建不可变字典。</summary>
      <param name="builder">要从中创建不可变字典的生成器。</param>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中的值的类型。</typeparam>
      <returns>包含生成器字典中当前内容的不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>枚举并转换序列，然后生成其内容的不可变字典。</summary>
      <param name="source">为生成字典而要枚举的序列。</param>
      <param name="keySelector">用于从每个序列元素生成字典键的函数。</param>
      <param name="elementSelector">用于从每个序列元素生成字典值的函数。</param>
      <typeparam name="TSource">序列中元素的类型。</typeparam>
      <typeparam name="TKey">生成的字典中键的类型。</typeparam>
      <typeparam name="TValue">生成的字典中值的类型。</typeparam>
      <returns>一个不可变字典，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>枚举并转换序列，然后使用指定的键比较器生成其内容的不可变字典。</summary>
      <param name="source">为生成字典而要枚举的序列。</param>
      <param name="keySelector">用于从每个序列元素生成字典键的函数。</param>
      <param name="elementSelector">用于从每个序列元素生成字典值的函数。</param>
      <param name="keyComparer">用于字典的键比较器。</param>
      <typeparam name="TSource">序列中元素的类型。</typeparam>
      <typeparam name="TKey">生成的字典中键的类型。</typeparam>
      <typeparam name="TValue">生成的字典中值的类型。</typeparam>
      <returns>一个不可变字典，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>枚举并转换序列，然后使用指定的键和值比较器生成其内容的不可变字典。</summary>
      <param name="source">为生成字典而要枚举的序列。</param>
      <param name="keySelector">用于从每个序列元素生成字典键的函数。</param>
      <param name="elementSelector">用于从每个序列元素生成字典值的函数。</param>
      <param name="keyComparer">用于字典的键比较器。</param>
      <param name="valueComparer">用于字典的值比较器。</param>
      <typeparam name="TSource">序列中元素的类型。</typeparam>
      <typeparam name="TKey">生成的字典中键的类型。</typeparam>
      <typeparam name="TValue">生成的字典中值的类型。</typeparam>
      <returns>一个不可变字典，其中包含指定序列中的项。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary>表示键和值的不可变未排序集合。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中的值的类型。</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary>获取空的不可变字典。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary>将具有指定键和值的元素添加到不可变字典。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
      <exception cref="T:System.ArgumentException">字典中已存在给定的键，但具有不同的值。</exception>
      <returns>一个新的不可变字典，其中包含其他键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>将指定的键/值对添加到不可变字典。</summary>
      <param name="pairs">要添加的键/值对。</param>
      <exception cref="T:System.ArgumentException">字典中已存在其中一个给定的键，但具有不同的值。</exception>
      <returns>一个新的不可变字典，其中包含其他键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary>检索排序规则和键/值比较规则与此字典实例相同的空不可变字典。</summary>
      <returns>具有等效排序规则和键/值比较规则的空字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>确定此不可变字典是否包含指定的键/值对。</summary>
      <param name="pair">要查找的键/值对。</param>
      <returns>如果在字典中找到指定的键/值对，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary>确定不可变字典是否包含具有指定键的元素。</summary>
      <param name="key">要定位的键。</param>
      <returns>如果不可变字典包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary>确定不可变字典是否包含具有指定值的元素。</summary>
      <param name="value">要查找的值。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns>如果字典包含具有指定值的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary>返回一个循环访问不可变字典的枚举器。</summary>
      <returns>一个可用于循环访问字典的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary>从不可变字典中移除具有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <returns>已移除指定元素的新不可变字典；如果在字典中找不到指定的键，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>从不可变字典中移除具有指定键的元素。</summary>
      <param name="keys">要移除的元素的键。</param>
      <returns>已移除指定键的新不可变字典；如果在字典中找不到指定的键，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary>在不可变字典中设置指定的键和值，可能的设置方法是覆盖该键的现有值。</summary>
      <param name="key">要添加的条目的键。</param>
      <param name="value">要设置的键值。</param>
      <returns>一个新的不可变字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>在不可变字典中设置指定的键/值对，可能的设置方法是覆盖键的现有值。</summary>
      <param name="items">要在字典中设置的键/值对。 如果字典中已存在任何键，则此方法将覆盖这些键的先前值。</param>
      <returns>一个新的不可变字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.Generic.ICollection`1" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。</param>
      <returns>如果从 <see langword="true" /> 中成功移除 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。 如果在原始 <see langword="false" /> 中没有找到 <paramref name="item" />，该方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>将具有所提供键和值的元素添加到不可变字典。</summary>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">用作要添加的元素的值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 中已存在具有相同键的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>从泛型字典中移除具有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
      <returns>如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。  如果在原始泛型字典中未找到 <paramref name="key" />，则此方法也会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的数组索引开始，将字典的元素复制到数组中。</summary>
      <param name="array">作为从字典复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>将具有所提供键和值的元素添加到不可变字典对象。</summary>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">用作要添加的元素的值的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary>清除此实例。</summary>
      <exception cref="T:System.NotSupportedException">字典对象为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定不可变字典对象是否包含具有指定键的元素。</summary>
      <param name="key">要在字典对象中查找的键。</param>
      <returns>如果字典包含具有该键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>返回不可变字典对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns>字典对象的枚举器对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从不可变字典对象中移除具有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的枚举器对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>请参阅 <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 接口</summary>
      <param name="key">要添加的项的键。</param>
      <param name="value">要添加的项的值。</param>
      <returns>一个新的不可变字典，其中包含其他键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>请参阅 <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 接口</summary>
      <param name="pairs">要添加到字典中的键/值对的序列。</param>
      <returns>一个新的不可变字典，其中包含其他键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear">
      <summary>检索排序规则和键/值比较规则与此字典实例相同的空字典。</summary>
      <returns>不可变字典实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <summary>请参阅 <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 接口</summary>
      <param name="key">要删除的项的键。</param>
      <returns>已移除指定元素的新不可变字典；如果在字典中找不到指定的键，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>请参阅 <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 接口</summary>
      <param name="keys">要删除的键的序列。</param>
      <returns>已移除指定键的新不可变字典；如果在字典中找不到指定的键，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <summary>请参阅 <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 接口</summary>
      <param name="key">要添加的项的键。</param>
      <param name="value">要添加的项的值。</param>
      <returns>一个新的不可变字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>将给定的一组键/值对应用于不可变的字典，并替换生成的字典中任何存在冲突的键。</summary>
      <param name="items">要在映射中设置的键/值对。 与现有键冲突的任何键都将替换之前的值。</param>
      <returns>带有已更新的键/值对的不可变字典的副本。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary>创建一个其内容与此字典相同，并且可使用标准可变接口在多个操作之间有效转变的不可变字典。</summary>
      <returns>一个其内容与此字典相同，并且可使用标准可变接口在多个操作之间有效转变的集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>确定此字典是否包含指定的键。</summary>
      <param name="equalKey">要搜索的键。</param>
      <param name="actualKey">如果已在字典中找到匹配键，则为该匹配键；如果找不到任何匹配键，则为 <c>equalkey</c>。</param>
      <returns>如果找到了 <paramref name="equalKey" /> 的匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary>获取与指定键关联的值。</summary>
      <param name="key">将检索其值的键。</param>
      <param name="value">当此方法返回时，如果找到该键，则包含与指定的键相关联的值；否则将包含 <paramref name="value" /> 参数的类型默认值。 此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <returns>如果实现字典的对象包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>获取使用指定键比较器的不可变字典实例。</summary>
      <param name="keyComparer">要使用的键比较器。</param>
      <returns>使用给定比较器的不可变字典实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>获取使用指定键和值比较器的不可变字典实例。</summary>
      <param name="keyComparer">要使用的键比较器。</param>
      <param name="valueComparer">要使用的值比较器。</param>
      <returns>使用给定比较器的不可变字典实例。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary>获取不可变字典中键/值对的数目。</summary>
      <returns>字典中键/值对的数目。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary>获取一个值，该值指示此不可变字典实例是否为空。</summary>
      <returns>如果此实例为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary>获取与指定键关联的 <paramref name="TValue" />。</summary>
      <param name="key">键的类型。</param>
      <returns>与指定的键相关联的值。 如果未找到任何结果，该操作将引发异常。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary>获取不可变字典的键比较器。</summary>
      <returns>键比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary>获取不可变字典中的键。</summary>
      <returns>不可变字典中的键。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>获取或设置具有指定键的 <typeparamref name="TValue" />。</summary>
      <param name="key">键的类型。</param>
      <returns>与关联的类型的对象 <typeparamref name="TValue" /><paramref name="key" /> 。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>获取键。</summary>
      <returns>包含键的集合。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>获取值。</summary>
      <returns>一个包含值的集合。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 对象具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="key">键。</param>
      <returns>存储在指定键下的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary>获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary>获取用于确定值是否相等的值比较器。</summary>
      <returns>用于确定值是否相等的值比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary>获取不可变字典中的值。</summary>
      <returns>不可变字典中的值。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary>表示一个只需少量或者无需内存分配就能转变，并且可以有效生成不可变哈希映射实例或者构建于此类实例之上的哈希映射。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary>将具有指定键和值的元素添加到不可变字典。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">字典中已存在具有相同键的元素。</exception>
      <exception cref="T:System.NotSupportedException">字典为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>将指定项添加到不可变字典。</summary>
      <param name="item">要添加到字典中的对象。</param>
      <exception cref="T:System.NotSupportedException">字典为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>将值序列添加到此集合中。</summary>
      <param name="items">要添加到此集合中的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary>从不可变字典中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">字典为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>确定不可变字典是否包含特定值。</summary>
      <param name="item">要在字典中查找的对象。</param>
      <returns>如果在字典中找到 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary>确定不可变字典是否包含具有指定键的元素。</summary>
      <param name="key">要在字典中查找的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <returns>如果字典包含具有该键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary>确定不可变字典是否包含具有指定值的元素。</summary>
      <param name="value">要在不可变字典中查找的值。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns>如果字典包含具有指定值的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary>返回一个循环访问不可变字典的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>如果字典中存在匹配的键，则获取给定键的值。</summary>
      <param name="key">要搜索的键。</param>
      <returns>该键的值；如果找不到匹配的键，则为 <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>如果字典中存在匹配的键，则获取给定键的值。</summary>
      <param name="key">要搜索的键。</param>
      <param name="defaultValue">在字典中找不到匹配键时返回的默认值。</param>
      <returns>该键的值；如果找不到匹配的键，则为 <paramref name="defaultValue" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary>从不可变字典中移除具有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">字典为只读。</exception>
      <returns>如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。  如果在字典中未找到 <paramref name="key" />，此方法也会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>从不可变字典中移除特定对象的第一个匹配项。</summary>
      <param name="item">要从字典中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">字典为只读。</exception>
      <returns>如果从字典中成功移除了 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在字典中未找到 <paramref name="item" />，此方法也会返回 false。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>从不可变字典中移除其键与指定序列中找到的键相匹配的所有条目。</summary>
      <param name="keys">要从字典中移除的条目的键。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>从指定的数组索引开始，将字典中的元素复制到 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 类型的数组中。</summary>
      <param name="array">作为从字典复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从指定的数组索引开始，将字典中的元素复制到 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 类型的数组中。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 类型的一维数组，它是从字典复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>将具有所提供键和值的元素添加到字典对象。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定字典对象是否包含具有指定键的元素。</summary>
      <param name="key">要定位的键。</param>
      <returns>如果字典包含具有该键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>返回字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <exception cref="T:System.NotImplementedException" />
      <returns>字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从字典中移除具有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的枚举器对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary>基于此实例的内容创建一个不可变字典。</summary>
      <returns>不可变字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>确定此字典是否包含指定的键。</summary>
      <param name="equalKey">要搜索的键。</param>
      <param name="actualKey">如果已在字典中找到匹配键，则为该匹配键；如果找不到任何匹配键，则为 <c>equalkey</c>。</param>
      <returns>如果找到了 <paramref name="equalKey" /> 的匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>返回与指定键关联的值。</summary>
      <param name="key">将检索其值的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则包含与该键关联的值；否则返回 <paramref name="value" /> 参数类型的默认值。 此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <returns>如果实现不可变字典的对象包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary>获取不可变字典中包含的元素数。</summary>
      <returns>不可变字典中包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="key">要获取或设置的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">正在检索该属性，但找不到 <paramref name="key" />。</exception>
      <exception cref="T:System.NotSupportedException">正在设置该属性，但 <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
      <returns>具有指定键的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary>获取或设置键比较器。</summary>
      <returns>键比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary>获取包含不可变字典中的键的集合。</summary>
      <returns>一个集合，其中包含实现不可变字典的对象的键。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>获取一个值，指示集合是否为只读集合。</summary>
      <returns>如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>获取一个包含泛型字典中的键的集合。</summary>
      <returns>一个集合，其中包含实现泛型字典的对象的键。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>获取一个包含泛型字典中的值的集合。</summary>
      <returns>一个集合，其中包含实现泛型字典的对象中的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否同步（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 对象具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="key">键。</param>
      <returns>值存储在指定键下。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary>获取或设置值比较器。</summary>
      <returns>值比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary>获取包含不可变字典值的集合。</summary>
      <returns>一个集合，其中包含实现字典的对象的值。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary>枚举不可变字典的内容，而无需分配任何内存。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary>释放 <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" /> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary>将枚举器推进到不可变字典的下一个元素。</summary>
      <exception cref="T:System.InvalidOperationException">在创建枚举器后修改了字典。</exception>
      <returns>如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到字典的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary>将枚举器设置到其初始位置，该位置位于字典中的第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建枚举器后修改了字典。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>字典中位于枚举器当前位置的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取当前元素。</summary>
      <returns>枚举中的当前元素。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary>针对 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> 类的实例提供一组初始化方法。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary>创建一个空的不可变哈希集。</summary>
      <typeparam name="T">要存储在不可变哈希集内的项的类型。</typeparam>
      <returns>空的不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary>创建包含指定项的新不可变哈希集。</summary>
      <param name="item">用于预先填充哈希集的项。</param>
      <typeparam name="T">不可变哈希集内的项的类型。</typeparam>
      <returns>包含指定项的新不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary>创建包含指定项数组的新不可变哈希集。</summary>
      <param name="items">一个数组，其中包含用于预先填充哈希集的项。</param>
      <typeparam name="T">不可变哈希集内的项的类型。</typeparam>
      <returns>包含指定项的新不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>创建使用指定相等性比较器的空不可变哈希集。</summary>
      <param name="equalityComparer">用于比较集内对象相等性的对象。</param>
      <typeparam name="T">不可变哈希集内的项的类型。</typeparam>
      <returns>空的不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary>创建一个包含指定项并为集类型使用指定相等性比较器的新不可变哈希集。</summary>
      <param name="equalityComparer">用于比较集内对象相等性的对象。</param>
      <param name="item">用于预先填充哈希集的项。</param>
      <typeparam name="T">不可变哈希集内的项的类型。</typeparam>
      <returns>包含指定项的新不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>创建一个包含指定集合中的项并为集类型使用指定相等性比较器的新不可变哈希集。</summary>
      <param name="equalityComparer">用于比较集内对象相等性的对象。</param>
      <param name="items">一个数组，其中包含用于预先填充哈希集的项。</param>
      <typeparam name="T">存储在不可变哈希集内的项的类型。</typeparam>
      <returns>包含指定项的新不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary>创建一个新的不可变哈希集生成器。</summary>
      <typeparam name="T">集合存储的项的类型。</typeparam>
      <returns>不可变哈希集生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>创建一个新的不可变哈希集生成器。</summary>
      <param name="equalityComparer">用于比较集内对象相等性的对象。</param>
      <typeparam name="T">集合存储的项的类型。</typeparam>
      <returns>新的不可变哈希集生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>创建已预先填充了指定项的新不可变哈希集。</summary>
      <param name="items">要添加到哈希集内的项。</param>
      <typeparam name="T">集合存储的项的类型。</typeparam>
      <returns>包含指定项的新不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>创建一个包含指定项并为集类型使用指定相等性比较器的新不可变哈希集。</summary>
      <param name="equalityComparer">用于比较集内对象相等性的对象。</param>
      <param name="items">在应用不可变性之前要添加到集合中的项。</param>
      <typeparam name="T">集合中存储的项的类型。</typeparam>
      <returns>新的不可变哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>枚举序列，并生成其内容的不可变哈希集。</summary>
      <param name="source">要枚举的序列。</param>
      <typeparam name="TSource">序列中元素的类型。</typeparam>
      <returns>一个不可变哈希集，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>枚举序列，生成其内容的不可变哈希集，并为集类型使用指定的相等性比较器。</summary>
      <param name="source">要枚举的序列。</param>
      <param name="equalityComparer">用于比较集内对象相等性的对象。</param>
      <typeparam name="TSource">序列中元素的类型。</typeparam>
      <returns>一个不可变哈希集，该集包含指定序列中的项，并使用指定的相等性比较器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary>从生成器集的当前内容创建不可变哈希集。</summary>
      <param name="builder">要从中创建不可变哈希集的生成器。</param>
      <typeparam name="TSource">哈希集中元素的类型。</typeparam>
      <returns>包含生成器集中的当前内容的不可变哈希集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary>表示不可变未排序哈希集。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T">哈希集中的元素类型。</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary>获取此类型的、使用默认 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 的不可变哈希集。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary>将指定的元素添加到哈希集。</summary>
      <param name="item">要添加到集中的元素。</param>
      <returns>包含添加的值和之前由 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> 对象保存的任何值的哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary>检索排序和顺序语义与此实例相同的空不可变哈希集。</summary>
      <returns>排序和顺序语义与此实例相同的空哈希集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary>确定此不可变哈希集是否包含指定的元素。</summary>
      <param name="item">要在不可变哈希集中查找的对象。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前不可变哈希集内移除指定集合中的元素。</summary>
      <param name="other">要从此集内移除的项的集合。</param>
      <returns>已移除项的新集；如果原始集不包含任何项，则为原始集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个不可变哈希集，其中包含同时存在于此集和指定集内的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>一个新的不可变集，其中包含同时存在于两个集内的所有元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变哈希集是否为指定集合的真（严格）子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是指定集合的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变哈希集是否为指定集合的真（严格）超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是指定集合的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变哈希集是否为指定集合的子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是指定集合的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变哈希集是否为指定集合的超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是指定集合的超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变哈希集是否与指定的集合重叠。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集与指定的集合至少共享一个通用元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary>从此不可变哈希集内移除指定的元素。</summary>
      <param name="item">要移除的元素。</param>
      <returns>已移除指定元素的新集，或者当前集（如果在该集内找不到该元素）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变哈希集与指定的集合是否包含相同的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果集相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个不可变哈希集，该集仅包含存在于当前集或指定集合（但不同时存在于两者中）中的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>一个新集，该集包含仅存在于当前集或指定集合中（但不同时存在于两者中）的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>将某项添加到集内。</summary>
      <param name="item">要添加到集内的对象。</param>
      <exception cref="T:System.NotSupportedException">该集为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>从此集内移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">该集为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>从特定的索引开始，将集的元素复制到一个数组中。</summary>
      <param name="array">一维数组，它是从集内复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>从集内移除特定对象的第一个匹配项。</summary>
      <param name="item">要从集内移除的对象。</param>
      <returns>如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>遍历集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <param name="item">要添加到集合中的元素。</param>
      <returns>如果该元素已添加到集内，则为 <see langword="true" />；如果该元素已在集内，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前集内移除指定集合中的所有元素。</summary>
      <param name="other">要移除的项的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含也存在在指定集合中的元素。</summary>
      <param name="other">要与当前集合进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集包含当前集或指定集合中存在的所有元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的索引开始，将集的元素复制到一个数组中。</summary>
      <param name="array">一维数组，它是从集内复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集的枚举器。</summary>
      <returns>一个可用于循环访问集的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>将指定的元素添加到此不可变集。</summary>
      <param name="item">要添加的元素。</param>
      <returns>已添加元素的新集，或者此集（如果该元素已在此集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>检索排序和顺序语义与此实例相同的空集。</summary>
      <returns>排序或顺序语义与此实例相同的空集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前集内移除指定集合中的元素。</summary>
      <param name="other">要从此集内移除的项的集合。</param>
      <returns>已移除项的新集；如果原始集不包含任何项，则为原始集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个不可变集，其中包含同时存在于此集和指定集内的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>一个新的不可变集，其中包含同时存在于两个集内的所有元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>从此不可变集内移除指定的元素。</summary>
      <param name="item">要移除的元素。</param>
      <returns>已移除指定元素的新集，或者当前集（如果在该集内找不到该元素）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个不可变集，该集仅包含存在于当前集或指定集合（但不同时存在于两者中）中的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>一个新集，该集包含仅存在于当前集或指定集合中（但不同时存在于两者中）的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个新的不可变集，该集包含存在于当前集或指定集合中的所有元素。</summary>
      <param name="other">从中添加元素的集合。</param>
      <returns>已添加项的新不可变集；或者原始集（如果所有项已在该集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary>创建一个其内容与此集相同，并且可使用标准可变接口在多个操作之间有效转变的不可变哈希集。</summary>
      <returns>一个其内容与此集相同，并且可使用标准可变接口在多个操作之间有效转变的集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary>在集内搜索给定的值，并返回所找到的相等值（如果有）。</summary>
      <param name="equalValue">要搜索的值。</param>
      <param name="actualValue">搜索操作在集内找到的值；如果搜索操作未生成任何匹配项，则返回原始值。</param>
      <returns>一个指示搜索是否成功的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个新的不可变哈希集，该集包含存在于当前集或指定集合中的所有元素。</summary>
      <param name="other">从中添加元素的集合。</param>
      <returns>已添加项的新不可变哈希集；或者原始集（如果所有项已在该集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>获取将指定的相等性比较器用于其搜索方法的不可变哈希集实例。</summary>
      <param name="equalityComparer">要使用的相等性比较器。</param>
      <returns>此不可变哈希集的、使用给定比较器的实例。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary>获取不可变哈希集内的元素数。</summary>
      <returns>哈希集内的元素数。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary>获取一个值，该值指示当前不可变哈希集是否为空。</summary>
      <returns>如果此实例为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary>获取用于获得键的哈希代码，以及用于检查不可变哈希集内值的相等性的对象。</summary>
      <returns>用于获取键的哈希代码以及检查相等性的比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>请参阅 <see cref="T:System.Collections.Generic.ICollection`1" /> 接口。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>请参阅 <see cref="T:System.Collections.ICollection" /> 接口。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary>请参阅 <see cref="T:System.Collections.ICollection" />。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary>表示一个只需少量或者无需内存分配就能转变，并且可以有效生成不可变哈希集实例或者构建于此类实例之上的哈希集。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary>将指定项添加到不可变哈希集。</summary>
      <param name="item">要添加的项。</param>
      <returns>如果该项尚不属于集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary>从不可变哈希集内移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">哈希集为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary>确定不可变哈希集是否包含特定值。</summary>
      <param name="item">要在哈希集内查找的对象。</param>
      <returns>如果在哈希集内找到 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前哈希集内移除指定集合中的所有元素。</summary>
      <param name="other">要从集内移除的项的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary>返回一个循环访问不可变哈希集的枚举器。</summary>
      <returns>一个可用于循环访问集的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含也存在在指定集合中的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的真（严格）子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的真（严格）超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否与指定的集合重叠。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集与 <paramref name="other" /> 至少共享一个通用元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary>从不可变哈希集内移除特定对象的第一个匹配项。</summary>
      <param name="item">要从集内移除的对象。</param>
      <exception cref="T:System.NotSupportedException">该集为只读。</exception>
      <returns>如果从集内成功移除了 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在原始集内未找到 <paramref name="item" />，此方法也会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集与指定的集合是否包含相同的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集等于 <paramref name="other" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>将某个项添加到哈希集。</summary>
      <param name="item">要添加到集内的对象。</param>
      <exception cref="T:System.NotSupportedException">该集为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>从特定的数组索引开始，将哈希集的元素复制到一个数组中。</summary>
      <param name="array">作为从哈希集复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary>基于此实例的内容创建一个不可变哈希集。</summary>
      <returns>不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.TryGetValue(`0,`0@)">
      <summary>在集内搜索给定的值，并返回所找到的相等值（如果有）。</summary>
      <param name="equalValue">要搜索的值。</param>
      <param name="actualValue">搜索操作在集内找到的值；如果搜索操作未生成任何匹配项，则返回原始值。</param>
      <returns>一个指示搜索是否成功的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集包含同时存在于当前集和指定集合中的所有元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary>获取不可变哈希集包含的元素数。</summary>
      <returns>不可变哈希集包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary>获取或设置键比较器。</summary>
      <returns>键比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary>枚举不可变哈希集的内容，而无需分配任何内存。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary>释放 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" /> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary>将枚举器推进到不可变哈希集的下一个元素。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后修改了哈希集。</exception>
      <returns>如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到哈希集的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary>将枚举器设置到其初始位置，该位置位于哈希集内的第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后修改了哈希集。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>位于枚举器当前位置的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取当前元素。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary>包含不可变集合的联锁交换机制。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary>从添加值或更新现有条目后从字典中获取该值。</summary>
      <param name="location">当指定的值不在字典中时以原子方式更新的变量或字段。</param>
      <param name="key">要添加或更新的值的键。</param>
      <param name="addValue">以前的值不存在时要使用的值。</param>
      <param name="updateValueFactory">用于接收键和先前值，并返回用于更新字典的新值的函数。</param>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>添加或更新的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>从添加值或更新现有条目后从字典中获取该值。</summary>
      <param name="location">当指定的值不在字典中时以原子方式更新的变量或字段。</param>
      <param name="key">要添加或更新的值的键。</param>
      <param name="addValueFactory">用于接收键，并在以前不存在任何值时返回要添加到字典中的新值的函数。</param>
      <param name="updateValueFactory">用于接收键和先前值，并返回用于更新字典的新值的函数。</param>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>添加或更新的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary>以原子方式将某个元素排到队列的末尾。</summary>
      <param name="location">以原子方式更新的变量或字段。</param>
      <param name="value">要排队的值。</param>
      <typeparam name="T">集合中包含的项的类型</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>从字典中获取指定键的值；如果未找到该键，则向字典中添加新值。</summary>
      <param name="location">当指定的键不在字典中时以原子方式更新的变量或字段。</param>
      <param name="key">要获取或添加的值的键。</param>
      <param name="value">未找到键时要添加到字典中的值。</param>
      <typeparam name="TKey">集合中包含的键的类型。</typeparam>
      <typeparam name="TValue">集合中包含的值的类型。</typeparam>
      <returns>位于指定键处的值；如果该键不存在，则为 <paramref name="valueFactory" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary>从字典中获取指定键的值；如果未找到该键，则向字典中添加新值。</summary>
      <param name="location">当指定的值不在字典中时以原子方式更新的变量或字段。</param>
      <param name="key">要检索或添加的值的键。</param>
      <param name="valueFactory">在未找到键时，为了获取要插入到字典中的值而要执行的函数。 将不会多次调用此委托。</param>
      <typeparam name="TKey">集合中包含的键的类型。</typeparam>
      <typeparam name="TValue">集合中包含的值的类型。</typeparam>
      <returns>位于指定键处的值；如果该键不存在，则为 <paramref name="valueFactory" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary>从字典中获取指定键的值；如果未找到该键，则向字典中添加新值。</summary>
      <param name="location">当指定的值不在字典中时要更新的变量或字段。</param>
      <param name="key">要检索或添加的值的键。</param>
      <param name="valueFactory">在未找到键时，为了获取要插入到字典中的值而要执行的函数。</param>
      <param name="factoryArgument">要传递给值工厂的参数。</param>
      <typeparam name="TKey">集合中包含的键的类型。</typeparam>
      <typeparam name="TValue">集合中包含的值的类型。</typeparam>
      <typeparam name="TArg">提供给值工厂的自变量的类型。</typeparam>
      <returns>位于指定键处的值；如果该键不存在，则为 <paramref name="valueFactory" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary>比较两个不可变数组是否相等，如果相等，则替换其中一个数组。</summary>
      <param name="location">其值将与 <paramref name="comparand" /> 进行比较并且可能被替换的目标。</param>
      <param name="value">比较结果相等时替换目标值的值。</param>
      <param name="comparand">与位于 <paramref name="location" /> 处的值进行比较的值。</param>
      <typeparam name="T">数组存储的元素的类型。</typeparam>
      <returns>
        <paramref name="location" /> 中的原始值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>以原子操作的形式将某个数组设置为指定的数组，并返回对原始数组的引用。</summary>
      <param name="location">要设置为指定值的数组。</param>
      <param name="value">
        <paramref name="location" /> 参数要设置成的值。</param>
      <typeparam name="T">数组存储的元素的类型。</typeparam>
      <returns>
        <paramref name="location" /> 的原始值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>如果某个数组尚未初始化，则将该数组设置为指定的数组。</summary>
      <param name="location">要设置为指定值的数组。</param>
      <param name="value">
        <paramref name="location" /> 参数要设置成的值（如果该参数尚未初始化）。</param>
      <typeparam name="T">数组存储的元素的类型。</typeparam>
      <returns>如果为数组分配了指定的值，则为 <see langword="true" />； 否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary>将新元素推送到堆栈。</summary>
      <param name="location">要更新的堆栈。</param>
      <param name="value">要推送到堆栈的值。</param>
      <typeparam name="T">堆栈中项的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>将指定的键和值添加到字典（如果该键不在字典中）。</summary>
      <param name="location">要使用指定的键和值更新的字典。</param>
      <param name="key">要添加的键（如果字典中尚未定义该键）。</param>
      <param name="value">要相加的值。</param>
      <typeparam name="TKey">集合中包含的键的类型。</typeparam>
      <typeparam name="TValue">集合中包含的值的类型。</typeparam>
      <returns>如果该键不在字典中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary>以原子方式移除和返回位于队列开头处的指定元素（如果队列不为空）。</summary>
      <param name="location">以原子方式更新的变量或字段。</param>
      <param name="value">设置为队列开头位置的值（如果队列不为空）。</param>
      <typeparam name="T">队列中项的类型。</typeparam>
      <returns>如果队列不为空并且已移除头元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary>如果有要移除的元素，则从堆栈顶部移除一个元素。</summary>
      <param name="location">要更新的堆栈。</param>
      <param name="value">如果堆栈不为空，则接收已从堆栈中移除的值。</param>
      <typeparam name="T">堆栈中项的类型。</typeparam>
      <returns>如果从堆栈中移除了一个元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary>移除具有指定键的元素（如果该键存在）。</summary>
      <param name="location">要更新的字典。</param>
      <param name="key">要移除的键。</param>
      <param name="value">如果字典不为空，则接收已移除项的值。</param>
      <typeparam name="TKey">集合中包含的键的类型。</typeparam>
      <typeparam name="TValue">集合中包含的值的类型。</typeparam>
      <returns>如果找到并移除了该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary>如果指定的键已设置为特定值，则将指定的键设置为指定的值。</summary>
      <param name="location">要更新的字典。</param>
      <param name="key">要更新的键。</param>
      <param name="newValue">要设置的新值。</param>
      <param name="comparisonValue">返回 <paramref name="key" /> 的当前值，以便更新能够成功。</param>
      <typeparam name="TKey">集合中包含的键的类型。</typeparam>
      <typeparam name="TValue">集合中包含的值的类型。</typeparam>
      <returns>如果 <paramref name="key" /> 和 <paramref name="comparisonValue" /> 在字典中存在并且比较已更新为 <paramref name="newValue" />，则为 <see langword="true" />； 否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary>通过指定转换函数使用乐观锁定事务语义就地改变值。             可根据需要多次重试转换，以赢取乐观锁定争用。</summary>
      <param name="location">要更改的变量或字段，可通过多个线程进行访问。</param>
      <param name="transformer">可改变值的函数。 此函数应无任何副作用，因为在与其他线程发生争用时，该函数可能运行多次。</param>
      <typeparam name="T">数据类型。</typeparam>
      <returns>如果位置值是通过应用 <paramref name="transformer" /> 函数的结果而更改，则为 <see langword="true" />；如果位置值因上次调用 <paramref name="transformer" /> 返回的现有值而保持不变，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Func{System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0}})">
      <summary>通过指定的转换函数使用开放式锁定事务语义就地改变不可变数组。
可根据需要多次重试转换，以赢取乐观锁定争用。</summary>
      <param name="location">要更改的不可变数组。</param>
      <param name="transformer">从旧的生成新数组的函数。 此函数应为 "副作用"，因为它可能会在与其他线程发生争用时运行多次。</param>
      <typeparam name="T">不可变数组中的数据类型。</typeparam>
      <returns>如果位置值是通过应用 <paramref name="transformer" /> 函数的结果而更改，则为 <see langword="true" />；如果位置值因上次调用 <paramref name="transformer" /> 返回的现有值而保持不变，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary>通过指定转换函数使用乐观锁定事务语义就地改变值。             可根据需要多次重试转换，以赢取乐观锁定争用。</summary>
      <param name="location">要更改的变量或字段，可通过多个线程进行访问。</param>
      <param name="transformer">可改变值的函数。 此函数应无任何副作用，因为在与其他线程发生争用时，该函数可能运行多次。</param>
      <param name="transformerArgument">要传递给 <paramref name="transformer" /> 的参数。</param>
      <typeparam name="T">数据类型。</typeparam>
      <typeparam name="TArg">传递到的参数的类型 <paramref name="transformer" /> 。</typeparam>
      <returns>如果位置值是通过应用 <paramref name="transformer" /> 函数的结果而更改，则为 <see langword="true" />；如果位置值因上次调用 <paramref name="transformer" /> 返回的现有值而保持不变，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(System.Collections.Immutable.ImmutableArray{``0}@,System.Func{System.Collections.Immutable.ImmutableArray{``0},``1,System.Collections.Immutable.ImmutableArray{``0}},``1)">
      <summary>通过指定的转换函数使用开放式锁定事务语义就地改变不可变数组。
可根据需要多次重试转换，以赢取乐观锁定争用。</summary>
      <param name="location">要更改的不可变数组。</param>
      <param name="transformer">从旧的生成新数组的函数。 此函数应为 "副作用"，因为它可能会在与其他线程发生争用时运行多次。</param>
      <param name="transformerArgument">要传递给 <paramref name="transformer" /> 的参数。</param>
      <typeparam name="T">不可变数组中的数据类型。</typeparam>
      <typeparam name="TArg">传递到的参数的类型 <paramref name="transformer" /> 。</typeparam>
      <returns>如果位置值是通过应用 <paramref name="transformer" /> 函数的结果而更改，则为 <see langword="true" />；如果位置值因上次调用 <paramref name="transformer" /> 返回的现有值而保持不变，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary>针对 <see cref="T:System.Collections.Immutable.ImmutableList`1" /> 类的实例提供一组初始化方法。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary>创建一个空的不可变列表。</summary>
      <typeparam name="T">要存储在  中的项的类型。</typeparam>
      <returns>空的不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary>创建包含指定项的新不可变列表。</summary>
      <param name="item">用于预先填充列表的项。</param>
      <typeparam name="T">  中项的类型。</typeparam>
      <returns>一个包含指定项的新  。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary>创建包含指定项数组的新不可变列表。</summary>
      <param name="items">一个数组，其中包含用于预先填充列表的项。</param>
      <typeparam name="T">  中项的类型。</typeparam>
      <returns>包含指定项的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary>创建一个新的不可变列表生成器。</summary>
      <typeparam name="T">集合存储的项的类型。</typeparam>
      <returns>不可变集合生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>创建包含指定项的新不可变列表。</summary>
      <param name="items">要添加到列表中的项。</param>
      <typeparam name="T">  中项的类型。</typeparam>
      <returns>包含指定项的不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>搜索指定的对象，并返回列表中第一个匹配项的从零开始的索引。</summary>
      <param name="list">要搜索的列表。</param>
      <param name="item">要在列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <typeparam name="T">列表中项的类型。</typeparam>
      <returns>如果在列表中从索引到最后一个元素的元素范围内找到项的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>搜索指定的对象，并返回列表中第一个匹配项的从零开始的索引。</summary>
      <param name="list">要搜索的列表。</param>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <typeparam name="T">列表中项的类型。</typeparam>
      <returns>如果在不可变列表中从索引到最后一个元素的元素范围内找到第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>搜索指定对象并返回不可变列表中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引。</summary>
      <param name="list">要搜索的列表。</param>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="startIndex">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <typeparam name="T">列表中项的类型。</typeparam>
      <returns>如果在不可变列表中从索引到最后一个元素的元素范围内找到第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>搜索指定对象并返回不可变列表中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引。</summary>
      <param name="list">要搜索的列表。</param>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="startIndex">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <typeparam name="T">列表中项的类型。</typeparam>
      <returns>如果在不可变列表中从索引到最后一个元素的元素范围内找到第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>搜索指定的对象，并返回整个不可变列表中最后一个匹配项的从零开始的索引。</summary>
      <param name="list">要搜索的列表。</param>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <typeparam name="T">列表中项的类型。</typeparam>
      <returns>如果找到，则为整个不可变列表中项的最后一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>搜索指定的对象，并返回整个不可变列表中最后一个匹配项的从零开始的索引。</summary>
      <param name="list">要搜索的列表。</param>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <typeparam name="T">列表中项的类型。</typeparam>
      <returns>如果找到，则为整个不可变列表中项的最后一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>搜索指定对象并返回不可变列表中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="list">要搜索的列表。</param>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <typeparam name="T">列表中项的类型。</typeparam>
      <returns>如果在不可变列表中从第一个元素到索引的元素范围内找到项的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>搜索指定对象并返回不可变列表中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="list">要搜索的列表。</param>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <typeparam name="T">列表中项的类型。</typeparam>
      <returns>如果在不可变列表中从第一个元素到索引的元素范围内找到项的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>从此列表中移除指定的值。</summary>
      <param name="list">要搜索的列表。</param>
      <param name="value">要移除的值。</param>
      <typeparam name="T">列表中项的类型。</typeparam>
      <returns>已移除元素的新不可变列表，或者此列表（如果该元素不在此列表中）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>从此列表中移除指定的值。</summary>
      <param name="list">要搜索的列表。</param>
      <param name="items">在此列表中找到匹配项时要移除的项。</param>
      <typeparam name="T">列表中项的类型。</typeparam>
      <returns>已移除元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary>将列表中第一个相等的元素替换为指定的元素。</summary>
      <param name="list">要搜索的列表。</param>
      <param name="oldValue">要替换的元素。</param>
      <param name="newValue">用于替换旧元素的元素。</param>
      <typeparam name="T">列表中项的类型。</typeparam>
      <exception cref="T:System.ArgumentException">在列表中不存在旧值时引发。</exception>
      <returns>新列表 - 即使被替换的值等于该位置的新值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>枚举序列，并生成其内容的不可变列表。</summary>
      <param name="source">要枚举的序列。</param>
      <typeparam name="TSource">序列中元素的类型。</typeparam>
      <returns>一个不可变列表，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary>从生成器集合的当前内容创建不可变列表。</summary>
      <param name="builder">要从中创建不可变列表的生成器。</param>
      <typeparam name="TSource">列表中元素的类型。</typeparam>
      <returns>包含生成器集合中的当前内容的不可变列表。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary>表示一个不可变列表，该列表是可按索引访问的对象的强类型列表。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T">列表中元素的类型。</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary>获取使用默认排序比较器的空集。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary>将指定的对象添加到不可变列表末尾。</summary>
      <param name="value">要添加的对象。</param>
      <returns>已添加对象的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>将指定集合的元素添加到不可变列表的末尾。</summary>
      <param name="items">其元素应添加到列表末尾的集合。</param>
      <returns>已添加元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary>使用默认的比较器在整个已排序的列表中搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="item">要定位的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <exception cref="T:System.InvalidOperationException">默认比较器找不到 T 类型的比较器实现。</exception>
      <returns>如果找到项，则为已排序的列表中项的从零开始的索引；否则为一个负数，该负数是大于项的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.ICollection.Count" /> 的按位求补。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器在整个已排序的列表中搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="item">要定位的对象。 对于引用类型，该值可以为 null。</param>
      <param name="comparer">比较元素时要使用的比较器实现，或者为 null，表示使用默认比较器。</param>
      <exception cref="T:System.InvalidOperationException">比较器为 <see langword="null" />，默认比较器找不到 T 类型的比较器实现。</exception>
      <returns>如果找到项，则为已排序的列表中项的从零开始的索引；否则为一个负数，该负数是大于项的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.ICollection.Count" /> 的按位求补。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器在已排序列表的某个元素范围中搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="index">要搜索范围的从零开始的起始索引。</param>
      <param name="count">要搜索的范围的长度。</param>
      <param name="item">要定位的对象。 对于引用类型，该值可以为 null。</param>
      <param name="comparer">比较元素时要使用的比较器实现，或者为 <see langword="null" />，表示使用默认比较器。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">索引小于 0，或 <paramref name="count" />小于 0。</exception>
      <exception cref="T:System.ArgumentException">索引和 <paramref name="count" /> 不表示列表中的有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，默认比较器找不到 T 类型的比较器实现。</exception>
      <returns>如果找到项，则为已排序的列表中项的从零开始的索引；否则为一个负数，该负数是大于项的第一个元素的索引的按位求补。如果没有更大的元素，则为 <paramref name="count" /> 的按位求补。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary>从不可变列表中移除所有元素。</summary>
      <returns>一个空列表，其中保留此实例具有的相同排序或未排序语义。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary>确定此不可变列表是否包含指定的值。</summary>
      <param name="value">要查找的值。</param>
      <returns>如果列表包含指定的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary>将当前不可变列表中的元素转换为另一种类型，并返回包含已转换元素的列表。</summary>
      <param name="converter">一个委托，可将每个元素从一种类型转换为另一种类型。</param>
      <typeparam name="TOutput">目标数组元素的类型。</typeparam>
      <returns>目标类型的列表，包含当前 <see cref="T:System.Collections.Immutable.ImmutableList`1" /> 中转换后的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary>从目标数组的开头开始，将整个不可变列表复制到兼容的一维数组。</summary>
      <param name="array">一维数组，它是从不可变列表复制的元素的目标。 该数组的索引必须从零开始。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary>从目标数组的指定索引处开始，将整个不可变列表复制到兼容的一维数组。</summary>
      <param name="array">一维数组，它是从不可变列表复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>从目标数组的指定索引处开始，将一系列元素从不可变列表复制到兼容的一维数组。</summary>
      <param name="index">源不可变列表中从零开始的索引，在此处开始复制。</param>
      <param name="array">一维数组，它是从不可变列表复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">数组中从零开始的索引，在此处开始复制。</param>
      <param name="count">要复制的元素数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary>确定不可变列表是否包含与指定谓词定义的条件匹配的元素。</summary>
      <param name="match">委托，用于定义要搜索的元素应满足的条件。</param>
      <returns>如果不可变列表包含一个或多个元素与指定谓词定义的条件匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中的第一个匹配元素。</summary>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary>检索与指定谓词定义的条件匹配的所有元素。</summary>
      <param name="match">委托，用于定义要搜索的元素应满足的条件。</param>
      <returns>如果找到一个其中所有元素均与指定谓词定义的条件匹配的 不可变列表，则为该数组；否则为一个空不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的一个元素，并返回不可变列表中从指定的索引开始、包含指定元素个数的元素范围内第一个匹配项的从零开始的索引。</summary>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与 match 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回不可变列表中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。</summary>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与 match 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中第一个匹配元素的从零开始的索引。</summary>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与 match 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中的最后一个匹配元素。</summary>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到，则为与指定谓词所定义的条件相匹配的最后一个元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回不可变列表中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回不可变列表中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中最后一个匹配元素的从零开始的索引。</summary>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary>对不可变列表的每个元素执行指定的操作。</summary>
      <param name="action">要对不可变列表的每个元素执行的委托。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary>返回一个循环访问不可变列表的枚举器。</summary>
      <returns>可用于循环访问不可变列表的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary>在源不可变列表中创建元素范围的浅表复制。</summary>
      <param name="index">范围开始处的从零开始的索引。</param>
      <param name="count">范围中的元素数。</param>
      <returns>在源不可变列表中元素范围的浅表复制。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary>搜索指定的对象，并返回整个不可变列表中第一个匹配项的从零开始的索引。</summary>
      <param name="value">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns>如果找到，则为整个不可变列表中 <paramref name="value" /> 第一个匹配项的从零开始的索引；否则为 ?1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>搜索指定对象并返回列表中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始的索引。</summary>
      <param name="item">要在列表中找到的对象。对于引用类型，该值可以为 null。</param>
      <param name="index">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>如果在列表中从 index 开始并包含 count 个元素的元素范围内找到 item 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary>将指定对象插入到不可变列表中的指定索引位置。</summary>
      <param name="index">从零开始的索引，对象将插入到此处。</param>
      <param name="item">要插入的对象。</param>
      <returns>插入对象后新的不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>将集合的元素插入不可变列表的指定索引处。</summary>
      <param name="index">从零开始的索引，元素将插入到此处。</param>
      <param name="items">应插入其元素的集合。</param>
      <returns>插入元素后新的不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary>获取对给定 <paramref name="index" /> 处的集元素的只读引用。</summary>
      <param name="index">要返回集中的元素从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 为负或不小于 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />。</exception>
      <returns>对给定位置处的元素的只读引用。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>搜索指定对象并返回列表中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="item">要在列表中查找的对象。 对于引用类型，该值可以为 null。</param>
      <param name="index">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>如果找到包含 count 个元素和到 index 为止的索引，则为列表中元素范围内 item 最后一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary>从此不可变列表中移除所指定对象的第一个匹配项。</summary>
      <param name="value">要移除的对象。</param>
      <returns>已移除对象的新列表，或者此列表（如果指定的对象不在此列表中）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>从此不可变列表中移除与指定值匹配的对象的第一个匹配项。</summary>
      <param name="value">要从列表中移除的元素的值。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>已移除对象的新列表，或者此列表（如果指定的对象不在此列表中）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <param name="match">用于定义要移除的元素应满足的条件的委托。</param>
      <returns>已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary>移除指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
      <returns>已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>从此不可变列表中移除一系列元素。</summary>
      <param name="items">在此列表中找到匹配项时应删除其元素的集合。</param>
      <returns>已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>从此列表中移除指定的值。</summary>
      <param name="items">在此列表中找到匹配项时要移除的项。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <returns>已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>从此不可变列表中移除一系列元素，从指定的索引处开始，并包含指定数量的元素。</summary>
      <param name="index">要从其开始移除的起始索引。</param>
      <param name="count">要移除的元素数。</param>
      <returns>已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary>将不可变列表中的指定元素替换为新元素。</summary>
      <param name="oldValue">要替换的元素。</param>
      <param name="newValue">用于替换 <paramref name="oldValue" /> 的元素。</param>
      <exception cref="T:System.ArgumentException">不可变列表中不存在 <paramref name="oldValue" />。</exception>
      <returns>包含被替换元素的新列表，即使该元素等同于旧元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>将不可变列表中的指定元素替换为新元素。</summary>
      <param name="oldValue">列表中要替换的元素。</param>
      <param name="newValue">用于替换 <paramref name="oldValue" /> 的元素。</param>
      <param name="equalityComparer">用于检查相等性的比较器。</param>
      <returns>已替换对象的新列表，或者此列表（如果指定的对象不在此列表中）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary>将整个不可变列表中元素的顺序反转。</summary>
      <returns>反向列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary>将不可变列表的指定范围中元素的顺序反转。</summary>
      <param name="index">要反转的范围的从零开始的起始索引。</param>
      <param name="count">要反转的范围内的元素数。</param>
      <returns>反向列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary>将不可变列表中位于给定位置处的元素替换为指定的元素。</summary>
      <param name="index">要替换的元素在列表中的位置。</param>
      <param name="value">用于替换旧元素的元素。</param>
      <returns>包含被替换元素的新列表，即使该元素等同于位于该位置的旧元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary>使用默认比较器对整个不可变列表中的元素进行排序。</summary>
      <returns>已排序的列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器对整个不可变列表中的元素进行排序。</summary>
      <param name="comparer">比较元素时要使用的实现，或者为 <see langword="null" />，表示使用默认比较器 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)。</param>
      <returns>已排序的列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary>使用指定的比较器对整个不可变列表中的元素进行排序。</summary>
      <param name="comparison">比较元素时要使用的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> 为 <see langword="null" />。</exception>
      <returns>已排序的列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器对不可变列表中的一系列元素进行排序。</summary>
      <param name="index">要排序范围的从零开始的起始索引。</param>
      <param name="count">要排序的范围的长度。</param>
      <param name="comparer">比较元素时要使用的实现，若要使用默认比较器 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)，则为 <see langword="null" />。</param>
      <returns>已排序的列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>将指定项添加到不可变列表。</summary>
      <param name="item">要添加的项。</param>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>从不可变列表中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>从不可变列表中移除特定对象的第一个匹配项。</summary>
      <param name="item">要移除的对象。</param>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
      <returns>如果从列表中成功移除了 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在原始列表中未找到 <paramref name="item" />，该方法也会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问不可变列表的枚举器。</summary>
      <returns>一个可用于循环访问列表的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>将对象插入到不可变列表中的指定索引位置。</summary>
      <param name="index">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item">要插入的对象。</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>移除位于指定索引处的值。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从指定的数组索引处开始，将整个不可变列表复制到兼容的一维目标数组。</summary>
      <param name="array">一维数组，它是从不可变列表复制的元素的目标。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问不可变列表的枚举器。</summary>
      <returns>一个可用于循环访问列表的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary>将项添加到不可变列表。</summary>
      <param name="value">要添加到列表中的对象。</param>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
      <returns>新元素插入到的位置，或者为 -1，表示该项未插入到列表中。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary>从不可变列表中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary>确定不可变列表是否包含特定值。</summary>
      <param name="value">要在列表中查找的对象。</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>如果在列表中找到该对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定不可变列表中特定项的索引。</summary>
      <param name="value">要在列表中查找的对象。</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将项插入到不可变列表中的指定索引处。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到列表中的对象。</param>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary>从不可变列表中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从列表中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除不可变列表中指定索引处的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>将指定的值添加到此不可变列表中。</summary>
      <param name="value">要相加的值。</param>
      <returns>已添加元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>将指定的值添加到此不可变列表中。</summary>
      <param name="items">要添加的值。</param>
      <returns>已添加元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>检索排序和顺序语义与此实例相同的空列表。</summary>
      <returns>排序和顺序语义与此实例相同的空列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>将指定元素插入到不可变列表中的指定索引位置。</summary>
      <param name="index">插入值的索引位置。</param>
      <param name="item">要插入的元素。</param>
      <returns>包含指定元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>将指定元素插入到不可变列表中的指定索引位置。</summary>
      <param name="index">元素要插入到的索引位置。</param>
      <param name="items">要插入的元素。</param>
      <returns>包含指定元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>从列表中移除具有指定值的元素。</summary>
      <param name="value">要从列表中移除的元素的值。</param>
      <param name="equalityComparer">用于比较元素相等性的比较器。</param>
      <returns>一个新的 <see cref="T:System.Collections.Immutable.ImmutableList`1" />，其中已删除指定元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <param name="match">用于定义要移除的元素应满足的条件的委托。</param>
      <returns>已移除元素的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>移除不可变列表中指定索引处的元素。</summary>
      <param name="index">要移除的元素的索引。</param>
      <returns>已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>从此不可变列表中移除与指定项匹配的一系列元素。</summary>
      <param name="items">要从列表中移除的项的范围（如果已找到）。</param>
      <param name="equalityComparer">用于比较元素的相等性比较器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 或 <paramref name="equalityComparer" /> 为 <see langword="null" />。</exception>
      <returns>已移除项的不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>从此列表中的指定位置移除指定数量的元素。</summary>
      <param name="index">要移除的一系列元素的起始索引。</param>
      <param name="count">要移除的元素数。</param>
      <returns>已移除元素的新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>将列表中的某个元素替换为指定的元素。</summary>
      <param name="oldValue">要替换的元素。</param>
      <param name="newValue">用于替换旧元素的元素。</param>
      <param name="equalityComparer">要在搜索中使用的相等性比较器。</param>
      <exception cref="T:System.ArgumentException">在列表中不存在旧值时引发。</exception>
      <returns>新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>将列表中位于给定位置的元素替换为指定的元素。</summary>
      <param name="index">要替换的元素在列表中的位置。</param>
      <param name="value">用于替换旧元素的元素。</param>
      <returns>新列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary>创建一个其内容与此列表相同，并且可使用标准可变接口在多个操作之间有效转变的列表。</summary>
      <returns>内容与此列表相同的所创建列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary>确定不可变列表中的每个元素是否都与指定谓词定义的条件匹配。</summary>
      <param name="match">用于定义检查元素时要对照条件的委托。</param>
      <returns>如果不可变列表中的每个元素都与指定的谓词所定义的条件相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。 如果列表没有元素，则返回值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary>获取列表中包含的元素数。</summary>
      <returns>列表中元素的数目。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary>获取一个值，该值指示此列表是否为空。</summary>
      <returns>如果列表为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary>获取位于列表指定索引处的元素。</summary>
      <param name="index">要检索的元素的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">在 get 操作中，<paramref name="index" /> 为负或不小于 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />。</exception>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>获取或设置指定索引处的值。</summary>
      <param name="index">要访问的项的索引（索引从零开始）。</param>
      <exception cref="T:System.IndexOutOfRangeException">当 <paramref name="index" /> 为负或小于 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> 时，从 Getter 引发。</exception>
      <exception cref="T:System.NotSupportedException">始终从资源库引发。</exception>
      <returns>存储在指定索引中的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary>此类型是不可变的，因此它始终是线程安全的。 请参阅 <see cref="T:System.Collections.ICollection" /> 接口。</summary>
      <returns>确定集合是否为线程安全集合的布尔值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary>请参阅 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Object" />。</summary>
      <param name="index">索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">当 <paramref name="index" /> 为负或小于 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> 时，从 Getter 引发。</exception>
      <exception cref="T:System.NotSupportedException">始终从资源库引发。</exception>
      <returns>位于指定索引处的值。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary>表示一个只需少量或者无需内存分配就能转变，并且可以有效生成不可变列表实例或者构建于此类实例之上的列表。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary>将项添加到不可变列表。</summary>
      <param name="item">要添加到列表的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>将一系列元素添加到此列表的末尾。</summary>
      <param name="items">要添加到列表末尾的元素。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary>使用默认比较器在整个 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中搜索元素，并返回该元素的从零开始的索引。</summary>
      <param name="item">要定位的对象。 对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.InvalidOperationException">此默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 无法找到 <see cref="T:System.IComparable`1" /> 泛型接口或类型 T 的 <see cref="T:System.IComparable" /> 接口的实现。</exception>
      <returns>如果找到项，则为 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的下一个元素的索引的按位求补。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器在整个 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="item">要定位的对象。 对于引用类型，此值可以为 null。</param>
      <param name="comparer">比较元素时要使用的实现，若要使用默认比较器，则为 <see langword="null" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型接口或类型 T 的 <see cref="T:System.IComparable" /> 接口的实现。</exception>
      <returns>如果找到项，则为 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的下一个元素的索引的按位求补。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器在 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 的指定范围内搜索元素，并返回该元素从零开始的索引。</summary>
      <param name="index">要搜索范围的从零开始的起始索引。</param>
      <param name="count">要搜索的范围的长度。</param>
      <param name="item">要定位的对象。 对于引用类型，此值可以为 null。</param>
      <param name="comparer">比较元素时要使用的实现，若要使用默认比较器，则为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
- 或 -

<paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中的有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型接口或类型 T 的 <see cref="T:System.IComparable" /> 接口的实现。</exception>
      <returns>如果找到项，则为 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中项的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的下一个元素的索引的按位求补。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary>从不可变列表中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary>确定不可变列表是否包含特定值。</summary>
      <param name="item">要在列表中查找的对象。</param>
      <returns>如果在列表中找到该项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary>使用转换器函数从此生成器表示的列表创建一个新的不可变列表。</summary>
      <param name="converter">转换器函数。</param>
      <typeparam name="TOutput">委托转换器函数的输出的类型。</typeparam>
      <returns>从此生成器表示的列表创建的新不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary>从目标数组的开头开始，将整个不可变列表复制到兼容的一维数组。</summary>
      <param name="array">一维数组，它是从不可变列表复制的元素的目标。 该数组的索引必须从零开始。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>从目标数组的指定索引处开始，将整个不可变列表复制到兼容的一维数组。</summary>
      <param name="array">一维数组，它是从不可变列表复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">数组中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>从目标数组的指定索引处开始，将整个不可变列表复制到兼容的一维数组。</summary>
      <param name="index">源不可变列表中从零开始的索引，在此处开始复制。</param>
      <param name="array">一维数组，它是从不可变列表复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <param name="count">要复制的元素数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary>确定不可变列表是否包含与指定谓词定义的条件匹配的元素。</summary>
      <param name="match">委托，用于定义要搜索的元素应满足的条件。</param>
      <returns>如果不可变列表包含一个或多个元素与指定谓词定义的条件匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中的第一个匹配元素。</summary>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary>检索与指定谓词定义的条件匹配的所有元素。</summary>
      <param name="match">委托，用于定义要搜索的元素应满足的条件。</param>
      <returns>如果找到一个其中所有元素均与指定谓词定义的条件匹配的不可变列表，则为该数组；否则为一个空不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的一个元素，并返回不可变列表中从指定的索引开始、包含指定元素个数的元素范围内第一个匹配项的从零开始的索引。</summary>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回不可变列表中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。</summary>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中第一个匹配元素的从零开始的索引。</summary>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中的最后一个匹配元素。</summary>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到，则为与指定谓词所定义的条件相匹配的最后一个元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回不可变列表中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回不可变列表中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个不可变列表中最后一个匹配元素的从零开始的索引。</summary>
      <param name="match">委托，用于定义要搜索的元素的条件。</param>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary>对列表的每个元素执行指定操作。</summary>
      <param name="action">要对列表的每个元素执行的委托。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问列表的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary>在源不可变列表中创建元素范围的浅表复制。</summary>
      <param name="index">范围开始处的从零开始的索引。</param>
      <param name="count">范围中的元素数。</param>
      <returns>在源不可变列表中元素范围的浅表复制。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary>搜索指定的对象，并返回不可变列表中元素范围内第一个匹配项的从零开始的索引。</summary>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns>如果找到，则为不可变列表中元素范围内第一个 <paramref name="item" /> 的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary>搜索指定对象并返回不可变列表中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引。</summary>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="index">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <returns>如果在不可变列表中从 <paramref name="index" /> 到最后一个元素的元素范围内找到项的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>搜索指定对象并返回不可变列表中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始的索引。</summary>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="index">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <returns>如果在不可变列表中从 <paramref name="index" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到项的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>搜索指定对象并返回 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始索引。</summary>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="index">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count">要搜索的元素数。</param>
      <param name="equalityComparer">用于比较元素相等性的值比较器。</param>
      <returns>如果在不可变列表中从 <paramref name="index" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到项的第一个匹配项，则为该项的从零开始的索引；否则为 -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary>将项插入到不可变列表中的指定索引处。</summary>
      <param name="index">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item">要插入到不可变列表中的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>将集合的元素插入不可变列表的指定索引处。</summary>
      <param name="index">应在此处插入新元素的从零开始的索引。</param>
      <param name="items">应将其元素插入到不可变列表中的集合。 集合自身不能为 <see langword="null" />，但它可以包含为 null 的元素（如果类型 <c>T</c> 为引用类型）。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary>获取对列表中给定 <paramref name="index" /> 的值的只读引用。</summary>
      <param name="index">所需元素的索引。</param>
      <returns>对指定 <paramref name="index" /> 处的值的只读引用。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary>搜索指定的对象，并返回整个不可变列表中最后一个匹配项的从零开始的索引。</summary>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns>如果找到，则为整个不可变列表中 <paramref name="item" /> 最后一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>搜索指定对象并返回不可变列表中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <returns>如果在不可变列表中从第一个元素到 <paramref name="index" /> 的元素范围内找到 <paramref name="item" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>搜索指定对象并返回不可变列表中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <returns>如果找到包含 <paramref name="count" /> 个元素、到 <paramref name="index" /> 为止的索引，则为不可变列表中元素范围内 <paramref name="item" /> 的最后一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>搜索指定对象并返回不可变列表中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始的索引。</summary>
      <param name="item">要在不可变列表中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <param name="startIndex">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
      <param name="count">要搜索的元素数。</param>
      <param name="equalityComparer">用于比较元素相等性的值比较器。</param>
      <returns>如果在不可变列表中从 <paramref name="index" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到项的第一个匹配项，则为该项的从零开始的索引；否则为 -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary>从不可变列表中移除特定对象的第一个匹配项。</summary>
      <param name="item">要从列表中移除的对象。</param>
      <returns>如果从列表中成功移除了该项，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在列表未找到该项，此方法也会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary>移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <param name="match">用于定义要移除的元素应满足的条件的委托。</param>
      <returns>从不可变列表中移除的元素数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary>移除不可变列表中指定索引处的项。</summary>
      <param name="index">要从列表中移除的项的从零开始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary>将整个不可变列表中元素的顺序反转。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary>将不可变列表的指定范围中元素的顺序反转。</summary>
      <param name="index">要反转的范围的从零开始的起始索引。</param>
      <param name="count">要反转的范围内的元素数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary>使用默认比较器对整个不可变列表中的元素进行排序。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器对整个不可变列表中的元素进行排序。</summary>
      <param name="comparer">比较元素时要使用的实现，若要使用默认比较器 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)，则为 <see langword="null" />。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary>使用指定的比较对象对整个不可变列表中的元素进行排序。</summary>
      <param name="comparison">比较元素时要使用的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比较器对不可变列表中某个范围内的元素进行排序。</summary>
      <param name="index">要排序范围的从零开始的起始索引。</param>
      <param name="count">要排序的范围的长度。</param>
      <param name="comparer">比较元素时要使用的实现，若要使用默认比较器 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)，则为 <see langword="null" />。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将列表的元素复制到数组，从特定数组索引处开始复制。</summary>
      <param name="array">一维数组，它是从列表中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到列表中。</summary>
      <param name="value">要添加到列表中的对象。</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>新元素插入到的位置；或者为 -1，指示该项未插入到集合中。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary>从列表中移除所有项。</summary>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary>确定列表是否包含特定值。</summary>
      <param name="value">要在列表中查找的对象。</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>如果在列表中找到 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定列表中特定项的索引。</summary>
      <param name="value">要在列表中查找的对象。</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将某项插入列表中指定的索引处。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到列表中的对象。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary>从列表中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从列表中移除的对象。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary>基于此实例的内容创建一个不可变列表。</summary>
      <returns>不可变列表。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary>确定不可变列表中的每个元素是否都与指定谓词定义的条件匹配。</summary>
      <param name="match">用于定义检查元素时要对照条件的委托。</param>
      <returns>如果不可变列表中的每个元素都与指定的谓词所定义的条件相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。 如果列表没有元素，则返回值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary>获取此不可变列表中的元素数。</summary>
      <returns>此列表中的元素数。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary>获取或设置列表中给定索引的值。</summary>
      <param name="index">要获取或设置的项的索引。</param>
      <returns>位于指定索引处的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示此实例是否为只读。</summary>
      <returns>总是为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Object" />。</summary>
      <param name="index">索引。</param>
      <returns>指定索引处的对象。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary>枚举二进制树的内容。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary>释放 <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" /> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary>将枚举推进到不可变列表的下一个元素。</summary>
      <returns>如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到列表的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary>将枚举器设置到其初始位置，该位置位于不可变列表中的第一个元素之前。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>位于枚举器当前位置的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>当前元素。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary>针对 <see cref="T:System.Collections.Immutable.ImmutableQueue`1" /> 类的实例提供一组初始化方法。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary>创建一个空的不可变队列。</summary>
      <typeparam name="T">要存储在不可变队列中的项的类型。</typeparam>
      <returns>空的不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary>创建包含指定项的新不可变队列。</summary>
      <param name="item">用于预先填充队列的项。</param>
      <typeparam name="T">不可变队列中项的类型。</typeparam>
      <returns>包含指定项的新不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary>创建包含指定项数组的新不可变队列。</summary>
      <param name="items">一个数组，其中包含用于预先填充队列的项。</param>
      <typeparam name="T">不可变队列中项的类型。</typeparam>
      <returns>包含指定项的新不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>创建包含指定项的新不可变队列。</summary>
      <param name="items">在应用不可变性之前要添加到队列中的项。</param>
      <typeparam name="T">队列中元素的类型。</typeparam>
      <returns>包含指定项的不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary>移除位于不可变队列开始处的项，并返回新队列。</summary>
      <param name="queue">要从中移除项的队列。</param>
      <param name="value">此方法返回时，将包含位于队列开始处的项。</param>
      <typeparam name="T">不可变队列中元素的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">堆栈为空。</exception>
      <returns>已移除项的新队列。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary>表示不可变队列。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T">队列中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary>从不可变队列中移除所有对象。</summary>
      <returns>空的不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary>移除位于不可变队列开始处的元素，并返回新队列。</summary>
      <exception cref="T:System.InvalidOperationException">队列为空。</exception>
      <returns>新的不可变队列；永不为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary>移除位于不可变队列开始处的项，并返回新队列。</summary>
      <param name="value">此方法返回时，将包含位于队列开始处的元素。</param>
      <exception cref="T:System.InvalidOperationException">队列为空。</exception>
      <returns>新的不可变队列，其开头元素已被移除。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary>将元素添加到不可变队列的末尾，并返回新队列。</summary>
      <param name="value">要添加的元素。</param>
      <returns>新的不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary>返回一个循环访问不可变队列的枚举器。</summary>
      <returns>一个可用于循环访问队列的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary>返回位于不可变队列开始处的元素但不将其移除。</summary>
      <exception cref="T:System.InvalidOperationException">队列为空。</exception>
      <returns>位于队列开始处的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary>获取对队列前部元素的只读引用。</summary>
      <exception cref="T:System.InvalidOperationException">队列为空。</exception>
      <returns>对队列前部元素的只读引用。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary>从不可变队列中移除所有元素。</summary>
      <returns>空的不可变队列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary>移除位于不可变队列开始处的元素，并返回新队列。</summary>
      <exception cref="T:System.InvalidOperationException">在队列为空时引发。</exception>
      <returns>新的不可变队列；永不为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary>将元素添加到不可变队列的末尾，并返回新队列。</summary>
      <param name="value">要添加的元素。</param>
      <returns>新的不可变队列。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary>获取空的不可变队列。</summary>
      <returns>空的不可变队列。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary>获取一个值，该值指示此不可变队列是否为空。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <returns>如果此队列为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary>枚举不可变队列的内容，而无需分配任何内存。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary>将枚举器推进到不可变队列的下一个元素。</summary>
      <returns>如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到队列的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>位于枚举器当前位置的元素。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary>针对 <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" /> 类的实例提供一组初始化方法。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary>创建一个空的不可变排序字典。</summary>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>空的不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary>创建使用指定键比较器的空不可变排序字典。</summary>
      <param name="keyComparer">用于确定字典中键的相等性的实现。</param>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>空的不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>创建使用指定键和值比较器的空不可变排序字典。</summary>
      <param name="keyComparer">用于确定字典中键的相等性的实现。</param>
      <param name="valueComparer">用于确定字典中值的相等性的实现。</param>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>空的不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary>创建一个新的不可变排序字典生成器。</summary>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>不可变集合生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary>创建一个新的不可变排序字典生成器。</summary>
      <param name="keyComparer">键比较器。</param>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>不可变集合生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>创建一个新的不可变排序字典生成器。</summary>
      <param name="keyComparer">键比较器。</param>
      <param name="valueComparer">值比较器。</param>
      <typeparam name="TKey">字典存储的键的类型。</typeparam>
      <typeparam name="TValue">字典存储的值的类型。</typeparam>
      <returns>不可变集合生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>使用指定的键比较器从指定的项范围创建新的不可变排序字典。</summary>
      <param name="keyComparer">用于评估键的相等性和排序的比较器实现。</param>
      <param name="items">要添加到排序字典中的项。</param>
      <typeparam name="TKey">字典中存储的键的类型。</typeparam>
      <typeparam name="TValue">字典中存储的值的类型。</typeparam>
      <returns>包含指定项并使用指定键比较器的新不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>使用指定的键和值比较器从指定的项范围创建新的不可变排序字典。</summary>
      <param name="keyComparer">用于比较键的相等性和排序的比较器实现。</param>
      <param name="valueComparer">用于比较值的相等性和排序的比较器实现。</param>
      <param name="items">在排序字典不可变之前要添加到该字典中的项。</param>
      <typeparam name="TKey">字典中存储的键的类型。</typeparam>
      <typeparam name="TValue">字典中存储的值的类型。</typeparam>
      <returns>包含指定项并使用指定比较器的不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>创建包含指定项并使用默认比较器的不可变排序字典。</summary>
      <param name="items">在排序字典不可变之前要添加到该字典中的项。</param>
      <typeparam name="TKey">字典中存储的键的类型。</typeparam>
      <typeparam name="TValue">字典中存储的值的类型。</typeparam>
      <returns>一个不可变排序字典，其中包含指定的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>枚举键/值对的序列，并生成其内容的不可变排序字典。</summary>
      <param name="source">要枚举的键/值对的序列。</param>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中的值的类型。</typeparam>
      <returns>一个不可变排序字典，其中包含指定序列中的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary>枚举键/值对的序列，并使用指定的键比较器生成其内容的不可变字典。</summary>
      <param name="source">要枚举的键/值对的序列。</param>
      <param name="keyComparer">生成不可变字典时要使用的键比较器。</param>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中的值的类型。</typeparam>
      <returns>一个不可变排序字典，其中包含指定序列中的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>枚举键/值对的序列，并使用指定的键和值比较器生成其内容的不可变排序字典。</summary>
      <param name="source">要枚举的键/值对的序列。</param>
      <param name="keyComparer">生成不可变字典时要使用的键比较器。</param>
      <param name="valueComparer">用于不可变字典的值比较器。</param>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中的值的类型。</typeparam>
      <returns>一个不可变排序字典，其中包含指定序列中的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary>从生成器字典的当前内容创建不可变排序字典。</summary>
      <param name="builder">要从中创建不可变排序字典的生成器。</param>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中的值的类型。</typeparam>
      <returns>包含生成器字典中当前内容的不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>枚举并转换序列，然后生成其内容的不可变排序字典。</summary>
      <param name="source">为生成字典而要枚举的序列。</param>
      <param name="keySelector">用于从每个序列元素生成字典键的函数。</param>
      <param name="elementSelector">用于从每个序列元素生成字典值的函数。</param>
      <typeparam name="TSource">序列中元素的类型。</typeparam>
      <typeparam name="TKey">生成的字典中键的类型。</typeparam>
      <typeparam name="TValue">生成的字典中值的类型。</typeparam>
      <returns>一个不可变排序字典，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>枚举并转换序列，然后使用指定的键比较器生成其内容的不可变排序字典。</summary>
      <param name="source">为生成字典而要枚举的序列。</param>
      <param name="keySelector">用于从每个序列元素生成字典键的函数。</param>
      <param name="elementSelector">用于从每个序列元素生成字典值的函数。</param>
      <param name="keyComparer">用于字典的键比较器。</param>
      <typeparam name="TSource">序列中元素的类型。</typeparam>
      <typeparam name="TKey">生成的字典中键的类型。</typeparam>
      <typeparam name="TValue">生成的字典中值的类型。</typeparam>
      <returns>一个不可变字典，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>枚举并转换序列，然后使用指定的键和值比较器生成其内容的不可变排序字典。</summary>
      <param name="source">为生成字典而要枚举的序列。</param>
      <param name="keySelector">用于从每个序列元素生成字典键的函数。</param>
      <param name="elementSelector">用于从每个序列元素生成字典值的函数。</param>
      <param name="keyComparer">用于字典的键比较器。</param>
      <param name="valueComparer">用于字典的值比较器。</param>
      <typeparam name="TSource">序列中元素的类型。</typeparam>
      <typeparam name="TKey">生成的字典中键的类型。</typeparam>
      <typeparam name="TValue">生成的字典中值的类型。</typeparam>
      <returns>一个不可变排序字典，其中包含指定序列中的项。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary>表示一个不可变排序字典。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey">字典中包含的键的类型。</typeparam>
      <typeparam name="TValue">字典中包含的值的类型。</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary>获取空的不可变排序字典。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary>将具有指定键和值的元素添加到不可变排序字典。</summary>
      <param name="key">要添加的条目的键。</param>
      <param name="value">要添加的条目的值。</param>
      <exception cref="T:System.ArgumentException">字典中已存在给定的键，但具有不同的值。</exception>
      <returns>一个新的不可变排序字典，其中包含其他键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>将指定的键/值对添加到不可变排序字典。</summary>
      <param name="items">要添加的键/值对。</param>
      <exception cref="T:System.ArgumentException">字典中已存在其中一个给定的键，但具有不同的值。</exception>
      <returns>一个新的不可变字典，其中包含其他键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary>检索排序规则和键/值比较规则与此字典实例相同的空不可变排序字典。</summary>
      <returns>具有等效排序规则和键/值比较规则的空字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>确定此不可变排序字典是否包含指定的键/值对。</summary>
      <param name="pair">要查找的键/值对。</param>
      <returns>如果在字典中找到指定的键/值对，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary>确定此不可变排序映射是否包含指定的键。</summary>
      <param name="key">要定位的键。</param>
      <returns>如果不可变字典包含指定键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary>确定不可变排序字典是否包含具有指定值的元素。</summary>
      <param name="value">要查找的值。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns>如果字典包含具有指定值的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary>返回一个循环访问不可变排序字典的枚举器。</summary>
      <returns>一个可用于循环访问字典的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary>从不可变排序字典中移除具有指定值的元素。</summary>
      <param name="value">要移除的元素的值。</param>
      <returns>已移除指定元素的新不可变字典；如果在字典中找不到指定的值，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>从不可变排序字典中移除具有指定键的元素。</summary>
      <param name="keys">要移除的元素的键。</param>
      <returns>已移除指定键的新不可变字典；如果在字典中找不到指定的键，则为此实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary>在不可变排序字典中设置指定的键和值，可能的设置方法是覆盖给定键的现有值。</summary>
      <param name="key">要添加的条目的键。</param>
      <param name="value">要设置的键值。</param>
      <returns>一个新的不可变排序字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>在不可变排序字典中设置指定的键/值对，可能的设置方法是覆盖键的现有值。</summary>
      <param name="items">要在字典中设置的键/值对。 如果字典中已存在任何键，则此方法将覆盖这些键的先前值。</param>
      <returns>一个不可变字典，其中包含指定的键/值对。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.Generic.ICollection`1" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。</param>
      <returns>如果从 <see langword="true" /> 中成功移除 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。 如果在原始 <see langword="false" /> 中没有找到 <paramref name="item" />，该方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>将具有所提供键和值的元素添加到泛型字典。</summary>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">用作要添加的元素的值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 中已存在具有相同键的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>从泛型字典中移除具有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
      <returns>如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。  如果在原始泛型字典中未找到 <paramref name="key" />，则此方法也会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的数组索引开始，将字典的元素复制到数组中。</summary>
      <param name="array">作为从字典复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>将具有所提供键和值的元素添加到字典对象。</summary>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">用作要添加的元素的值的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary>清除此实例。</summary>
      <exception cref="T:System.NotSupportedException">字典对象为只读。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定不可变字典对象是否包含具有指定键的元素。</summary>
      <param name="key">要在字典对象中查找的键。</param>
      <returns>如果字典包含具有该键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>返回不可变字典对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns>字典对象的枚举器对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从不可变字典对象中移除具有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的枚举器对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>请参阅 <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 接口。</summary>
      <param name="key">要添加的项的键。</param>
      <param name="value">要添加的项的值。</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>请参阅 <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 接口。</summary>
      <param name="pairs">要添加的键/值对的序列。</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear">
      <summary>请参阅 <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 接口。</summary>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <summary>请参阅 <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 接口。</summary>
      <param name="key">要删除的项的键。</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>请参阅 <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 接口。</summary>
      <param name="keys">要删除的键的序列。</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <summary>请参阅 <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 接口。</summary>
      <param name="key">要更新的项的键。</param>
      <param name="value">要更新的项的值。</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>将给定的一组键/值对应用于不可变的字典，并替换生成的字典中任何存在冲突的键。</summary>
      <param name="items">一组要在映射中设置的键/值对。</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary>创建一个其内容与此字典相同，并且可使用标准可变接口在多个操作之间有效转变的不可变排序字典。</summary>
      <returns>内容与此字典相同的集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary>确定此字典是否包含指定的键。</summary>
      <param name="equalKey">要搜索的键。</param>
      <param name="actualKey">如果已在字典中找到匹配键，则为该匹配键；如果找不到任何匹配键，则为 <c>equalkey</c>。</param>
      <returns>如果找到了 <paramref name="equalKey" /> 的匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>获取与指定键关联的值。</summary>
      <param name="key">将检索其值的键。</param>
      <param name="value">当此方法返回时，如果找到该键，则包含与指定的键相关联的值；否则将包含 <paramref name="value" /> 参数的类型默认值。</param>
      <returns>如果字典包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary>返回对该值的只读引用，该值与提供的 <paramref name="key" /> 相关联。</summary>
      <param name="key">要查找的项的键。</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" /> 不存在。</exception>
      <returns>对该值的只读引用，该值与提供的 <paramref name="key" /> 相关联。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary>获取使用指定键比较器的不可变排序字典实例。</summary>
      <param name="keyComparer">要使用的键比较器。</param>
      <returns>使用给定比较器的不可变字典实例。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>获取使用指定键和值比较器的不可变排序字典实例。</summary>
      <param name="keyComparer">要使用的键比较器。</param>
      <param name="valueComparer">要使用的值比较器。</param>
      <returns>使用给定比较器的不可变字典实例。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary>获取不可变排序字典中键/值对的数目。</summary>
      <returns>字典中键/值对的数目。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary>获取一个值，该值指示此不可变排序字典实例是否为空。</summary>
      <returns>如果此实例为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary>获取与指定键关联的 <paramref name="TValue" />。</summary>
      <param name="key">要检索其值的键。</param>
      <returns>与指定的键相关联的值。 如果未找到任何结果，该操作将引发异常。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary>获取不可变排序字典的键比较器。</summary>
      <returns>字典的键比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary>获取不可变排序字典中的键。</summary>
      <returns>不可变字典中的键。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>获取或设置具有指定键的 <typeparamref name="TValue" />。</summary>
      <param name="key">用作要访问的元素的键的对象。</param>
      <returns>与关联的类型的对象 <typeparamref name="TValue" /><paramref name="key" /> 。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>获取键。</summary>
      <returns>包含键的集合。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>获取值。</summary>
      <returns>一个包含值的集合。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 对象具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="key">要访问的元素的键。</param>
      <returns>存储在指定键下的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary>获取用于确定值是否相等的值比较器。</summary>
      <returns>用于确定值是否相等的值比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary>获取不可变排序字典中的值。</summary>
      <returns>字典中的值。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary>表示一个只需少量或者无需内存分配就能转变，并且可以有效生成不可变排序字典实例或者构建于此类实例之上的排序字典。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary>将具有指定键和值的元素添加到不可变排序字典。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>将指定项添加到不可变排序字典。</summary>
      <param name="item">要添加到字典中的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>将值序列添加到不可变排序字典。</summary>
      <param name="items">要添加到字典中的项。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary>从不可变排序字典中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>确定不可变排序字典是否包含特定值。</summary>
      <param name="item">要在字典中查找的对象。</param>
      <returns>如果在字典中找到 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary>确定不可变排序字典是否包含具有指定键的元素。</summary>
      <param name="key">要在字典中查找的键。</param>
      <returns>如果字典包含具有该键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary>确定不可变排序字典是否包含具有指定值的元素。</summary>
      <param name="value">要在字典中查找的值。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns>如果不可变排序字典包含具有指定值的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary>返回一个循环访问不可变排序字典的枚举器。</summary>
      <returns>一个可用于循环访问字典的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>如果字典中存在匹配的键，则获取给定键的值；否则获取默认值。</summary>
      <param name="key">要搜索的键。</param>
      <returns>该键的值；如果找不到匹配的键，则为 <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>如果字典中存在匹配的键，则获取给定键的值；否则获取默认值。</summary>
      <param name="key">要搜索的键。</param>
      <param name="defaultValue">在字典中找不到匹配键时返回的默认值。</param>
      <returns>该键的值；如果找不到匹配的键，则为 <paramref name="defaultValue" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary>从不可变排序字典中移除具有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <returns>如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在原始字典中未找到 <paramref name="key" />，则此方法也会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>从不可变排序字典中移除特定对象的第一个匹配项。</summary>
      <param name="item">要从字典中移除的对象。</param>
      <returns>如果从字典中成功移除了 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在字典中未找到 <paramref name="item" />，此方法也会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>从不可变排序字典中移除其键与指定序列中找到的键相匹配的所有条目。</summary>
      <param name="keys">要从字典中移除的条目的键。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>请参见<see cref="T:System.Collections.Generic.IDictionary`2" /></summary>
      <param name="array">作为从字典复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>请参见<see cref="T:System.Collections.Generic.IDictionary`2" /></summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的数组索引开始，将字典的元素复制到数组中。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <param name="array">作为从字典复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>将具有所提供键和值的元素添加到字典对象。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定字典对象是否包含具有指定键的元素。</summary>
      <param name="key">要定位的键。</param>
      <returns>如果字典包含具有该键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>返回字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns>字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从字典中移除具有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的枚举器对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary>基于此实例的内容创建一个不可变排序字典。</summary>
      <returns>不可变排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>确定此字典是否包含指定的键。</summary>
      <param name="equalKey">要搜索的键。</param>
      <param name="actualKey">如果已在字典中找到匹配键，则为该匹配键；如果找不到任何匹配键，则为 <c>equalkey</c>。</param>
      <returns>如果找到了 <paramref name="equalKey" /> 的匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>获取与指定键关联的值。</summary>
      <param name="key">将检索其值的键。</param>
      <param name="value">当此方法返回时，如果找到该键，则包含与指定的键相关联的值；否则将包含 <paramref name="value" /> 参数的类型默认值。 此参数未经初始化即被传递。</param>
      <returns>如果实现字典的对象包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary>返回对该值的只读引用，该值与提供的 <paramref name="key" /> 相关联。</summary>
      <param name="key">要查找的项的键。</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" /> 不存在。</exception>
      <returns>对该值的只读引用，该值与提供的 <paramref name="key" /> 相关联。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary>获取此不可变排序字典中的元素数。</summary>
      <returns>此字典中的元素数。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary>获取或设置不可变排序字典中指定键的值。</summary>
      <param name="key">要检索其值的键。</param>
      <returns>与给定键关联的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary>获取或设置键比较器。</summary>
      <returns>键比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary>获取元素的强类型化只读集合。</summary>
      <returns>元素的强类型化只读集合。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>获取一个值，该值指示此实例是否为只读。</summary>
      <returns>总是为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>返回一个集合，它包含字典中存储的所有键。 请参见<see cref="T:System.Collections.Generic.IDictionary`2" /></summary>
      <returns>包含字典中存储的所有键的集合。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>返回一个集合，它包含字典中存储的所有值。 请参见<see cref="T:System.Collections.Generic.IDictionary`2" /></summary>
      <returns>包含字典中存储的所有值的集合。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否同步（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 对象具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="key">键。</param>
      <returns>与指定的键相关联的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary>获取或设置值比较器。</summary>
      <returns>值比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary>获取包含不可变排序字典值的集合。</summary>
      <returns>一个集合，其中包含实现字典的对象的值。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary>枚举二进制树的内容。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary>释放 <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" /> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary>将枚举器推进到不可变排序字典的下一个元素。</summary>
      <returns>如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到排序字典的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary>将枚举器设置到其初始位置，该位置位于不可变排序字典中的第一个元素之前。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>位于枚举器当前位置的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>当前元素。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary>针对 <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" /> 类的实例提供一组初始化方法。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary>创建一个空的不可变排序集。</summary>
      <typeparam name="T">要存储在不可变集内的项的类型。</typeparam>
      <returns>空的不可变排序集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary>创建包含指定项的新不可变排序集。</summary>
      <param name="item">用于预先填充集的项。</param>
      <typeparam name="T">不可变集内的项的类型。</typeparam>
      <returns>包含指定项的新不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary>创建包含指定项数组的新不可变排序集。</summary>
      <param name="items">一个数组，其中包含用于预先填充集的项。</param>
      <typeparam name="T">不可变集内的项的类型。</typeparam>
      <returns>包含指定项的新不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary>创建使用指定比较器的空不可变排序集。</summary>
      <param name="comparer">比较集内的项时要使用的实现。</param>
      <typeparam name="T">不可变集内的项的类型。</typeparam>
      <returns>空的不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary>创建包含指定项并使用指定比较器的新不可变排序集。</summary>
      <param name="comparer">比较集内的项时要使用的实现。</param>
      <param name="item">用于预先填充集的项。</param>
      <typeparam name="T">存储在不可变集内的项的类型。</typeparam>
      <returns>包含指定项的新不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary>创建包含指定项数组并使用指定比较器的新不可变排序集。</summary>
      <param name="comparer">比较集内的项时要使用的实现。</param>
      <param name="items">一个数组，其中包含用于预先填充集的项。</param>
      <typeparam name="T">不可变集内的项的类型。</typeparam>
      <returns>包含指定项的新不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary>返回可用于生成不可变排序集的集合。</summary>
      <typeparam name="T">集合存储的项的类型。</typeparam>
      <returns>不可变集合生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary>返回可用于生成不可变排序集的集合。</summary>
      <param name="comparer">用于比较集内项的相等性的比较器。</param>
      <typeparam name="T">集合存储的项的类型。</typeparam>
      <returns>不可变集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>创建包含指定项的新不可变集合。</summary>
      <param name="comparer">用于比较此集内的元素的比较器。</param>
      <param name="items">在集不可变之前要添加到该集内的项。</param>
      <typeparam name="T">集合存储的项的类型。</typeparam>
      <returns>包含指定项的新不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>创建包含指定项的新不可变集合。</summary>
      <param name="items">在集不可变之前要添加到该集内的项。</param>
      <typeparam name="T">集合存储的项的类型。</typeparam>
      <returns>包含指定项的新不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>枚举序列，并生成其内容的不可变排序集。</summary>
      <param name="source">要枚举的序列。</param>
      <typeparam name="TSource">序列中元素的类型。</typeparam>
      <returns>一个不可变排序集，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>枚举序列，生成其内容的不可变排序集，并使用指定的比较器。</summary>
      <param name="source">要枚举的序列。</param>
      <param name="comparer">用于初始化排序集并向其中添加成员的比较器。</param>
      <typeparam name="TSource">序列中元素的类型。</typeparam>
      <returns>一个不可变排序集，其中包含指定序列中的项。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary>从生成器集的当前内容创建不可变排序集。</summary>
      <param name="builder">要从中创建不可变排序集的生成器。</param>
      <typeparam name="TSource">不可变排序集中元素的类型。</typeparam>
      <returns>包含生成器集中的当前内容的不可变排序集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary>表示不可变的排序集实现。

NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T">集内元素的类型。</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary>获取空的不可变排序集。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary>将指定的值添加到此不可变排序集。</summary>
      <param name="value">要相加的值。</param>
      <returns>已添加元素的新集，或者此集（如果该元素已在此集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary>从不可变排序集内移除所有元素。</summary>
      <returns>已移除元素的空集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary>确定此不可变排序集是否包含指定的值。</summary>
      <param name="value">要检查的值。</param>
      <returns>如果该集包含指定值，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>从此不可变排序集内移除一组指定项。</summary>
      <param name="other">要从此集内移除的项。</param>
      <returns>已移除项的新集；如果原始集不包含任何项，则为原始集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary>返回一个循环访问不可变排序集的枚举器。</summary>
      <returns>一个可用于循环访问集的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary>获取指定值在此不可变排序集内的出现位置。</summary>
      <param name="item">正在查找其位置的值。</param>
      <returns>如果找到 <paramref name="item" />，则为排序集内指定 <paramref name="item" /> 的索引。 如果 <paramref name="item" /> 未找到且小于此集内的一个或多个元素，此方法将返回一个负数，该负数是大于 value 的第一个元素的索引的按位求补。 如果 <paramref name="item" /> 未找到且大于此集内的任何元素，此方法将返回一个负数，该负数是最后一个元素的索引的按位求补加 1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个不可变排序集，其中包含同时存在于此集和指定集内的元素。</summary>
      <param name="other">要与此集相交的集。</param>
      <returns>一个新的不可变排序集，其中包含同时存在于两个集内的所有元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变排序集是否为指定集合的真（严格）子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变排序集是否为指定集合的真超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变排序集是否为指定集合的子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变排序集是否为指定集合的超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary>获取给定 <paramref name="index" /> 处的集元素的只读引用。</summary>
      <param name="index">要返回集中的元素从零开始的索引。</param>
      <returns>给定位置处的元素的只读引用。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前的不可变排序集和指定的集合是否共享通用元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集与 <paramref name="other" /> 至少共享一个通用元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary>从此不可变排序集中移除指定的值。</summary>
      <param name="value">要移除的元素。</param>
      <returns>已移除元素的新不可变排序集；如果在此集内找不到元素，则为此集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary>返回一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它按逆序循环访问此不可变排序集。</summary>
      <returns>一个枚举器，它按逆序循环访问不可变排序集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前不可变排序集与指定的集合是否包含相同的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果集相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个不可变排序集，其中包含存在于此集内或者给定序列内（但不同时存在于两者中）的元素。</summary>
      <param name="other">项的另一个序列。</param>
      <returns>新的不可变排序集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>将指定值添加到集合。</summary>
      <param name="item">要相加的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>从集合中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>从特定的数组索引开始，将集合的元素复制到数组中。</summary>
      <param name="array">作为从集合复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>从集合中移除特定对象的第一个匹配项。</summary>
      <param name="item">要从集合中移除的对象。</param>
      <returns>如果从集合中成功移除了 <see langword="true" />，则为 <paramref name="item" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>在集内指定索引的位置插入项。</summary>
      <param name="index">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item">要插入到集内的对象。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>移除指定索引处的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <param name="item">要添加到集中的元素。</param>
      <returns>如果该元素已添加到集内，则为 <see langword="true" />；如果该元素已在集内，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前集内移除指定集合中的所有元素。</summary>
      <param name="other">要从集内移除的项的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含也存在在指定集合中的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集包含当前集或指定集合中存在的所有元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的数组索引开始，将集的元素复制到一个数组中。</summary>
      <param name="array">一维数组，它是从集内复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的枚举器对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到集内。</summary>
      <param name="value">要添加到集内的对象。</param>
      <exception cref="T:System.NotSupportedException">该集为只读，或具有固定大小。</exception>
      <returns>插入了新元素的位置，-1 指示该项未插入到集合中。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary>从集内中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">在所有情况下均引发。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary>确定集是否包含特定值。</summary>
      <param name="value">要在集内查找的对象。</param>
      <returns>如果在集内找到该对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集内特定项的索引。</summary>
      <param name="value">要在集内查找的对象。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在集内指定索引的位置插入项。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到集内的对象。</param>
      <exception cref="T:System.NotSupportedException">该集为只读，或具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary>从集内移除特定对象的第一个匹配项。</summary>
      <param name="value">要从集内移除的对象。</param>
      <exception cref="T:System.NotSupportedException">该集为只读，或具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除集内指定索引处的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">该集为只读，或具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>将指定的元素添加到此不可变集。</summary>
      <param name="value">要添加的元素。</param>
      <returns>已添加元素的新集，或者此集（如果该元素已在此集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>检索排序和顺序语义与此实例相同的空不可变集。</summary>
      <returns>排序和顺序语义与此实例相同的空集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前不可变集内移除指定集合中的元素。</summary>
      <param name="other">要从此集内移除的项。</param>
      <returns>已移除项的新集；如果原始集不包含任何项，则为原始集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个不可变集，其中包含同时存在于此集和指定集内的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>一个新的不可变集，其中包含同时存在于两个集内的所有元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>从此不可变集内移除指定的元素。</summary>
      <param name="value">要移除的元素。</param>
      <returns>已移除指定元素的新集，或者当前集（如果在该集内找不到该元素）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个不可变集，该集仅包含存在于当前集或指定集合（但不同时存在于两者中）中的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>一个新集，该集包含仅存在于当前集或指定集合中（但不同时存在于两者中）的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>创建一个新的不可变集，该集包含存在于当前集或指定集合中的所有元素。</summary>
      <param name="other">从中添加元素的集合。</param>
      <returns>已添加项的新不可变集；或者原始集（如果所有项已在该集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary>创建一个其内容与此不可变排序集相同，并且可使用标准可变接口有效操作的集合。</summary>
      <returns>排序集生成器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary>在集内搜索给定的值，并返回所找到的相等值（如果有）。</summary>
      <param name="equalValue">要搜索的值。</param>
      <param name="actualValue">搜索操作在集内找到的值；如果搜索操作未生成任何匹配项，则返回原始值。</param>
      <returns>一个指示搜索是否成功的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>将一组给定项添加到此不可变排序集。</summary>
      <param name="other">要添加的项。</param>
      <returns>已添加项的新集；或者原始集（如果所有项已在该集内）。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary>返回具有指定键比较器的不可变排序集。</summary>
      <param name="comparer">要检查的比较器。</param>
      <returns>具有指定键比较器的不可变排序集。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary>获取不可变排序集内的元素数。</summary>
      <returns>不可变排序集内的元素数。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary>获取一个值，该值指示此不可变排序集是否为空。</summary>
      <returns>如果此集为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary>获取不可变排序集中位于给定索引处的元素。</summary>
      <param name="index">要从排序集中检索的元素的索引。</param>
      <returns>给定索引处的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary>获取用于对不可变排序集中的键进行排序的比较器。</summary>
      <returns>用于对键进行排序的比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary>根据比较器的定义，获取不可变排序集内的最大值。</summary>
      <returns>集内的最大值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary>根据比较器的定义，获取不可变排序集内的最小值。</summary>
      <returns>集内的最小值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>返回 true，因为不可变集合始终是只读的。 请参阅 <see cref="T:System.Collections.Generic.ICollection`1" /> 接口。</summary>
      <returns>指示集合是否为只读的布尔值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>请参阅 <see cref="T:System.Collections.Generic.IList`1" /> 接口。</summary>
      <param name="index">要访问的项的索引（索引从零开始）。</param>
      <returns>存储在指定索引处的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>返回 true，因为不可变集合始终是线程安全的。 请参阅 <see cref="T:System.Collections.ICollection" /> 接口。</summary>
      <returns>一个布尔值，指示集合是否为线程安全的。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>请参阅 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Object" />。</summary>
      <param name="index">索引。</param>
      <exception cref="T:System.NotSupportedException" />
      <returns>
        <see cref="T:System.Object" />
      </returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary>表示一个只需少量或者无需内存分配就能启用更改，并且可以有效地操作或生成不可变排序集的排序集。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary>向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <param name="item">要添加到集中的元素。</param>
      <returns>如果该元素已添加到集内，则为 <see langword="true" />；如果该元素已在集内，则为 <see langword="false" /></returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary>从此集内移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary>确定集是否包含指定的对象。</summary>
      <param name="item">要在集内查找的对象。</param>
      <returns>如果在集内找到 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前集内移除指定的项集。</summary>
      <param name="other">要从集内移除的项的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary>返回遍历集的枚举器。</summary>
      <returns>一个可用于循环访问集的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含也存在在指定集合中的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的真（严格）子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的真（严格）超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary>获取对给定 <paramref name="index" /> 处的集元素的只读引用。</summary>
      <param name="index">要返回集中的元素从零开始的索引。</param>
      <returns>对给定位置处的元素的只读引用。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否与指定的集合重叠。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集与 <paramref name="other" /> 至少共享一个通用元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary>从集内移除指定对象的第一个匹配项。</summary>
      <param name="item">要从集内移除的对象。</param>
      <returns>如果从集内移除了 <paramref name="item" />，则为 <see langword="true" />；如果在集内找不到 <paramref name="item" />，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary>返回一个枚举器，该枚举器按逆序循环访问不可变排序集。</summary>
      <returns>一个枚举器，它按逆序循环访问集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集与指定的集合是否包含相同的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集等于 <paramref name="other" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <param name="item">要添加到集中的元素。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>从特定的数组索引开始，将集合的元素复制到数组中。</summary>
      <param name="array">作为从集合复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的数组索引开始，将集的元素复制到一个数组中。</summary>
      <param name="array">一维数组，它是从集内复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary>基于此实例的内容创建一个不可变排序集。</summary>
      <returns>不可变集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.TryGetValue(`0,`0@)">
      <summary>在集内搜索给定的值，并返回所找到的相等值（如果有）。</summary>
      <param name="equalValue">要搜索的值。</param>
      <param name="actualValue">搜索操作在集内找到的值；如果搜索操作未生成任何匹配项，则返回原始值。</param>
      <returns>一个指示搜索是否成功的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集包含同时存在于当前集和指定集合中的所有元素。</summary>
      <param name="other">要与当前状态进行比较的集合。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary>获取不可变排序集内的元素数。</summary>
      <returns>此集内的元素数。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary>获取给定索引的集元素。</summary>
      <param name="index">要返回集中的元素从零开始的索引。</param>
      <returns>位于给定位置的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary>获取或设置用于确定不可变排序集内的值是否相等的对象。</summary>
      <returns>用于确定集内的值是否相等的比较器。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary>根据比较器的定义，获取不可变排序集内的最大值。</summary>
      <returns>集内的最大值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary>根据比较器的定义，获取不可变排序集内的最小值。</summary>
      <returns>集内的最小值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示此实例是否为只读。</summary>
      <returns>总是为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary>枚举二进制树的内容。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary>释放 <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" /> 类的当前实例使用的资源。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary>将枚举器推进到不可变排序集的下一个元素。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <returns>如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到排序集的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary>将枚举器设置到其初始位置，该位置位于不可变排序集内的第一个元素之前。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <returns>位于枚举器当前位置的元素。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>当前元素。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary>针对 <see cref="T:System.Collections.Immutable.ImmutableStack`1" /> 类的实例提供一组初始化方法。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary>创建一个空的不可变堆栈。</summary>
      <typeparam name="T">要存储在不可变堆栈中的项的类型。</typeparam>
      <returns>空的不可变堆栈。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary>创建包含指定项的新不可变堆栈。</summary>
      <param name="item">用于预先填充堆栈的项。</param>
      <typeparam name="T">不可变堆栈中项的类型。</typeparam>
      <returns>包含指定项的新不可变集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary>创建包含指定项数组的新不可变堆栈。</summary>
      <param name="items">一个数组，其中包含用于预先填充堆栈的项。</param>
      <typeparam name="T">不可变堆栈中项的类型。</typeparam>
      <returns>包含指定项的新不可变堆栈。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>创建包含指定项的新不可变堆栈。</summary>
      <param name="items">在堆栈不可变之前要添加到该堆栈的项。</param>
      <typeparam name="T">堆栈中项的类型。</typeparam>
      <returns>包含指定项的不可变堆栈。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary>从不可变堆栈中移除指定的项。</summary>
      <param name="stack">要修改的堆栈。</param>
      <param name="value">要从堆栈中移除的项。</param>
      <typeparam name="T">堆栈中包含的项的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">堆栈为空。</exception>
      <returns>一个堆栈；永不为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary>表示不可变堆栈。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T">堆栈上的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary>从不可变堆栈中移除所有对象。</summary>
      <returns>空的不可变堆栈。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary>返回一个循环访问不可变堆栈的枚举器。</summary>
      <returns>一个可用于循环访问堆栈的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary>返回位于堆栈顶部的对象但不将其移除。</summary>
      <exception cref="T:System.InvalidOperationException">堆栈为空。</exception>
      <returns>位于堆栈顶部的对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary>获取对堆栈顶部的元素的只读引用。</summary>
      <exception cref="T:System.InvalidOperationException">在堆栈为空时引发。</exception>
      <returns>对堆栈顶部的元素的只读引用。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary>移除位于不可变堆栈顶部的元素，并返回完成移除操作后的堆栈。</summary>
      <exception cref="T:System.InvalidOperationException">堆栈为空。</exception>
      <returns>一个堆栈；永不为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary>从不可变堆栈中移除指定的元素，并返回完成移除操作后的堆栈。</summary>
      <param name="value">要从堆栈中移除的值。</param>
      <returns>一个堆栈；永不为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary>将对象插入到不可变堆栈的顶部，并返回新堆栈。</summary>
      <param name="value">要推送到堆栈中的对象。</param>
      <returns>新堆栈。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary>从不可变堆栈中移除所有元素。</summary>
      <returns>空的不可变堆栈。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary>移除位于不可变堆栈顶部的元素，并返回新堆栈。</summary>
      <exception cref="T:System.InvalidOperationException">堆栈为空。</exception>
      <returns>新堆栈；永不为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary>在不可变堆栈顶部插入一个元素，并返回新堆栈。</summary>
      <param name="value">要推送到堆栈中的元素。</param>
      <returns>新堆栈。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary>获取空的不可变堆栈。</summary>
      <returns>空的不可变堆栈。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary>获取一个值，该值指示此不可变堆栈实例是否为空。</summary>
      <returns>如果此实例为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary>枚举不可变堆栈的内容，而无需分配任何内存。  
  
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary>将枚举器推进到不可变堆栈的下一个元素。</summary>
      <returns>如果枚举器已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举器已传递到堆栈的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>位于枚举器当前位置的元素。</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary>LINQ 扩展方法重写，它们为 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 提供的效率高于标准 LINQ 方法。 
 NuGet package: System.Collections.Immutable（关于不可变集合和安装方法）</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary>以累加方式向元素序列应用函数。</summary>
      <param name="immutableArray">要将函数应用到的集合。</param>
      <param name="func">要以累加方式对每个元素调用的函数。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>向所有元素应用累加函数后得到的最终值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary>以累加方式向元素序列应用函数。</summary>
      <param name="immutableArray">要将函数应用到的集合。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要以累加方式对每个元素调用的函数。</param>
      <typeparam name="TAccumulate">累加值的类型。</typeparam>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>累加器的最终值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary>以累加方式向元素序列应用函数。</summary>
      <param name="immutableArray">要将函数应用到的集合。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要以累加方式对每个元素调用的函数。</param>
      <param name="resultSelector" />
      <typeparam name="TAccumulate">累加值的类型。</typeparam>
      <typeparam name="TResult">结果选择器返回的结果类型。</typeparam>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>累加器的最终值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>获取一个值，该值指示此数组中的所有元素是否与给定的条件匹配。</summary>
      <param name="immutableArray">要在其中检查匹配项的数组。</param>
      <param name="predicate">谓词。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>如果源序列的每个元素都通过了指定谓词中的测试，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>返回一个值，该值指示此集合是否包含任何元素。</summary>
      <param name="builder">要在其中检查匹配项的生成器。</param>
      <typeparam name="T">数组中元素的类型。</typeparam>
      <returns>如果数组生成器包含任何元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>获取一个值，该值指示数组是否包含任何元素。</summary>
      <param name="immutableArray">要在其中检查元素的数组。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>如果数组包含元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>获取一个值，该值指示数组是否包含与指定条件匹配的任何元素。</summary>
      <param name="immutableArray">要在其中检查元素的数组。</param>
      <param name="predicate">用于定义匹配元素时要应用的条件的委托。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>如果某个元素与指定的条件匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>返回数组中指定索引处的元素。</summary>
      <param name="immutableArray">要在其中查找元素的数组。</param>
      <param name="index">要检索的元素的索引。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>指定索引处的项。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>返回序列中指定索引处的元素；如果索引超出范围，则返回默认值。</summary>
      <param name="immutableArray">要在其中查找元素的数组。</param>
      <param name="index">要检索的元素的索引。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>指定索引处的项；如果找不到该索引，则为默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>返回集合中的第一个元素。</summary>
      <param name="builder">要从中检索项的生成器。</param>
      <typeparam name="T">数组中项的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">如果数组为空。</exception>
      <returns>列表中的第一个项。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>返回数组中的第一个元素。</summary>
      <param name="immutableArray">要从中获取项的数组。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">如果数组为空。</exception>
      <returns>数组中的第一个项。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的第一个元素。</summary>
      <param name="immutableArray">要从中获取项的数组。</param>
      <param name="predicate">委托，用于定义要搜索的元素的条件。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">如果数组为空。</exception>
      <returns>列表中的第一个项（如果该项满足 <paramref name="predicate" /> 指定的条件）。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>返回集合中的第一个元素；如果集合为空，则返回默认值。</summary>
      <param name="builder">要从中检索元素的生成器。</param>
      <typeparam name="T">生成器中的项类型。</typeparam>
      <returns>列表中的第一个项（如果已找到）；否则，为项类型的默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>返回序列中的第一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <param name="immutableArray">要从中检索项的数组。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>列表中的第一个项（如果已找到）；否则，为项类型的默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足条件的第一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <param name="immutableArray">要从中检索元素的数组。</param>
      <param name="predicate">委托，用于定义要搜索的元素的条件。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>列表中的第一个项（如果已找到）；否则，为项类型的默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>返回集合中的最后一个元素。</summary>
      <param name="builder">要从中检索元素的生成器。</param>
      <typeparam name="T">生成器中的项类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">在集合为空时引发。</exception>
      <returns>生成器中的最后一个元素。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>返回数组的最后一个元素。</summary>
      <param name="immutableArray">要从中检索项的数组。</param>
      <typeparam name="T">数组包含的元素的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">在集合为空时引发。</exception>
      <returns>数组中的最后一个元素。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的最后一个元素。</summary>
      <param name="immutableArray">要从中检索元素的数组。</param>
      <param name="predicate">委托，用于定义要检索的元素的条件。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">在集合为空时引发。</exception>
      <returns>数组中满足 <paramref name="predicate" /> 条件的最后一个元素。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>返回集合中的最后一个元素；如果集合为空，则返回默认值。</summary>
      <param name="builder">要从中检索元素的生成器。</param>
      <typeparam name="T">生成器中的项类型。</typeparam>
      <returns>序列中的最后一个元素；如果序列中不包含任何元素，则为默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>返回序列中的最后一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <param name="immutableArray">要从中检索项的数组。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>序列中的最后一个元素；如果序列中不包含任何元素，则为默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足条件的最后一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <param name="immutableArray">要从中检索元素的数组。</param>
      <param name="predicate">委托，用于定义要搜索的元素的条件。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>序列中的最后一个元素；如果序列中不包含任何元素，则为默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>将序列中的每个元素投影到新表单。</summary>
      <param name="immutableArray">要从中选择项的不可变数组。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素为对源的每个元素调用转换函数的结果。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列合并为一个序列，并对其中每个元素调用结果选择器函数。</summary>
      <param name="immutableArray">不可变数组。</param>
      <param name="collectionSelector">应用于输入序列的每个元素的转换函数。</param>
      <param name="resultSelector">应用于中间序列的每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="immutableArray" /> 的元素类型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> 收集的中间元素的类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是通过以下方法得到的：对 <paramref name="immutableArray" /> 的每个元素调用一对多转换函数 <paramref name="collectionSelector" />，然后将这些序列元素中的每一个元素及其相应的源元素映射到一个结果元素。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据相等比较器确定两个序列是否相等。</summary>
      <param name="immutableArray">用于比较的数组。</param>
      <param name="items">用于比较的项。</param>
      <param name="comparer">用于检查相等性的比较器。</param>
      <typeparam name="TDerived">要比较的数组中元素的类型。</typeparam>
      <typeparam name="TBase">集合包含的元素的类型。</typeparam>
      <returns>如果指示序列相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据相等比较器确定两个序列是否相等。</summary>
      <param name="immutableArray">用于比较的数组。</param>
      <param name="items">用于比较的项。</param>
      <param name="comparer">用于检查相等性的比较器。</param>
      <typeparam name="TDerived">要比较的数组中元素的类型。</typeparam>
      <typeparam name="TBase">集合包含的元素的类型。</typeparam>
      <returns>如果指示序列相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary>根据相等比较器确定两个序列是否相等。</summary>
      <param name="immutableArray">用于比较的数组。</param>
      <param name="items">用于比较的项。</param>
      <param name="predicate">用于检查相等性的比较器。</param>
      <typeparam name="TDerived">要比较的数组中元素的类型。</typeparam>
      <typeparam name="TBase">集合包含的元素的类型。</typeparam>
      <returns>如果指示序列相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。</summary>
      <param name="immutableArray">要从中检索元素的数组。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>序列中的元素。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的唯一元素；如果有多个这样的元素存在，则会引发异常。</summary>
      <param name="immutableArray" />
      <param name="predicate" />
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>返回数组中的唯一元素；如果序列为空，则返回默认值；如果序列包含多个元素，此方法将引发异常。</summary>
      <param name="immutableArray">数组。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 包含多个元素。</exception>
      <returns>数组中的元素；如果数组为空，则为默认值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <param name="immutableArray">要从中获取元素的数组。</param>
      <param name="predicate">元素必须满足的条件。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">多个元素满足 <paramref name="predicate" /> 中的条件。</exception>
      <returns>如果该元素满足指定的条件，则返回该元素；否则返回默认元素。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>将此数组的内容复制到不可变数组。</summary>
      <param name="immutableArray" />
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>新实例化的数组。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary>基于此数组的内容创建字典。</summary>
      <param name="immutableArray">要从其创建字典的数组。</param>
      <param name="keySelector">键选择器。</param>
      <typeparam name="TKey">键的类型。</typeparam>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>新初始化的字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>基于此数组的内容创建字典。</summary>
      <param name="immutableArray">要从其创建字典的数组。</param>
      <param name="keySelector">键选择器。</param>
      <param name="comparer">用于初始化字典的比较器。</param>
      <typeparam name="TKey">键的类型。</typeparam>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>新初始化的字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary>基于此数组的内容创建字典。</summary>
      <param name="immutableArray">要从其创建字典的数组。</param>
      <param name="keySelector">键选择器。</param>
      <param name="elementSelector">元素选择器。</param>
      <typeparam name="TKey">键的类型。</typeparam>
      <typeparam name="TElement">元素的类型。</typeparam>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>新初始化的字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>基于此数组的内容创建字典。</summary>
      <param name="immutableArray">要从其创建字典的数组。</param>
      <param name="keySelector">键选择器。</param>
      <param name="elementSelector">元素选择器。</param>
      <param name="comparer">用于初始化字典的比较器。</param>
      <typeparam name="TKey">键的类型。</typeparam>
      <typeparam name="TElement">元素的类型。</typeparam>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>新初始化的字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>基于谓词筛选值序列。</summary>
      <param name="immutableArray">要筛选的数组。</param>
      <param name="predicate">用于筛选数组内容的条件。</param>
      <typeparam name="T">集合包含的元素的类型。</typeparam>
      <returns>返回 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含满足条件的元素。</returns>
    </member>
  </members>
</doc>