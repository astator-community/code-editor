<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualBasic.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualBasic.AppWinStyle">
      <summary>指示在调用 <see langword="Shell" /> 函数时用于被调用程序的窗口样式。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.Hide">
      <summary>窗口被隐藏，且焦点传递至隐藏的窗口。 此成员等效于 Visual Basic 常量 <see langword="vbHide" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.MaximizedFocus">
      <summary>窗口最大化，且具有焦点。 此成员等效于 Visual Basic 常量 <see langword="vbMaximizedFocus" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.MinimizedFocus">
      <summary>窗口显示为一个具有焦点的图标。 此成员等效于 Visual Basic 常量 <see langword="vbMinimizedFocus" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.MinimizedNoFocus">
      <summary>窗口显示为一个图标。 当前活动的窗口仍保持活动状态。 此成员等效于 Visual Basic 常量 <see langword="vbMinimizedNoFocus" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.NormalFocus">
      <summary>窗口具有焦点，且还原至其原始大小和位置。 此成员等效于 Visual Basic 常量 <see langword="vbNormalFocus" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.NormalNoFocus">
      <summary>窗口还原至其最近的大小和位置。 当前活动的窗口仍保持活动状态。 此成员等效于 Visual Basic 常量 <see langword="vbNormalNoFocus" />。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CallType">
      <summary>指示在调用 <see langword="CallByName" /> 函数时调用的过程类型。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Get">
      <summary>正在检索属性值。  此成员等效于 Visual Basic 常量 <see langword="vbGet" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Let">
      <summary>正在确定 Object 属性值。 此成员等效于 Visual Basic 常量 <see langword="vbLet" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Method">
      <summary>正在调用方法。  此成员等效于 Visual Basic 常量 <see langword="vbMethod" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Set">
      <summary>正在确定属性值。  此成员等效于 Visual Basic 常量 <see langword="vbSet" />。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Collection">
      <summary>Visual Basic <see langword="Collection" /> 是可作为单元引用的一组有序项。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.#ctor">
      <summary>创建并返回一个新的 Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> 对象。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
      <summary>将一个元素添加到 <see langword="Collection" /> 对象。</summary>
      <param name="Item">必需。 一个任意类型的对象，该对象指定要添加到集合的元素。</param>
      <param name="Key">可选。 指定键字符串的唯一 <see langword="String" /> 表达式，可以用此键字符串代替定位索引访问集合的这个新元素。</param>
      <param name="Before">可选。 指定集合中的相对位置的表达式。 将要添加的元素放在集合中由 <paramref name="Before" /> 参数标识的元素前面。 如果 <paramref name="Before" /> 是数值表达式，则它必须是介于 1 和集合的 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 属性值之间的数值。 如果 <paramref name="Before" /> 是 <see langword="String" /> 表达式，则必须对应于将引用的元素添加到集合时指定的键字符串。 不能同时指定 <paramref name="Before" /> 和 <paramref name="After" />。</param>
      <param name="After">可选。 指定集合中的相对位置的表达式。 将要添加的元素放在集合中由 <paramref name="After" /> 参数标识的元素后面。 如果 <paramref name="After" /> 是数值表达式，则它必须是介于 1 和集合的 <see langword="Count" /> 属性值之间的数值。 如果 <paramref name="After" /> 是 <see langword="String" /> 表达式，则必须对应于将引用的元素添加到集合时指定的键字符串。 不能同时指定 <paramref name="Before" /> 和 <paramref name="After" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Clear">
      <summary>删除 Visual Basic <see langword="Collection" /> 对象的所有元素。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
      <summary>返回一个值，该值指示 Visual Basic <see langword="Collection" /> 对象是否包含一个带有特定键的元素。</summary>
      <param name="Key">必需。 <see langword="String" /> 表达式，指定搜索集合的元素所用的键。</param>
      <returns>如果 Visual Basic <see langword="Collection" /> 对象包含一个带有特定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
      <summary>从 <see langword="Collection" /> 对象移除元素。</summary>
      <param name="Index">一个数值表达式，用于指定集合的元素位置。 <paramref name="Index" /> 必须为介于 1 到集合的 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 属性的值之间的数字。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
      <summary>从 <see langword="Collection" /> 对象移除元素。</summary>
      <param name="Key">指定键字符串的唯一 <see langword="String" /> 表达式，可以使用此键字符串代替位置索引访问集合中的元素。 <paramref name="Key" /> 必须对应于将元素添加到集合中时指定的 <paramref name="Key" /> 参数。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Count">
      <summary>获取集合中的元素数。</summary>
      <returns>集合中的元素数。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
      <summary>按位置或键获取 <see langword="Collection" /> 对象的特定元素。</summary>
      <param name="Index">一个数值表达式，用于指定集合的元素位置。 <paramref name="Index" /> 必须为介于 1 到集合的 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 属性的值之间的数字。 或 (B) 指定集合中元素的位置或键字符串的 <see langword="Object" /> 表达式。</param>
      <returns>对象的特定元素（ <see langword="Collection" /> 按位置或键）。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
      <summary>按位置或键获取 <see langword="Collection" /> 对象的特定元素。</summary>
      <param name="Index">一个数值表达式，用于指定集合的元素位置。 <paramref name="Index" /> 必须为介于 1 到集合的 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 属性的值之间的数字。 或 (B) 指定集合中元素的位置或键字符串的 <see langword="Object" /> 表达式。</param>
      <returns>对象的特定元素（ <see langword="Collection" /> 按位置或键）。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.String)">
      <summary>按位置或键获取 <see langword="Collection" /> 对象的特定元素。</summary>
      <param name="Key">指定键字符串的唯一 <see langword="String" /> 表达式，可以使用此键字符串代替位置索引访问集合中的元素。 <paramref name="Key" /> 必须对应于将元素添加到集合中时指定的 <paramref name="Key" /> 参数。</param>
      <returns>对象的特定元素（ <see langword="Collection" /> 按位置或键）。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.ComClassAttribute">
      <summary>
        <see langword="ComClassAttribute" /> 特性指示编译器添加使类可以作为 COM 对象公开的元数据。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor">
      <summary>初始化 <see langword="ComClassAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String)">
      <summary>初始化 <see langword="ComClassAttribute" /> 类的新实例。</summary>
      <param name="_ClassID">初始化用于唯一标识类的 <see langword="ClassID" /> 属性的值。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see langword="ComClassAttribute" /> 类的新实例。</summary>
      <param name="_ClassID">初始化用于唯一标识类的 <see langword="ClassID" /> 属性的值。</param>
      <param name="_InterfaceID">初始化用于唯一标识接口的 <see langword="InterfaceID" /> 属性的值。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String,System.String,System.String)">
      <summary>初始化 <see langword="ComClassAttribute" /> 类的新实例。</summary>
      <param name="_ClassID">初始化用于唯一标识类的 <see langword="ClassID" /> 属性的值。</param>
      <param name="_InterfaceID">初始化用于唯一标识接口的 <see langword="InterfaceID" /> 属性的值。</param>
      <param name="_EventId">初始化用来唯一标识事件的 <see langword="EventID" /> 属性的值。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.ClassID">
      <summary>获取一个用于唯一标识类的类 ID。</summary>
      <returns>只读。 一个字符串，它可由编译器使用以唯一标识在创建 COM 对象时的类。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.EventID">
      <summary>获取一个用于唯一标识事件的事件 ID。</summary>
      <returns>只读。 一个字符串，它可由编译器使用以唯一标识在创建 COM 对象时的类的事件。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.InterfaceID">
      <summary>获取一个用于唯一标识接口的接口 ID。</summary>
      <returns>只读。 一个字符串，它可由编译器使用以唯一标识在创建 COM 对象时的类的接口。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.InterfaceShadows">
      <summary>指示 COM 接口名称是否隐藏类或基类的另一个成员。</summary>
      <returns>一个 <see langword="Boolean" /> 值，它指示 COM 接口名称会隐藏类或基类的另一个成员。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompareMethod">
      <summary>指示当调用比较函数时如何比较字符串。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompareMethod.Binary">
      <summary>执行二进制比较。 此成员等效于 Visual Basic 常量 <see langword="vbBinaryCompare" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompareMethod.Text">
      <summary>执行文本比较。 此成员等效于 Visual Basic 常量 <see langword="vbTextCompare" />。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.BooleanType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.BooleanType.FromObject(System.Object)">
      <summary>返回一个对应于指定对象的 <see langword="Boolean" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Boolean" /> 值的对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Boolean" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.BooleanType.FromString(System.String)">
      <summary>返回与指定的字符串相对应的 <see langword="Boolean" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Boolean" /> 值的字符串。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Boolean" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ByteType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ByteType.FromObject(System.Object)">
      <summary>返回一个对应于指定对象的 <see langword="Byte" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Byte" /> 值的对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Byte" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ByteType.FromString(System.String)">
      <summary>返回与指定的字符串相对应的 <see langword="Byte" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Byte" /> 值的字符串。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Byte" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.CharArrayType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharArrayType.FromObject(System.Object)">
      <summary>返回一个对应于指定对象的 <see langword="CharArray" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="CharArray" /> 值的对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="CharArray" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharArrayType.FromString(System.String)">
      <summary>返回与指定的字符串相对应的 <see langword="CharArray" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="CharArray" /> 值的字符串。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="CharArray" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.CharType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharType.FromObject(System.Object)">
      <summary>返回一个对应于指定对象的 <see langword="Char" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Char" /> 值的对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Char" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharType.FromString(System.String)">
      <summary>返回与指定的字符串相对应的 <see langword="Char" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Char" /> 值的字符串。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Char" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Conversions">
      <summary>提供执行各种类型转换的方法。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ChangeType(System.Object,System.Type)">
      <summary>将对象转换为指定类型。</summary>
      <param name="Expression">要转换的对象。</param>
      <param name="TargetType">该对象要转换为的类型。</param>
      <returns>指定的目标类型的对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FallbackUserDefinedConversion(System.Object,System.Type)">
      <summary>将对象转换为指定类型。</summary>
      <param name="Expression">要转换的对象。</param>
      <param name="TargetType">该对象要转换为的类型。</param>
      <returns>指定的目标类型的对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharAndCount(System.Char,System.Int32)">
      <summary>给定字节数时，将 <see cref="T:System.Char" /> 值转换为字符串。</summary>
      <param name="Value">要转换的 <see langword="Char" /> 值。</param>
      <param name="Count">该 <see langword="Char" /> 值的字节数。</param>
      <returns>指定值的字符串表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharArray(System.Char[])">
      <summary>将 <see cref="T:System.Char" /> 数组转换为字符串。</summary>
      <param name="Value">要转换的 <see langword="Char" /> 数组。</param>
      <returns>指定数组的字符串表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharArraySubset(System.Char[],System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.Char" /> 数组的一个子集转换为字符串。</summary>
      <param name="Value">要转换的 <see langword="Char" /> 数组。</param>
      <param name="StartIndex">开始位置的索引（从零开始）。</param>
      <param name="Length">子集的长度（以字节为单位）。</param>
      <returns>从开始位置到指定长度的指定数组的字符串表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean(System.Object)">
      <summary>将对象转换为 <see cref="T:System.Boolean" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>一个 <see langword="Boolean" /> 值。 如果对象为 null，则返回 <see langword="False" />；否则返回 <see langword="True" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean(System.String)">
      <summary>将字符串转换为 <see cref="T:System.Boolean" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>一个 <see langword="Boolean" /> 值。 如果字符串为 null，则返回 <see langword="False" />；否则返回 <see langword="True" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToByte(System.Object)">
      <summary>将对象转换为 <see cref="T:System.Byte" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see langword="Byte" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToByte(System.String)">
      <summary>将字符串转换为 <see cref="T:System.Byte" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see langword="Byte" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToChar(System.Object)">
      <summary>将对象转换为 <see cref="T:System.Char" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see langword="Char" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToChar(System.String)">
      <summary>将字符串转换为 <see cref="T:System.Char" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see langword="Char" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToCharArrayRankOne(System.Object)">
      <summary>将对象转换为一维 <see cref="T:System.Char" /> 数组。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>一维 <see langword="Char" /> 数组。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToCharArrayRankOne(System.String)">
      <summary>将字符串转换为一维 <see cref="T:System.Char" /> 数组。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>一维 <see langword="Char" /> 数组。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDate(System.Object)">
      <summary>将对象转换为 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see langword="DateTime" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDate(System.String)">
      <summary>将字符串转换为 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see langword="DateTime" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.Boolean)">
      <summary>将 <see cref="T:System.Boolean" /> 值转换为 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="Value">要转换的布尔值。</param>
      <returns>该布尔值的 <see langword="Decimal" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.Object)">
      <summary>将对象转换为 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see langword="Decimal" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.String)">
      <summary>将字符串转换为 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see langword="Decimal" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble(System.Object)">
      <summary>将对象转换为 <see cref="T:System.Double" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see cref="T:System.Double" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble(System.String)">
      <summary>将字符串转换为 <see cref="T:System.Double" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see cref="T:System.Double" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToGenericParameter``1(System.Object)">
      <summary>将对象转换为泛型类型 <paramref name="T" />。</summary>
      <param name="Value">要转换的对象。</param>
      <typeparam name="T">
        <paramref name="Value" /> 所要转换到的类型。</typeparam>
      <returns>泛型类型 <paramref name="T" /> 的结构或对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger(System.Object)">
      <summary>将对象转换为整数值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see langword="int" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger(System.String)">
      <summary>将字符串转换为整数值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see langword="int" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToLong(System.Object)">
      <summary>将对象转换为 <see langword="Long" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see langword="Long" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToLong(System.String)">
      <summary>将字符串转换为 <see langword="Long" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see langword="Long" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSByte(System.Object)">
      <summary>将对象转换为 <see cref="T:System.SByte" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see langword="SByte" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSByte(System.String)">
      <summary>将字符串转换为 <see cref="T:System.SByte" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see langword="SByte" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToShort(System.Object)">
      <summary>将对象转换为 <see langword="Short" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see langword="Short" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToShort(System.String)">
      <summary>将字符串转换为 <see langword="Short" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see langword="Short" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSingle(System.Object)">
      <summary>将对象转换为 <see cref="T:System.Single" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see cref="T:System.Single" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSingle(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Single" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see cref="T:System.Single" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Boolean)">
      <summary>将 <see cref="T:System.Boolean" /> 值转换为 <see cref="T:System.String" />。</summary>
      <param name="Value">要转换的 <see langword="Boolean" /> 值。</param>
      <returns>该 <see langword="String" /> 值的 <see langword="Boolean" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Byte)">
      <summary>将 <see cref="T:System.Byte" /> 值转换为 <see cref="T:System.String" />。</summary>
      <param name="Value">要转换的 <see langword="Byte" /> 值。</param>
      <returns>该 <see langword="String" /> 值的 <see langword="Byte" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Char)">
      <summary>将 <see cref="T:System.Char" /> 值转换为 <see cref="T:System.String" />。</summary>
      <param name="Value">要转换的 <see langword="Char" /> 值。</param>
      <returns>该 <see langword="String" /> 值的 <see langword="Char" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.DateTime)">
      <summary>将 <see cref="T:System.DateTime" /> 值转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的 <see langword="DateTime" /> 值。</param>
      <returns>该 <see langword="String" /> 值的 <see langword="DateTime" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Decimal)">
      <summary>将 <see cref="T:System.Decimal" /> 值转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的 <see langword="Decimal" /> 值。</param>
      <returns>该 <see langword="String" /> 值的 <see langword="Decimal" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Decimal,System.Globalization.NumberFormatInfo)">
      <summary>使用指定的数字格式将 <see cref="T:System.Decimal" /> 值转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的 <see langword="decimal" /> 值。</param>
      <param name="NumberFormat">要使用的数字格式，根据 <see cref="T:System.Globalization.NumberFormatInfo" />。</param>
      <returns>该 <see langword="String" /> 值的 <see langword="Decimal" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Double)">
      <summary>将 <see cref="T:System.Double" /> 值转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的 <see cref="T:System.Double" /> 值。</param>
      <returns>
        <see cref="T:System.Double" /> 值的字符串表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Double,System.Globalization.NumberFormatInfo)">
      <summary>使用指定的数字格式将 <see cref="T:System.Double" /> 值转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的 <see cref="T:System.Double" /> 值。</param>
      <param name="NumberFormat">要使用的数字格式，根据 <see cref="T:System.Globalization.NumberFormatInfo" />。</param>
      <returns>
        <see cref="T:System.Double" /> 值的字符串表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int16)">
      <summary>将 <see langword="Short" /> 值转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的 <see langword="Short" /> 值。</param>
      <returns>该 <see langword="String" /> 值的 <see langword="Short" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int32)">
      <summary>将整数值转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的 <see langword="int" /> 值。</param>
      <returns>该 <see langword="String" /> 值的 <see langword="int" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int64)">
      <summary>将 <see langword="Long" /> 值转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的 <see langword="Long" /> 值。</param>
      <returns>该 <see langword="String" /> 值的 <see langword="Long" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Object)">
      <summary>将对象转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see langword="String" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Single)">
      <summary>将 <see cref="T:System.Single" /> 值（单精度浮点数）转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的 <see cref="T:System.Single" /> 值。</param>
      <returns>
        <see cref="T:System.Single" /> 值的字符串表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Single,System.Globalization.NumberFormatInfo)">
      <summary>使用指定的数字格式将 <see cref="T:System.Single" /> 值转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的 <see cref="T:System.Single" /> 值。</param>
      <param name="NumberFormat">要使用的数字格式，根据 <see cref="T:System.Globalization.NumberFormatInfo" />。</param>
      <returns>
        <see cref="T:System.Single" /> 值的字符串表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.UInt32)">
      <summary>将 <see langword="uint" /> 值转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的 <see langword="Uint" /> 值。</param>
      <returns>该 <see langword="String" /> 值的 <see langword="Uint" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.UInt64)">
      <summary>将 <see langword="Ulong" /> 值转换为 <see cref="T:System.String" /> 值。</summary>
      <param name="Value">要转换的 <see langword="Ulong" /> 值。</param>
      <returns>该 <see langword="String" /> 值的 <see langword="Ulong" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUInteger(System.Object)">
      <summary>将对象转换为 <see langword="Uint" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see langword="Uint" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUInteger(System.String)">
      <summary>将字符串转换为 <see langword="Uint" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see langword="Uint" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToULong(System.Object)">
      <summary>将对象转换为 <see langword="Ulong" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see langword="Ulong" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToULong(System.String)">
      <summary>将字符串转换为 <see langword="Ulong" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see langword="Ulong" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUShort(System.Object)">
      <summary>将对象转换为 <see langword="Ushort" /> 值。</summary>
      <param name="Value">要转换的对象。</param>
      <returns>该对象的 <see langword="Ushort" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUShort(System.String)">
      <summary>将字符串转换为 <see langword="Ushort" /> 值。</summary>
      <param name="Value">要转换的字符串。</param>
      <returns>该字符串的 <see langword="Ushort" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DateType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DateType.FromObject(System.Object)">
      <summary>返回一个对应于指定对象的 <see langword="Date" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Date" /> 值的对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Date" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DateType.FromString(System.String)">
      <summary>返回与指定的字符串相对应的 <see langword="Date" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Date" /> 值的字符串。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Date" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DateType.FromString(System.String,System.Globalization.CultureInfo)">
      <summary>返回与指定的字符串和区域性信息相对应的 <see langword="Date" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Date" /> 值的字符串。</param>
      <param name="culture">必需。 根据区域性定义如何设置日期值格式以及如何显示日期值的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Date" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DecimalType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromBoolean(System.Boolean)">
      <summary>返回与指定的 <see langword="Decimal" /> 值相对应的 <see langword="Boolean" /> 值。</summary>
      <param name="Value">必需。 将 <see langword="Boolean" /> 值转换为 <see langword="Decimal" /> 值。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Decimal" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromObject(System.Object)">
      <summary>返回一个对应于指定对象的 <see langword="Decimal" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Decimal" /> 值的对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Decimal" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromObject(System.Object,System.Globalization.NumberFormatInfo)">
      <summary>返回与指定的对象和数字格式信息相对应的 <see langword="Decimal" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Decimal" /> 值的对象。</param>
      <param name="NumberFormat">根据区域性定义如何设置数值格式以及如何显示数值的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Decimal" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromString(System.String)">
      <summary>返回与指定的字符串相对应的 <see langword="Decimal" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Decimal" /> 值的字符串。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Decimal" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromString(System.String,System.Globalization.NumberFormatInfo)">
      <summary>返回与指定的字符串和数字格式信息相对应的 <see langword="Decimal" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Decimal" /> 值的字符串。</param>
      <param name="NumberFormat">根据区域性定义如何设置数值格式以及如何显示数值的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Decimal" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.Parse(System.String,System.Globalization.NumberFormatInfo)">
      <summary>返回与指定的字符串和数字格式信息相对应的 <see langword="Decimal" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Decimal" /> 值的字符串。</param>
      <param name="NumberFormat">根据区域性定义如何设置数值格式以及如何显示数值的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Decimal" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute">
      <summary>应用于某个类时，编译器将从默认的综合构造函数隐式调用组件初始化方法。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute" /> 属性的新实例。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DoubleType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromObject(System.Object)">
      <summary>返回一个对应于指定对象的 <see cref="T:System.Double" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Double" /> 值的对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see cref="T:System.Double" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromObject(System.Object,System.Globalization.NumberFormatInfo)">
      <summary>返回一个对应于指定对象的 <see cref="T:System.Double" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Double" /> 值的对象。</param>
      <param name="NumberFormat">根据区域性定义如何设置数值格式以及如何显示数值的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see cref="T:System.Double" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromString(System.String)">
      <summary>返回与指定的字符串相对应的 <see cref="T:System.Double" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Double" /> 值的字符串。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see cref="T:System.Double" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromString(System.String,System.Globalization.NumberFormatInfo)">
      <summary>返回与指定的字符串和数字格式信息相对应的 <see cref="T:System.Double" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Double" /> 值的字符串。</param>
      <param name="NumberFormat">根据区域性定义如何设置数值格式以及如何显示数值的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see cref="T:System.Double" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.Parse(System.String)">
      <summary>返回与指定的字符串相对应的 <see cref="T:System.Double" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Double" /> 值的字符串。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see cref="T:System.Double" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.Parse(System.String,System.Globalization.NumberFormatInfo)">
      <summary>返回与指定的字符串和数字格式信息相对应的 <see cref="T:System.Double" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Double" /> 值的字符串。</param>
      <param name="NumberFormat">根据区域性定义如何设置数值格式以及如何显示数值的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see cref="T:System.Double" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization">
      <summary>Visual Basic 编译器在静态局部初始化过程中使用此类；不应从代码中直接调用此类。 如果静态局部变量无法初始化，将引发此类型的异常。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization" /> 类的新实例。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.IntegerType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IntegerType.FromObject(System.Object)">
      <summary>返回与指定的对象相对应的 <see langword="Integer" /> 值。</summary>
      <param name="Value">必需。 将转换为 <see langword="Integer" /> 值的对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Integer" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IntegerType.FromString(System.String)">
      <summary>返回与指定的字符串相对应的 <see langword="Integer" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Integer" /> 值的字符串。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Integer" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LateBinding">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateCall(System.Object,System.Type,System.String,System.Object[],System.String[],System.Boolean[])">
      <summary>对对象方法执行后期绑定调用。</summary>
      <param name="o">要对其调用方法的对象。</param>
      <param name="objType">对象的类型。</param>
      <param name="name">要调用的 <paramref name="o" /> 的方法名称。</param>
      <param name="args">一个由要传递给该方法的参数值构成的数组。</param>
      <param name="paramnames">一个数组，其中包含要向其传递 <paramref name="args" /> 数组中的值的参数的名称。</param>
      <param name="CopyBack">一个由 <see langword="Boolean" /> 值构成的数组，其中 <see langword="True" /> 指示已向关联的参数传递 <see langword="ByRef" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateGet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Boolean[])">
      <summary>从对象返回一个后期绑定值。</summary>
      <param name="o">要从其返回值的对象。</param>
      <param name="objType">对象的类型。</param>
      <param name="name">要从中检索值的 <paramref name="o" /> 的成员名称。</param>
      <param name="args">一个数组，其中包含指定 <paramref name="o" /> 中的位置的一个或多个索引值（如果 <paramref name="o" /> 是一维或多维数组），或包含要传递给对象 <paramref name="o" /> 的参数值。</param>
      <param name="paramnames">一个数组，其中包含要向其传递 <paramref name="args" /> 数组中的值的参数的名称。</param>
      <param name="CopyBack">一个由 <see langword="Boolean" /> 值构成的数组，其中 <see langword="True" /> 指示已向关联的参数传递 <see langword="ByRef" />。</param>
      <returns>如果 <paramref name="o" /> 是一个数组，则为 <paramref name="o" /> 中处于 <paramref name="args" /> 所指定的位置的值。 如果 <paramref name="o" /> 是一个对象，则为使用 <paramref name="o" /> 中的命名参数及其在 <paramref name="paramnames" /> 中的关联值调用 <paramref name="args" /> 时的返回值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateIndexGet(System.Object,System.Object[],System.String[])">
      <summary>使用指定的索引或参数从对象返回一个后期绑定值。</summary>
      <param name="o">要从其返回值的对象。</param>
      <param name="args">一个数组，其中包含指定 <paramref name="o" /> 中的位置的一个或多个索引值（如果 <paramref name="o" /> 是一维或多维数组），或包含要传递给对象 <paramref name="o" /> 的参数值。</param>
      <param name="paramnames">一个数组，其中包含要向其传递 <paramref name="args" /> 数组中的值的参数的名称。</param>
      <returns>如果 <paramref name="o" /> 是一个数组，则为 <paramref name="o" /> 中处于 <paramref name="args" /> 所指定的位置的值。 如果 <paramref name="o" /> 是一个对象，则为使用 <paramref name="o" /> 中的命名参数及其在 <paramref name="paramnames" /> 中的关联值调用 <paramref name="args" /> 时的返回值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateIndexSet(System.Object,System.Object[],System.String[])">
      <summary>使用指定的参数为对象设置一个后期绑定值。</summary>
      <param name="o">要为其设置值的对象。</param>
      <param name="args">一个数组，其中包含指定 <paramref name="o" /> 中的位置的一个或多个索引值（如果 <paramref name="o" /> 是一维或多维数组），或包含要传递给对象 <paramref name="o" /> 的参数值。</param>
      <param name="paramnames">一个数组，其中包含要向其传递 <paramref name="args" /> 数组中的值的参数的名称。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>使用指定的参数为对象设置一个后期绑定值。</summary>
      <param name="o">要为其设置值的对象。</param>
      <param name="args">一个数组，其中包含要传递给对象 <paramref name="o" /> 的一个或多个参数值。</param>
      <param name="paramnames">一个数组，其中包含要向其传递 <paramref name="args" /> 数组中的值的参数的名称。</param>
      <param name="OptimisticSet">如果禁止显示未找到集成员时引发的异常，则为 <see langword="True" />。</param>
      <param name="RValueBase">如果将 <paramref name="o" /> 标识为后期绑定表达式的结果，则为 <see langword="True" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[])">
      <summary>使用指定的参数为对象的成员设置一个后期绑定值。</summary>
      <param name="o">要为其设置成员值的对象。</param>
      <param name="objType">对象的类型。</param>
      <param name="name">要设置的成员名称。</param>
      <param name="args">一个数组，其中包含要传递给 <paramref name="o" /> 的成员的一个或多个参数值。</param>
      <param name="paramnames">一个数组，其中包含要向其传递 <paramref name="args" /> 数组中的值的参数的名称。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateSetComplex(System.Object,System.Type,System.String,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>使用指定的参数为对象的成员设置一个后期绑定值。</summary>
      <param name="o">要为其设置成员值的对象。</param>
      <param name="objType">对象的类型。</param>
      <param name="name">要设置的成员名称。</param>
      <param name="args">一个数组，其中包含要传递给 <paramref name="o" /> 的成员的一个或多个参数值。</param>
      <param name="paramnames">一个数组，其中包含要向其传递 <paramref name="args" /> 数组中的值的参数的名称。</param>
      <param name="OptimisticSet">如果禁止显示未找到集成员时引发的异常，则为 <see langword="True" />。</param>
      <param name="RValueBase">如果将 <paramref name="o" /> 标识为后期绑定表达式的结果，则为 <see langword="True" />。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LikeOperator">
      <summary>此类提供 Visual Basic 编译器用于完成 Like Operator 对应工作的帮助器。 不应直接从代码中调用此类。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeObject(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)">
      <summary>对给定的两个对象执行二进制字符串或文本字符串比较。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Source">要比较的字符串。</param>
      <param name="Pattern">要与 <paramref name="Source" /> 进行比较的字符串。</param>
      <param name="CompareOption">指定是否使用文本比较的 <see cref="T:Microsoft.VisualBasic.CompareMethod" /> 枚举。 如果为 <see cref="F:Microsoft.VisualBasic.CompareMethod.Text" />，则此方法使用文本比较；如果为 <see cref="F:Microsoft.VisualBasic.CompareMethod.Binary" />，则此方法使用二进制比较。</param>
      <returns>如果字符串匹配，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>对给定的两个字符串执行二进制字符串或文本字符串比较。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Source">要比较的字符串。</param>
      <param name="Pattern">要与 <paramref name="Source" /> 进行比较的字符串。</param>
      <param name="CompareOption">指定是否使用文本比较的 <see cref="T:Microsoft.VisualBasic.CompareMethod" /> 枚举。 如果为 <see cref="F:Microsoft.VisualBasic.CompareMethod.Text" />，则此方法使用文本比较；如果为 <see cref="F:Microsoft.VisualBasic.CompareMethod.Binary" />，则此方法使用二进制比较。</param>
      <returns>如果字符串匹配，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LongType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LongType.FromObject(System.Object)">
      <summary>返回一个对应于指定对象的 <see langword="Long" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Long" /> 值的对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Long" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LongType.FromString(System.String)">
      <summary>返回与指定的字符串相对应的 <see langword="Long" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Long" /> 值的字符串。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Long" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.NewLateBinding">
      <summary>此类提供了一些供 Visual Basic 编译器用于后期绑定调用的帮助器；此类不宜从您的代码直接调用。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackCall(System.Object,System.String,System.Object[],System.String[],System.Boolean)">
      <summary>执行后期绑定方法或函数调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="MemberName">调用对象上的属性或方法的名称。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <param name="IgnoreReturn">一个 <see langword="Boolean" /> 值，指示是否可以忽略返回值。</param>
      <returns>调用对象的实例。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackGet(System.Object,System.String,System.Object[],System.String[])">
      <summary>执行后期绑定属性获取或字段访问调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="MemberName">调用对象上的属性或方法的名称。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <returns>调用对象的实例。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackIndexSet(System.Object,System.Object[],System.String[])">
      <summary>执行后期绑定属性设置或字段写入调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>执行后期绑定属性设置或字段写入调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <param name="OptimisticSet">一个 <see langword="Boolean" /> 值，用于确定设置操作是否起作用。 如果确定已经在属性或字段中设置了中间值，则设置为 <see langword="True" />，否则设置为 <see langword="False" />。</param>
      <param name="RValueBase">一个 <see langword="Boolean" /> 值，该值指定后期引用的基引用何时为 <see langword="RValue" />。 当后期引用的基引用为 <see langword="True" /> 时，则设置为 <see langword="RValue" />；这允许您在后期赋值给值类型的 <see langword="RValues" /> 的字段时生成运行时异常。 否则设置为 <see langword="False" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackInvokeDefault1(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>执行默认属性或字段的后期绑定获取，或执行对默认方法或函数的调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。 如果 <paramref name="Instance" /> 的类型为 <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" />，则使用动态语言运行时进行绑定；否则执行标准后期绑定。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <param name="ReportErrors">一个 <see langword="Boolean" /> 值，用于指定在遇到错误时是否引发异常。 设置为 <see langword="True" /> 可引发异常。 设置为 <see langword="False" /> 可在遇到错误时返回 <see langword="Nothing" />。</param>
      <returns>调用对象的实例。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackInvokeDefault2(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>执行默认属性或字段的后期绑定获取，或执行对默认方法或函数的调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <param name="ReportErrors">一个 <see langword="Boolean" /> 值，用于指定在遇到错误时是否引发异常。 设置为 <see langword="True" /> 可引发异常。 设置为 <see langword="False" /> 可在遇到错误时返回 <see langword="Nothing" />。</param>
      <returns>调用对象的实例。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackSet(System.Object,System.String,System.Object[])">
      <summary>执行后期绑定属性设置或字段写入调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="MemberName">调用对象上的属性或方法的名称。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackSetComplex(System.Object,System.String,System.Object[],System.Boolean,System.Boolean)">
      <summary>执行后期绑定属性设置或字段写入调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="MemberName">调用对象上的属性或方法的名称。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="OptimisticSet">一个 <see langword="Boolean" /> 值，用于确定设置操作是否起作用。 如果确定已经在属性或字段中设置了中间值，则设置为 <see langword="True" />，否则设置为 <see langword="False" />。</param>
      <param name="RValueBase">一个 <see langword="Boolean" /> 值，该值指定后期引用的基引用何时为 <see langword="RValue" />。 当后期引用的基引用为 <see langword="True" /> 时，则设置为 <see langword="RValue" />；这允许您在后期赋值给值类型的 <see langword="RValues" /> 的字段时生成运行时异常。 否则设置为 <see langword="False" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCall(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean[],System.Boolean)">
      <summary>执行后期绑定方法或函数调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Type">调用对象的类型。</param>
      <param name="MemberName">调用对象上的属性或方法的名称。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <param name="TypeArguments">参数类型的数组；只用于传递参数类型的泛型调用。</param>
      <param name="CopyBack">
        <see langword="Boolean" /> 值的数组，后期联编程序使用此数组与调用站点进行回归通信，该调用站点的变量匹配 <see langword="ByRef" /> 参数。 每个 <see langword="True" /> 值均指示参数匹配，并指示应在完成对 <see langword="LateCall" /> 的调用后将其复制出来。</param>
      <param name="IgnoreReturn">一个 <see langword="Boolean" /> 值，指示是否可以忽略返回值。</param>
      <returns>调用对象的实例。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCallInvokeDefault(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>执行对默认方法或函数的后期绑定调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <param name="ReportErrors">一个 <see langword="Boolean" /> 值，用于指定在遇到错误时是否引发异常。 设置为 <see langword="True" /> 可引发异常。 设置为 <see langword="False" /> 可在遇到错误时返回 <see langword="Nothing" />。</param>
      <returns>调用对象的实例。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean[])">
      <summary>执行后期绑定属性获取或字段访问调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Type">调用对象的类型。</param>
      <param name="MemberName">调用对象上的属性或方法的名称。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <param name="TypeArguments">参数类型的数组；只用于传递参数类型的泛型调用。</param>
      <param name="CopyBack">
        <see langword="Boolean" /> 值的数组，后期联编程序使用此数组与调用站点进行回归通信，该调用站点的变量匹配 <see langword="ByRef" /> 参数。 每个 <see langword="True" /> 值均指示参数匹配，并指示应在完成对 <see langword="LateCall" /> 的调用后将其复制出来。</param>
      <returns>调用对象的实例。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGetInvokeDefault(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>执行默认属性或字段的后期绑定获取。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <param name="ReportErrors">一个 <see langword="Boolean" /> 值，用于指定在遇到错误时是否引发异常。 设置为 <see langword="True" /> 可引发异常。 设置为 <see langword="False" /> 可在遇到错误时返回 <see langword="Nothing" />。</param>
      <returns>调用对象的实例。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexGet(System.Object,System.Object[],System.String[])">
      <summary>执行后期绑定属性获取或字段访问调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <returns>调用对象的实例。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSet(System.Object,System.Object[],System.String[])">
      <summary>执行后期绑定属性设置或字段写入调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>执行后期绑定属性设置或字段写入调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <param name="OptimisticSet">一个 <see langword="Boolean" /> 值，用于确定设置操作是否起作用。 如果确定已经在属性或字段中设置了中间值，则设置为 <see langword="True" />，否则设置为 <see langword="False" />。</param>
      <param name="RValueBase">一个 <see langword="Boolean" /> 值，该值指定后期引用的基引用何时为 <see langword="RValue" />。 当后期引用的基引用为 <see langword="True" /> 时，则设置为 <see langword="RValue" />；这允许您在后期赋值给值类型的 <see langword="RValues" /> 的字段时生成运行时异常。 否则设置为 <see langword="False" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[])">
      <summary>执行后期绑定属性设置或字段写入调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Type">调用对象的类型。</param>
      <param name="MemberName">调用对象上的属性或方法的名称。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <param name="TypeArguments">参数类型的数组；只用于传递参数类型的泛型调用。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean,System.Boolean,Microsoft.VisualBasic.CallType)">
      <summary>执行后期绑定属性设置或字段写入调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Type">调用对象的类型。</param>
      <param name="MemberName">调用对象上的属性或方法的名称。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <param name="TypeArguments">参数类型的数组；只用于传递参数类型的泛型调用。</param>
      <param name="OptimisticSet">一个 <see langword="Boolean" /> 值，用于确定设置操作是否起作用。 如果确定已经在属性或字段中设置了中间值，则设置为 <see langword="True" />，否则设置为 <see langword="False" />。</param>
      <param name="RValueBase">一个 <see langword="Boolean" /> 值，该值指定后期引用的基引用何时为 <see langword="RValue" />。 当后期引用的基引用为 <see langword="True" /> 时，则设置为 <see langword="RValue" />；这允许您在后期赋值给值类型的 <see langword="RValues" /> 的字段时生成运行时异常。 否则设置为 <see langword="False" />。</param>
      <param name="CallType">类型 <see cref="T:Microsoft.VisualBasic.CallType" /> 的一个枚举成员，它表示正在被调用的过程的类型。 CallType 的值可以是 <see langword="Method" />、<see langword="Get" /> 或 <see langword="Set" />。 仅使用 <see langword="Set" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSetComplex(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean,System.Boolean)">
      <summary>执行后期绑定属性设置或字段写入调用。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="Instance">公开属性或方法的调用对象的实例。</param>
      <param name="Type">调用对象的类型。</param>
      <param name="MemberName">调用对象上的属性或方法的名称。</param>
      <param name="Arguments">一个数组，包含要传递给正在被调用的属性或方法的参数。</param>
      <param name="ArgumentNames">参数名称的数组。</param>
      <param name="TypeArguments">参数类型的数组；只用于传递参数类型的泛型调用。</param>
      <param name="OptimisticSet">一个 <see langword="Boolean" /> 值，用于确定设置操作是否起作用。 如果确定已经在属性或字段中设置了中间值，则设置为 <see langword="True" />，否则设置为 <see langword="False" />。</param>
      <param name="RValueBase">一个 <see langword="Boolean" /> 值，该值指定后期引用的基引用何时为 <see langword="RValue" />。 当后期引用的基引用为 <see langword="True" /> 时，则设置为 <see langword="RValue" />；这允许您在后期赋值给值类型的 <see langword="RValues" /> 的字段时生成运行时异常。 否则设置为 <see langword="False" />。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl">
      <summary>Visual Basic 编译器将此类用于对象流控制；这并不意味着要从您的代码中直接调用它。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.CheckForSyncLockOnValueType(System.Object)">
      <summary>检查指定类型上的同步锁。</summary>
      <param name="Expression">检查同步锁的数据类型。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl">
      <summary>向 Visual Basic 编译器提供用于编译 <see langword="For...Next" /> 循环的服务。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)">
      <summary>初始化一个 <see langword="For...Next" /> 循环。</summary>
      <param name="Counter">循环计数器变量。</param>
      <param name="Start">循环计数器的初始值。</param>
      <param name="Limit">
        <see langword="To" /> 选项的值。</param>
      <param name="StepValue">
        <see langword="Step" /> 选项的值。</param>
      <param name="LoopForResult">一个对象，其中包含循环值的已验证值。</param>
      <param name="CounterResult">下一个循环迭代的计数器值。</param>
      <returns>如果循环已终止，则为 <see langword="False" />；否则为 <see langword="True" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)">
      <summary>检查循环计数器的有效值以及 <see langword="Step" /> 和 <see langword="To" /> 值。</summary>
      <param name="count">必需。 一个 <see langword="Decimal" /> 值，表示为循环计数器变量传递的初始值。</param>
      <param name="limit">必需。 一个 <see langword="Decimal" /> 值，表示使用 <see langword="To" /> 关键字传递的值。</param>
      <param name="StepValue">必需。 一个 <see langword="Decimal" /> 值，表示使用 <see langword="Step" /> 关键字传递的值。</param>
      <returns>如果 <paramref name="StepValue" /> 大于零且 <paramref name="count" /> 小于或等于 <paramref name="limit" />，或者 <paramref name="StepValue" /> 小于或等于零且 <paramref name="count" /> 大于或等于 <paramref name="limit" />，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object,System.Object,System.Object@)">
      <summary>使 <see langword="For...Next" /> 循环次数递增。</summary>
      <param name="Counter">循环计数器变量。</param>
      <param name="LoopObj">一个对象，其中包含循环值的已验证值。</param>
      <param name="CounterResult">下一个循环迭代的计数器值。</param>
      <returns>如果循环已终止，则为 <see langword="False" />；否则为 <see langword="True" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single,System.Single,System.Single)">
      <summary>检查循环计数器的有效值以及 <see langword="Step" /> 和 <see langword="To" /> 值。</summary>
      <param name="count">必需。 一个 <see cref="T:System.Single" /> 值，表示为循环计数器变量传递的初始值。</param>
      <param name="limit">必需。 一个 <see cref="T:System.Single" /> 值，表示使用 <see langword="To" /> 关键字传递的值。</param>
      <param name="StepValue">必需。 一个 <see cref="T:System.Single" /> 值，表示使用 <see langword="Step" /> 关键字传递的值。</param>
      <returns>如果 <paramref name="StepValue" /> 大于零且 <paramref name="count" /> 小于或等于 <paramref name="limit" />，或者 <paramref name="StepValue" /> 小于或等于零且 <paramref name="count" /> 大于或等于 <paramref name="limit" />，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double,System.Double,System.Double)">
      <summary>检查循环计数器的有效值以及 <see langword="Step" /> 和 <see langword="To" /> 值。</summary>
      <param name="count">必需。 一个 <see cref="T:System.Double" /> 值，表示为循环计数器变量传递的初始值。</param>
      <param name="limit">必需。 一个 <see cref="T:System.Double" /> 值，表示使用 <see langword="To" /> 关键字传递的值。</param>
      <param name="StepValue">必需。 一个 <see cref="T:System.Double" /> 值，表示使用 <see langword="Step" /> 关键字传递的值。</param>
      <returns>如果 <paramref name="StepValue" /> 大于零且 <paramref name="count" /> 小于或等于 <paramref name="limit" />，或者 <paramref name="StepValue" /> 小于或等于零且 <paramref name="count" /> 大于或等于 <paramref name="limit" />，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.CompilerServices.ObjectType" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj(System.Object,System.Object)">
      <summary>执行加法 (+) 运算。</summary>
      <param name="o1">必需。 任何数值表达式。</param>
      <param name="o2">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="o1" /> 与 <paramref name="o2" /> 的和。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj(System.Object,System.Object)">
      <summary>执行按位 <see langword="And" /> 运算。</summary>
      <param name="obj1">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <param name="obj2">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <returns>如果 <paramref name="obj1" /> 和 <paramref name="obj2" /> 的计算结果都是 1，则为 1；否则为 0。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj(System.Object,System.Object)">
      <summary>执行按位 <see langword="Or" /> 运算。</summary>
      <param name="obj1">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <param name="obj2">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <returns>如果 <paramref name="obj1" /> 和 <paramref name="obj2" /> 的计算结果都是 0，则为 0；否则为 1。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj(System.Object,System.Object)">
      <summary>执行 <see langword="Xor" /> 运算。</summary>
      <param name="obj1">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <param name="obj2">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <returns>一个数值，表示两个数值位模式的按位异运算（互斥按位析取）的结果。 有关详细信息，请参阅 Xor 运算符。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj(System.Object,System.Object)">
      <summary>执行除法 (/) 运算。</summary>
      <param name="o1">必需。 任何数值表达式。</param>
      <param name="o2">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="o1" /> 除以 <paramref name="o2" /> 的完整商，包括任何余数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive(System.Object)">
      <summary>返回装箱的基元值。 此方法用于防止多次复制结构。</summary>
      <param name="o">必需。 任何表达式。</param>
      <returns>类型化为对象的 <paramref name="o" /> 的基元值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj(System.Object,System.Object)">
      <summary>执行整除 (\) 运算。</summary>
      <param name="o1">必需。 任何数值表达式。</param>
      <param name="o2">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="o1" /> 除以 <paramref name="o2" /> 的整数商，它丢弃了所有余数，而只保留整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)">
      <summary>执行 <see langword="Like" /> 比较。</summary>
      <param name="vLeft">必需。 任何表达式。</param>
      <param name="vRight">必需。 任何符合 Like 运算符中所述的模式匹配约定的字符串表达式。</param>
      <param name="CompareOption">必需。 一个 <see cref="T:Microsoft.VisualBasic.CompareMethod" /> 值，指定运算使用文本比较或二进制比较。</param>
      <returns>如果 <paramref name="vLeft" /> 中的值的字符串表示形式满足 <paramref name="vRight" /> 中包含的模式的要求，则为 <see langword="True" />；否则为 <see langword="False" />。 如果 <paramref name="vLeft" /> 和 <paramref name="vRight" /> 都是 <see langword="True" />，则为 <see langword="Nothing" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj(System.Object,System.Object)">
      <summary>执行取余 (<see langword="Mod" />) 运算。</summary>
      <param name="o1">必需。 任何数值表达式。</param>
      <param name="o2">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="o1" /> 除以 <paramref name="o2" /> 后所得的余数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj(System.Object,System.Object)">
      <summary>执行乘法 (*) 运算。</summary>
      <param name="o1">必需。 任何数值表达式。</param>
      <param name="o2">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="o1" /> 与 <paramref name="o2" /> 的乘积。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj(System.Object)">
      <summary>执行一元负 (-) 运算。</summary>
      <param name="obj">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="obj" /> 的负值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj(System.Object)">
      <summary>执行 <see langword="Not" /> 运算。</summary>
      <param name="obj">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <returns>对于 <see langword="Boolean" /> 运算，如果 <paramref name="obj" /> 为 <see langword="False" />，则为 <see langword="True" />；否则为 <see langword="True" />。 对于按位运算，如果 <paramref name="obj" /> 为 0，则为 1；否则为 0。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst(System.Object,System.Object,System.Boolean)">
      <summary>对给定的两个对象执行二进制字符串或文本字符串比较。</summary>
      <param name="o1">必需。 任何表达式。</param>
      <param name="o2">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>
        <list type="table">
          <listheader>
            <term> “值”</term>
            <description> 条件</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="o1" /> 小于 <paramref name="o2" />。</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="o1" /> 等于 <paramref name="o2" />。</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="o1" /> 大于 <paramref name="o2" />。</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj(System.Object)">
      <summary>执行一元正 (+) 运算。</summary>
      <param name="obj">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="obj" /> 的值。 （<paramref name="obj" /> 的符号不变。）</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj(System.Object,System.Object)">
      <summary>执行指数 (^) 运算。</summary>
      <param name="obj1">必需。 任何数值表达式。</param>
      <param name="obj2">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="obj1" /> 的 <paramref name="obj2" /> 次幂的计算结果。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj(System.Object,System.Int32)">
      <summary>执行算数左移 (&lt;&lt;) 运算。</summary>
      <param name="o1">必需。 整型数值表达式。 要进行移位的位模式。 数据类型必须为整型（<see langword="SByte" />、<see langword="Byte" />、<see langword="Short" />、<see langword="UShort" />、<see langword="Integer" />、<see langword="UInteger" />、<see langword="Long" /> 或 <see langword="ULong" />）。</param>
      <param name="amount">必需。 数值表达式。 要将该位模式移位的位数。 数据类型必须为 <see langword="Integer" /> 或扩展到 <see langword="Integer" />。</param>
      <returns>一个整型数值， 对该位模式进行移位的结果。 数据类型与 <paramref name="o1" /> 的数据类型相同。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj(System.Object,System.Int32)">
      <summary>执行算数右移 (&gt;&gt;) 运算。</summary>
      <param name="o1">必需。 整型数值表达式。 要进行移位的位模式。 数据类型必须为整型（<see langword="SByte" />、<see langword="Byte" />、<see langword="Short" />、<see langword="UShort" />、<see langword="Integer" />、<see langword="UInteger" />、<see langword="Long" /> 或 <see langword="ULong" />）。</param>
      <param name="amount">必需。 数值表达式。 要将该位模式移位的位数。 数据类型必须为 <see langword="Integer" /> 或扩展到 <see langword="Integer" />。</param>
      <returns>一个整型数值， 对该位模式进行移位的结果。 数据类型与 <paramref name="o1" /> 的数据类型相同。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj(System.Object,System.Object)">
      <summary>执行字符串串联 (&amp;) 运算。</summary>
      <param name="vLeft">必需。 任何表达式。</param>
      <param name="vRight">必需。 任何表达式。</param>
      <returns>一个字符串，表示 <paramref name="vLeft" /> 和 <paramref name="vRight" /> 的串联。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj(System.Object,System.Object)">
      <summary>执行减法 (-) 运算。</summary>
      <param name="o1">必需。 任何数值表达式。</param>
      <param name="o2">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="o1" /> 和 <paramref name="o2" /> 之间的差值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj(System.Object,System.Object)">
      <summary>执行 <see langword="Xor" /> 比较。</summary>
      <param name="obj1">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <param name="obj2">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <returns>一个 <see langword="Boolean" /> 值或数值。 对于 <see langword="Boolean" /> 比较，返回值是两个 <see langword="Boolean" /> 值的逻辑异运算（互斥逻辑析取）的结果。 对于按位（数值）运算，返回值是表示两个数值位模式的按位异运算（互斥按位析取）结果的数值。 有关详细信息，请参阅 Xor 运算符。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Operators">
      <summary>提供后期绑定的数学运算符，例如 Visual Basic 编译器在内部使用的 <see cref="M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)" /> 和 <see cref="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)" />。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)">
      <summary>表示 Visual Basic 加法 (+) 运算符。</summary>
      <param name="Left">必需。 任何数值表达式。</param>
      <param name="Right">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="Left" /> 与 <paramref name="Right" /> 的和。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)">
      <summary>表示 Visual Basic <see langword="And" /> 运算符。</summary>
      <param name="Left">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <param name="Right">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <returns>对于 <see langword="Boolean" /> 运算，如果 <paramref name="Left" /> 和 <paramref name="Right" /> 的计算结果都是 <see langword="True" />，则为 <see langword="True" />；否则为 <see langword="False" />。 对于按位运算，如果 <paramref name="Left" /> 和 <paramref name="Right" /> 的计算结果都是 1，则为 1；否则为 0。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)">
      <summary>表示 Visual Basic 相等 (=) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>如果 <paramref name="Left" /> 和 <paramref name="Right" /> 相等，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)">
      <summary>表示 Visual Basic 大于 (&gt;) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>如果 <see langword="True" /> 大于 <paramref name="Left" />，则为 <paramref name="Right" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)">
      <summary>表示 Visual Basic 大于或等于 (&gt;=) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>如果 <paramref name="Left" /> 大于等于 <paramref name="Right" />，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)">
      <summary>表示 Visual Basic 小于 (&lt;) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>如果 <paramref name="Left" /> 小于 <paramref name="Right" />，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)">
      <summary>表示 Visual Basic 小于或等于 (&lt;=) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>如果 <paramref name="Left" /> 小于等于 <paramref name="Right" />，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)">
      <summary>表示 Visual Basic 不等于 (&lt;&gt;) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>如果 <see langword="True" /> 不等于 <paramref name="Left" />，则为 <paramref name="Right" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)">
      <summary>对给定的两个字符串执行二进制字符串或文本字符串比较。</summary>
      <param name="Left">必需。 任何 <see langword="String" /> 表达式。</param>
      <param name="Right">必需。 任何 <see langword="String" /> 表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>
        <list type="table">
          <listheader>
            <term> “值”</term>
            <description> 条件</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="Left" /> 小于 <paramref name="Right" />。</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="Left" /> 等于 <paramref name="Right" />。</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="Left" /> 大于 <paramref name="Right" />。</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)">
      <summary>表示 Visual Basic 串联 (&amp;) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <returns>一个字符串，表示 <paramref name="Left" /> 和 <paramref name="Right" /> 的串联。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)">
      <summary>表示重载的 Visual Basic 相等 (=) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>重载的“等于”运算符的结果。 如果不支持运算符重载，则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)">
      <summary>表示重载的 Visual Basic 大于 (&gt;) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>重载的“大于”运算符的结果。 如果不支持运算符重载，则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)">
      <summary>表示重载的 Visual Basic 大于或等于 (&gt;=) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>重载的“大于或等于”运算符的结果。 如果不支持运算符重载，则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)">
      <summary>表示重载的 Visual Basic 小于 (&lt;) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>重载的“小于”运算符的结果。 如果不支持运算符重载，则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)">
      <summary>表示重载的 Visual Basic 小于或等于 (&lt;=) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>重载的“小于或等于”运算符的结果。 如果不支持运算符重载，则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)">
      <summary>表示重载的 Visual Basic 不等于 (&lt;&gt;) 运算符。</summary>
      <param name="Left">必需。 任何表达式。</param>
      <param name="Right">必需。 任何表达式。</param>
      <param name="TextCompare">必需。 如果执行不区分大小写的字符串比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>重载的“不等于”运算符的结果。 如果不支持运算符重载，则为 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)">
      <summary>表示 Visual Basic 除法 (/) 运算符。</summary>
      <param name="Left">必需。 任何数值表达式。</param>
      <param name="Right">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="Left" /> 除以 <paramref name="Right" /> 的完整商，包括任何余数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)">
      <summary>表示 Visual Basic 指数 (^) 运算符。</summary>
      <param name="Left">必需。 任何数值表达式。</param>
      <param name="Right">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="Left" /> 的 <paramref name="Right" /> 次幂的计算结果。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.FallbackInvokeUserDefinedOperator(System.Object,System.Object[])">
      <summary>执行用户定义的运算符的后期绑定计算。 此帮助器方法不宜从您的代码直接调用。</summary>
      <param name="vbOp">用户定义的运算符。</param>
      <param name="arguments" />
      <returns>从用户定义的运算符返回的结果。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)">
      <summary>表示 Visual Basic 整除 (\) 运算符。</summary>
      <param name="Left">必需。 任何数值表达式。</param>
      <param name="Right">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="Left" /> 除以 <paramref name="Right" /> 的整数商，它丢弃了所有余数，而只保留整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)">
      <summary>表示 Visual Basic 算术左移位 (&lt;&lt;) 运算符。</summary>
      <param name="Operand">必需。 整型数值表达式。 要进行移位的位模式。 数据类型必须为整型（<see langword="SByte" />、<see langword="Byte" />、<see langword="Short" />、<see langword="UShort" />、<see langword="Integer" />、<see langword="UInteger" />、<see langword="Long" /> 或 <see langword="ULong" />）。</param>
      <param name="Amount">必需。 数值表达式。 要将该位模式移位的位数。 数据类型必须为 <see langword="Integer" /> 或扩展到 <see langword="Integer" />。</param>
      <returns>一个整型数值， 对该位模式进行移位的结果。 数据类型与 <paramref name="Operand" /> 的数据类型相同。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)">
      <summary>表示 Visual Basic <see langword="Mod" /> 运算符。</summary>
      <param name="Left">必需。 任何数值表达式。</param>
      <param name="Right">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="Left" /> 除以 <paramref name="Right" /> 后所得的余数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)">
      <summary>表示 Visual Basic 乘法 (*) 运算符。</summary>
      <param name="Left">必需。 任何数值表达式。</param>
      <param name="Right">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="Left" /> 与 <paramref name="Right" /> 的乘积。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)">
      <summary>表示 Visual Basic 一元负 (-) 运算符。</summary>
      <param name="Operand">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="Operand" /> 的负值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)">
      <summary>表示 Visual Basic <see langword="Not" /> 运算符。</summary>
      <param name="Operand">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <returns>对于 <see langword="Boolean" /> 运算，如果 <paramref name="Operand" /> 为 <see langword="False" />，则为 <see langword="True" />；否则为 <see langword="True" />。 对于按位运算，如果 <paramref name="Operand" /> 为 0，则为 1；否则为 0。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)">
      <summary>表示 Visual Basic <see langword="Or" /> 运算符。</summary>
      <param name="Left">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <param name="Right">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <returns>对于 <see langword="Boolean" /> 运算，如果 <paramref name="Left" /> 和 <paramref name="Right" /> 的计算结果都是 <see langword="False" />，则为 <see langword="False" />；否则为 <see langword="True" />。 对于按位运算，如果 <paramref name="Left" /> 和 <paramref name="Right" /> 的计算结果都是 0，则为 0；否则为 1。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)">
      <summary>表示 Visual Basic 一元正 (+) 运算符。</summary>
      <param name="Operand">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="Operand" /> 的值。 （<paramref name="Operand" /> 的符号不变。）</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)">
      <summary>表示 Visual Basic 算术右移位 (&gt;&gt;) 运算符。</summary>
      <param name="Operand">必需。 整型数值表达式。 要进行移位的位模式。 数据类型必须为整型（<see langword="SByte" />、<see langword="Byte" />、<see langword="Short" />、<see langword="UShort" />、<see langword="Integer" />、<see langword="UInteger" />、<see langword="Long" /> 或 <see langword="ULong" />）。</param>
      <param name="Amount">必需。 数值表达式。 要将该位模式移位的位数。 数据类型必须为 <see langword="Integer" /> 或扩展到 <see langword="Integer" />。</param>
      <returns>一个整型数值， 对该位模式进行移位的结果。 数据类型与 <paramref name="Operand" /> 的数据类型相同。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)">
      <summary>表示 Visual Basic 减法 (-) 运算符。</summary>
      <param name="Left">必需。 任何数值表达式。</param>
      <param name="Right">必需。 任何数值表达式。</param>
      <returns>
        <paramref name="Left" /> 和 <paramref name="Right" /> 之间的差值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)">
      <summary>表示 Visual Basic <see langword="Xor" /> 运算符。</summary>
      <param name="Left">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <param name="Right">必需。 任何 <see langword="Boolean" /> 或数值表达式。</param>
      <returns>一个 <see langword="Boolean" /> 值或数值。 对于 <see langword="Boolean" /> 比较，返回值是两个 <see langword="Boolean" /> 值的逻辑异运算（互斥逻辑析取）的结果。 对于按位（数值）运算，返回值是表示两个数值位模式的按位异运算（互斥按位析取）结果的数值。 有关详细信息，请参阅 Xor 运算符。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute">
      <summary>指定应该将当前的 <see langword="Option Compare" /> 设置作为参数的默认值传递。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute">
      <summary>Visual Basic 编译器发出此 helper 类是为了指示（用于 Visual Basic 调试）要使用二进制比较选项还是文本比较选项。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute" /> 类的新实例。 这是一个帮助器方法。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ProjectData">
      <summary>为 Visual Basic <see langword="Err" /> 对象提供帮助器。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.ClearProjectError">
      <summary>执行 <see langword="Clear" /> 对象的 <see langword="Err" /> 方法的操作。 即帮助器方法。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.CreateProjectError(System.Int32)">
      <summary>执行 <see langword="Raise" /> 对象的 <see langword="Err" /> 方法的操作。 即帮助器方法。</summary>
      <param name="hr">标识错误本质的整数值。 Visual Basic 错误处于 0 到 65535 的范围内：范围 0 到 512 保留用于系统错误，范围 513 到 65535 则用于用户定义的错误。</param>
      <returns>一个 <see cref="T:System.Exception" /> 对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.EndApp">
      <summary>关闭用于调用程序集的所有文件并停止该进程。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.SetProjectError(System.Exception)">
      <summary>Visual Basic 编译器使用此帮助器方法在 <see langword="Err" /> 对象中捕获异常。</summary>
      <param name="ex">要捕获的 <see cref="T:System.Exception" /> 对象。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.SetProjectError(System.Exception,System.Int32)">
      <summary>Visual Basic 编译器使用此帮助器方法在 <see langword="Err" /> 对象中捕获异常。</summary>
      <param name="ex">要捕获的 <see cref="T:System.Exception" /> 对象。</param>
      <param name="lErl">异常的行号。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ShortType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ShortType.FromObject(System.Object)">
      <summary>返回一个对应于指定对象的 <see langword="Short" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Short" /> 值的对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Short" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ShortType.FromString(System.String)">
      <summary>返回与指定的字符串相对应的 <see langword="Short" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Short" /> 值的字符串。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="Short" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.SingleType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromObject(System.Object)">
      <summary>返回一个对应于指定对象的 <see cref="T:System.Single" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Single" /> 值的对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see cref="T:System.Single" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromObject(System.Object,System.Globalization.NumberFormatInfo)">
      <summary>返回一个对应于指定对象的 <see cref="T:System.Single" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Single" /> 值的对象。</param>
      <param name="NumberFormat">根据区域性定义如何设置数值格式以及如何显示数值的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see cref="T:System.Single" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromString(System.String)">
      <summary>返回与指定的字符串相对应的 <see cref="T:System.Single" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Single" /> 值的字符串。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see cref="T:System.Single" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromString(System.String,System.Globalization.NumberFormatInfo)">
      <summary>返回与指定的字符串和数字格式信息相对应的 <see cref="T:System.Single" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Single" /> 值的字符串。</param>
      <param name="NumberFormat">根据区域性定义如何设置数值格式以及如何显示数值的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see cref="T:System.Single" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute">
      <summary>此类提供了发送到中间语言 (IL) 时应用于标准模块构造的属性。 但并不是直接从代码中调用。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag">
      <summary>Visual Basic 编译器在初始化静态本地成员时内部使用此类；这并不意味着要从您的代码中直接调用它。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag.State">
      <summary>返回静态本地成员的初始化标记（是否已初始化）的状态。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag" /> 类的新实例。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StringType">
      <summary>从 Visual Basic 2005 开始，此类已被否决。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromBoolean(System.Boolean)">
      <summary>返回与指定的 <see langword="String" /> 相对应的 <see langword="Boolean" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Boolean" /> 值的 <see langword="String" />。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="String" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromByte(System.Byte)">
      <summary>返回与指定的 <see langword="String" /> 相对应的 <see langword="Byte" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Byte" /> 值的 <see langword="String" />。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="String" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromChar(System.Char)">
      <summary>返回与指定的 <see langword="String" /> 相对应的 <see langword="Char" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Char" /> 值的 <see langword="String" />。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="String" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDate(System.DateTime)">
      <summary>返回与指定的日期相对应的 <see langword="String" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="String" /> 值的日期。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="String" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDecimal(System.Decimal)">
      <summary>返回与指定的 <see langword="String" /> 相对应的 <see langword="Decimal" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Decimal" /> 值的 <see langword="String" />。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="String" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDecimal(System.Decimal,System.Globalization.NumberFormatInfo)">
      <summary>返回与指定的 <see langword="String" /> 和数字格式信息相对应的 <see langword="Decimal" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Decimal" /> 值的 <see langword="String" />。</param>
      <param name="NumberFormat">根据区域性定义如何设置数值格式以及如何显示数值的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="String" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDouble(System.Double)">
      <summary>返回与指定的相对应的字符串值 <see cref="T:System.Double" /> 。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Double" /> 值的 <see cref="T:System.String" />。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="String" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDouble(System.Double,System.Globalization.NumberFormatInfo)">
      <summary>返回与指定的 <see cref="T:System.Double" /> 和数字格式信息相对应的字符串。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Double" /> 值的 <see cref="T:System.String" />。</param>
      <param name="NumberFormat">根据区域性定义如何设置数值格式以及如何显示数值的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</param>
      <returns>
        <paramref name="Value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromInteger(System.Int32)">
      <summary>返回与指定的 <see langword="String" /> 相对应的 <see langword="Integer" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Integer" /> 值的 <see langword="String" />。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="String" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromLong(System.Int64)">
      <summary>返回与指定的 <see langword="String" />（64 位整数）相对应的 <see cref="T:System.Int64" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Int64" /> 值的 <see langword="String" />。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="String" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromObject(System.Object)">
      <summary>返回一个对应于指定对象的 <see langword="String" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="String" /> 值的对象。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="String" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromShort(System.Int16)">
      <summary>返回与指定的 <see cref="T:System.Int16" />（16 位整数）相对应的 <see langword="String" /> 值。</summary>
      <param name="Value">必需。 要转换为 <see langword="Int616" /> 值的 <see langword="String" />。</param>
      <returns>与 <paramref name="Value" /> 对应的 <see langword="String" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromSingle(System.Single)">
      <summary>返回与指定的相对应的字符串值 <see cref="T:System.Single" /> 。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Single" /> 值的 <see langword="String" />。</param>
      <returns>与相对应的字符串值 <paramref name="Value" /> 。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromSingle(System.Single,System.Globalization.NumberFormatInfo)">
      <summary>返回与指定的 <see cref="T:System.Single" /> 和数字格式信息相对应的字符串值。</summary>
      <param name="Value">必需。 要转换为 <see cref="T:System.Single" /> 值的 <see langword="String" />。</param>
      <param name="NumberFormat">根据区域性定义如何设置数值格式以及如何显示数值的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</param>
      <returns>与相对应的字符串值 <paramref name="Value" /> 。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.MidStmtStr(System.String@,System.Int32,System.Int32,System.String)">
      <summary>使用 <paramref name="sDest" /> 参数的内容覆盖 <paramref name="sInsert" /> 参数。</summary>
      <param name="sDest">必需。 要修改的字符串变量。</param>
      <param name="StartPosition">必需。 要在 <paramref name="sDest" /> 参数中进行覆盖的起始位置。 索引从 1 开始。</param>
      <param name="MaxInsertLength">必需。 要从 <paramref name="sInsert" /> 参数中使用的最大字符数（从第一个字符开始算起）。</param>
      <param name="sInsert">必需。 用于覆盖 <paramref name="sDest" /> 参数的字符串值。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrCmp(System.String,System.String,System.Boolean)">
      <summary>比较两个字符串。</summary>
      <param name="sLeft">必需。 要与 <paramref name="sRight" /> 进行比较的字符串。</param>
      <param name="sRight">必需。 要与 <paramref name="sLeft" /> 进行比较的字符串。</param>
      <param name="TextCompare">必需。 如果要执行不区分大小写的比较，则为 <see langword="True" />；否则为 <see langword="False" />。</param>
      <returns>
        <list type="table">
          <listheader>
            <term> “值”</term>
            <description> 条件</description>
          </listheader>
          <item>
            <term> 零</term>
            <description> 这两个字符串相等。</description>
          </item>
          <item>
            <term> 小于零</term>
            <description>
              <paramref name="sLeft" /> 小于 <paramref name="sRight" />。</description>
          </item>
          <item>
            <term> 大于零</term>
            <description>
              <paramref name="sLeft" /> 大于 <paramref name="sRight" />。</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLike(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>对参数 <paramref name="Source" /> 和 <paramref name="Pattern" /> 进行比较，并返回与 <see langword="Like" /> 运算符相同的结果。</summary>
      <param name="Source">必需。 任何 <see langword="String" /> 表达式。</param>
      <param name="Pattern">任何符合 Like 运算符中所述的模式匹配约定的 <see langword="String" /> 表达式。</param>
      <param name="CompareOption">根据 <see cref="T:Microsoft.VisualBasic.CompareMethod" /> 指定如何将字符串与模式进行比较。 对于二进制比较，可以是 <see langword="vbBinaryCompare" />；对于基于不区分大小写的文本排列顺序（由系统的 <see langword="vbTextCompare" /> 值确定）的比较，可以是 <see langword="LocaleID" />。</param>
      <returns>一个 <see langword="Boolean" /> 值，指示字符串是否满足模式的要求。 如果字符串中的值满足模式中包含的模式的要求，则结果为 <see langword="True" />。 如果字符串不满足模式的要求，则结果为 <see langword="False" />。 如果字符串和模式都是空字符串，则结果为 <see langword="True" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeBinary(System.String,System.String)">
      <summary>使用二进制比较对参数 <paramref name="Source" /> 和 <paramref name="Pattern" /> 进行比较，并返回与 <see langword="Like" /> 运算符相同的结果。</summary>
      <param name="Source">必需。 任何 <see langword="String" /> 表达式。</param>
      <param name="Pattern">必需。 任何符合 Like 运算符中所述的模式匹配约定的 <see langword="String" /> 表达式。</param>
      <returns>一个 <see langword="Boolean" /> 值，指示字符串是否满足模式的要求。 如果字符串中的值满足模式中包含的模式的要求，则结果为 <see langword="True" />。 如果字符串不满足模式的要求，则结果为 <see langword="False" />。 如果字符串和模式都是空字符串，则结果为 <see langword="True" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeText(System.String,System.String)">
      <summary>使用文本比较对参数 <paramref name="Source" /> 和 <paramref name="Pattern" /> 进行比较，并返回与 <see langword="Like" /> 运算符相同的结果。</summary>
      <param name="Source">必需。 任何 <see langword="String" /> 表达式。</param>
      <param name="Pattern">必需。 任何符合 Like 运算符中所述的模式匹配约定的 <see langword="String" /> 表达式。</param>
      <returns>一个 <see langword="Boolean" /> 值，指示字符串是否满足模式的要求。 如果字符串中的值满足模式中包含的模式的要求，则结果为 <see langword="True" />。 如果字符串不满足模式的要求，则结果为 <see langword="False" />。 如果字符串和模式都是空字符串，则结果为 <see langword="True" />。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Utils">
      <summary>包含 Visual Basic 编译器使用的实体。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.CopyArray(System.Array,System.Array)">
      <summary>由 Visual Basic 编译器用作 <see langword="Redim" /> 的帮助器。</summary>
      <param name="arySrc">要复制的数组。</param>
      <param name="aryDest">目标数组。</param>
      <returns>复制的数组。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.GetResourceString(System.String,System.String[])">
      <summary>检索本地化资源字符串或错误消息，并设置它们的格式。</summary>
      <param name="ResourceKey">要检索的字符串或错误消息的标识符。</param>
      <param name="Args">一个由参数构成的数组，这些参数将替换字符串或错误消息中的占位符。</param>
      <returns>一个已设置格式的资源字符串或错误消息。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Versioned">
      <summary>
        <see cref="T:Microsoft.VisualBasic.CompilerServices.Versioned" /> 模块包含用于与对象、应用程序和系统交互的过程。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])">
      <summary>执行对象的方法，或者设置或返回对象的属性。</summary>
      <param name="Instance">必需。 <see langword="Object" />. 一个指向公开属性或方法的对象的指针。</param>
      <param name="MethodName">必需。 <see langword="String" />. 一个字符串表达式，包含对象的属性或方法的名称。</param>
      <param name="UseCallType">必需。 类型 <see cref="T:Microsoft.VisualBasic.CallType" /> 的一个枚举成员，它表示正在被调用的过程的类型。 <see langword="CallType" /> 的值可以是 <see langword="Method" />、<see langword="Get" /> 或 <see langword="Set" />。</param>
      <param name="Arguments">可选。 <see langword="ParamArray" />. 一个形参数组，包含要传递给正在调用的属性或方法的实参。</param>
      <returns>执行对象的方法，或者设置或返回对象的属性。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.IsNumeric(System.Object)">
      <summary>返回一个布尔值，指示是否可将表达式计算为数字。</summary>
      <param name="Expression">必需。 <see langword="Object" /> 表达式。</param>
      <returns>返回一个布尔值，指示是否可将表达式计算为数字。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.SystemTypeName(System.String)">
      <summary>返回一个字符串值，它包含变量的系统数据类型名称。</summary>
      <param name="VbName">必需。 一个包含 Visual Basic 类型名称的字符串变量。</param>
      <returns>返回一个字符串值，它包含变量的系统数据类型名称。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.TypeName(System.Object)">
      <summary>返回一个字符串值，它包含有关变量的数据类型信息。</summary>
      <param name="Expression">必需。 <see langword="Object" /> 变量。 如果 <see langword="Option Strict" /> 为 <see langword="Off" />，则可以传递除结构之外的任何数据类型的变量。</param>
      <returns>返回一个字符串值，它包含有关变量的数据类型信息。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.VbTypeName(System.String)">
      <summary>返回一个字符串值，它包含变量的 Visual Basic 数据类型名称。</summary>
      <param name="SystemName">必需。 包含公共语言运行时使用的类型名称的字符串变量。</param>
      <returns>返回一个字符串值，它包含变量的 Visual Basic 数据类型名称。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Constants">
      <summary>
        <see langword="Constants" /> 模块包含杂项常数。 这些常量可以在代码中的任何地方使用。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbAbort">
      <summary>指示在某个消息框中单击了 <see langword="Abort" /> 按钮。 由 <see langword="MsgBox" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbAbortRetryIgnore">
      <summary>指示在调用 <see langword="Abort" /> 函数时，将显示 <see langword="Retry" />、<see langword="Ignore" /> 和 <see langword="MsgBox" /> 按钮。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbApplicationModal">
      <summary>指示在调用 <see langword="MsgBox" /> 函数时，将消息框显示为模式对话框。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbArchive">
      <summary>指示自最后一次针对文件访问函数执行备份操作以来该文件已发生更改。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbArray">
      <summary>指示变量对象的类型为数组。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBack">
      <summary>表示用于打印和显示功能的退格符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBinaryCompare">
      <summary>指定在调用比较函数时应执行二进制比较。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBoolean">
      <summary>指示变量对象的类型为 <see langword="Boolean" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbByte">
      <summary>指示变量对象的类型为 <see langword="Byte" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCancel">
      <summary>指示在某个消息框中单击了 <see langword="Cancel" /> 按钮。 由 <see langword="MsgBox" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCr">
      <summary>表示用于打印和显示功能的回车符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCritical">
      <summary>指示在调用 <see langword="MsgBox" /> 函数时，将显示关键消息图标。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCrLf">
      <summary>表示用于打印和显示功能的回车符和换行符的组合。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCurrency">
      <summary>指示变量对象的类型为 <see langword="Currency" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDate">
      <summary>指示变量对象的类型为 <see langword="Date" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDecimal">
      <summary>指示变量对象的类型为 <see langword="Decimal" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton1">
      <summary>指示在显示消息框时将最左侧的按钮作为默认按钮选中。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton2">
      <summary>指示在显示消息框时将左侧起的第二个按钮作为默认按钮选中。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton3">
      <summary>指示在显示消息框时将左侧起的第三个按钮作为默认按钮选中。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDirectory">
      <summary>指示该文件是包含文件访问函数的目录或文件夹。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDouble">
      <summary>指示变量对象的类型为 <see langword="Double" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbEmpty">
      <summary>指示变量对象的类型为 <see langword="Empty" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbExclamation">
      <summary>指示在调用 <see langword="MsgBox" /> 函数时，将显示惊叹号图标。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFalse">
      <summary>指示在调用数字格式设置函数时应使用 <see langword="Boolean" /> 值 <see langword="False" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstFourDays">
      <summary>指示在调用与日期相关的函数时，应使用一年中第一个至少包含四天的周。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstFullWeek">
      <summary>指示在调用与日期相关的函数时，应使用一年中第一个完整的周。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstJan1">
      <summary>指示在调用与日期相关的函数时，应使用一年中 1 月 1 日所在的周。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFormFeed">
      <summary>表示用于打印功能的换页符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFriday">
      <summary>指示在调用与日期相关的函数时，应将星期五用作一周的第一天。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbGeneralDate">
      <summary>指示在调用 <see langword="FormatDateTime" /> 函数时，应使用当前区域性的常规日期格式。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbGet">
      <summary>指定在调用 <see langword="CallByName" /> 函数时，应检索一个属性值。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbHidden">
      <summary>指示该文件是包含文件访问函数的隐藏文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbHide">
      <summary>指示在调用 <see langword="Shell" /> 函数时，将对所调用程序隐藏窗口样式。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbHiragana">
      <summary>指示在调用 <see langword="StrConv" /> 函数时，应将平假名字符转换为片假名字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbIgnore">
      <summary>指示在某个消息框中单击了 <see langword="Ignore" /> 按钮。 由 <see langword="MsgBox" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbInformation">
      <summary>指示在调用 <see langword="MsgBox" /> 函数时，将显示信息图标。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbInteger">
      <summary>指示变量对象的类型为 <see langword="Integer" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbKatakana">
      <summary>指示在调用 <see langword="StrConv" /> 函数时，应将片假名字符转换为平假名字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLet">
      <summary>指示在调用 <see langword="CallByName" /> 函数时，应将属性值设置为对象实例。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLf">
      <summary>表示用于打印和显示功能的换行字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLinguisticCasing">
      <summary>指示在调用 <see langword="StrConv" /> 函数时，应将字符转换为使用语言规则进行大小写，而不使用文件系统规则进行大小写。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLong">
      <summary>指示变量对象的类型为 <see langword="Long" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLongDate">
      <summary>指示在调用 <see langword="FormatDateTime" /> 函数时，应使用当前区域性的长日期格式。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLongTime">
      <summary>指示在调用 <see langword="FormatDateTime" /> 函数时，应使用当前区域性的长时间格式。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLowerCase">
      <summary>指示在调用 <see langword="StrConv" /> 函数时，应将字符转换为小写字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMaximizedFocus">
      <summary>指示在调用 <see langword="Shell" /> 函数时，将使窗口样式最大化并将焦点提供给所调用的程序。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMethod">
      <summary>指定在调用 <see langword="CallByName" /> 函数时，应调用一个方法。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMinimizedFocus">
      <summary>指示在调用 <see langword="Shell" /> 函数时，将使窗口样式最小化并将焦点提供给所调用的程序。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMinimizedNoFocus">
      <summary>指示在调用 <see langword="Shell" /> 函数时，将使窗口样式最小化，但不将焦点提供给所调用的程序。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMonday">
      <summary>指示在调用与日期相关的函数时，应将星期一用作一周的第一天。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxHelp">
      <summary>指示在调用 <see langword="Help" /> 函数时，将显示 <see langword="MsgBox" /> 按钮。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxRight">
      <summary>指示在调用 <see langword="MsgBox" /> 函数时，将使文本右对齐。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxRtlReading">
      <summary>指示在调用 <see langword="MsgBox" /> 函数时，将显示从右向左阅读的文本（希伯来语和阿拉伯语系统）。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxSetForeground">
      <summary>指示在调用 <see langword="MsgBox" /> 函数时，将在前台显示消息框。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNarrow">
      <summary>指示在调用 <see langword="StrConv" /> 函数时，应将宽（双字节）字符转换为窄（单字节）字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNewLine">
      <summary>表示用于打印和显示功能的换行字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNo">
      <summary>指示在某个消息框中单击了 <see langword="No" /> 按钮。 由 <see langword="MsgBox" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNormal">
      <summary>指示该文件是包含文件访问函数的常规文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNormalFocus">
      <summary>指示在调用 <see langword="Shell" /> 函数时，将正常显示窗口样式并将焦点提供给所调用的程序。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNormalNoFocus">
      <summary>指示在调用 <see langword="Shell" /> 函数时，将正常显示窗口样式，但不将焦点提供给所调用的程序。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNull">
      <summary>指示变量对象的类型为 <see langword="Nothing" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNullChar">
      <summary>表示用于打印和显示功能的 null 字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNullString">
      <summary>表示用于打印和显示功能以及用于调用外部过程的零长度字符串。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbObject">
      <summary>指示变量对象的类型为 <see langword="Object" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbObjectError">
      <summary>表示对象错误号。 用户定义的错误号应当大于此值。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbOK">
      <summary>指示在某个消息框中单击了 <see langword="OK" /> 按钮。 由 <see langword="MsgBox" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbOKCancel">
      <summary>指示在调用 <see langword="OK" /> 函数时，将显示 <see langword="Cancel" /> 和 <see langword="MsgBox" /> 按钮。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbOKOnly">
      <summary>指示在调用 <see langword="OK" /> 函数时，将只显示 <see langword="MsgBox" /> 按钮。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbProperCase">
      <summary>指示在调用 <see langword="StrConv" /> 函数时，应将字符串中每个单词的第一个字母转换为大写，并将其余字符转换为小写。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbQuestion">
      <summary>指示在调用 <see langword="MsgBox" /> 函数时，将显示问号图标。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbReadOnly">
      <summary>指示该文件是包含文件访问函数的只读文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbRetry">
      <summary>指示在某个消息框中单击了 <see langword="Retry" /> 按钮。 由 <see langword="MsgBox" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbRetryCancel">
      <summary>指示在调用 <see langword="Retry" /> 函数时，将显示 <see langword="Cancel" /> 和 <see langword="MsgBox" /> 按钮。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSaturday">
      <summary>指示在调用与日期相关的函数时，应将星期六用作一周的第一天。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSet">
      <summary>指示在调用 <see langword="CallByName" /> 函数时，应设置一个属性值。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbShortDate">
      <summary>指示在调用 <see langword="FormatDateTime" /> 函数时，应使用当前区域性的短日期格式。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbShortTime">
      <summary>指示在调用 <see langword="FormatDateTime" /> 函数时，应使用当前区域性的短时间格式。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSimplifiedChinese">
      <summary>指示在调用 <see langword="StrConv" /> 函数时，应将字符转换为简体中文字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSingle">
      <summary>指示变量对象的类型为 <see cref="T:System.Single" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbString">
      <summary>指示变量对象的类型为 <see langword="String" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSunday">
      <summary>指示在调用与日期相关的函数时，应将星期日用作一周的第一天。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSystem">
      <summary>指示该文件是包含文件访问函数的系统文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSystemModal">
      <summary>指示在调用 <see langword="MsgBox" /> 函数时，将消息框显示为模式对话框。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTab">
      <summary>表示用于打印和显示功能的制表符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTextCompare">
      <summary>指示在调用比较函数时，应执行文本比较。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbThursday">
      <summary>指示在调用与日期相关的函数时，应将星期四用作一周的第一天。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTraditionalChinese">
      <summary>指示在调用 <see langword="StrConv" /> 函数时，应将字符转换为繁体中文字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTrue">
      <summary>指示在调用数字格式设置函数时应使用 <see langword="Boolean" /> 值 <see langword="True" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTuesday">
      <summary>指示在调用与日期相关的函数时，应将星期二用作一周的第一天。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUpperCase">
      <summary>指示在调用 <see langword="StrConv" /> 函数时，应将字符转换为大写字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseDefault">
      <summary>指示在调用数字格式设置函数时，应使用默认 <see langword="Boolean" /> 值。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUserDefinedType">
      <summary>指示变量对象的类型为用户定义的类型。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseSystem">
      <summary>指示在调用与日期相关的函数时，应使用系统指定的那一周作为一年中的第一周。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseSystemDayOfWeek">
      <summary>指示在调用与日期相关的函数时，应使用系统指定的那一天为一周中的第一天。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVariant">
      <summary>指示变量对象的类型为 <see langword="Variant" />。 由 <see langword="VarType" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVerticalTab">
      <summary>表示用于打印功能的回车字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVolume">
      <summary>指示文件访问函数的卷标文件特性。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbWednesday">
      <summary>指示在调用与日期相关的函数时，应将星期三用作一周的第一天。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbWide">
      <summary>指示在调用 <see langword="StrConv" /> 函数时，应将窄（单字节）字符转换为宽（双字节）字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbYes">
      <summary>指示在某个消息框中单击了 <see langword="Yes" /> 按钮。 由 <see langword="MsgBox" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbYesNo">
      <summary>指示在调用 <see langword="Yes" /> 函数时，将显示 <see langword="No" /> 和 <see langword="MsgBox" /> 按钮。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbYesNoCancel">
      <summary>指示在调用 <see langword="Yes" /> 函数时，将显示 <see langword="No" />、<see langword="Cancel" /> 和 <see langword="MsgBox" /> 按钮。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.ControlChars">
      <summary>
        <see langword="ControlChars" /> 模块包含用作控制字符的常数。 这些常量可以在代码中的任何地方使用。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Back">
      <summary>表示退格符 (<see langword="vbBack" />)。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Cr">
      <summary>表示回车符 (<see langword="vbCr" />)。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.CrLf">
      <summary>表示回车/换行组合符 (<see langword="vbCrLf" />)。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.FormFeed">
      <summary>表示用于打印功能的换页符 (<see langword="vbFormFeed" />)。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Lf">
      <summary>表示换行符 (<see langword="vbLf" />)。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.NewLine">
      <summary>表示新行字符 (<see langword="vbNewLine" />)。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.NullChar">
      <summary>表示 null 字符 (<see langword="vbNullChar" />)。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Quote">
      <summary>表示双引号字符。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Tab">
      <summary>表示制表符 (<see langword="vbTab" />)。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.VerticalTab">
      <summary>表示垂直制表符 (<see langword="vbVerticalTab" />)。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ControlChars.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.ControlChars" /> 类的新实例。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Conversion">
      <summary>
        <see langword="Conversion" /> 模块包含用于执行各种转换操作的过程。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
      <summary>将对象转换为指定类型。</summary>
      <param name="Expression">要转换的对象。</param>
      <param name="TargetType">该对象要转换为的类型。</param>
      <returns>一个对象，其类型在运行时为请求的目标类型。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
      <summary>将对象转换为指定的泛型类型。</summary>
      <param name="Expression">要转换的对象。</param>
      <typeparam name="TargetType">该对象要转换为的类型。</typeparam>
      <returns>静态类型化为请求的泛型类型的对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.ErrorToString">
      <summary>返回与给定的错误号对应的错误信息。</summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="ErrorNumber" /> 超出范围。</exception>
      <returns>对应于最新运行时错误的错误消息。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
      <summary>返回与给定的错误号对应的错误信息。</summary>
      <param name="ErrorNumber">可选。 任何有效的错误号。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ErrorNumber" /> 超出范围。</exception>
      <returns>与给定错误号对应的错误消息。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see langword="Decimal" /> 类型的数字或任何有效的数值表达式。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see cref="T:System.Double" /> 类型的数字或任何有效的数值表达式。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see langword="Short" /> 类型的数字或任何有效的数值表达式。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see langword="Integer" /> 类型的数字或任何有效的数值表达式。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see langword="Long" /> 类型的数字或任何有效的数值表达式。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see langword="Object" /> 类型的数字或任何有效的数值表达式。 如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see cref="T:System.Single" /> 类型的数字或任何有效的数值表达式。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
      <summary>返回表示数字的十六进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数十六进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
      <summary>返回表示数字的十六进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数十六进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
      <summary>返回表示数字的十六进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数十六进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
      <summary>返回表示数字的十六进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数十六进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
      <summary>返回表示数字的十六进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数十六进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
      <summary>返回表示数字的十六进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数十六进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
      <summary>返回表示数字的十六进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数十六进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
      <summary>返回表示数字的十六进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数十六进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
      <summary>返回表示数字的十六进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数十六进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see langword="Decimal" /> 类型的数字或任何有效的数值表达式。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see cref="T:System.Double" /> 类型的数字或任何有效的数值表达式。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see langword="Short" /> 类型的数字或任何有效的数值表达式。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see langword="Integer" /> 类型的数字或任何有效的数值表达式。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see langword="Long" /> 类型的数字或任何有效的数值表达式。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see langword="Object" /> 类型的数字或任何有效的数值表达式。 如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
      <summary>返回一个数的整数部分。</summary>
      <param name="Number">必需。 <see cref="T:System.Single" /> 类型的数字或任何有效的数值表达式。</param>
      <exception cref="T:System.ArgumentNullException">Number 未指定。</exception>
      <exception cref="T:System.ArgumentException">Number 不是 Numeric 类型。</exception>
      <returns>数字的整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
      <summary>返回表示某数八进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数八进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
      <summary>返回表示某数八进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数八进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
      <summary>返回表示某数八进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数八进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
      <summary>返回表示某数八进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数八进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
      <summary>返回表示某数八进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数八进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
      <summary>返回表示某数八进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数八进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
      <summary>返回表示某数八进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数八进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
      <summary>返回表示某数八进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数八进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
      <summary>返回表示某数八进制值的字符串。</summary>
      <param name="Number">必需。 任何有效的数值表达式或 <see langword="String" /> 表达式。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>表示某数八进制值的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
      <summary>返回数字的 <see langword="String" /> 表示形式。</summary>
      <param name="Number">必需。 包含任何有效的数值表达式的 <see langword="Object" />。</param>
      <exception cref="T:System.ArgumentNullException">未指定 <paramref name="Number" />。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="Number" /> 不是 Numeric 类型。</exception>
      <returns>数字的 <see langword="String" /> 表示形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
      <summary>将字符串中包含的数字作为适当类型的数值返回。</summary>
      <param name="Expression">必需。 任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。 如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="InputStr" /> 太大。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</exception>
      <returns>字符串中包含的作为适当类型数值的数字。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
      <summary>将字符串中包含的数字作为适当类型的数值返回。</summary>
      <param name="Expression">必需。 任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。 如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="InputStr" /> 太大。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</exception>
      <returns>字符串中包含的作为适当类型数值的数字。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
      <summary>将字符串中包含的数字作为适当类型的数值返回。</summary>
      <param name="InputStr">必需。 任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。 如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="InputStr" /> 太大。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</exception>
      <returns>字符串中包含的作为适当类型数值的数字。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.DateAndTime">
      <summary>
        <see langword="DateAndTime" /> 模块包含在日期和时间操作中使用的过程和属性。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)">
      <summary>返回一个值，其中包含已添加指定时间间隔的日期和时间值。</summary>
      <param name="Interval">必需。 表示要加上的时间间隔的 <see cref="T:Microsoft.VisualBasic.DateInterval" /> 枚举值或字符串表达式。</param>
      <param name="Number">必需。 表示希望添加的时间间隔数的浮点表达式。 可以为正数（此时将获取今后的日期/时间值），也可以为负数（此时将获取过去的日期/时间值）。 在 <paramref name="Interval" /> 指定小时、分钟或秒时，该参数可以包含小数部分。 对于其他类型的 <paramref name="Interval" /> 值，将忽略 <paramref name="Number" /> 的所有小数部分。</param>
      <param name="DateValue">必需。 表示要在其基础上加上此时间间隔的日期和时间的表达式。 <paramref name="DateValue" /> 本身在调用程序中并未改变。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> 并不强制为 <see langword="Date" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> 无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">计算所得日期早于元年 1 月 1 日 00:00:00，或晚于 9999 年 12 月 31 日 23:59:59。</exception>
      <returns>包含已添加指定时间间隔的日期和时间值的值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)">
      <summary>返回一个值，其中包含已添加指定时间间隔的日期和时间值。</summary>
      <param name="Interval">必需。 表示要加上的时间间隔的 <see cref="T:Microsoft.VisualBasic.DateInterval" /> 枚举值或字符串表达式。</param>
      <param name="Number">必需。 表示希望添加的时间间隔数的浮点表达式。 <paramref name="Number" /> 可以为正数（此时将获取今后的日期/时间值），也可以为负数（此时将获取过去的日期/时间值）。 在 <paramref name="Interval" /> 指定小时、分钟或秒时，该参数可以包含小数部分。 对于其他类型的 <paramref name="Interval" /> 值，将忽略 <paramref name="Number" /> 的所有小数部分。</param>
      <param name="DateValue">必需。 表示要在其基础上加上此时间间隔的日期和时间的表达式。 <paramref name="DateValue" /> 本身在调用程序中并未改变。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> 并不强制为 <see langword="Date" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> 无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">计算所得日期早于元年 1 月 1 日 00:00:00，或晚于 9999 年 12 月 31 日 23:59:59。</exception>
      <returns>包含已添加指定时间间隔的日期和时间值的值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>返回一个长值，该长值指定两个 <see langword="Date" /> 值之间的时间间隔数。</summary>
      <param name="Interval">必需。 <see cref="T:Microsoft.VisualBasic.DateInterval" /> 枚举值或字符串表达式，表示要用作 <paramref name="Date1" /> 和 <paramref name="Date2" /> 之差的单位的时间间隔。</param>
      <param name="Date1">必需。 要在计算中使用的第一个日期/时间值。</param>
      <param name="Date2">必需。 要在计算中使用的第二个日期/时间值。</param>
      <param name="DayOfWeek">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 枚举中选择的值，用于指定一周的第一天。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />。</param>
      <param name="WeekOfYear">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 枚举中选择的值，用于指定一年的第一周。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Date1" />、<paramref name="Date2" /> 或 <paramref name="DayofWeek" /> 超出范围。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="Date1" /> 或 <paramref name="Date2" /> 是无效类型。</exception>
      <returns>指定两个 <see langword="Date" /> 值之间的时间间隔数的长值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>返回一个长值，该长值指定两个 <see langword="Date" /> 值之间的时间间隔数。</summary>
      <param name="Interval">必需。 <see cref="T:Microsoft.VisualBasic.DateInterval" /> 枚举值或字符串表达式，表示要用作 <paramref name="Date1" /> 和 <paramref name="Date2" /> 之差的单位的时间间隔。</param>
      <param name="Date1">必需。 要在计算中使用的第一个日期/时间值。</param>
      <param name="Date2">必需。 要在计算中使用的第二个日期/时间值。</param>
      <param name="DayOfWeek">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 枚举中选择的值，用于指定一周的第一天。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />。</param>
      <param name="WeekOfYear">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 枚举中选择的值，用于指定一年的第一周。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Date1" />、<paramref name="Date2" /> 或 <paramref name="DayofWeek" /> 超出范围。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="Date1" /> 或 <paramref name="Date2" /> 是无效类型。</exception>
      <returns>指定两个 <see langword="Date" /> 值之间的时间间隔数的长值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>返回包含给定 <see langword="Date" /> 值的指定组件的整数值。</summary>
      <param name="Interval">必需。 <see cref="T:Microsoft.VisualBasic.DateInterval" /> 枚举值或字符串表达式，它表示要返回的日期/时间值部分。</param>
      <param name="DateValue">必需。 要计算的 <see langword="Date" /> 值。</param>
      <param name="FirstDayOfWeekValue">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 枚举中选择的值，用于指定一周的第一天。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />。</param>
      <param name="FirstWeekOfYearValue">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 枚举中选择的值，用于指定一年的第一周。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> 无效。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> 并不强制为 <see langword="Date" />。</exception>
      <returns>包含给定 <see langword="Date" /> 值的指定组件的整数值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>返回一个值，其中包含给定 <see langword="Date" /> 值的指定组件。</summary>
      <param name="Interval">必需。 <see cref="T:Microsoft.VisualBasic.DateInterval" /> 枚举值或字符串表达式，它表示要返回的日期/时间值部分。</param>
      <param name="DateValue">必需。 要计算的 <see langword="Date" /> 值。</param>
      <param name="DayOfWeek">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 枚举中选择的值，用于指定一周的第一天。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />。</param>
      <param name="WeekOfYear">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 枚举中选择的值，用于指定一年的第一周。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> 无效。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> 并不强制为 <see langword="Date" />。</exception>
      <returns>包含给定 <see langword="Date" /> 值的指定组件的整数值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)">
      <summary>返回表示已指定年月日的 <see langword="Date" /> 值，其时间信息被设置为午夜 (00:00:00)。</summary>
      <param name="Year">必需。 范围为 1 到 9999 的整数表达式。 但是，也接受小于此范围的值。 如果 <paramref name="Year" /> 为 0 到 99，它被解释为介于 1930 年和 2029 年之间，下面的"备注"部分对此做了解释。 如果 <paramref name="Year" /> 小于 1，则从当前年份减去它。</param>
      <param name="Month">必需。 范围为 1 到 12 的整数表达式。 但是，也接受此范围之外的值。 <paramref name="Month" /> 值的偏移量为 1，且该值应用于所计算年份的 1 月。 换言之，就是 1 月加上 (<paramref name="Month" /> - 1)。 若有必要则对年份进行重新计算。 以下的结果阐释了这种效果： 
如果 <paramref name="Month" /> 为 1，则结果为所计算年份的 1 月。  
  
如果 <paramref name="Month" /> 为 0，则结果为上一年的 12 月。  
  
如果 <paramref name="Month" /> 为 -1，则结果为上一年的 11 月。  
  
如果 <paramref name="Month" /> 为 13，则结果为下一年的 1 月。</param>
      <param name="Day">必需。 范围为 1 到 31 的 Integer 表达式。 但是，也接受此范围之外的值。 <paramref name="Day" /> 值偏移量为 1，该值应用于所计算月份的第一天。 换言之，就是该月份的第一天加上 (<paramref name="Day" /> - 1)。 若有必要，则对月份和年份进行重新计算。 以下的结果阐释了这种效果： 
如果 <paramref name="Day" /> 为 1，则结果为所计算月份的第一天。  
  
如果 <paramref name="Day" /> 为 0，则结果为上一月份的最后一天。  
  
如果 <paramref name="Day" /> 为 -1，则结果为上一月份的倒数第二天。  
  
如果 <paramref name="Day" /> 超过当前月份的月末，则结果为下一月份中相应的一天。 例如，如果 <paramref name="Month" /> 为 4 且 <paramref name="Day" /> 为 31，则结果为 5 月 1 日。</param>
      <returns>表示已指定年月日的 <see langword="Date" /> 值，其时间信息被设置为午夜 (00:00:00)。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)">
      <summary>返回一个 <see langword="Date" /> 值，该值包含用字符串表示的日期信息，其时间信息设置为午夜 (00:00:00)。</summary>
      <param name="StringDate">必需。 字符串表达式，表示 1 年 1 月 1 日 00:00:00 到 9999 年 12 月 31 日 23:59:59 之间的一个日期/时间值。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="StringDate" /> 包含无效的时间信息。</exception>
      <returns>
        <see langword="Date" /> 值，它包含由字符串表示的日期信息，其中的时间信息设置为午夜 (00:00:00)。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)">
      <summary>返回表示月中第几天的整数值，该值介于 1 和 31 之间。</summary>
      <param name="DateValue">必需。 要从中提取天的 <see langword="Date" /> 值。</param>
      <returns>介于 1 和 31 之间表示月中第几天的整数值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)">
      <summary>返回表示天中第几个小时的整数值，该值介于 0 和 23 之间。</summary>
      <param name="TimeValue">必需。 要从中提取小时的 <see langword="Date" /> 值。</param>
      <returns>介于 0 和 23 之间表示一天中第几个小时的整数值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)">
      <summary>返回表示一小时内第几分钟的整数值，该值介于 0 和 59 之间。</summary>
      <param name="TimeValue">必需。 要从中提取分钟的 <see langword="Date" /> 值。</param>
      <returns>介于 0 和 59 之间表示一小时内第几分钟的整数值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)">
      <summary>返回表示一年中第几个月的整数值，该值介于 1 和 12 之间。</summary>
      <param name="DateValue">必需。 要从中提取月的 <see langword="Date" /> 值。</param>
      <returns>介于 1 和 12 之间表示一年中第几个月的整数值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)">
      <summary>返回包含指定月份名称的字符串值。</summary>
      <param name="Month">必需。 以数字表示的月份，介于 1 到 13 之间；1 表示 1 月，12 表示 12 月。 值 13 可用于 13 月制日历。 若系统正在使用 12 月制日历，而 <paramref name="Month" /> 为 13，则 MonthName 返回一个空字符串<c></c>。</param>
      <param name="Abbreviate">可选。 为 <see langword="True" /> 则缩写月份名称；否则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Month" /> 小于 1 或大于 13。</exception>
      <returns>包含指定月份名称的字符串值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)">
      <summary>返回表示一分钟内第几秒的整数值，该值介于 0 和 59 之间。</summary>
      <param name="TimeValue">必需。 要从中提取秒的 <see langword="Date" /> 值。</param>
      <returns>介于 0 和 59 之间表示一分钟内第几秒的整数值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)">
      <summary>返回一个 <see langword="Date" /> 值，该值表示指定的小时、分钟和秒，其日期信息设置基点为元年 1 月 1 日。</summary>
      <param name="Hour">必需。 范围为 0 到 23 的整数表达式。 但是，也接受此范围之外的值。</param>
      <param name="Minute">必需。 范围为 0 到 59 的整数表达式。 但是，也接受此范围之外的值。 <paramref name="Minute" /> 的值加入所计算的小时，因此负值指定该小时前的某几分钟。</param>
      <param name="Second">必需。 范围为 0 到 59 的整数表达式。 但是，也接受此范围之外的值。 <paramref name="Second" /> 的值加入所计算的分钟，因此负值指定该分钟前的某几秒。</param>
      <exception cref="T:System.ArgumentException">-2,147,483,648 到 2,147,483,647 范围以外的参数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">计算所得的时间小于负 24 小时。</exception>
      <returns>一个 <see langword="Date" /> 值，该值表示指定的小时、分钟和秒，其日期信息设置基点为元年 1 月 1 日。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)">
      <summary>返回一个 <see langword="Date" /> 值，该值包含以字符串表示的时间信息，其日期信息设置为元年 1 月 1 日。</summary>
      <param name="StringTime">必需。 字符串表达式，表示 1 年 1 月 1 日 00:00:00 到 9999 年 12 月 31 日 23:59:59 之间的一个日期/时间值。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="StringTime" /> 包含无效的日期信息。</exception>
      <returns>一个 <see langword="Date" /> 值，该值包含以字符串表示的时间信息，其日期信息设置为元年 1 月 1 日。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)">
      <summary>返回包含表示星期几的数字的整数值。</summary>
      <param name="DateValue">必需。 要确定属于一周中的哪一天的 <see langword="Date" /> 值。</param>
      <param name="DayOfWeek">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 枚举中选择的值，用于指定一周的第一天。 如果未指定，则使用 <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="DayOfWeek" /> 小于 0 或大于 7。</exception>
      <returns>包含表示星期几的数字的整数值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)">
      <summary>返回包含指定工作日的名称的整数值。</summary>
      <param name="Weekday">必需。 整数。 以数字表示的周几，介于 1 到 7 之间；1 表示一周的第一天，7 表示一周的最后一天。 第一天和最后一天指的是哪一天取决于 <paramref name="FirstDayOfWeekValue" /> 的设置。</param>
      <param name="Abbreviate">可选。 指示是否缩写周几的名称的 <see langword="Boolean" /> 值。 如果省略，则默认为 <see langword="False" />，表示星期几的名称不缩写。</param>
      <param name="FirstDayOfWeekValue">可选。 从 <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 枚举中选择的值，用于指定一周的第一天。 如果未指定，则使用 <see langword="FirstDayOfWeek.System" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Weekday" /> 小于 1 或大于 7，或 <paramref name="FirstDayOfWeekValue" /> 小于 0 或大于 7。</exception>
      <returns>包含指定工作日的名称的整数值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)">
      <summary>返回表示年的 1 到 9999 之间的整数值。</summary>
      <param name="DateValue">必需。 要从中提取年的 <see langword="Date" /> 值。</param>
      <returns>表示年的 1 到 9999 之间的整数值。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.DateString">
      <summary>返回或设置一个字符串值，该值表示与系统对应的当前日期。</summary>
      <exception cref="T:System.InvalidCastException">用于设置 <see cref="P:Microsoft.VisualBasic.DateAndTime.DateString" /> 值的格式无效。</exception>
      <returns>返回或设置一个字符串值，该值表示与系统对应的当前日期。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Now">
      <summary>返回一个值，该值包含与系统对应的当前日期和时间。</summary>
      <returns>根据系统的当前日期和时间。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay">
      <summary>返回或设置 <see langword="Date" /> 值，该值包含与系统对应的当前时间。</summary>
      <returns>返回或设置 <see langword="Date" /> 值，该值包含与系统对应的当前时间。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Timer">
      <summary>返回一个 <see cref="T:System.Double" /> 值，该值表示午夜之后的秒数。</summary>
      <returns>一个值，该值表示从午夜开始所经过的秒数。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.TimeString">
      <summary>根据系统返回或设置表示当前时间的字符串值。</summary>
      <exception cref="T:System.InvalidCastException">用于设置 <see langword="TimeString" /> 值的格式无效。</exception>
      <returns>根据系统返回或设置表示当前时间的字符串值。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Today">
      <summary>返回或设置一个 <see langword="Date" /> 值，该值包含对应于系统的当前日期。</summary>
      <returns>返回或设置一个 <see langword="Date" /> 值，该值包含对应于系统的当前日期。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.DateFormat">
      <summary>指示在调用 <see langword="FormatDateTime" /> 函数时如何显示日期。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.GeneralDate">
      <summary>对于实数，显示日期和时间。 如果该数字没有小数部分，则只显示日期。 如果该数字没有整数部分，则只显示时间。 日期和时间显示取决于计算机的区域设置。 此成员等效于 Visual Basic 常量 <see langword="vbGeneralDate" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.LongDate">
      <summary>使用计算机的区域设置中指定的长日期格式显示日期。 此成员等效于 Visual Basic 常量 <see langword="vbLongDate" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.LongTime">
      <summary>按计算机中区域设置指定的长时间格式显示时间。 此成员等效于 Visual Basic 常量 <see langword="vbLongTime" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.ShortDate">
      <summary>使用计算机的区域设置中指定的短日期格式显示日期。 此成员等效于 Visual Basic 常量 <see langword="vbShortDate" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.ShortTime">
      <summary>按计算机中区域设置指定的短时间格式显示时间。 此成员等效于 Visual Basic 常量 <see langword="vbShortTime" />。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.DateInterval">
      <summary>指示当调用与日期相关的函数时如何确定日期间隔并设置其格式。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Day">
      <summary>一月的某一日（1 到 31）</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.DayOfYear">
      <summary>年中的哪一天（从 1 到 366）</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Hour">
      <summary>几点钟（从 0 到 23）</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Minute">
      <summary>第几分钟（从 0 到 59）</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Month">
      <summary>哪个月（从 1 到 12）</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Quarter">
      <summary>哪个季度（从 1 到 4）</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Second">
      <summary>第几秒（从 0 到 59）</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Weekday">
      <summary>星期几（从 1 到 7）</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.WeekOfYear">
      <summary>年中的哪一周（从 1 到 53）</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Year">
      <summary>Year</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.DueDate">
      <summary>指示在调用财务方法时付款何时到期。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DueDate.BegOfPeriod">
      <summary>在日期间隔开始时。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DueDate.EndOfPeriod">
      <summary>在日期间隔结束时。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.ErrObject">
      <summary>
        <see langword="ErrObject" /> 模块包含用于使用 <see langword="Err" /> 对象标识和处理运行时错误的属性和过程。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.Clear">
      <summary>清除 <see langword="Err" /> 对象的所有属性设置。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.GetException">
      <summary>返回表示所发生错误的异常。</summary>
      <returns>表示所发生错误的异常。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)">
      <summary>生成一个运行时错误；可以替代 <see langword="Error" /> 语句使用。</summary>
      <param name="Number">必需。 标识错误本质的 <see langword="Long" /> 整数。 Visual Basic 错误处于 0 到 65535 的范围内：范围 0 到 512 保留用于系统错误，范围 513 到 65535 则用于用户定义的错误。 当在类模块中将 <see langword="Number" /> 属性设置为您自己的错误代码时，将错误代码号添加到 <see langword="vbObjectError" /> 常数。 例如，将 <c>vbObjectError + 513</c> 分配给 <see langword="Number" /> 属性，生成错误号 513。</param>
      <param name="Source">可选。 <see langword="String" /> 表达式，用于命名生成错误的对象或应用程序。 设置对象的这一属性时，应使用如下形式：<c>project</c>.<c>class</c>。 如果未指定 <paramref name="Source" />，则使用当前 Visual Basic 项目的进程 ID。</param>
      <param name="Description">可选。 描述错误的 <see langword="String" /> 表达式。 如果未指定，则检查 <see langword="Number" /> 属性值。 如果它可以映射到 Visual Basic 运行时错误代码，则将 <see langword="Error" /> 函数要返回的字符串用作 <see langword="Description" /> 属性。 如果没有对应于 <see langword="Number" /> 属性的 Visual Basic 错误，则使用"应用程序定义的错误或对象定义的错误"消息。</param>
      <param name="HelpFile">可选。 帮助文件的完全限定路径，在该文件中可找到有关此错误的帮助信息。 如果未指定该参数，则 Visual Basic 使用 Visual Basic 帮助文件的完全限定的驱动器、路径和文件名。</param>
      <param name="HelpContext">可选。 上下文 ID，用于标识 <paramref name="HelpFile" /> 中提供有关错误的帮助主题。 如果省略该参数，则使用与 <see langword="Number" /> 属性对应的错误的 Visual Basic 帮助文件上下文 ID（如果存在）。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Description">
      <summary>返回或设置 <see langword="String" /> 表达式，该表达式包含与某个错误关联的描述性字符串。 读/写。</summary>
      <returns>返回或设置 <see langword="String" /> 表达式，该表达式包含与某个错误关联的描述性字符串。 读/写。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Erl">
      <summary>获取指示上一条执行语句的行号的整数。</summary>
      <returns>最后执行的语句的行号。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.HelpContext">
      <summary>返回或设置一个 <see langword="Integer" />，它包含帮助文件中某个主题的上下文 ID。 读/写。</summary>
      <returns>返回或设置一个 <see langword="Integer" />，它包含帮助文件中某个主题的上下文 ID。 读/写。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.HelpFile">
      <summary>返回或设置一个 <see langword="String" /> 表达式，该表达式包含帮助文件的完全限定路径。 读/写。</summary>
      <returns>返回或设置一个 <see langword="String" /> 表达式，该表达式包含帮助文件的完全限定路径。 读/写。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.LastDllError">
      <summary>获取调用动态链接库 (DLL) 所产生的系统错误代码。</summary>
      <returns> (DLL) 的动态链接库调用生成的系统错误代码。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Number">
      <summary>返回或设置指定错误的数值。 读/写。</summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 大于 65535。</exception>
      <returns>返回或设置指定错误的数值。 读/写。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Source">
      <summary>返回或设置一个 <see langword="String" /> 表达式，该表达式指定最初生成错误的对象或应用程序的名称。 读/写。</summary>
      <returns>返回或设置一个 <see langword="String" /> 表达式，该表达式指定最初生成错误的对象或应用程序的名称。 读/写。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileAttribute">
      <summary>指示当调用文件访问函数时要使用的文件特性。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Archive">
      <summary>文件自上次备份后已更改。 此成员等效于 Visual Basic 常量 <see langword="vbArchive" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Directory">
      <summary>目录或文件夹。 此成员等效于 Visual Basic 常量 <see langword="vbDirectory" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Hidden">
      <summary>隐藏。 此成员等效于 Visual Basic 常量 <see langword="vbHidden" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Normal">
      <summary>正常（<see langword="Dir" /> 和 <see langword="SetAttr" /> 的默认值）。 对此文件未应用特殊特征。 此成员等效于 Visual Basic 常量 <see langword="vbNormal" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.ReadOnly">
      <summary>只读。 此成员等效于 Visual Basic 常量 <see langword="vbReadOnly" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.System">
      <summary>系统文件。 此成员等效于 Visual Basic 常量 <see langword="vbSystem" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Volume">
      <summary>卷标。 与 <see langword="SetAttr" /> 一起使用时此特性无效。 此成员等效于 Visual Basic 常量 <see langword="vbVolume" />。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption">
      <summary>指定当要删除的目录中含有文件或目录时应采取的操作。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption.DeleteAllContents">
      <summary>将目录内容随目录一起删除。 默认。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption.ThrowIfDirectoryNonEmpty">
      <summary>如果目录不为空，则引发 <see cref="T:System.IO.IOException" />。 异常的 <see langword="Data" /> 属性会列出未能删除的文件。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.FieldType">
      <summary>指示文本字段是分隔的还是固定宽度的。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.FieldType.Delimited">
      <summary>指示字段是分隔的。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.FieldType.FixedWidth">
      <summary>指示字段是固定宽度的。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.FileSystem">
      <summary>提供了用于处理驱动器、文件和目录的属性和方法。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CombinePath(System.String,System.String)">
      <summary>组合两个路径并返回一个格式正确的路径。</summary>
      <param name="baseDirectory">
        <see langword="String" />. 要组合的第一个路径。</param>
      <param name="relativePath">
        <see langword="String" />. 要组合的第二个路径。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseDirectory" /> 或 <paramref name="relativePath" /> 是格式不正确的路径。</exception>
      <returns>指定路径的组合。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String)">
      <summary>将目录内容复制到其他目录。</summary>
      <param name="sourceDirectoryName">要复制的目录。</param>
      <param name="destinationDirectoryName">应将目录内容复制到的位置。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">源目录不存在。</exception>
      <exception cref="T:System.IO.IOException">源路径和目标路径相同。</exception>
      <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件夹名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">目标文件存在但无法访问。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>将目录内容复制到其他目录。</summary>
      <param name="sourceDirectoryName">要复制的目录。</param>
      <param name="destinationDirectoryName">应将目录内容复制到的位置。</param>
      <param name="showUI">是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">源目录不存在。</exception>
      <exception cref="T:System.IO.IOException">源路径和目标路径相同。</exception>
      <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件夹名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">目标文件存在但无法访问。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="ShowUI" /> 设置为 <see langword="UIOption.AllDialogs" /> 且用户取消了该操作，或者无法复制目录中的一个或多个文件。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>将目录内容复制到其他目录。</summary>
      <param name="sourceDirectoryName">要复制的目录。</param>
      <param name="destinationDirectoryName">应将目录内容复制到的位置。</param>
      <param name="showUI">是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
      <param name="onUserCancel">指定当用户在操作过程中单击“取消”时应执行的操作****。 默认值为 <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">源目录不存在。</exception>
      <exception cref="T:System.IO.IOException">源路径和目标路径相同。</exception>
      <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件夹名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">目标文件存在但无法访问。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="ShowUI" /> 设置为 <see langword="UIOption.AllDialogs" /> 且用户取消了该操作，或者无法复制目录中的一个或多个文件。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)">
      <summary>将目录内容复制到其他目录。</summary>
      <param name="sourceDirectoryName">要复制的目录。</param>
      <param name="destinationDirectoryName">应将目录内容复制到的位置。</param>
      <param name="overwrite">要覆盖现有文件，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">源目录不存在。</exception>
      <exception cref="T:System.IO.IOException">源路径和目标路径相同。</exception>
      <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件夹名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">目标文件存在但无法访问。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)">
      <summary>将文件复制到新的位置。</summary>
      <param name="sourceFileName">要复制的文件。</param>
      <param name="destinationFileName">文件应复制到的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> 包含路径信息。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> 或 <paramref name="sourceFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
      <exception cref="T:System.IO.IOException">目标目录中的同名文件正被使用。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>将文件复制到新的位置。</summary>
      <param name="sourceFileName">要复制的文件。</param>
      <param name="destinationFileName">文件应复制到的位置。</param>
      <param name="showUI">是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> 包含路径信息。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> 或 <paramref name="sourceFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
      <exception cref="T:System.IO.IOException">目标文件存在，并且 <paramref name="overwrite" /> 设置为 <see langword="False" />。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>将文件复制到新的位置。</summary>
      <param name="sourceFileName">要复制的文件。</param>
      <param name="destinationFileName">文件应复制到的位置。</param>
      <param name="showUI">是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
      <param name="onUserCancel">指定当用户在操作过程中单击“取消”时应执行的操作****。 默认值为 <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> 包含路径信息。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> 或 <paramref name="sourceFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
      <exception cref="T:System.IO.IOException">目标文件存在，并且 <paramref name="overwrite" /> 设置为 <see langword="False" />。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="UICancelOption" /> 设置为 <see langword="ThrowException" />，并且用户已经取消了该操作或者发生了未指定的 I/O 错误。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,System.Boolean)">
      <summary>将文件复制到新的位置。</summary>
      <param name="sourceFileName">要复制的文件。</param>
      <param name="destinationFileName">文件应复制到的位置。</param>
      <param name="overwrite">如果应覆盖现有文件，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> 包含路径信息。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> 或 <paramref name="sourceFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
      <exception cref="T:System.IO.IOException">目标文件存在，并且 <paramref name="overwrite" /> 设置为 <see langword="False" />。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)">
      <summary>创建目录。</summary>
      <param name="directory">目录的名称和位置。</param>
      <exception cref="T:System.ArgumentException">目录名称格式不正确。 例如，它包含非法字符或仅包含空白。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.PathTooLongException">目录名太长。</exception>
      <exception cref="T:System.NotSupportedException">目录名只是一个冒号 (:)。</exception>
      <exception cref="T:System.IO.IOException">要创建的目录的父目录是只读的。</exception>
      <exception cref="T:System.UnauthorizedAccessException">用户没有创建目录的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)">
      <summary>删除目录。</summary>
      <param name="directory">要删除的目录。</param>
      <param name="onDirectoryNotEmpty">指定当要删除的目录中含有文件或目录时应采取的操作。 默认值为 <see langword="DeleteDirectoryOption.DeleteAllContents" />。</param>
      <exception cref="T:System.ArgumentException">路径是零长度字符串、格式不正确、仅包含空白，或者包含无效字符（包括通配符）。 路径是设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">目录不存在，或者目录是一个文件。</exception>
      <exception cref="T:System.IO.IOException">目录或子目录中的某个文件正被使用。</exception>
      <exception cref="T:System.NotSupportedException">目录名中包含冒号 (:)。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.Security.SecurityException">该用户没有必需的权限。</exception>
      <exception cref="T:System.OperationCanceledException">用户取消了操作，或无法删除该目录。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)">
      <summary>删除目录。</summary>
      <param name="directory">要删除的目录。</param>
      <param name="showUI">指定是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
      <param name="recycle">指定是否应将删除的文件发送到“回收站”****。 默认值为 <see langword="RecycleOption.DeletePermanently" />。</param>
      <exception cref="T:System.ArgumentException">路径是零长度字符串、格式不正确、仅包含空白，或者包含无效字符（包括通配符）。 路径是设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">目录不存在，或者目录是一个文件。</exception>
      <exception cref="T:System.IO.IOException">目录或子目录中的某个文件正被使用。</exception>
      <exception cref="T:System.NotSupportedException">目录名中包含冒号 (:)。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.Security.SecurityException">该用户没有必需的权限。</exception>
      <exception cref="T:System.OperationCanceledException">用户取消了操作，或无法删除该目录。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>删除目录。</summary>
      <param name="directory">要删除的目录。</param>
      <param name="showUI">指定是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
      <param name="recycle">指定是否应将删除的文件发送到“回收站”****。 默认值为 <see langword="RecycleOption.DeletePermanently" />。</param>
      <param name="onUserCancel">指定在用户单击“取消”时是否引发异常****。</param>
      <exception cref="T:System.ArgumentException">路径是零长度字符串、格式不正确、仅包含空白，或者包含无效字符（包括通配符）。 路径是设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">目录不存在，或者目录是一个文件。</exception>
      <exception cref="T:System.IO.IOException">目录或子目录中的某个文件正被使用。</exception>
      <exception cref="T:System.NotSupportedException">目录名中包含冒号 (:)。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.Security.SecurityException">该用户没有必需的权限。</exception>
      <exception cref="T:System.OperationCanceledException">用户取消了操作，或无法删除该目录。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String)">
      <summary>删除文件。</summary>
      <param name="file">要删除的文件的名称和路径。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；带有必须指定文件的尾部反斜杠；是设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.IO.IOException">该文件正在使用。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有删除该文件的权限，或者该文件为只读。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)">
      <summary>删除文件。</summary>
      <param name="file">要删除的文件的名称和路径。</param>
      <param name="showUI">是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
      <param name="recycle">删除的文件是否应发送到“回收站”****。 默认值为 <see langword="RecycleOption.DeletePermanently" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；带有必须指定文件的尾部反斜杠；是设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.IO.IOException">该文件正在使用。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有删除该文件的权限，或者该文件为只读。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>删除文件。</summary>
      <param name="file">要删除的文件的名称和路径。</param>
      <param name="showUI">是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
      <param name="recycle">删除的文件是否应发送到“回收站”****。 默认值为 <see langword="RecycleOption.DeletePermanently" />。</param>
      <param name="onUserCancel">指定用户取消操作时是否引发异常。 默认值为 <see langword="UICancelOption.ThrowException" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；带有必须指定文件的尾部反斜杠；是设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.IO.IOException">该文件正在使用。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有删除该文件的权限，或者该文件为只读。</exception>
      <exception cref="T:System.OperationCanceledException">用户已取消该操作并且 <paramref name="onUserCancel" /> 已设置为 <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists(System.String)">
      <summary>如果指定目录存在，则返回 <see langword="True" />。</summary>
      <param name="directory">目录的路径。</param>
      <returns>如果目录存在，则为 <see langword="True" />；否则为 <see langword="False" />。 如果该参数表示文件（而不是目录）的名称和路径，则此方法还会返回 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.FileExists(System.String)">
      <summary>如果指定文件存在，则返回 <see langword="True" />。</summary>
      <param name="file">文件的名称和路径。</param>
      <exception cref="T:System.ArgumentException">文件名称以反斜杠 (\) 结尾。</exception>
      <returns>如果文件存在，则返回 <see langword="True" />；否则此方法返回 <see langword="False" />。 如果该参数表示目录（而不是文件）的路径，则此方法还会返回 <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)">
      <summary>返回字符串的只读集合，这些字符串表示包含指定文本的文件的名称。</summary>
      <param name="directory">要搜索的目录。</param>
      <param name="containsText">搜索文本。</param>
      <param name="ignoreCase">如果搜索应区分大小写，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="True" />。</param>
      <param name="searchType">是否包含子文件夹。 默认值为 <see langword="SearchOption.SearchTopLevelOnly" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一而无效：是零长度字符串;它仅包含空格;它包含无效字符;或者是 (以<c> \\ . \</c>) 开头的设备路径。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的目录不存在。</exception>
      <exception cref="T:System.IO.IOException">指定的目录指向某个现有文件。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">指定的目录路径中包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
      <returns>包含指定文本的文件名的只读集合。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
      <summary>返回字符串的只读集合，这些字符串表示包含指定文本的文件的名称。</summary>
      <param name="directory">要搜索的目录。</param>
      <param name="containsText">搜索文本。</param>
      <param name="ignoreCase">如果搜索应区分大小写，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="True" />。</param>
      <param name="searchType">是否包含子文件夹。 默认值为 <see langword="SearchOption.SearchTopLevelOnly" />。</param>
      <param name="fileWildcards">要匹配的模式。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一而无效：是零长度字符串;它仅包含空格;它包含无效字符;或者是 (以<c> \\ . \</c>) 开头的设备路径。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的目录不存在。</exception>
      <exception cref="T:System.IO.IOException">指定的目录指向某个现有文件。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">指定的目录路径中包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
      <returns>包含指定文本的文件名的只读集合。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String)">
      <summary>返回一个字符串集合，这些字符串表示目录内子目录的路径名。</summary>
      <param name="directory">目录的名称和路径。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的目录不存在。</exception>
      <exception cref="T:System.IO.IOException">指定的目录指向某个现有文件。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
      <returns>所指定目录中，子目录路径名称的只读集合。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
      <summary>返回一个字符串集合，这些字符串表示目录内子目录的路径名。</summary>
      <param name="directory">目录的名称和路径。</param>
      <param name="searchType">是否包含子文件夹。 默认值为 <see langword="SearchOption.SearchTopLevelOnly" />。</param>
      <param name="wildcards">用于匹配名称的模式。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">一个或多个指定的通配符为 <see langword="Nothing" />、空字符串，或者仅包含空格。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的目录不存在。</exception>
      <exception cref="T:System.IO.IOException">指定的目录指向某个现有文件。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
      <returns>所指定目录中，子目录路径名称的只读集合。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)">
      <summary>返回指定路径的 <see cref="T:System.IO.DirectoryInfo" /> 对象。</summary>
      <param name="directory">
        <see langword="String" />. 目录的路径。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">目录路径中包含冒号 (:)，或者格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <returns>指定路径的 <see cref="T:System.IO.DirectoryInfo" /> 对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo(System.String)">
      <summary>返回指定驱动器的 <see cref="T:System.IO.DriveInfo" /> 对象。</summary>
      <param name="drive">要检查的驱动器。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="drive" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <returns>指定驱动器的 <see cref="T:System.IO.DriveInfo" /> 对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)">
      <summary>返回指定文件的 <see cref="T:System.IO.FileInfo" /> 对象。</summary>
      <param name="file">文件的名称和路径。</param>
      <exception cref="T:System.ArgumentException">路径名称格式不正确。 例如，包含无效字符或仅为空白。 文件名具有尾随斜杠标记。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.NotSupportedException">路径的字符串中间包含一个冒号。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径太长。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少必要的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户缺少对文件的 ACL（访问控制列表）的访问权限。</exception>
      <returns>指定文件的 <see cref="T:System.IO.FileInfo" /> 对象</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String)">
      <summary>返回字符串的只读集合，这些字符串表示目录内文件的名称。</summary>
      <param name="directory">要搜索的目录。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">要搜索的目录不存在。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="directory" /> 指向某个现有文件。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
      <returns>指定目录中的文件名的只读集合。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
      <summary>返回字符串的只读集合，这些字符串表示目录内文件的名称。</summary>
      <param name="directory">要搜索的目录。</param>
      <param name="searchType">是否包含子文件夹。 默认值为 <see langword="SearchOption.SearchTopLevelOnly" />。</param>
      <param name="wildcards">要匹配的模式。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">要搜索的目录不存在。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="directory" /> 指向某个现有文件。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
      <returns>指定目录中的文件名的只读集合。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetName(System.String)">
      <summary>从提供的路径分析文件名。</summary>
      <param name="path">必需。 要分析的路径。 <see langword="String" />.</param>
      <returns>来自指定路径的文件名。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)">
      <summary>返回所提供的路径的父路径。</summary>
      <param name="path">要检查的路径。</param>
      <exception cref="T:System.ArgumentException">路径是根路径，因此没有父路径。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <returns>所提供的路径的父路径。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName">
      <summary>在磁盘上创建一个唯一命名的零字节临时文件并返回该文件的完整路径。</summary>
      <returns>包含该临时文件的完整路径的 <see langword="String" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String)">
      <summary>将目录从一个位置移动到另一个位置。</summary>
      <param name="sourceDirectoryName">要移动的目录的路径。</param>
      <param name="destinationDirectoryName">源目录将移到的目录的路径。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">该目录不存在。</exception>
      <exception cref="T:System.IO.IOException">源是根目录，或者，源路径与目标路径相同。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>将目录从一个位置移动到另一个位置。</summary>
      <param name="sourceDirectoryName">要移动的目录的路径。</param>
      <param name="destinationDirectoryName">源目录将移到的目录的路径。</param>
      <param name="showUI">指定是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">该目录不存在。</exception>
      <exception cref="T:System.IO.IOException">目标目录已存在，并且 <paramref name="overwrite" /> 设置为 <see langword="False" />。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>将目录从一个位置移动到另一个位置。</summary>
      <param name="sourceDirectoryName">要移动的目录的路径。</param>
      <param name="destinationDirectoryName">源目录将移到的目录的路径。</param>
      <param name="showUI">指定是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
      <param name="onUserCancel">指定用户取消操作时是否引发异常。 默认值为 <see langword="UICancelOption.ThrowException" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">该目录不存在。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="onUserCancel" /> 设置为 <see langword="ThrowException" /> 并且无法复制子目录中的文件。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="onUserCancel" /> 设置为 <see langword="ThrowException" />，并且用户取消了该操作，或者无法完成该操作。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,System.Boolean)">
      <summary>将目录从一个位置移动到另一个位置。</summary>
      <param name="sourceDirectoryName">要移动的目录的路径。</param>
      <param name="destinationDirectoryName">源目录将移到的目录的路径。</param>
      <param name="overwrite">如果应覆盖现有目录，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationDirectoryName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">该目录不存在。</exception>
      <exception cref="T:System.IO.IOException">目标目录已存在，并且 <paramref name="overwrite" /> 设置为 <see langword="False" />。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.InvalidOperationException">操作为循环。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String)">
      <summary>将文件移动到一个新位置。</summary>
      <param name="sourceFileName">要移动的文件的路径。</param>
      <param name="destinationFileName">文件应移到的目录的路径。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>将文件移动到一个新位置。</summary>
      <param name="sourceFileName">要移动的文件的路径。</param>
      <param name="destinationFileName">文件应移到的目录的路径。</param>
      <param name="showUI">指定是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>将文件移动到一个新位置。</summary>
      <param name="sourceFileName">要移动的文件的路径。</param>
      <param name="destinationFileName">文件应移到的目录的路径。</param>
      <param name="showUI">指定是否对操作进度进行可视跟踪。 默认值为 <see langword="UIOption.OnlyErrorDialogs" />。</param>
      <param name="onUserCancel">指定用户取消操作时是否引发异常。 默认值为 <see langword="UICancelOption.ThrowException" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="onUserCancel" /> 设置为 <see langword="ThrowException" />，并且用户已经取消了该操作或者发生了未指定的 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,System.Boolean)">
      <summary>将文件移动到一个新位置。</summary>
      <param name="sourceFileName">要移动的文件的路径。</param>
      <param name="destinationFileName">文件应移到的目录的路径。</param>
      <param name="overwrite">要覆盖现有文件，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">源文件无效或不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)">
      <summary>使用 <see langword="OpenTextFieldParser" /> 方法可以创建 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象，该对象为分析结构化文本文件（例如日志）提供了一种简单而有效的方法。 <see langword="TextFieldParser" /> 对象可用于读取分隔文件和固定宽度文件。</summary>
      <param name="file">要使用 <see langword="TextFieldParser" /> 打开的文件。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">无法使用指定的格式分析某行 ()。 此异常消息指定导致发生异常的行，同时将 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> 属性分配给该行中包含的文本。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <returns>用于读取指定文件的 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.Int32[])">
      <summary>使用 <see langword="OpenTextFieldParser" /> 方法可以创建 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象，该对象为分析结构化文本文件（例如日志）提供了一种简单而有效的方法。 <see langword="TextFieldParser" /> 对象可用于读取分隔文件和固定宽度文件。</summary>
      <param name="file">要使用 <see langword="TextFieldParser" /> 打开的文件。</param>
      <param name="fieldWidths">字段的宽度。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">无法使用指定的格式分析某行 ()。 此异常消息指定导致发生异常的行，同时将 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> 属性分配给该行中包含的文本。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <returns>用于读取指定文件的 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.String[])">
      <summary>使用 <see langword="OpenTextFieldParser" /> 方法可以创建 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象，该对象为分析结构化文本文件（例如日志）提供了一种简单而有效的方法。 <see langword="TextFieldParser" /> 对象可用于读取分隔文件和固定宽度文件。</summary>
      <param name="file">要使用 <see langword="TextFieldParser" /> 打开的文件。</param>
      <param name="delimiters">字段分隔符。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">无法使用指定的格式分析某行 ()。 此异常消息指定导致发生异常的行，同时将 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> 属性分配给该行中包含的文本。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <returns>用于读取指定文件的 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String)">
      <summary>打开要从文件中读取的 <see cref="T:System.IO.StreamReader" /> 对象。</summary>
      <param name="file">要读取的文件。</param>
      <exception cref="T:System.ArgumentException">文件名以反斜杠 (\) 结尾。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到指定的文件。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少从文件读取所必需的权限。</exception>
      <returns>要从文件中读取的 <see cref="T:System.IO.StreamReader" /> 对象</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String,System.Text.Encoding)">
      <summary>打开要从文件中读取的 <see cref="T:System.IO.StreamReader" /> 对象。</summary>
      <param name="file">要读取的文件。</param>
      <param name="encoding">要用于文件内容的编码。 默认值为 ASCII。</param>
      <exception cref="T:System.ArgumentException">文件名以反斜杠 (\) 结尾。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到指定的文件。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少从文件读取所必需的权限。</exception>
      <returns>要从文件中读取的 <see cref="T:System.IO.StreamReader" /> 对象</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean)">
      <summary>打开要写入指定文件的 <see cref="T:System.IO.StreamWriter" /> 对象。</summary>
      <param name="file">要写入的文件。</param>
      <param name="append">要追加到文件的内容中，则为 <see langword="True" />；要覆盖文件的内容，则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.ArgumentException">文件名以尾部反斜杠结尾。</exception>
      <returns>要写入指定文件的 <see cref="T:System.IO.StreamWriter" /> 对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)">
      <summary>打开要写入指定文件的 <see cref="T:System.IO.StreamWriter" />。</summary>
      <param name="file">要写入的文件。</param>
      <param name="append">若要追加到文件的内容中，则为 <see langword="True" />；若要覆盖文件的内容，则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
      <param name="encoding">写入文件时要使用的编码。 默认值为 ASCII。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.ArgumentException">文件名以尾部反斜杠结尾。</exception>
      <returns>要写入指定文件的 <see cref="T:System.IO.StreamWriter" /> 对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes(System.String)">
      <summary>以字节数组的形式返回文件的内容。</summary>
      <param name="file">要读取的文件。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法将字符串写入缓冲区。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <returns>包含文件内容的 <see langword="Byte" /> 数组。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String)">
      <summary>将文本文件的内容作为 <see langword="String" /> 返回。</summary>
      <param name="file">要读取的文件的名称和路径。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法将字符串写入缓冲区。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <returns>包含文件内容的 <see langword="String" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String,System.Text.Encoding)">
      <summary>将文本文件的内容作为 <see langword="String" /> 返回。</summary>
      <param name="file">要读取的文件的名称和路径。</param>
      <param name="encoding">读取文件时要使用的字符编码。 默认值为 UTF-8。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法将字符串写入缓冲区。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <returns>包含文件内容的 <see langword="String" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory(System.String,System.String)">
      <summary>重命名目录。</summary>
      <param name="directory">要重命名的目录的路径和名称。</param>
      <param name="newName">目录的新名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newName" /> 包含路径信息。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> 为 <see langword="Nothing" />。  
  
- 或 - 
 <paramref name="newName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">该目录不存在。</exception>
      <exception cref="T:System.IO.IOException">存在一个具有 <paramref name="newName" /> 中指定的名称的文件或目录。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(System.String,System.String)">
      <summary>重命名文件。</summary>
      <param name="file">要重命名的文件。</param>
      <param name="newName">文件的新名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newName" /> 包含路径信息或以反斜杠 (\) 结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" />。  
  
- 或 - 
 <paramref name="newName" /> 为 <see langword="Nothing" /> 或空字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">该目录不存在。</exception>
      <exception cref="T:System.IO.IOException">存在一个具有 <paramref name="newName" /> 中指定的名称的文件或目录。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户没有必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes(System.String,System.Byte[],System.Boolean)">
      <summary>将数据写入二进制文件。</summary>
      <param name="file">要写入的文件的路径和名称。</param>
      <param name="data">要写入文件的数据。</param>
      <param name="append">若要追加到文件内容中，则为 <see langword="True" />；若要覆盖文件内容，则为 <see langword="False" />。 默认值为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法将字符串写入缓冲区。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean)">
      <summary>向文件写入文本。</summary>
      <param name="file">要写入的文件。</param>
      <param name="text">要写入文件的文本。</param>
      <param name="append">要追加到文件的内容中，则为 <see langword="True" />；要覆盖文件的内容，则为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法将字符串写入缓冲区。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)">
      <summary>向文件写入文本。</summary>
      <param name="file">要写入的文件。</param>
      <param name="text">要写入文件的文本。</param>
      <param name="append">要追加到文件的内容中，则为 <see langword="True" />；要覆盖文件的内容，则为 <see langword="False" />。</param>
      <param name="encoding">写入文件时要使用的编码。</param>
      <exception cref="T:System.ArgumentException">路径由于以下原因之一无效：是零长度字符串；仅为空白；包含无效字符；是一个设备路径（以 \\.\ 开头）；以尾部反斜杠结尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <exception cref="T:System.IO.IOException">文件正由另一个进程使用，或者出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">路径超过了系统定义的最大长度。</exception>
      <exception cref="T:System.NotSupportedException">路径中的文件名或目录名包含冒号 (:)，或格式无效。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法将字符串写入缓冲区。</exception>
      <exception cref="T:System.Security.SecurityException">该用户缺少查看该路径所必需的权限。</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory">
      <summary>获取或设置当前目录。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">该路径无效。</exception>
      <exception cref="T:System.UnauthorizedAccessException">该用户缺少必要的权限。</exception>
      <returns>文件 I/O 操作的当前目录。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.FileSystem.Drives">
      <summary>返回所有可用驱动器名称的只读集合。</summary>
      <returns>作为 <see cref="T:System.IO.DriveInfo" /> 对象的所有可用驱动器的只读集合。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.MalformedLineException">
      <summary>当 <see cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" /> 方法不能使用指定格式分析行时引发的异常。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 类的新实例。</summary>
      <param name="info">存放有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
      <param name="innerException">表示当前异常的产生原因的 <see cref="T:System.Exception" /> 对象。 如果 <see cref="P:System.Exception.InnerException" /> 参数不是空引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String,System.Int64)">
      <summary>使用指定的错误消息和行号初始化 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="lineNumber">格式错误的行的行号。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String,System.Int64,System.Exception)">
      <summary>使用指定的错误消息、行号和对作为此异常原因的内部异常的引用来初始化 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="lineNumber">格式错误的行的行号。</param>
      <param name="innerException">导致当前异常的 <see cref="T:System.Exception" />。 如果 <see cref="P:System.Exception.InnerException" /> 参数不是空引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用有关异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">存放有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.ToString">
      <summary>创建并返回当前异常的字符串表示形式。</summary>
      <returns>当前异常的字符串表示形式。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.MalformedLineException.LineNumber">
      <summary>获取格式错误的行的行号。</summary>
      <returns>格式错误的行的行号。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.RecycleOption">
      <summary>指定文件是应永久删除还是放入“回收站”中****。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.RecycleOption.DeletePermanently">
      <summary>永久删除文件或目录。 默认。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.RecycleOption.SendToRecycleBin">
      <summary>将文件或目录发送至“回收站”****。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.SearchOption">
      <summary>指定是搜索所有目录还是仅搜索顶级目录。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.SearchOption.SearchAllSubDirectories">
      <summary>搜索指定目录及其中的所有子目录。 默认。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.SearchOption.SearchTopLevelOnly">
      <summary>只搜索指定目录，不搜索子目录。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.SpecialDirectories">
      <summary>提供了用于访问经常引用的目录的属性。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.SpecialDirectories.#ctor">
      <summary>返回 <see cref="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" /> 类的实例。</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.AllUsersApplicationData">
      <summary>获取指向所有用户的 Application Data 目录的路径名称。</summary>
      <exception cref="T:System.Security.Permissions.EnvironmentPermission">控件访问系统和用户环境变量。 关联的枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">路径为空，通常是因为操作系统不支持该目录。</exception>
      <returns>指向所有用户的 Application Data 目录的路径。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.CurrentUserApplicationData">
      <summary>获取指向当前用户的 Application Data 目录的路径名称。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">路径为空，通常是因为操作系统不支持该目录。</exception>
      <returns>指向当前用户的 Application Data 目录的路径。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.Desktop">
      <summary>获取指向 Desktop 目录的路径名称。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">路径为空，通常是因为操作系统不支持该目录。</exception>
      <returns>Desktop 目录的路径。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.MyDocuments">
      <summary>获取指向 My Documents 目录的路径名称。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">路径为空，通常是因为操作系统不支持该目录。</exception>
      <returns>指向 My Documents 目录的路径。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.MyMusic">
      <summary>获取指向 My Music 目录的路径名称。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">路径为空，通常是因为操作系统不支持该目录。</exception>
      <returns>指向 My Music 目录的路径。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.MyPictures">
      <summary>获取指向 My Pictures 目录的路径名称。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">路径为空，通常是因为操作系统不支持该目录。</exception>
      <returns>指向 My Pictures 目录的路径。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.ProgramFiles">
      <summary>获取指向 Program Files**** 目录的路径。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">路径为空，通常是因为操作系统不支持该目录。</exception>
      <returns>Program Files目录的路径。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.Programs">
      <summary>获取指向 Programs 目录的路径名称。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">路径为空，通常是因为操作系统不支持该目录。</exception>
      <returns>指向 Programs 目录的路径。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.Temp">
      <summary>获取指向 Temp 目录的路径名称。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">路径为空，通常是因为操作系统不支持该目录。</exception>
      <returns>指向 Temp 目录的路径。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
      <summary>提供分析结构化文本文件的方法和属性。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)">
      <summary>初始化 <see langword="TextFieldParser" /> 类的新实例。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. 要分析的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.ArgumentException">无法读取 <paramref name="stream" />。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>初始化 <see langword="TextFieldParser" /> 类的新实例。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. 要分析的流。</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. 在无法从文件确定编码时要使用的字符编码。 默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="defaultEncoding" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.ArgumentException">无法读取 <paramref name="stream" />。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>初始化 <see langword="TextFieldParser" /> 类的新实例。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. 要分析的流。</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. 在无法从文件确定编码时要使用的字符编码。 默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</param>
      <param name="detectEncoding">
        <see langword="Boolean" />. 指示是否在文件头查找字节顺序标记。 默认值为 <see langword="True" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="defaultEncoding" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.ArgumentException">无法读取 <paramref name="stream" />。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
      <summary>初始化 <see langword="TextFieldParser" /> 类的新实例。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. 要分析的流。</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. 在无法从文件确定编码时要使用的字符编码。 默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</param>
      <param name="detectEncoding">
        <see langword="Boolean" />. 指示是否在文件头查找字节顺序标记。 默认值为 <see langword="True" />。</param>
      <param name="leaveOpen">
        <see langword="Boolean" />. 指示在 <see langword="TextFieldParser" /> 对象关闭时，是否将 <paramref name="stream" /> 保留为打开状态。 默认值为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="defaultEncoding" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.ArgumentException">无法读取 <paramref name="stream" />。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)">
      <summary>初始化 <see langword="TextFieldParser" /> 类的新实例。</summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" />. 要分析的 <see cref="T:System.IO.TextReader" /> 流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 <see langword="Nothing" />。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)">
      <summary>初始化 <see langword="TextFieldParser" /> 类的新实例。</summary>
      <param name="path">
        <see langword="String" />. 要分析的文件的完整路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 是一个空字符串。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
      <summary>初始化 <see langword="TextFieldParser" /> 类的新实例。</summary>
      <param name="path">
        <see langword="String" />. 要分析的文件的完整路径。</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. 在无法从文件确定编码时要使用的字符编码。 默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 是一个空字符串，或 <paramref name="defaultEncoding" /> 为<see langword="Nothing" />。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>初始化 <see langword="TextFieldParser" /> 类的新实例。</summary>
      <param name="path">
        <see langword="String" />. 要分析的文件的完整路径。</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. 在无法从文件确定编码时要使用的字符编码。 默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</param>
      <param name="detectEncoding">
        <see langword="Boolean" />. 指示是否在文件头查找字节顺序标记。 默认值为 <see langword="True" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 是一个空字符串，或 <paramref name="defaultEncoding" /> 为<see langword="Nothing" />。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close">
      <summary>关闭当前的 <see langword="TextFieldParser" /> 对象。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象使用的资源。</summary>
      <param name="disposing">布尔值。 若为 <see langword="True" />，释放托管资源和非托管资源；若为 <see langword="False" />，则只释放非托管资源。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize">
      <summary>允许 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象在由垃圾回收功能回收之前尝试释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
      <summary>读取指定数目的字符但不前移光标。</summary>
      <param name="numberOfChars">要读取的字符数。 必需。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="numberOfChars" /> 小于 0。</exception>
      <returns>包含读取的指定数量的字符的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
      <summary>读取当前行的所有字段，以字符串数组的形式返回这些字段，并将光标前进到包含数据的下一行。</summary>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">不能使用指定格式分析字段。</exception>
      <returns>包含当前行的字段值的字符串数组。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine">
      <summary>将当前行作为字符串返回，并将光标前进到下一行。</summary>
      <returns>文件或流中的当前行。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd">
      <summary>读取文本文件的其余部分并作为一个字符串返回。</summary>
      <returns>文件或流中的其余文本。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
      <summary>将读取器的分隔符设为指定的值，并将字段类型设为 <see langword="Delimited" />。</summary>
      <param name="delimiters">
        <see langword="String" /> 类型的数组。</param>
      <exception cref="T:System.ArgumentException">分隔符为零长度 ()。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
      <summary>将读取器的分隔符设置为指定值。</summary>
      <param name="fieldWidths">
        <see langword="Integer" /> 数组。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象使用的资源。</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens">
      <summary>定义注释标记。 注释标记是一个字符串，当位于行首时，指示该行是一个注释并且分析器应该忽略该行。</summary>
      <exception cref="T:System.ArgumentException">注释标记包含空白。</exception>
      <returns>一个字符串数组，它包含 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象的所有注释标记。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
      <summary>定义文本文件的分隔符。</summary>
      <exception cref="T:System.ArgumentException">分隔符值设置为换行符、空字符串或 <see langword="Nothing" />。</exception>
      <returns>一个字符串数组，它包含 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象的所有字段分隔符。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
      <summary>如果在当前光标位置到文件末尾之间没有非空、非注释行，则返回 <see langword="True" />。</summary>
      <returns>如果没有更多可供读取的数据，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
      <summary>返回导致最近发生的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 异常的行。</summary>
      <returns>导致最近发生的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 异常的行。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
      <summary>返回导致最近发生的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 异常的行的行号。</summary>
      <returns>导致最近发生的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 异常的行的行号。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
      <summary>表示正在分析的文本文件中每一列的宽度。</summary>
      <exception cref="T:System.ArgumentException">除数组最后一个条目外的任意位置中的宽度值小于或等于零。</exception>
      <returns>一个整数数组，它包含正在分析的文本文件中每一列的宽度。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes">
      <summary>指示在分析分隔的文件时是否用引号将字段括起来。</summary>
      <returns>如果将字段用引号括起来，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber">
      <summary>返回当前行号，如果流中没有更多字符，则返回 -1。</summary>
      <returns>当前行号。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
      <summary>指定要分析的文件是分隔的还是固定宽度的。</summary>
      <returns>一个 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> 值，它指示要分析的文件是分隔的还是固定宽度的。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace">
      <summary>指示是否应移除字段值中的前导和尾随空白。</summary>
      <returns>如果应移除字段值中的前导和尾随空白，则为 <see langword="True" />；否则为 <see langword="False" />。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.UICancelOption">
      <summary>指定当用户在操作中单击“取消”时是否引发异常****。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UICancelOption.DoNothing">
      <summary>当用户单击“取消”时不执行任何操作****。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException">
      <summary>当用户单击“取消”时引发异常****。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.UIOption">
      <summary>指定当复制、删除或移动文件或目录时要显示的对话框。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UIOption.AllDialogs">
      <summary>显示进度对话框和任何错误对话框。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UIOption.OnlyErrorDialogs">
      <summary>只显示错误对话框，隐藏进度对话框。 默认。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileSystem">
      <summary>
        <see langword="FileSystem" /> 模块包含用于执行文件、目录或文件夹以及系统操作的过程。 与使用 <see langword="My" /> 模块相比，<see langword="FileSystem" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)">
      <summary>更改当前目录或文件夹。 与 <see langword="My" /> 函数相比，<see langword="ChDir" /> 功能在文件 I/O 操作方面可提供更高的效率和更好的性能。 有关更多信息，请参见<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</summary>
      <param name="Path">必需。 一个字符串表达式，用于标识哪个目录或文件夹将成为新的默认目录或文件夹。 <paramref name="Path" /> 可以包含驱动器。 如果未指定驱动器，则 <see langword="ChDir" /> 更改当前驱动器上的默认目录或文件夹。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Path" /> 为空。</exception>
      <exception cref="T:System.IO.FileNotFoundException">指定的驱动器无效，或驱动器不可用。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)">
      <summary>更改当前驱动器。</summary>
      <param name="Drive">必需。 指定现有驱动器的字符串表达式。 如果提供一个零长度字符串 ("")，则当前驱动器不会更改。 如果 <paramref name="Drive" /> 参数为多字符字符串，<see langword="ChDrive" /> 将仅使用第一个字母。</param>
      <exception cref="T:System.IO.IOException">指定的驱动器无效，或驱动器不可用。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)">
      <summary>更改当前驱动器。</summary>
      <param name="Drive">必需。 指定现有驱动器的字符串表达式。 如果提供一个零长度字符串 ("")，则当前驱动器不会更改。 如果 <paramref name="Drive" /> 参数为多字符字符串，<see langword="ChDrive" /> 将仅使用第一个字母。</param>
      <exception cref="T:System.IO.IOException">指定的驱动器无效，或驱动器不可用。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.CurDir">
      <summary>返回表示当前路径的字符串。 与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</summary>
      <returns>表示当前路径的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)">
      <summary>返回表示当前路径的字符串。 与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</summary>
      <param name="Drive">可选。 指定现有驱动器的 <see langword="Char" /> 表达式。 如果未指定驱动器或 <paramref name="Drive" /> 是长度为零的字符串 ("")，则 <see langword="CurDir" /> 返回当前驱动器的路径。</param>
      <returns>表示当前路径的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Dir">
      <summary>返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。 与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</summary>
      <returns>一个字符串，表示与指定模式或文件特性匹配的文件、目录或文件夹的名称，或者表示驱动器卷标。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)">
      <summary>返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。 与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</summary>
      <param name="PathName">可选。 一个字符串表达式，用于指定文件名、目录或文件夹名或者驱动器卷标。 如果未找到 <paramref name="PathName" />，则返回一个零长度字符串 (<see langword="&quot;&quot;" />)。</param>
      <param name="Attributes">可选。 其值指定文件特性的枚举或数值表达式。 如果省略，则 <see langword="Dir" /> 将返回与 <paramref name="Pathname" /> 匹配但不具有任何特性的文件。</param>
      <returns>一个字符串，表示与指定模式或文件特性匹配的文件、目录或文件夹的名称，或者表示驱动器卷标。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)">
      <summary>当达到为进行 <see langword="True" /> 或顺序 <see langword="Random" /> 而打开的文件的结尾时，此方法返回布尔值 <see langword="Input" />。</summary>
      <param name="FileNumber">必需。 一个包含任何有效文件号的 <see langword="Integer" />。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
      <returns>当达到为进行 <see langword="Random" /> 或顺序 <see langword="Input" /> 而打开的文件的结尾时，为布尔值 <see langword="True" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)">
      <summary>返回一个枚举，该枚举表示使用 <see langword="FileOpen" /> 函数打开的文件的文件模式。 与 <see langword="FileAttr" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</summary>
      <param name="FileNumber">必需。 <see langword="Integer" />。 任何有效文件数。</param>
      <returns>以下值之一： 
 <list type="table"><listheader><term>“值”</term><description>文件访问模式</description></listheader><item><term>1</term><description><see langword="OpenMode.Input" /></description></item><item><term>2</term><description><see langword="OpenMode.Output" /></description></item><item><term>4</term><description><see langword="OpenMode.Random" /></description></item><item><term>8</term><description><see langword="OpenMode.Append" /></description></item><item><term>32</term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])">
      <summary>关闭对用 <see langword="FileOpen" /> 函数打开的文件的输入/输出 (I/O)。 <see langword="My" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumbers">可选。 要关闭的 0 个或多个信道的参数数组。</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileNumber" /> 不存在。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)">
      <summary>复制文件。 与 <see langword="FileCopy" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关更多信息，请参见<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />。</summary>
      <param name="Source">必需。 指定要复制的文件的名称的字符串表达式。 <paramref name="Source" /> 可以包含源文件的驱动器和目录或文件夹。</param>
      <param name="Destination">必需。 指定目标文件名的字符串表达式。 <paramref name="Destination" /> 可包含目标文件的驱动器和目录或文件夹。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> 或 <paramref name="Destination" /> 无效或未指定。</exception>
      <exception cref="T:System.IO.IOException">文件已打开。</exception>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)">
      <summary>返回一个 <see langword="Date" /> 值，该值指示写入文件的日期和时间。 相比 <see langword="FileDateTime" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</summary>
      <param name="PathName">必需。 指定一个文件名的字符串表达式。 <paramref name="PathName" /> 可能包括目录或文件夹以及驱动器。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="PathName" /> 无效或包含通配符。</exception>
      <exception cref="T:System.IO.FileNotFoundException">目标文件不存在。</exception>
      <returns>
        <see langword="Date" /> 值，该值指示文件的创建日期和时间或上次修改日期和时间。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <param name="ArrayIsDynamic">可选。 仅当写入数组时使用。 指定是否将数组视为动态数组，以及是否需要描述数组大小和边界的数组说明符。</param>
      <param name="StringIsFixedLength">可选。 仅在写入字符串时适用。 指定是否为描述长度的字符串写入一个双字节说明符。 默认值为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <param name="StringIsFixedLength">可选。 仅在写入字符串时适用。 指定是否为描述长度的字符串写入一个双字节说明符。 默认值为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。 相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)">
      <summary>将数据从打开的磁盘文件读入到一个变量中。  相比 <see langword="FileGetObject" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 数据读入到其中的有效变量名称。</param>
      <param name="RecordNumber">可选。 读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)">
      <summary>返回一个值，该值以字节为单位指定文件长度。 相比 <see langword="FileLen" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</summary>
      <param name="PathName">必需。 指定一个文件的字符串表达式。 <paramref name="PathName" /> 可能包括目录或文件夹以及驱动器。</param>
      <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
      <returns>文件的长度（以字节为单位）。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)">
      <summary>打开一个文件以进行输入或输出。 相比 <see langword="FileOpen" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。 可使用 <see langword="FreeFile" /> 函数获取下一个可用的文件号。</param>
      <param name="FileName">必需。 一个指定文件名的字符串表达式，其中可包含目录或文件夹以及驱动器。</param>
      <param name="Mode">必需。 指定文件模式的枚举：<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" /> 或 <see langword="Random" />。 有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.OpenMode" />。</param>
      <param name="Access">可选。 一个枚举，它指定对打开的文件所允许进行的操作：<see langword="Read" />、<see langword="Write" /> 或 <see langword="ReadWrite" />。 默认为 <see langword="ReadWrite" />。 有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.OpenAccess" />。</param>
      <param name="Share">可选。 一个枚举，它指定不允许其他进程对打开的文件所进行的操作：<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" /> 和 <see langword="Lock Read Write" />。 默认为 <see langword="Lock Read Write" />。 有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.OpenShare" />。</param>
      <param name="RecordLength">可选。 小于或等于 32,767（字节）的数字。 对于为进行随机访问而打开的文件，此值是记录的长度。 对于顺序文件，此值是缓冲的字符数。</param>
      <exception cref="T:System.ArgumentException">记录长度是负数（并且不等于 -1）。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileName" /> 已经打开，或 <paramref name="FileName" /> 无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <param name="ArrayIsDynamic">可选。 仅当写入数组时使用。 指定是否将数组视为动态数组，以及是否写入用于描述字符串长度的数组说明符。</param>
      <param name="StringIsFixedLength">可选。 仅在写入字符串时适用。 指定是否将字符串的双字节字符串长度说明符写入文件中。 默认值为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <param name="StringIsFixedLength">可选。 仅在写入字符串时适用。 指定是否将字符串的双字节字符串长度说明符写入文件中。 默认值为 <see langword="False" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)">
      <summary>将变量中得数据写入磁盘文件中。 相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</exception>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)">
      <summary>将变量中得数据写入磁盘文件中。  相比 <see langword="FilePutObject" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 有效变量名，它包含写入磁盘的数据。</param>
      <param name="RecordNumber">可选。 开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)">
      <summary>为用 <see langword="FileOpen" /> 函数打开的文件分配输出行宽。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="RecordWidth">必需。 0 到 255（包括 0 和 255）范围内的数值表达式，它表示在开始新一行前每一行中所显示的字符数。 如果 <paramref name="RecordWidth" /> 等于 0，则行的长度没有限制。 <paramref name="RecordWidth" /> 的默认值为 0。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FreeFile">
      <summary>返回一个 <see langword="Integer" /> 值，该值表示 <see langword="FileOpen" /> 函数可用的下一个文件号。</summary>
      <exception cref="T:System.IO.IOException">正在使用的文件数超过 255。</exception>
      <returns>一个整数值，该值表示 <see langword="FileOpen" /> 函数可用的下一个文件号。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)">
      <summary>返回一个表示文件、目录或文件夹的特性的 <see langword="FileAttribute" /> 值。 相比 <see langword="FileAttribute" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="PathName">必需。 指定一个文件名、目录名或文件夹名的字符串表达式。 <paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="Pathname" /> 无效或包含通配符。</exception>
      <exception cref="T:System.IO.FileNotFoundException">目标文件不存在。</exception>
      <returns>枚举值的按位组合。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)">
      <summary>读取打开的顺序文件中的数据，并将这些数据赋值给变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 被赋以从文件中读取的值的变量不能是数组或对象变量。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)">
      <summary>读取打开的顺序文件中的数据，并将这些数据赋值给变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 被赋以从文件中读取的值的变量不能是数组或对象变量。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)">
      <summary>读取打开的顺序文件中的数据，并将这些数据赋值给变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 被赋以从文件中读取的值的变量不能是数组或对象变量。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)">
      <summary>读取打开的顺序文件中的数据，并将这些数据赋值给变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 被赋以从文件中读取的值的变量不能是数组或对象变量。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)">
      <summary>读取打开的顺序文件中的数据，并将这些数据赋值给变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 被赋以从文件中读取的值的变量不能是数组或对象变量。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)">
      <summary>读取打开的顺序文件中的数据，并将这些数据赋值给变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 被赋以从文件中读取的值的变量不能是数组或对象变量。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)">
      <summary>读取打开的顺序文件中的数据，并将这些数据赋值给变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 被赋以从文件中读取的值的变量不能是数组或对象变量。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)">
      <summary>读取打开的顺序文件中的数据，并将这些数据赋值给变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 被赋以从文件中读取的值的变量不能是数组或对象变量。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)">
      <summary>读取打开的顺序文件中的数据，并将这些数据赋值给变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 被赋以从文件中读取的值的变量不能是数组或对象变量。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)">
      <summary>读取打开的顺序文件中的数据，并将这些数据赋值给变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 被赋以从文件中读取的值的变量不能是数组或对象变量。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)">
      <summary>读取打开的顺序文件中的数据，并将这些数据赋值给变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 被赋以从文件中读取的值的变量不能是数组或对象变量。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)">
      <summary>读取打开的顺序文件中的数据，并将这些数据赋值给变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Value">必需。 被赋以从文件中读取的值的变量不能是数组或对象变量。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)">
      <summary>返回 <see langword="String" /> 值，该值包含以 <see langword="Input" /> 或 <see langword="Binary" /> 模式打开的文件中的字符。 相比 <see langword="InputString" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="CharCount">必需。 用于指定要读取的字符数的任何有效数值表达式。</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileNumber" /> 不存在。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="CharCount" />&lt; 0 或 &gt; 214。</exception>
      <returns>一个字符串，该字符串包含以 <see langword="Input" /> 或 <see langword="Binary" /> 模式打开的文件中的字符。 相比 <see langword="InputString" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)">
      <summary>从磁盘中删除文件。 相比 <see langword="Kill" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关更多信息，请参见<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="PathName">必需。 指定要删除的一个或多个文件名的字符串表达式。 <paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</param>
      <exception cref="T:System.IO.IOException">目标文件打开。</exception>
      <exception cref="T:System.IO.FileNotFoundException">目标文件未找到。</exception>
      <exception cref="T:System.Security.SecurityException">权限被拒绝。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)">
      <summary>从打开的顺序文件中读取一行并将其赋值给一个 <see langword="String" /> 变量。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <exception cref="T:System.IO.EndOfStreamException">到达文件末尾。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileNumber" /> 不存在。</exception>
      <returns>从打开的顺序文件中读取一行并将其赋值给一个 <see langword="String" /> 变量。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)">
      <summary>返回指定打开文件中当前读/写位置的值。</summary>
      <param name="FileNumber">必需。 任何有效的 <see langword="Integer" /> 文件号。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
      <returns>打开文件中当前读/写位置。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)">
      <summary>控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。 与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)">
      <summary>控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。 与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Record">可选。 唯一要锁定或取消锁定的记录号或字节数。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)">
      <summary>控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。 与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="FromRecord">可选。 第一个要锁定或取消锁定的记录号或字节数。</param>
      <param name="ToRecord">可选。 最后一个要锁定或取消锁定的记录号或字节数。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)">
      <summary>返回使用 <see langword="FileOpen" /> 函数打开的文件的大小（以字节为单位）。 相比 <see langword="LOF" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 一个包含有效文件号的整数。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
      <returns>使用 <see langword="FileOpen" /> 函数打开的文件的大小（以字节为单位）。 相比 <see langword="LOF" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)">
      <summary>新建目录。 相比 <see langword="MkDir" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />。</summary>
      <param name="Path">必需。 标识要创建的目录的字符串表达式。 <paramref name="Path" /> 可以包含驱动器。 如果未指定驱动器，则 <see langword="MkDir" /> 在当前驱动器上创建新目录。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Path" /> 未指定或为空。</exception>
      <exception cref="T:System.Security.SecurityException">权限被拒绝。</exception>
      <exception cref="T:System.IO.IOException">目录已存在。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])">
      <summary>将已设置显示格式的数据写入顺序文件。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Output">可选。 要写入文件的零个或多个由逗号分隔的表达式。  
  
<paramref name="Output" /> 参数的设置是： 
 <see langword="T:System.IO.IOException" />：文件模式无效。  
  
 <see langword="T:System.IO.IOException" />：<paramref name="FileNumber" /> 不存在。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])">
      <summary>将已设置显示格式的数据写入顺序文件。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Output">可选。 要写入文件的零个或多个由逗号分隔的表达式。  
  
<paramref name="Output" /> 参数的设置是： 
 <see langword="T:System.IO.IOException" />：文件模式无效。  
  
 <see langword="T:System.IO.IOException" />：<paramref name="FileNumber" /> 不存在。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)">
      <summary>重命名磁盘文件或目录。 相比 <see langword="Rename" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="OldPath">必需。 指定现有文件名和位置的字符串表达式。 <paramref name="OldPath" /> 可包含文件的目录和驱动器。</param>
      <param name="NewPath">必需。 指定新文件名和位置的字符串表达式。 <paramref name="NewPath" /> 可包含目标位置的目录和驱动器。 <paramref name="NewPath" /> 指定的文件名不能是已存在的文件名。</param>
      <exception cref="T:System.ArgumentException">路径无效。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="OldPath" /> 文件不存在。</exception>
      <exception cref="T:System.IO.IOException">无法重命名为不同的设备。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Reset">
      <summary>关闭所有使用 <see langword="FileOpen" /> 函数打开的磁盘文件。 相比 <see langword="Reset" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)">
      <summary>移除现有目录。 相比 <see langword="RmDir" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />。</summary>
      <param name="Path">必需。 标识要移除的目录或文件夹的字符串表达式。 <paramref name="Path" /> 可以包含驱动器。 如果未指定驱动器，则 <see langword="RmDir" /> 移除当前驱动器上的目录。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Path" /> 未指定或为空。</exception>
      <exception cref="T:System.IO.IOException">目标目录包含文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">目录不存在。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)">
      <summary>返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。 相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 一个包含有效文件号的 <see langword="Integer" />。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
      <returns>一个 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)">
      <summary>返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。 相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 一个包含有效文件号的 <see langword="Integer" />。</param>
      <param name="Position">必需。 一个 1 到 2,147,483,647 范围内（包括 1 和 2,147,483,647）的数字，用于指示下一个读取/写入操作应该发生的位置。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)">
      <summary>设置文件的特性信息。 相比 <see langword="SetAttr" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="PathName">必需。 指定一个文件名的字符串表达式。 <paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</param>
      <param name="Attributes">必需。 常量或数值表达式，所有这些值一起指定文件特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Attribute" /> 类型无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)">
      <summary>与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</summary>
      <param name="Count">必需。 在显示或输出列表中下一个表达式之前要插入的空格数。</param>
      <returns>与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.TAB">
      <summary>与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</summary>
      <returns>与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)">
      <summary>与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</summary>
      <param name="Column">可选。 在显示或输出列表中下一个表达式之前要移动到的列号。 如果省略它，则 <see langword="TAB" /> 将插入点移动到下一个打印区域的开始位置。</param>
      <returns>与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)">
      <summary>控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。 与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)">
      <summary>控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。 与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="Record">可选。 唯一要锁定或取消锁定的记录号或字节数</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)">
      <summary>控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。 与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</summary>
      <param name="FileNumber">必需。 任何有效文件数。</param>
      <param name="FromRecord">可选。 第一个要锁定或取消锁定的记录号或字节数。</param>
      <param name="ToRecord">可选。 最后一个要锁定或取消锁定的记录号或字节数。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])">
      <summary>将数据写入一个顺序文件。 通常使用 <see langword="Input" /> 从文件中读取使用 <see langword="Write" /> 编写的数据。</summary>
      <param name="FileNumber">必需。 包含任何有效文件数的 <see langword="Integer" /> 表达式。</param>
      <param name="Output">可选。 要写入文件的一个或多个由逗号分隔的表达式。</param>
      <exception cref="T:System.IO.IOException">文件模式无效。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])">
      <summary>将数据写入一个顺序文件。 通常使用 <see langword="Input" /> 从文件中读取使用 <see langword="Write" /> 编写的数据。</summary>
      <param name="FileNumber">必需。 包含任何有效文件数的 <see langword="Integer" /> 表达式。</param>
      <param name="Output">可选。 要写入文件的一个或多个由逗号分隔的表达式。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Financial">
      <summary>
        <see langword="Financial" /> 模块包含用于执行财务运算的过程。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>返回一个值，它使用双倍余额递减法或指定的其他方法来指定特定时间周期内的资产折旧。</summary>
      <param name="Cost">必需。 资产的原始成本。</param>
      <param name="Salvage">必需。 资产在使用年限结束时的价值。</param>
      <param name="Life">必需。 资产的使用年限。</param>
      <param name="Period">必需。 计算资产折旧所用的周期。</param>
      <param name="Factor">可选。 余额递减的速率。 如果省略，则假定为 2（双倍余额递减法）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Factor" />&lt;= 0， <paramref name="Salvage" /> &lt;0、 <paramref name="Period" /> &lt; = 0 或 <paramref name="Period" /> &gt; <paramref name="Life" /> 。</exception>
      <returns>使用双倍余额递减法或指定的其他方法的特定时间周期内的资产折旧。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>返回一值，该值基于等额分期付款和固定利率指定年金的终值。</summary>
      <param name="Rate">必需。 每期的利率。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
      <param name="NPer">必需。 年金付款总期数。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
      <param name="Pmt">必需。 每期应付金额。 付款金额通常包含本金和利息，该值在年金的有效期限内都不会改变。</param>
      <param name="PV">可选。 未来一系列付款金额（或一次付清款项）的现值。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。 如果省略，则假定为 0。</param>
      <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <see langword="DueDate.EndOfPeriod" />；如果在付款期初付款，则此参数必须为 <see langword="DueDate.BegOfPeriod" />。 如果省略，则假定为 <see langword="DueDate.EndOfPeriod" />。</param>
      <returns>基于等额分期付款和固定利率的年金的终值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>返回一个值，该值基于等额分期付款和固定利率指定年金在给定期间的支付利息。</summary>
      <param name="Rate">必需。 每期的利率。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
      <param name="Per">必需。 1 到 <paramref name="NPer" />.范围内的支付周期。</param>
      <param name="NPer">必需。 年金付款总期数。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
      <param name="PV">必需。 未来一系列支出或收入的现值。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
      <param name="FV">可选。 完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
      <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Per" />&lt;= 0 或 <paramref name="Per" /> &gt;<paramref name="NPer" /></exception>
      <returns>基于等额分期付款和固定利率的给定周期的支付利息。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)">
      <summary>返回一个值，该值指定一系列定期现金流（支出和收入）的内部收益率。</summary>
      <param name="ValueArray">必需。 指定现金流值的 <see cref="T:System.Double" /> 数组。 该数组必须至少包含一个负值（支出）和一个正值（收入）。</param>
      <param name="Guess">可选。 指定 <see langword="IRR" /> 将返回的估算值的对象。 如果省略，<paramref name="Guess" /> 便为 0.1 (10%)。</param>
      <exception cref="T:System.ArgumentException">数组参数值无效或 <paramref name="Guess" /> &lt; =-1。</exception>
      <returns>一系列定期现金流（支出和收入）的内部收益率。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)">
      <summary>返回一个值，该值指定一系列定期现金流（支出和收入）修改后的内部收益率。</summary>
      <param name="ValueArray">必需。 指定现金流值的 <see cref="T:System.Double" /> 数组。 该数组必须至少包含一个负值（支出）和一个正值（收入）。</param>
      <param name="FinanceRate">必需。 作为财务费用支付的利率。</param>
      <param name="ReinvestRate">必需。 现金再投资收益中的所得利率。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ValueArray" /> 的秩不等于 1，<paramref name="FinanceRate" /> = -1，或 <paramref name="ReinvestRate" /> = -1</exception>
      <exception cref="T:System.DivideByZeroException">出现被零除。</exception>
      <returns>一系列定期现金流（支出和收入）修改后的内部收益率。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>返回一个值，该值基于等额分期付款和固定利率指定年金的期数。</summary>
      <param name="Rate">必需。 每期的利率。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
      <param name="Pmt">必需。 每期应付金额。 付款金额通常包含本金和利息，该值在年金的有效期限内都不会改变。</param>
      <param name="PV">必需。 未来一系列支出或收入的现值。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
      <param name="FV">可选。 完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
      <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Rate" /> = 0 和 <paramref name="Pmt" /> = 0</exception>
      <returns>基于等额分期付款和固定利率的年金的期数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)">
      <summary>返回一个值，该值基于一系列定期现金流（支出和收入）和贴现率来指定投资的净现值。</summary>
      <param name="Rate">必需。 每期的贴现率，以小数表示。</param>
      <param name="ValueArray">必需。 指定现金流值的 <see cref="T:System.Double" /> 数组。 该数组必须至少包含一个负值（支出）和一个正值（收入）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ValueArray" />为 <see langword="Nothing" /> ，秩为 <paramref name="ValueArray" /> &lt; &gt; 1 或 <paramref name="Rate" /> =-1</exception>
      <returns>基于一系列定期现金流（支出和收入）和贴现率的投资的净现值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>返回一个值，它基于等额分期付款和固定利率指定年金的付款金额。</summary>
      <param name="Rate">必需。 每期的利率。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
      <param name="NPer">必需。 年金付款总期数。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
      <param name="PV">必需。 未来一系列要支付的付款现值（或一次付清款项）。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
      <param name="FV">可选。 完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间储蓄 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
      <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="NPer" /> = 0.</exception>
      <returns>基于等额分期付款和固定利率的年金的付款金额。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>返回一个值，该值基于等额分期付款和固定利率指定年金在给定期间的本金付款额。</summary>
      <param name="Rate">必需。 每期的利率。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
      <param name="Per">必需。 1 到 <paramref name="NPer" />.范围内的支付周期。</param>
      <param name="NPer">必需。 年金付款总期数。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
      <param name="PV">必需。 指定未来一系列支出或收入的现值。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
      <param name="FV">可选。 完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
      <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Per" />&lt;= 0 或 <paramref name="Per" /> &gt;<paramref name="NPer" />.</exception>
      <returns>基于等额分期付款和固定利率的年金在给定期间的本金付款额。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>返回一个值，它基于未来等额分期付款和固定利率指定年金的现值。</summary>
      <param name="Rate">必需。 每期的利率。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
      <param name="NPer">必需。 年金付款总期数。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
      <param name="Pmt">必需。 每期应付金额。 付款金额通常包含本金和利息，该值在年金的有效期限内都不会改变。</param>
      <param name="FV">可选。 完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
      <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
      <returns>基于未来等额分期付款和固定利率的年金的现值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)">
      <summary>返回一个指定每期年金利率的值。</summary>
      <param name="NPer">必需。 年金付款总期数。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
      <param name="Pmt">必需。 每期应付金额。 付款金额通常包含本金和利息，该值在年金的有效期限内都不会改变。</param>
      <param name="PV">必需。 未来一系列支出或收入的现值。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
      <param name="FV">可选。 完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
      <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
      <param name="Guess">可选。 <see langword="Rate" /> 将返回估计值。 如果省略，<paramref name="Guess" /> 便为 0.1 (10%)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="NPer" />&lt;= 0。</exception>
      <returns>每期的年金利率。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)">
      <summary>返回一个值，该值指定资产在一个周期内的直线折旧。</summary>
      <param name="Cost">必需。 资产的原始成本。</param>
      <param name="Salvage">必需。 资产在使用年限结束时的价值。</param>
      <param name="Life">必需。 资产的使用年限。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Life" /> = 0.</exception>
      <returns>资产在一个周期内的直线折旧。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)">
      <summary>返回一个值，该值指定在指定周期内资产的年限总额折旧。</summary>
      <param name="Cost">必需。 资产的原始成本。</param>
      <param name="Salvage">必需。 资产在使用年限结束时的价值。</param>
      <param name="Life">必需。 资产的使用年限。</param>
      <param name="Period">必需。 计算资产折旧所用的周期。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Salvage" />&lt;0， <paramref name="Period" /> &gt;<paramref name="Life" />，或 <paramref name="Period" /> &lt;= 0。</exception>
      <returns>指定周期内资产的年限总额折旧。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FirstDayOfWeek">
      <summary>指示在调用与日期相关的函数时使用的每周的第一天。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Friday">
      <summary>Friday，该成员等效于 Visual Basic 常数 <see langword="vbFriday" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Monday">
      <summary>Monday，该成员等效于 Visual Basic 常数 <see langword="vbMonday" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Saturday">
      <summary>Saturday，该成员等效于 Visual Basic 常数 <see langword="vbSaturday" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday">
      <summary>Sunday（默认值），该成员等效于 Visual Basic 常数 <see langword="vbSunday" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.System">
      <summary>系统设置中指定的一周的第一天，该成员等效于 Visual Basic 常数 <see langword="vbUseSystemDayOfWeek" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Thursday">
      <summary>Thursday，该成员等效于 Visual Basic 常数 <see langword="vbThursday" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Tuesday">
      <summary>Tuesday，该成员等效于 Visual Basic 常数 <see langword="vbTuesday" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Wednesday">
      <summary>Wednesday，该成员等效于 Visual Basic 常数 <see langword="vbWednesday" />。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FirstWeekOfYear">
      <summary>指示在调用与日期相关的函数时使用的每年的第一周。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.FirstFourDays">
      <summary>第一个至少包含新年中的四天的周。 此成员等效于 Visual Basic 常量 <see langword="vbFirstFourDays" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.FirstFullWeek">
      <summary>一年中第一个完整的周。 此成员等效于 Visual Basic 常量 <see langword="vbFirstFullWeek" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1">
      <summary>1 月 1 日所在的周（默认）。 此成员等效于 Visual Basic 常量 <see langword="vbFirstJan1" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.System">
      <summary>在系统设置中指定为一年的第一周的周。 此成员等效于 Visual Basic 常量 <see langword="vbUseSystem" />。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.HideModuleNameAttribute">
      <summary>当应用于模块时，<see langword="HideModuleNameAttribute" /> 属性允许仅使用模块所需的限定访问模块成员。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.HideModuleNameAttribute.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.HideModuleNameAttribute" /> 属性的新实例。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Information">
      <summary>
        <see langword="Information" /> 模块包含用于返回、测试或验证信息的过程。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.Erl">
      <summary>返回指示上一条执行语句的行号的整数。 只读。</summary>
      <returns>返回指示上一条执行语句的行号的整数。 只读。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.Err">
      <summary>包含运行时错误的相关信息。</summary>
      <returns>包含运行时错误的相关信息。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
      <summary>返回一个 <see langword="Boolean" /> 值，指示变量是否指向数组。</summary>
      <param name="VarName">必需。 <see langword="Object" /> 变量。</param>
      <returns>返回一个 <see langword="Boolean" /> 值，指示变量是否指向数组。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
      <summary>返回一个 <see langword="Boolean" /> 值，该值指示表达式是否表示一个有效的 <see langword="Date" /> 值。</summary>
      <param name="Expression">必需。 <see langword="Object" /> 表达式。</param>
      <returns>返回一个 <see langword="Boolean" /> 值，该值指示表达式是否表示一个有效的 <see langword="Date" /> 值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
      <summary>返回一个 <see langword="Boolean" /> 值，指示表达式的计算结果是否为 <see cref="T:System.DBNull" /> 类。</summary>
      <param name="Expression">必需。 <see langword="Object" /> 表达式。</param>
      <returns>返回一个 <see langword="Boolean" /> 值，指示表达式的计算结果是否为 <see cref="T:System.DBNull" /> 类。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
      <summary>返回一个 <see langword="Boolean" /> 值，指示表达式是否是异常类型。</summary>
      <param name="Expression">必需。 <see langword="Object" /> 表达式。</param>
      <returns>返回一个 <see langword="Boolean" /> 值，指示表达式是否是异常类型。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
      <summary>返回一个 <see langword="Boolean" /> 值，指示表达式是否未被指派对象。</summary>
      <param name="Expression">必需。 <see langword="Object" /> 表达式。</param>
      <returns>返回一个 <see langword="Boolean" /> 值，指示表达式是否未被指派对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
      <summary>返回一个 <see langword="Boolean" /> 值，指示表达式的计算结果是否为数字。</summary>
      <param name="Expression">必需。 <see langword="Object" /> 表达式。</param>
      <returns>返回一个 <see langword="Boolean" /> 值，指示表达式的计算结果是否为数字。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
      <summary>返回一个 <see langword="Boolean" /> 值，指示表达式是否为引用类型。</summary>
      <param name="Expression">必需。 <see langword="Object" /> 表达式。</param>
      <returns>返回一个 <see langword="Boolean" /> 值，指示表达式是否为引用类型。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
      <summary>返回数组的指示维度的最小可用下标。</summary>
      <param name="Array">必需。 任何数据类型的数组。 希望在其中找到维度的最小可能下标的数组。</param>
      <param name="Rank">可选。 <see langword="Integer" />. 将返回其最小可用下标的维度。 对第一维使用 1，对第二维使用 2，依此类推。 如果省略 <paramref name="Rank" />，则假定为 1。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Array" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="Rank" /> 小于 1，或 <paramref name="Rank" /> 大于 <paramref name="Array" /> 的级别。</exception>
      <returns>
        <see langword="Integer" />. 指定维度的下标可以包含的最小值。 只要 <paramref name="Array" /> 已初始化，即使其中没有元素（例如，它是一个零长度字符串），<see langword="LBound" /> 也始终返回 0。 如果 <paramref name="Array" /> 为 <see langword="Nothing" />，则 <see langword="LBound" /> 将引发 <see cref="T:System.ArgumentNullException" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
      <summary>返回一个 <see langword="Integer" /> 值，表示与指定的颜色编号对应的 RGB 颜色代码。</summary>
      <param name="Color">必需。 0–15 范围内的整数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Color" /> 不在 0 到 15（均含）范围之内。</exception>
      <returns>返回一个 <see langword="Integer" /> 值，表示与指定的颜色编号对应的 RGB 颜色代码。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
      <summary>返回一个 <see langword="Integer" /> 值，表示由一组红色、绿色和蓝色分量形成的 RGB 颜色值。</summary>
      <param name="Red">必需。 0–255 范围内（均含）的 <see langword="Integer" /> 值，表示颜色中红色分量的强度。</param>
      <param name="Green">必需。 0–255 范围内（均含）的 <see langword="Integer" /> 值，表示颜色中绿色分量的强度。</param>
      <param name="Blue">必需。 0–255 范围内（均含）的 <see langword="Integer" /> 值，表示颜色中蓝色分量的强度。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Green" />、<paramref name="Blue" />，或 <paramref name="Red" /> 不在 0 到 255（含 0 和 255）范围之内。</exception>
      <returns>返回一个 <see langword="Integer" /> 值，表示由一组红色、绿色和蓝色分量形成的 RGB 颜色值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
      <summary>返回一个 <see langword="String" /> 值，它包含变量的系统数据类型名称。</summary>
      <param name="VbName">必需。 一个包含 Visual Basic 类型名称的 <see langword="String" /> 变量。</param>
      <returns>返回一个 <see langword="String" /> 值，它包含变量的系统数据类型名称。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
      <summary>返回一个 <see langword="String" /> 值，它包含变量的数据类型信息。</summary>
      <param name="VarName">必需。 <see langword="Object" /> 变量。 如果 <see langword="Option Strict" /> 为 <see langword="Off" />，则可以传递除结构之外的任何数据类型的变量。</param>
      <returns>返回一个 <see langword="String" /> 值，它包含变量的数据类型信息。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
      <summary>返回数组的指示维度的最大可用下标。</summary>
      <param name="Array">必需。 任何数据类型的数组。 要在其中查找维度的最大可能下标的数组。</param>
      <param name="Rank">可选。 <see langword="Integer" />. 将返回其最大可用下标的维度。 对第一维使用 1，对第二维使用 2，依此类推。 如果省略 <paramref name="Rank" />，则假定为 1。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Array" /> 为 <see langword="Nothing" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="Rank" /> 小于 1，或 <paramref name="Rank" /> 大于 <paramref name="Array" /> 的级别。</exception>
      <returns>
        <see langword="Integer" />. 指定维度的下标可以包含的最大值。 如果 <paramref name="Array" /> 只有一个元素，则 <see langword="UBound" /> 返回 0。 如果 <paramref name="Array" /> 没有元素，例如它是一个零长度字符串，则 <see langword="UBound" /> 返回 -1。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
      <summary>返回一个 <see langword="Integer" /> 值，它包含变量的数据类型分类。</summary>
      <param name="VarName">必需。 <see langword="Object" /> 变量。 如果 <see langword="Option Strict" /> 为 <see langword="Off" />，则可以传递除结构之外的任何数据类型的变量。</param>
      <returns>返回一个 <see langword="Integer" /> 值，它包含变量的数据类型分类。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
      <summary>返回一个 <see langword="String" /> 值，它包含变量的 Visual Basic 数据类型名称。</summary>
      <param name="UrtName">必需。 <see langword="String" /> 变量，其中包含公共语言运行时所使用的类型名称。</param>
      <returns>返回一个 <see langword="String" /> 值，它包含变量的 Visual Basic 数据类型名称。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Interaction">
      <summary>
        <see langword="Interaction" /> 模块包含用于与对象、应用程序和系统交互的过程。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)">
      <summary>激活已经正在运行的应用程序。</summary>
      <param name="ProcessId">
        <see langword="Integer" />，指定分配给该进程的 Win32 进程 ID 号。 可以使用 <see cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" /> 返回的 ID，前提是该 ID 不为零。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.AppActivate(System.String)">
      <summary>激活已经正在运行的应用程序。</summary>
      <param name="Title">
        <see langword="String" /> 表达式，用于指定要激活的应用程序的标题栏中的标题。 可以使用启动应用程序后分配给该应用程序的标题。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Beep">
      <summary>通过计算机扬声器提示音。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])">
      <summary>执行对象的方法，或者设置或返回对象的属性。</summary>
      <param name="ObjectRef">必需。 <see langword="Object" />。 一个指向公开属性或方法的对象的指针。</param>
      <param name="ProcName">必需。 <see langword="String" />。 一个字符串表达式，包含对象的属性或方法的名称。</param>
      <param name="UseCallType">必需。 类型 <see cref="T:Microsoft.VisualBasic.CallType" /> 的一个枚举成员，它表示正在被调用的过程的类型。 <see langword="CallType" /> 的值可以是 <see langword="Method" />、<see langword="Get" /> 或 <see langword="Set" />。</param>
      <param name="Args">可选。 <see langword="ParamArray" />。 一个形参数组，包含要传递给正在调用的属性或方法的实参。</param>
      <exception cref="T:System.ArgumentException">无效 <paramref name="UseCallType" /> 值；必须为 <see langword="Method" />、<see langword="Get" /> 或 <see langword="Set" />。</exception>
      <returns>执行对象的方法，或者设置或返回对象的属性。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])">
      <summary>从参数列表中选择和返回一个值。</summary>
      <param name="Index">必需。 <see cref="T:System.Double" />。 数值表达式，它得出的值在 1 和 <paramref name="Choice" /> 参数中传递的元素数量之间。</param>
      <param name="Choice">必需。 <see langword="Object" /> 参数数组。 可以为以逗号分隔的 <see langword="Object" /> 变量或表达式列表或一维 <see langword="Object" /> 元素数组提供计算为 <see langword="Object" /> 数据类型的单个变量或表达式。</param>
      <returns>从参数列表中选择和返回一个值。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Command">
      <summary>返回命令行的参数部分，该命令行用于启动 Visual Basic 或启动使用 Visual Basic 开发的可执行程序。 <see langword="My" /> 功能可以提供比 <see langword="Command" /> 函数更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />。</summary>
      <returns>命令行的参数部分，该命令行用于启动 Visual Basic 或启动使用 Visual Basic 开发的可执行程序。  
  
<see langword="My" /> 功能可以提供比 <see langword="Command" /> 函数更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)">
      <summary>创建并返回对 COM 对象的引用。 不能在 Visual Basic 中使用 <see langword="CreateObject" /> 创建这些类的实例，除非将类显式公开为 COM 组件。</summary>
      <param name="ProgId">必需。 <see langword="String" />。 要创建的对象的程序 ID。</param>
      <param name="ServerName">可选。 <see langword="String" />。 要在其上创建对象的网络服务器的名称。 如果 <paramref name="ServerName" /> 是空字符串 ("")，则使用本地计算机。</param>
      <exception cref="T:System.Exception">服务器不可用。</exception>
      <exception cref="T:System.IO.FileNotFoundException">不存在指定类型的对象。</exception>
      <returns>创建并返回对 COM 对象的引用。 不能在 Visual Basic 中使用 <see langword="CreateObject" /> 创建这些类的实例，除非将类显式公开为 COM 组件。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)">
      <summary>从 Windows 注册表中某个应用程序的项中删除一个节或一个项设置。 与 <see langword="DeleteSetting" /> 函数相比，<see langword="My" /> 功能在注册表操作方面可为你提供更高的效率和更好的性能。 有关更多信息，请参见<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />。</summary>
      <param name="AppName">必需。 <see langword="String" /> 表达式，包含应用节或项设置的应用程序或项目的名称。</param>
      <param name="Section">必需。 <see langword="String" /> 表达式，包含要从中删除项设置的节的名称。 如果仅提供了 <paramref name="AppName" /> 和 <paramref name="Section" />，则将删除指定的节以及所有相关的项设置。</param>
      <param name="Key">可选。 <see langword="String" /> 表达式，包含要删除的项设置的名称。</param>
      <exception cref="T:System.ArgumentException">用户没有登录。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Environ(System.Int32)">
      <summary>返回与操作系统环境变量关联的字符串。</summary>
      <param name="Expression">必需。 此表达式用于计算包含环境变量名称的字符串，或对应于环境字符串表中环境字符串的数字顺序的整数。</param>
      <exception cref="T:System.ArgumentException">缺少 <paramref name="Expression" />。</exception>
      <returns>与操作系统环境变量关联的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Environ(System.String)">
      <summary>返回与操作系统环境变量关联的字符串。</summary>
      <param name="Expression">必需。 此表达式用于计算包含环境变量名称的字符串，或对应于环境字符串表中环境字符串的数字顺序的整数。</param>
      <exception cref="T:System.ArgumentException">缺少 <paramref name="Expression" />。</exception>
      <returns>与操作系统环境变量关联的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)">
      <summary>从 Windows 注册表中某个应用程序的项返回项设置及其各自的值（最初通过 <see langword="SaveSetting" /> 创建）的列表。 与 <see langword="My" /> 相比，<see langword="GetAllSettings" /> 功能在注册表操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />。</summary>
      <param name="AppName">必需。 <see langword="String" /> 表达式，包含请求其项设置的应用程序或项目的名称。</param>
      <param name="Section">必需。 一个 <see langword="String" /> 表达式，其中包含请求其关键设置的节的名称。 <see langword="GetAllSettings" /> 返回一个包含二维字符串数组的对象。 这些字符串包含指定节中的所有项设置及其相应的值。</param>
      <exception cref="T:System.ArgumentException">用户没有登录。</exception>
      <returns>Windows 注册表中某个应用程序的项中的项设置及其各自的值（最初通过 <see langword="SaveSetting" /> 创建）的列表。  
  
与 <see langword="My" /> 相比，<see langword="GetAllSettings" /> 功能在注册表操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)">
      <summary>返回对 COM 组件提供的对象的引用。</summary>
      <param name="PathName">可选。 <see langword="String" />。 包含要检索的对象的文件的完整路径和名称。 如果省略了 <paramref name="PathName" />，则 <paramref name="Class" /> 为必选。</param>
      <param name="Class">如果未提供 <paramref name="PathName" />，则为必选。 <see langword="String" />。 表示对象的类的字符串。 <paramref name="Class" /> 参数具有以下语法和部分： 
 <c>appname</c><c>.</c><c>objecttype</c>  
  
[1|1] 参数 
[1|2]“描述” 
[2|1] <c>appname</c>  
  
[2|2]“所需的”。 <see langword="String" />。 提供对象的应用程序的名称。  
  
[3|1] <c>objecttype</c>  
  
[3|2]“所需的”。 <see langword="String" />。 要创建的对象的类型或类。</param>
      <exception cref="T:System.Exception">不存在指定类类型的对象。</exception>
      <exception cref="T:System.IO.FileNotFoundException">不存在具有指定路径和文件名的对象。</exception>
      <returns>对 COM 组件提供的对象的引用。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)">
      <summary>从 Windows 注册表中应用程序的项返回项设置值。 与 <see langword="My" /> 相比，<see langword="GetAllSettings" /> 功能在注册表操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />。</summary>
      <param name="AppName">必需。 <see langword="String" /> 表达式，包含请求其项设置的应用程序或项目的名称。</param>
      <param name="Section">必需。 <see langword="String" /> 表达式，包含在其中找到项设置的节的名称。</param>
      <param name="Key">必需。 <see langword="String" /> 表达式，包含要返回的项设置的名称。</param>
      <param name="Default">可选。 包含要返回的值的表达式（如果没有在 <paramref name="Key" /> 设置中设置值）。 如果省略，则假定 <paramref name="Default" /> 为零长度字符串 ("")。</param>
      <exception cref="T:System.ArgumentException">一个或多个参数不是 <see langword="String" /> 表达式，或用户没有登录。</exception>
      <returns>Windows 注册表中某个应用程序的项中的项设置值。  
  
与 <see langword="My" /> 相比，<see langword="GetAllSettings" /> 功能在注册表操作方面可为您提供更高的效率和更好的性能。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)">
      <summary>根据表达式的计算，返回两个对象中的一个。</summary>
      <param name="Expression">必需。 <see langword="Boolean" />。 要计算的表达式。</param>
      <param name="TruePart">必需。 <see langword="Object" />。 当 <paramref name="Expression" /> 计算结果为 <see langword="True" /> 时返回。</param>
      <param name="FalsePart">必需。 <see langword="Object" />。 当 <paramref name="Expression" /> 计算结果为 <see langword="False" /> 时返回。</param>
      <returns>根据表达式的计算，返回两个对象中的一个。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)">
      <summary>在对话框中显示提示，等待用户输入文本或单击按钮，然后返回包含文本框内容的字符串。</summary>
      <param name="Prompt">必选的 <see langword="String" /> 表达式，作为消息显示在对话框中。 <paramref name="Prompt" /> 的最大长度大约为 1024 个字符，具体取决于所用字符的宽度。 如果 <paramref name="Prompt" /> 包含多行，可以使用回车符 (<see langword="Chr(" />13<see langword=")" />) 或换行符 (<see langword="Chr(" />10<see langword=")" />)，或组合使用回车符/换行符 (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) 来分隔每行。</param>
      <param name="Title">可选。 显示在对话框标题栏中的 <see langword="String" /> 表达式。 如果省略 <paramref name="Title" />，则标题栏中显示应用程序名称。</param>
      <param name="DefaultResponse">可选。 <see langword="String" /> 表达式。如果未提供其他输入，则作为默认响应显示在文本框中。 如果省略 <paramref name="DefaultResponse" />，则显示的文本框为空。</param>
      <param name="XPos">可选。 数值表达式，指定屏幕左边缘与对话框左边缘之间的距离（以缇为单位）。 如果省略 <paramref name="XPos" />，则对话框水平居中。</param>
      <param name="YPos">可选。 数值表达式，指定屏幕顶部与对话框上边缘之间的距离（以缇为单位）。 如果省略 <paramref name="YPos" />，则对话框垂直定位在屏幕向下大约三分之一处。</param>
      <returns>在对话框中显示提示，等待用户输入文本或单击按钮，然后返回包含文本框内容的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)">
      <summary>在对话框中显示消息，等待用户单击按钮，然后返回一个整数，该整数指示用户单击的按钮。</summary>
      <param name="Prompt">必需。 作为消息显示在对话框中的 <see langword="String" /> 表达式。 <paramref name="Prompt" /> 的最大长度大约为 1024 个字符，具体取决于所用字符的宽度。 如果 <paramref name="Prompt" /> 包含多行，可以使用回车符 (<see langword="Chr(" />13<see langword=")" />) 或换行符 (<see langword="Chr(" />10<see langword=")" />)，或组合使用回车符/换行符 (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) 来分隔每行。</param>
      <param name="Buttons">可选。 数值表达式，它是值的总和，指定显示的按钮数目及按钮类型，使用的图标样式，默认按钮的标识以及消息框的样式等。 如果省略 <paramref name="Buttons" />，则默认值为 0。</param>
      <param name="Title">可选。 显示在对话框标题栏中的 <see langword="String" /> 表达式。 如果省略 <paramref name="Title" />，则标题栏中显示应用程序名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Prompt" /> 不是一个 <see langword="String" /> 表达式，或者 <paramref name="Title" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">进程不是以 User Interactive 模式运行。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">一个或多个参数，而不是 <see langword="MsgBoxResult" /> 或 <see langword="MsgBoxStyle" /> 枚举的成员。</exception>
      <returns>以下值之一： <list type="table"><listheader><term>返回的常量</term><description>“值”</description></listheader><item><term><see langword="OK" /></term><description>1</description></item><item><term><see langword="Cancel" /></term><description>2</description></item><item><term><see langword="Abort" /></term><description>3</description></item><item><term><see langword="Retry" /></term><description>4</description></item><item><term><see langword="Ignore" /></term><description>5</description></item><item><term><see langword="Yes" /></term><description>6</description></item><item><term><see langword="No" /></term><description>7</description></item></list></returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)">
      <summary>返回一个字符串，该字符串表示包含某个数字的计算范围。</summary>
      <param name="Number">必需。 <see langword="Long" />。 要在一个计算范围中找到的整数。</param>
      <param name="Start">必需。 <see langword="Long" />。 一个整数，指示计算出的范围集的开始值。 <paramref name="Start" /> 不能小于 0。</param>
      <param name="Stop">必需。 <see langword="Long" />。 一个整数，指示计算出的范围集的结束值。 <paramref name="Stop" /> 不能小于或等于 <paramref name="Start" />。</param>
      <param name="Interval">必需。 <see langword="Long" />。 一个整数，指示在 <paramref name="Start" /> 和 <paramref name="Stop" /> 之间计算的每个范围大小。 <paramref name="Interval" /> 不能小于 1。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt; 0、<paramref name="Stop" /> &lt;= <paramref name="Start" />或 <paramref name="Interval" /> &lt; 1。</exception>
      <returns>一个字符串，该字符串表示包含某个数字的计算范围。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)">
      <summary>在 Windows 注册表中保存或创建应用程序项。 与 <see langword="My" /> 相比，<see langword="SaveSetting" /> 功能在注册表操作方面可为您提供更高的效率和更好的性能。 有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />。</summary>
      <param name="AppName">必需。 <see langword="String" /> 表达式，包含应用该设置的应用程序或项目的名称。</param>
      <param name="Section">必需。 <see langword="String" /> 表达式，包含在其中保存项设置的节的名称。</param>
      <param name="Key">必需。 <see langword="String" /> 表达式，包含将保存的项设置的名称。</param>
      <param name="Setting">必需。 包含值的表达式，<paramref name="Key" /> 将被设置为该值。</param>
      <exception cref="T:System.ArgumentException">未能创建注册表项，或用户没有登录。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)">
      <summary>运行一个可执行程序，并且如果该程序仍在运行则返回一个包含该程序的进程 ID 的整数。</summary>
      <param name="PathName">必需。 <see langword="String" />。 要执行的程序的名称，以及所有必需的参数和命令行开关。 <paramref name="PathName" /> 也可以包含驱动器和目录路径或文件夹。  
 如果不知道程序的路径，则可以使用 <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" /> 进行定位。 例如，你可以调用 <c>My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt")</c>，这将返回驱动器 C:\ 上任意位置每个名为 <c>testFile.txt</c> 的文件的完整路径。</param>
      <param name="Style">可选。 <see langword="AppWinStyle" />。 从 <see cref="T:Microsoft.VisualBasic.AppWinStyle" /> 中选择的一个值，该值指定将要在其中运行程序的窗口的样式。 如果省略 <paramref name="Style" />，<see langword="Shell" /> 将使用 <see langword="AppWinStyle.MinimizedFocus" /> 以最小化方式启动该程序并获得焦点。</param>
      <param name="Wait">可选。 <see langword="Boolean" />。 一个指示 <see langword="Shell" /> 函数是否应等待程序完成的值。 如果省略 <paramref name="Wait" />，则 <see langword="Shell" /> 将使用 <see langword="False" />。</param>
      <param name="Timeout">可选。 <see langword="Integer" />。 如果 <paramref name="Wait" /> 为 <see langword="True" />，则为等待完成的毫秒数。 如果省略 <paramref name="Timeout" />，则 <see langword="Shell" /> 使用 -1，表示没有超时设置并且 <see langword="Shell" /> 到程序结束时才返回。 因此，如果省略 <paramref name="Timeout" /> 或将其设置为 -1，则 <see langword="Shell" /> 可能永远不会将控制返回给您的程序。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Style" /> 不在 0 到 9（包含 0 和 9）范围内。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <see langword="Shell" /> 找不到 <paramref name="PathName" /> 文件。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="PathName" /> 为 <see langword="Nothing" />。</exception>
      <returns>一个整数，包含该程序仍在运行时的进程 ID。 如果该程序已完成执行，则为 0。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])">
      <summary>计算表达式列表，并返回与列表中第一个为 <see langword="Object" /> 的表达式对应的 <see langword="True" /> 值。</summary>
      <param name="VarExpr">必需。 <see langword="Object" /> 参数数组。 必须具有偶数个元素。 可以提供以逗号分隔的 <see langword="Object" /> 变量或表达式的列表，或一维 <see langword="Object" /> 元素数组。</param>
      <exception cref="T:System.ArgumentException">参数数目为奇数。</exception>
      <returns>计算表达式列表，并返回与列表中第一个为 <see langword="Object" /> 的表达式对应的 <see langword="True" /> 值。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.MsgBoxResult">
      <summary>指示在消息框上按下了哪个按钮，由 <see langword="MsgBox" /> 函数返回。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Abort">
      <summary>按下了“中止”按钮。 此成员等效于 Visual Basic 常量 <see langword="vbAbort" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Cancel">
      <summary>按下了“取消”按钮。 此成员等效于 Visual Basic 常量 <see langword="vbCancel" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Ignore">
      <summary>按下了“忽略”按钮。 此成员等效于 Visual Basic 常量 <see langword="vbIgnore" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.No">
      <summary>按下了“否”按钮。 此成员等效于 Visual Basic 常量 <see langword="vbNo" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Ok">
      <summary>按下了“确定”按钮。 此成员等效于 Visual Basic 常量 <see langword="vbOK" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Retry">
      <summary>按下了“重试”按钮。 此成员等效于 Visual Basic 常量 <see langword="vbRetry" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Yes">
      <summary>按下了“是”按钮。 此成员等效于 Visual Basic 常量 <see langword="vbYes" />。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.MsgBoxStyle">
      <summary>指示调用 <see langword="MsgBox" /> 函数时显示的按钮。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.AbortRetryIgnore">
      <summary>****“中止”、****“重试”和****“忽略”按钮。 此成员等效于 Visual Basic 常量 <see langword="vbAbortRetryIgnore" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal">
      <summary>应用程序模式消息框。 此成员等效于 Visual Basic 常量 <see langword="vbApplicationModal" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Critical">
      <summary>关键消息。 此成员等效于 Visual Basic 常量 <see langword="vbCritical" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.DefaultButton1">
      <summary>第一个按钮是默认值。 此成员等效于 Visual Basic 常量 <see langword="vbDefaultButton1" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.DefaultButton2">
      <summary>第二个按钮是默认值。 此成员等效于 Visual Basic 常量 <see langword="vbDefaultButton2" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.DefaultButton3">
      <summary>第三个按钮是默认值。 此成员等效于 Visual Basic 常量 <see langword="vbDefaultButton3" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Exclamation">
      <summary>警告消息。 此成员等效于 Visual Basic 常量 <see langword="vbExclamation" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Information">
      <summary>信息消息。 此成员等效于 Visual Basic 常量 <see langword="vbInformation" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxHelp">
      <summary>帮助文本。 此成员等效于 Visual Basic 常量 <see langword="vbMsgBoxHelp" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxRight">
      <summary>右对齐文本。 此成员等效于 Visual Basic 常量 <see langword="vbMsgBoxRight" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxRtlReading">
      <summary>从右到左阅读的文本（希伯来语和阿拉伯语系统）。 此成员等效于 Visual Basic 常量 <see langword="vbMsgBoxRtlReading" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxSetForeground">
      <summary>前景消息框窗口。 此成员等效于 Visual Basic 常量 <see langword="vbMsgBoxSetForeground" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.OkCancel">
      <summary>****“确定”和****“取消”按钮。 此成员等效于 Visual Basic 常量 <see langword="vbOKCancel" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.OkOnly">
      <summary>仅****“确定”按钮（默认）。 此成员等效于 Visual Basic 常量 <see langword="vbOKOnly" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Question">
      <summary>警告查询。 此成员等效于 Visual Basic 常量 <see langword="vbQuestion" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.RetryCancel">
      <summary>****“重试”和****“取消”按钮。 此成员等效于 Visual Basic 常量 <see langword="vbRetryCancel" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.SystemModal">
      <summary>系统模式消息框。 此成员等效于 Visual Basic 常量 <see langword="vbSystemModal" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.YesNo">
      <summary>****“是”和****“否”按钮。 此成员等效于 Visual Basic 常量 <see langword="vbYesNo" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.YesNoCancel">
      <summary>****“是”、****“否”和****“取消”按钮。 此成员等效于 Visual Basic 常量 <see langword="vbYesNoCancel" />。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.MyGroupCollectionAttribute">
      <summary>在 Visual Basic 中，此特性支持 <see langword="My.Forms" /> 和 <see langword="My.WebServices" />。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.MyGroupCollectionAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>在 Visual Basic 中，此特性支持 <see langword="My.Forms" /> 和 <see langword="My.WebServices" />。</summary>
      <param name="typeToCollect">
        <see langword="String" />. 初始化 <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName" /> 属性。 编译器会为派生自此类型的类生成访问器属性。</param>
      <param name="createInstanceMethodName">
        <see langword="String" />. 初始化 <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.CreateMethod" /> 属性。 指定类中创建类型实例的方法。</param>
      <param name="disposeInstanceMethodName">
        <see langword="String" />. 初始化 <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DisposeMethod" /> 属性。 指定类中释放类型实例的方法。</param>
      <param name="defaultInstanceAlias">
        <see langword="String" />. 初始化 <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DefaultInstanceAlias" /> 属性。 指定返回类的默认实例的属性名。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.CreateMethod">
      <summary>在 Visual Basic 中，此属性支持 <see langword="My" />。</summary>
      <returns>指定类中创建类型实例的方法。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DefaultInstanceAlias">
      <summary>在 Visual Basic 中，此属性支持 <see langword="My" />。</summary>
      <returns>指定返回类的默认实例的属性名。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DisposeMethod">
      <summary>在 Visual Basic 中，此属性支持 <see langword="My" />。</summary>
      <returns>指定类中释放类型实例的方法。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName">
      <summary>在 Visual Basic 中，此属性支持 <see langword="My" />。</summary>
      <returns>指定编译器为其生成访问器属性的类型的名称。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.OpenAccess">
      <summary>指示调用文件访问函数时如何打开文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.Default">
      <summary>允许读写访问。 这是默认设置。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.Read">
      <summary>允许读访问。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.ReadWrite">
      <summary>允许读写访问。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.Write">
      <summary>允许写访问。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.OpenMode">
      <summary>指示调用文件访问函数时如何打开文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Append">
      <summary>为向其追加内容而打开的文件。 默认。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Binary">
      <summary>为进行二进制访问而打开的文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Input">
      <summary>为进行读访问而打开的文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Output">
      <summary>为进行写访问而打开的文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Random">
      <summary>为进行随机访问而打开的文件。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.OpenShare">
      <summary>指示调用文件访问函数时如何打开文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.Default">
      <summary>
        <see langword="LockReadWrite" />。 这是默认设置。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.LockRead">
      <summary>其他进程无法读取文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.LockReadWrite">
      <summary>其他进程无法读取或写入文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.LockWrite">
      <summary>其他进程无法写入文件。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.Shared">
      <summary>任何进程都可以读取或写入文件。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.SpcInfo">
      <summary>此类支持 Visual Basic <see langword="Print" /> 和 <see langword="PrintLine" /> 函数。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.SpcInfo.Count">
      <summary>此字段支持 Visual Basic <see langword="Print" /> 和 <see langword="PrintLine" /> 函数。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Strings">
      <summary>
        <see langword="Strings" /> 模块包含用于执行字符串操作的过程。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
      <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
      <param name="String">必需。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。 如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。 如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</param>
      <returns>与某个字符相对应的字符代码。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
      <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
      <param name="String">必需。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。 如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。 如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</param>
      <returns>与某个字符相对应的字符代码。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
      <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
      <param name="String">必需。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。 如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。 如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</param>
      <returns>与某个字符相对应的字符代码。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
      <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
      <param name="String">必需。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。 如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。 如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</param>
      <returns>与某个字符相对应的字符代码。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
      <summary>返回与指定字符代码相关联的字符。</summary>
      <param name="CharCode">必需。 <see langword="Integer" /> 表达式，表示字符的 <c>code point</c> 或字符代码。</param>
      <exception cref="T:System.ArgumentException">
        <see langword="Chr" /> 的 <paramref name="CharCode" /> &lt; 0 或 &gt; 255。</exception>
      <returns>与指定字符代码相关联的字符。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
      <summary>返回与指定字符代码相关联的字符。</summary>
      <param name="CharCode">必需。 <see langword="Integer" /> 表达式，表示字符的 <c>code point</c> 或字符代码。</param>
      <exception cref="T:System.ArgumentException">
        <see langword="ChrW" /> 的 <paramref name="CharCode" /> &lt; -32768 或 &gt; 65535。</exception>
      <returns>与指定字符代码相关联的字符。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
      <summary>返回一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</summary>
      <param name="Source">必需。 要搜索的一维字符串数组。</param>
      <param name="Match">必需。 要搜索的字符串。</param>
      <param name="Include">可选。 <see langword="Boolean" /> 值，指示是返回包含还是排除 <paramref name="Match" /> 的子字符串。 如果 <paramref name="Include" /> 为 <see langword="True" />，则 <see langword="Filter" /> 函数返回将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。 如果 <paramref name="Include" /> 为 <see langword="False" />，则 <see langword="Filter" /> 函数返回不将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。</param>
      <param name="Compare">可选。 表示要使用的字符串比较类型的数值。 请参阅“设置”，以获取值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> 为 <see langword="Nothing" /> 或不是一维数组。</exception>
      <returns>一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
      <summary>返回一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</summary>
      <param name="Source">必需。 要搜索的一维字符串数组。</param>
      <param name="Match">必需。 要搜索的字符串。</param>
      <param name="Include">可选。 <see langword="Boolean" /> 值，指示是返回包含还是排除 <paramref name="Match" /> 的子字符串。 如果 <paramref name="Include" /> 为 <see langword="True" />，则 <see langword="Filter" /> 函数返回将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。 如果 <paramref name="Include" /> 为 <see langword="False" />，则 <see langword="Filter" /> 函数返回不将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。</param>
      <param name="Compare">可选。 表示要使用的字符串比较类型的数值。 请参阅“设置”，以获取值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> 为 <see langword="Nothing" /> 或不是一维数组。</exception>
      <returns>一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
      <summary>返回根据格式 <see langword="String" /> 表达式中包含的指令设置格式的字符串。</summary>
      <param name="Expression">必需。 任何有效表达式。</param>
      <param name="Style">可选。 一个有效的命名或用户定义的格式 <see langword="String" /> 表达式。</param>
      <returns>根据格式 <see langword="String" /> 表达式中包含的指令设置格式的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>返回一个格式为货币值的表达式，该货币值使用系统控制面板中定义的货币符号。</summary>
      <param name="Expression">必需。 要格式化的表达式。</param>
      <param name="NumDigitsAfterDecimal">可选。 数值，指示在小数点右侧显示的位数。 默认值为 -1，指示使用了计算机的区域设置。</param>
      <param name="IncludeLeadingDigit">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 枚举，指示对于小数值是否显示前导零。 请参见值的“备注”。</param>
      <param name="UseParensForNegativeNumbers">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 枚举，指示是否用括号将负值括起来。 请参见值的“备注”。</param>
      <param name="GroupDigits">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 枚举，指示是否用计算机区域设置中指定的组分隔符对数字进行分组。 请参见值的“备注”。</param>
      <exception cref="T:System.ArgumentException">小数点后的数字位数大于 99。</exception>
      <exception cref="T:System.InvalidCastException">不是数字类型。</exception>
      <returns>一个格式为货币值的表达式，该货币值使用系统控制面板中定义的货币符号。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
      <summary>返回一个表示日期/时间值的字符串表达式。</summary>
      <param name="Expression">必需。 要格式化的 <see langword="Date" /> 表达式。</param>
      <param name="NamedFormat">可选。 指示所使用的日期/时间格式的数值。 如果省略，则使用 <see langword="DateFormat.GeneralDate" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="NamedFormat" /> 设置无效。</exception>
      <returns>一个表示日期/时间值的字符串表达式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>返回格式化为数字的表达式。</summary>
      <param name="Expression">必需。 要格式化的表达式。</param>
      <param name="NumDigitsAfterDecimal">可选。 数值，指示在小数点右侧显示的位数。 默认值为 -1，指示使用了计算机的区域设置。</param>
      <param name="IncludeLeadingDigit">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示对于小数值是否显示前导零。 请参阅“设置”，以获取值。</param>
      <param name="UseParensForNegativeNumbers">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否用括号将负值括起来。 请参阅“设置”，以获取值。</param>
      <param name="GroupDigits">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否使用区域设置中指定的组分隔符对数字进行分组。 请参阅“设置”，以获取值。</param>
      <exception cref="T:System.InvalidCastException">不是数字类型。</exception>
      <returns>格式化为数字的表达式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>返回以 % 字符结尾的百分比格式的表达式（即乘以 100）。</summary>
      <param name="Expression">必需。 要格式化的表达式。</param>
      <param name="NumDigitsAfterDecimal">可选。 数字值，该值指示要显示小数点右侧的多少位。 默认值为 -1，指示使用了区域设置。</param>
      <param name="IncludeLeadingDigit">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否显示小数值前的零。 请参阅“设置”，以获取值。</param>
      <param name="UseParensForNegativeNumbers">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否在括号内放入负值。 请参阅“设置”，以获取值。</param>
      <param name="GroupDigits">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否使用区域设置中指定的组分隔符对数字进行分组。 请参阅“设置”，以获取值。</param>
      <exception cref="T:System.InvalidCastException">不是数字类型。</exception>
      <returns>以 % 字符结尾的百分比格式（即乘以 100）的表达式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
      <summary>返回 <see langword="Char" /> 值，该值表示提供的字符串中位于指定的索引位置处的字符。</summary>
      <param name="str">必需。 任何有效的 <see langword="String" /> 表达式。</param>
      <param name="Index">必需。 <see langword="Integer" /> 表达式。 要返回的 <paramref name="str" /> 中的字符索引（从 1 开始）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> 为 <see langword="Nothing" />，<paramref name="Index" /> &lt; 1，或 <paramref name="Index" /> 大于 <paramref name="str" /> 最后一个字符的索引。</exception>
      <returns>
        <see langword="Char" /> 值，该值表示提供的字符串中指定索引处的字符。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>返回一个整数，该整数指定一个字符串在另一个字符串中的第一个匹配项的起始位置。</summary>
      <param name="StartPos" />
      <param name="String1">必需。 正在搜索的 <see langword="String" /> 表达式。</param>
      <param name="String2">必需。 查找到的 <see langword="String" /> 表达式。</param>
      <param name="Compare">可选。 指定字符串比较的类型。 如果省略 <paramref name="Compare" />，则由 <see langword="Option Compare" /> 设置确定比较类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt; 1。</exception>
      <returns>
        <list type="table">
          <listheader>
            <term>如果</term>
            <description>InStr 返回</description>
          </listheader>
          <item>
            <term>
              <paramref name="String1" /> 的长度为零或 <see langword="Nothing" /></term>
            <description>0</description>
          </item>
          <item>
            <term>
              <paramref name="String2" /> 的长度为零或 <see langword="Nothing" /></term>
            <description>
              <paramref name="start" />
            </description>
          </item>
          <item>
            <term>未找到 
                <paramref name="String2" />。</term>
            <description>0</description>
          </item>
          <item>
            <term>在 
                <paramref name="String2" /> 中找到 <paramref name="String1" /></term>
            <description> 匹配开始的位置</description>
          </item>
          <item>
            <term>
              <paramref name="Start" /> 长度大于 <paramref name="String1" /></term>
            <description>0</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>返回一个整数，该整数指定一个字符串在另一个字符串中的第一个匹配项的起始位置。</summary>
      <param name="String1">必需。 正在搜索的 <see langword="String" /> 表达式。</param>
      <param name="String2">必需。 查找到的 <see langword="String" /> 表达式。</param>
      <param name="Compare">可选。 指定字符串比较的类型。 如果省略 <paramref name="Compare" />，则由 <see langword="Option Compare" /> 设置确定比较类型。</param>
      <returns>
        <list type="table">
          <listheader>
            <term>如果</term>
            <description>InStr 返回</description>
          </listheader>
          <item>
            <term>
              <paramref name="String1" /> 的长度为零或 <see langword="Nothing" /></term>
            <description>0</description>
          </item>
          <item>
            <term>
              <paramref name="String2" /> 的长度为零或 <see langword="Nothing" /></term>
            <description>搜索的开始位置，该位置默认为第一个字符位置。</description>
          </item>
          <item>
            <term>未找到 
                <paramref name="String2" />。</term>
            <description>0</description>
          </item>
          <item>
            <term>在 
                <paramref name="String2" /> 中找到 <paramref name="String1" /></term>
            <description>匹配开始的位置。</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>返回某一字符串从另一字符串的右侧开始算起第一次出现的位置。</summary>
      <param name="StringCheck">必需。 搜索的 String 表达式。</param>
      <param name="StringMatch">必需。 搜索的字符串表达式。</param>
      <param name="Start">可选。 数值表达式，设置从字符串左侧开始进行的每个搜索的起始位置（从一开始计数）。 如果省略 <paramref name="Start" />，则使用 -1，它表示搜索从最后一个字符位置开始。 然后搜索从右到左继续进行。</param>
      <param name="Compare">可选。 数值，指示对子字符串求值时使用的比较类型。 如果省略，就会执行二进制比较。 具体的值请参见"设置"。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> = 0 或 <paramref name="Start" /> &lt; -1。</exception>
      <returns>
        <list type="table">
          <listheader>
            <term>如果</term>
            <description>InStrRev 返回</description>
          </listheader>
          <item>
            <term>
              <paramref name="StringCheck" /> 的长度为零</term>
            <description>0</description>
          </item>
          <item>
            <term>
              <paramref name="StringMatch" /> 的长度为零</term>
            <description>
              <paramref name="Start" />
            </description>
          </item>
          <item>
            <term>未找到 
                <paramref name="StringMatch" />。</term>
            <description>0</description>
          </item>
          <item>
            <term>在 
                <paramref name="StringMatch" /> 中找到 <paramref name="StringCheck" /></term>
            <description>从字符串的右侧开始找到的第一个匹配项的位置。</description>
          </item>
          <item>
            <term>
              <paramref name="Start" /> 大于 <paramref name="StringMatch" /> 的长度</term>
            <description>0</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
      <summary>返回通过连接一个数组中包含的若干子字符串创建的字符串。</summary>
      <param name="SourceArray">必需。 一维数组，包含要连接的子字符串。</param>
      <param name="Delimiter">可选。 任何字符串，用于在返回的字符串中分隔子字符串。 如果省略该参数，则使用空白字符 (" ")。 如果 <paramref name="Delimiter" /> 是零长度字符串 ("") 或 <see langword="Nothing" />，则列表中的所有项目都串联在一起，中间没有分隔符。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="SourceArray" /> 不是一维数组。</exception>
      <returns>通过连接一个数组中包含的若干子字符串创建的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
      <summary>返回通过连接一个数组中包含的若干子字符串创建的字符串。</summary>
      <param name="SourceArray">必需。 一维数组，包含要连接的子字符串。</param>
      <param name="Delimiter">可选。 任何字符串，用于在返回的字符串中分隔子字符串。 如果省略该参数，则使用空白字符 (" ")。 如果 <paramref name="Delimiter" /> 是零长度字符串 ("") 或 <see langword="Nothing" />，则列表中的所有项目都串联在一起，中间没有分隔符。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="SourceArray" /> 不是一维数组。</exception>
      <returns>通过连接一个数组中包含的若干子字符串创建的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
      <summary>返回将转换为小写的字符串或字符。</summary>
      <param name="Value">必需。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</param>
      <returns>将转换为小写的字符串或字符。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
      <summary>返回将转换为小写的字符串或字符。</summary>
      <param name="Value">必需。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</param>
      <returns>将转换为小写的字符串或字符。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
      <summary>返回一个字符串，该字符串包含从某字符串左侧算起的指定数量的字符。</summary>
      <param name="str">必需。 一个 <see langword="String" /> 表达式，从中返回最左侧的那些字符。</param>
      <param name="Length">必需。 <see langword="Integer" /> 表达式。 指示要返回的字符数的数值表达式。 如果为 0，则返回零长度字符串 ("")。 如果大于或等于 <paramref name="str" /> 的字符数，则返回整个字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Length" /> &lt; 0。</exception>
      <returns>一个字符串，该字符串包含从某字符串左侧算起的指定数量的字符。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.String)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
      <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
      <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
      <summary>返回一个左对齐字符串，该字符串包含调整为指定长度的指定的字符串。</summary>
      <param name="Source">必需。 <see langword="String" /> 表达式。 字符串变量的名称。</param>
      <param name="Length">必需。 <see langword="Integer" /> 表达式。 返回的字符串的长度。</param>
      <returns>一个左对齐字符串，该字符串包含调整为指定长度的指定的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
      <summary>返回一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</summary>
      <param name="str">必需。 任何有效的 <see langword="String" /> 表达式。</param>
      <returns>一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
      <summary>返回字符串，该字符串包含从字符串中的指定位置开始的所有字符。</summary>
      <param name="str">必需。 <see langword="String" /> 表达式，从该表达式返回字符。</param>
      <param name="Start">必需。 <see langword="Integer" /> 表达式。 要返回字符的开始位置。 如果 <paramref name="Start" /> 大于 <paramref name="str" /> 中的字符个数，则 <see langword="Mid" /> 函数返回零长度字符串 ("")。 <paramref name="Start" /> 从一开始。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt;= 0 或 <paramref name="Length" /> &lt; 0。</exception>
      <returns>由从字符串中指定位置开始的所有字符组成的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
      <summary>返回字符串，该字符串包含从字符串中的指定位置开始的指定数量的字符。</summary>
      <param name="str">必需。 <see langword="String" /> 表达式，从该表达式返回字符。</param>
      <param name="Start">必需。 <see langword="Integer" /> 表达式。 要返回字符的开始位置。 如果 <paramref name="Start" /> 大于 <paramref name="str" /> 中的字符个数，则 <see langword="Mid" /> 函数返回零长度字符串 ("")。 <paramref name="Start" /> 从 1 开始。</param>
      <param name="Length">可选。 <see langword="Integer" /> 表达式。 要返回的字符数。 如果 <paramref name="Length" /> 省略或超过文本的字符（包括 <paramref name="Start" /> 处的字符）数，则返回从字符串开始位置到结尾的所有字符。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt;= 0 或 <paramref name="Length" /> &lt; 0。</exception>
      <returns>由从字符串中指定位置开始的指定数量的字符组成的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>返回一个字符串，其中的指定子字符串已由另一个子字符串替换了指定的次数。</summary>
      <param name="Expression">必需。 字符串表达式，包含要替换的子字符串。</param>
      <param name="Find">必需。 搜索的子字符串。</param>
      <param name="Replacement">必需。 替换用的子字符串。</param>
      <param name="Start">可选。 <paramref name="Expression" /> 内部要替换的子字符串的开始的位置。 <see langword="Replace" /> 的返回值是字符串，在 <paramref name="Start" /> 开始，具有相应的子情况。 如果省略，则假定为 1。</param>
      <param name="Count">可选。 执行子字符串替换的数目。 如果省略，则默认值是 -1，表示“进行所有可能的替换”。</param>
      <param name="Compare">可选。 数值，指示对子字符串求值时使用的比较类型。 具体的值请参见"设置"。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Count" /> &lt; -1 或 <paramref name="Start" /> &lt;= 0。</exception>
      <returns>以下值之一。
          <list type="table"><listheader><term>如果</term><description>Replace 返回</description></listheader><item><term><paramref name="Find" /> 的长度为零或 <see langword="Nothing" /></term><description><paramref name="Expression" /> 的副本</description></item><item><term><paramref name="Replace" /> 的长度为零</term><description><paramref name="Expression" /> 的副本，不带 <paramref name="Find" /> 匹配项</description></item><item><term><paramref name="Expression" /> 的长度为零或 <see langword="Nothing" />，或者 <paramref name="Start" /> 大于 <paramref name="Expression" /> 的长度</term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> 是 0</term><description><paramref name="Expression" /> 的副本</description></item></list></returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
      <summary>返回一个字符串，其中包含从某个字符串右端开始的指定数量的字符。</summary>
      <param name="str">必需。 一个 <see langword="String" /> 表达式，从中返回最右侧的那些字符。</param>
      <param name="Length">必需。 <see langword="Integer" />。 指示要返回的字符数的数值表达式。 如果为 0，则返回零长度字符串 ("")。 如果大于或等于 <paramref name="str" /> 的字符数，则返回整个字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Length" /> &lt; 0。</exception>
      <returns>一个字符串，其中包含从某个字符串右端开始的指定数量的字符。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
      <summary>返回包含调整为指定长度的指定字符串的右对齐字符串。</summary>
      <param name="Source">必需。 <see langword="String" /> 表达式。 字符串变量的名称。</param>
      <param name="Length">必需。 <see langword="Integer" /> 表达式。 返回的字符串的长度。</param>
      <returns>包含调整为指定长度的指定字符串的右对齐字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
      <summary>返回一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</summary>
      <param name="str">必需。 任何有效的 <see langword="String" /> 表达式。</param>
      <returns>一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
      <summary>返回由指定数量空格组成的字符串。</summary>
      <param name="Number">必需。 <see langword="Integer" /> 表达式。 希望字符串包含的空格数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> &lt; 0。</exception>
      <returns>由指定数量空格组成的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>返回一个从零开始的一维数组，其中包含指定数量的子字符串。</summary>
      <param name="Expression">必需。 包含子字符串和分隔符的 <see langword="String" /> 表达式。</param>
      <param name="Delimiter">可选。 用于标识子字符串的界限的任何单个字符。 如果省略了 <paramref name="Delimiter" />，则假定空白字符 (" ") 为分隔符。</param>
      <param name="Limit">可选。 输入字符串应拆分到的子字符串的最大数量。 默认值为 -1，指示在 <paramref name="Delimiter" /> 字符串的每个匹配项处都拆分输入字符串。</param>
      <param name="Compare">可选。 数值，指示计算子字符串时使用的比较模式。 请参阅“设置”，以获取值。</param>
      <returns>
        <see langword="String" /> 数组。 如果 <paramref name="Expression" /> 为零长度字符串 ("")，则 <see langword="Split" /> 返回包含零长度字符串的单个元素数组。 如果 <paramref name="Delimiter" /> 为零长度字符串，或如果它不在 <paramref name="Expression" /> 中的任何位置出现，则 <see langword="Split" /> 将返回包含整个 <paramref name="Expression" /> 字符串的单个元素数组。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>根据字符串的比较结果返回 -1、0 或 1。</summary>
      <param name="String1">必需。 任何有效的 <see langword="String" /> 表达式。</param>
      <param name="String2">必需。 任何有效的 <see langword="String" /> 表达式。</param>
      <param name="Compare">可选。 指定字符串比较的类型。 如果省略 <paramref name="Compare" />，则由 <see langword="Option Compare" /> 设置确定比较类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Compare" /> 值无效。</exception>
      <returns>以下值之一： <list type="table"><listheader><term>如果</term><description>StrComp 返回</description></listheader><item><term><paramref name="String1" /> 排在 <paramref name="String2" /> 的前面</term><description>-1</description></item><item><term><paramref name="String1" /> 等于 <paramref name="String2" /></term><description>0</description></item><item><term><paramref name="String1" /> 排在 <paramref name="String2" /> 的后面</term><description>1</description></item></list></returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
      <summary>返回按照指定方式转换的字符串。</summary>
      <param name="str">必需。 要转换的 <see langword="String" /> 表达式。</param>
      <param name="Conversion">必需。 <see cref="T:Microsoft.VisualBasic.VbStrConv" /> 成员。 指定要执行的转换类型的枚举值。</param>
      <param name="LocaleID">可选。 <see langword="LocaleID" /> 值（如果与系统 <see langword="LocaleID" /> 值不同）。 （系统 <see langword="LocaleID" /> 值为默认值。）</param>
      <exception cref="T:System.ArgumentException">不支持 <paramref name="LocaleID" />、<paramref name="Conversion" /> &lt; 0 或 &gt; 2048，或不支持指定区域设置的转换。</exception>
      <returns>按照指定方式转换的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
      <summary>返回由指定字符重复指定次数后形成的字符串或对象。</summary>
      <param name="Number">必需。 <see langword="Integer" /> 表达式。 要返回的字符串的长度。</param>
      <param name="Character">必需。 任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 表达式。 将只使用表达式的第一个字符。 如果字符类型是 <see langword="Object" />，则它必须包含一个 <see langword="Char" /> 或 <see langword="String" /> 值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 小于 0 或 <paramref name="Character" /> 类型无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Character" /> 上声明的默认值为 <see langword="Nothing" />。</exception>
      <returns>由指定字符重复指定次数后形成的字符串或对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
      <summary>返回由指定字符重复指定次数后形成的字符串或对象。</summary>
      <param name="Number">必需。 <see langword="Integer" /> 表达式。 要返回的字符串的长度。</param>
      <param name="Character">必需。 任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 表达式。 将只使用表达式的第一个字符。 如果字符类型是 <see langword="Object" />，则它必须包含一个 <see langword="Char" /> 或 <see langword="String" /> 值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 小于 0 或 <paramref name="Character" /> 类型无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Character" /> 上声明的默认值为 <see langword="Nothing" />。</exception>
      <returns>由指定字符重复指定次数后形成的字符串或对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
      <summary>返回由指定字符重复指定次数后形成的字符串或对象。</summary>
      <param name="Number">必需。 <see langword="Integer" /> 表达式。 要返回的字符串的长度。</param>
      <param name="Character">必需。 任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 表达式。 将只使用表达式的第一个字符。 如果字符类型是 <see langword="Object" />，则它必须包含一个 <see langword="Char" /> 或 <see langword="String" /> 值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> 小于 0 或 <paramref name="Character" /> 类型无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Character" /> 上声明的默认值为 <see langword="Nothing" />。</exception>
      <returns>由指定字符重复指定次数后形成的字符串或对象。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
      <summary>返回指定字符串的字符顺序是相反的字符串。</summary>
      <param name="Expression">必需。 字符反转的字符串表达式。 如果 <paramref name="Expression" /> 是一个零长度字符串 ("")，则返回一个零长度字符串。</param>
      <returns>指定字符串的字符顺序是相反的字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
      <summary>返回一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</summary>
      <param name="str">必需。 任何有效的 <see langword="String" /> 表达式。</param>
      <returns>一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
      <summary>返回一个字符串或字符，其中包含转换为大写的指定字符串。</summary>
      <param name="Value">必需。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</param>
      <returns>一个字符串或字符，其中包含转换为大写的指定字符串。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
      <summary>返回一个字符串或字符，其中包含转换为大写的指定字符串。</summary>
      <param name="Value">必需。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</param>
      <returns>一个字符串或字符，其中包含转换为大写的指定字符串。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.TabInfo">
      <summary>此类支持 Visual Basic <see langword="Print" /> 和 <see langword="PrintLine" /> 函数。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TabInfo.Column">
      <summary>此字段支持 Visual Basic <see langword="Print" /> 和 <see langword="PrintLine" /> 函数。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.TriState">
      <summary>指示调用数字格式的函数时应使用布尔值还是使用默认值。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.False">
      <summary>False。 此成员的数值为 0。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.True">
      <summary>True。 此成员的数值为 1。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.UseDefault">
      <summary>默认设置。 此成员的数值为 -2。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VariantType">
      <summary>指示由 <see langword="VarType" /> 函数返回的变量对象的类型。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Array">
      <summary>数组。 此成员等效于 Visual Basic 常量 <see langword="vbArray" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Boolean">
      <summary>
        <see langword="Boolean" />。 （<see langword="True" /> 或 <see langword="False" />。）此成员等效于 Visual Basic 常量 <see langword="vbBoolean" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Byte">
      <summary>
        <see langword="Byte" />。 （0 至 255。）此成员等效于 Visual Basic 常量 <see langword="vbByte" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Char">
      <summary>
        <see langword="Char" />。 （0 至 65535。）此成员等效于 Visual Basic 常量 <see langword="vbChar" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Currency">
      <summary>Currency。 此成员等效于 Visual Basic 常量 <see langword="vbCurrency" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.DataObject">
      <summary>DataObject。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Date">
      <summary>
        <see langword="Date" />。 （0001 年 1 月 1 日 0:00:00 至 9999 年 12 月 31 日晚上 11:59:59。）此成员等效于 Visual Basic 常量 <see langword="vbDate" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Decimal">
      <summary>
        <see langword="Decimal" />。 （0 至 +/-79,228,162,514,264,337,593,543,950,335，不带小数点；0 至 +/-7.9228162514264337593543950335，小数点右侧 28 位小数；最小的非零数字为 +/-0.0000000000000000000000000001。）此成员等效于 Visual Basic 常量 <see langword="vbDecimal" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Double">
      <summary>
        <see langword="Double" />。 （对于负值，-1.79769313486231E+308 至 -4.94065645841247E-324；对于正值，4.94065645841247E-324 至 1.79769313486231E+308。）此成员等效于 Visual Basic 常量 <see langword="vbDouble" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Empty">
      <summary>null 引用。 此成员等效于 Visual Basic 常量 <see langword="vbEmpty" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Error">
      <summary>
        <see cref="T:System.Exception" />
      </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Integer">
      <summary>
        <see langword="Integer" />。 （-2,147,483,648 至 2,147,483,647。）此成员等效于 Visual Basic 常量 <see langword="vbInteger" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Long">
      <summary>
        <see langword="Long" />。 （-9,223,372,036,854,775,808 至 9,223,372,036,854,775,807。）此成员等效于 Visual Basic 常量 <see langword="vbLong" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Null">
      <summary>null 对象。 此成员等效于 Visual Basic 常量 <see langword="vbNull" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Object">
      <summary>在 <see langword="Object" /> 类型的变量中可存储任何类型。 此成员等效于 Visual Basic 常量 <see langword="vbObject" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Short">
      <summary>
        <see langword="Short" />。 （–32,768 到 32,767。）</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Single">
      <summary>
        <see langword="Single" />。 （对于负值，-3.402823E+38 至 -1.401298E-45；对于正值，1.401298E-45 至 3.402823E+38。）此成员等效于 Visual Basic 常量 <see langword="vbSingle" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.String">
      <summary>
        <see langword="String" />。 （0 至大约 20 亿个 Unicode 字符。）此成员等效于 Visual Basic 常量 <see langword="vbString" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.UserDefinedType">
      <summary>用户定义的类型。 结构中的每个成员都有一个由其数据类型确定的范围，且该范围不依赖其他成员的范围。 此成员等效于 Visual Basic 常量 <see langword="vbUserDefinedType" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Variant">
      <summary>
        <see langword="Variant" />。 此成员等效于 Visual Basic 常量 <see langword="vbVariant" />。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VBFixedArrayAttribute">
      <summary>指示应该将结构中的数组或者非局部变量当作固定长度的数组来进行处理。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBFixedArrayAttribute.#ctor(System.Int32)">
      <summary>初始化 <see langword="Bounds" /> 属性的值。</summary>
      <param name="UpperBound1">初始化上限字段的值，它表示数组第一个维数的大小。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBFixedArrayAttribute.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see langword="Bounds" /> 属性的值。</summary>
      <param name="UpperBound1">初始化上限字段的值，它表示数组第一个维数的大小。</param>
      <param name="UpperBound2">初始化上限字段的值，该值表示数组的第二个维度的大小。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.VBFixedArrayAttribute.Bounds">
      <summary>返回数组界限。</summary>
      <returns>包含表示数组界限的整数数组。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBFixedArrayAttribute.Length">
      <summary>返回数组的大小。</summary>
      <returns>包含表示数组中元素数的整数。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBFixedStringAttribute">
      <summary>指示应该将字符串当作固定长度的字符串来处理。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBFixedStringAttribute.#ctor(System.Int32)">
      <summary>初始化 <see langword="SizeConst" /> 字段的值。</summary>
      <param name="Length">固定字符串的长度。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.VBFixedStringAttribute.Length">
      <summary>获取字符串的长度。</summary>
      <returns>字符串的长度。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBMath">
      <summary>
        <see langword="VbMath" /> 模块包含用于执行算术操作的过程。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Randomize">
      <summary>初始化随机数生成器。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)">
      <summary>初始化随机数生成器。</summary>
      <param name="Number">可选。 一个 <see langword="Object" /> 或任何有效的数值表达式。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Rnd">
      <summary>返回一个 <see cref="T:System.Single" /> 类型的随机数。</summary>
      <returns>序列中的下一个随机数。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)">
      <summary>返回一个 <see cref="T:System.Single" /> 类型的随机数。</summary>
      <param name="Number">可选。 一个 <see cref="T:System.Single" /> 值或任何有效的 <see cref="T:System.Single" /> 表达式。</param>
      <returns>如果 Number 小于零，则 Rnd 每次都使用 <paramref name="Number" /> 作为种子生成相同的数字。 如果 Number 大于零，则 Rnd 生成序列中的下一个随机数。 如果 Number 等于零，则 Rnd 生成最近生成的数字。 如果未提供 Number，则 Rnd 生成序列中的下一个随机数。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VbStrConv">
      <summary>指示调用 <see langword="StrConv" /> 函数时要执行的转换类型。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Hiragana">
      <summary>将字符串中片假名字符的转换为平假名字符。 仅适用于日语区域设置。 此成员等效于 Visual Basic 常量 <see langword="vbHiragana" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Katakana">
      <summary>将字符串中的平假名字符转换为片假名字符。 仅适用于日语区域设置。 此成员等效于 Visual Basic 常量 <see langword="vbKatakana" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.LinguisticCasing">
      <summary>将字符串从用于大小写的文件系统规则转换为语言规则。 此成员等效于 Visual Basic 常量 <see langword="vbLinguisticCasing" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Lowercase">
      <summary>将字符串转换为小写字符。 此成员等效于 Visual Basic 常量 <see langword="vbLowerCase" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Narrow">
      <summary>将字符串中的宽（双字节）字符转换为窄（单字节）字符。 适用于亚洲区域设置。 此成员等效于 Visual Basic 常量 <see langword="vbNarrow" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.None">
      <summary>不执行任何转换。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.ProperCase">
      <summary>将字符串中每个单词的第一个字母转换为大写。 此成员等效于 Visual Basic 常量 <see langword="vbProperCase" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.SimplifiedChinese">
      <summary>将字符串转换为简体中文字符。 此成员等效于 Visual Basic 常量 <see langword="vbSimplifiedChinese" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.TraditionalChinese">
      <summary>将字符串转换为繁体中文字符。 此成员等效于 Visual Basic 常量 <see langword="vbTraditionalChinese" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Uppercase">
      <summary>将字符串转换为大写字符。 此成员等效于 Visual Basic 常量 <see langword="vbUpperCase" />。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Wide">
      <summary>将字符串中的窄（单字节）字符转换为宽（双字节）字符。 适用于亚洲区域设置。 此成员等效于 Visual Basic 常量 <see langword="vbWide" />。 即使输入字符已经是全角，转换仍可能会使用范式 C。 例如，将字符串“は゛”（已是全角）规范化为“ば”。 请参阅 Unicode 范式。</summary>
    </member>
  </members>
</doc>