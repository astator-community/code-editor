<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml.XmlSerializer</name>
  </assembly>
  <members>
    <member name="T:System.Xml.Serialization.CodeGenerationOptions">
      <summary>指定在生成用于 XML Web services 的 .NET 类型时使用的各种选项。</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.EnableDataBinding">
      <summary>启用数据绑定。</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateNewAsync">
      <summary>创建异步调用 Web 方法的事件。</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateOldAsync">
      <summary>创建异步调用 Web 方法的 Begin 和 End 方法。</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder">
      <summary>按 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />、<see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> 和 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 特性的 <see langword="Order" /> 属性所指定的方式显式生成排序序列化代码。</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateProperties">
      <summary>由属性表示基元类型。</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.None">
      <summary>由字段表示基元类型并由 <see cref="N:System" /> 命名空间类型表示基元类型。</summary>
    </member>
    <member name="T:System.Xml.Serialization.CodeIdentifier">
      <summary>提供一些静态方法，用于将输入文本转换为代码实体的名称。</summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.CodeIdentifier" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakeCamel(System.String)">
      <summary>从输入字符串生成 Camel 大小写格式的字符串。</summary>
      <param name="identifier">代码实体的名称（如方法参数）通常取自 XML 元素或特性名称。</param>
      <returns>参数字符串的 Camel 大小写格式版本。</returns>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakePascal(System.String)">
      <summary>从输入字符串生成 Pascal 大小写格式的字符串。</summary>
      <param name="identifier">代码实体的名称（如方法参数）通常取自 XML 元素或特性名称。</param>
      <returns>参数字符串的 Pascal 大小写格式版本。</returns>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakeValid(System.String)">
      <summary>从输入字符串生成有效的代码实体名称。</summary>
      <param name="identifier">代码实体的名称（如方法参数）通常取自 XML 元素或特性名称。</param>
      <returns>可以用作代码标识符的字符串，如方法参数的名称。</returns>
    </member>
    <member name="T:System.Xml.Serialization.CodeIdentifiers">
      <summary>维护相关代码实体或类型映射的一组名称，这些名称是 .NET Framework 的 XML 序列化基础结构生成的。</summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 类的新实例并确定代码标识符是否区分大小写。</summary>
      <param name="caseSensitive">如果标识符区分大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Add(System.String,System.Object)">
      <summary>将命名的代码实体或类型映射添加到 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中。</summary>
      <param name="identifier">用于对代码实体进行索引的名称。</param>
      <param name="value">代码实体或类型映射信息。</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.AddReserved(System.String)">
      <summary>防止在 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中使用指定的名称。</summary>
      <param name="identifier">将在 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中不可用的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.AddUnique(System.String,System.Object)">
      <summary>将命名的代码实体或类型映射添加到 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中，确保名称在该范围内是唯一的。</summary>
      <param name="identifier">用于对代码实体进行索引的候选名称。</param>
      <param name="value">代码实体或类型映射信息。</param>
      <returns>标识符参数值；如果存在名称冲突，则为修改后的字符串。</returns>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Clear">
      <summary>从 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中移除所有代码实体或类型映射，包括它们的名称。</summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.IsInUse(System.String)">
      <summary>确定指定名称是否已在 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中使用。</summary>
      <param name="identifier">要检查是否已在 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中使用的名称。</param>
      <returns>如果名称已使用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.MakeRightCase(System.String)">
      <summary>根据 <see cref="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing" /> 属性的值修改名称，以确保输入的大小写正确。</summary>
      <param name="identifier">可能要修改的名称。</param>
      <returns>与输入标识符相同（或改变了首字母的大小写）的字符串。</returns>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.MakeUnique(System.String)">
      <summary>确定输入名称是否与 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例范围中的其他名称冲突，如果是，则生成修改的字符串。</summary>
      <param name="identifier">要修改的名称（如果不唯一）。</param>
      <returns>标识符参数值；如果存在名称冲突，则为修改后的字符串。</returns>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Remove(System.String)">
      <summary>从 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中移除由输入名称标识的代码实体或类型映射。</summary>
      <param name="identifier">要移除的代码实体或类型映射信息的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.RemoveReserved(System.String)">
      <summary>从 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的保留名称中移除输入名称。</summary>
      <param name="identifier">将在 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例的范围中可用的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.ToArray(System.Type)">
      <summary>返回 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 实例范围中的代码实体或类型映射的数组。</summary>
      <param name="type">实例中所有代码实体或类型映射的类型。</param>
      <returns>代码实体或类型映射的数组，由 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 对象存储。</returns>
    </member>
    <member name="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing">
      <summary>获取或设置一个值，该值指示实例是否使用 camel 大小写。</summary>
      <returns>如果指示实例使用 camel 大小写，则为 <see langword="true" />；如果指示实例使用 Pascal 大小写，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.ImportContext">
      <summary>描述特定上下文，架构集在该上下文中绑定到 .NET Framework 代码实体。</summary>
    </member>
    <member name="M:System.Xml.Serialization.ImportContext.#ctor(System.Xml.Serialization.CodeIdentifiers,System.Boolean)">
      <summary>使用给定的类型共享选项，初始化给定代码标识符的 <see cref="T:System.Xml.Serialization.ImportContext" /> 类的新实例。</summary>
      <param name="identifiers">应用上下文的代码实体。</param>
      <param name="shareTypes">
        <see cref="T:System.Boolean" /> 值，确定自定义类型是否由架构共享。</param>
    </member>
    <member name="P:System.Xml.Serialization.ImportContext.ShareTypes">
      <summary>获取一个值，该值确定自定义类型是否共享。</summary>
      <returns>如果自定义类型由架构共享，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.ImportContext.TypeIdentifiers">
      <summary>获取应用上下文的代码实体集。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.CodeIdentifiers" />，指定应用上下文的代码实体。</returns>
    </member>
    <member name="P:System.Xml.Serialization.ImportContext.Warnings">
      <summary>获取在导入代码实体说明时生成的警告集合。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" />，包含在导入代码实体说明时生成的警告。</returns>
    </member>
    <member name="T:System.Xml.Serialization.IXmlTextParser">
      <summary>建立一个 <see cref="P:System.Xml.Serialization.IXmlTextParser.Normalized" /> 属性供 .NET Framework 基础结构使用。</summary>
    </member>
    <member name="P:System.Xml.Serialization.IXmlTextParser.Normalized">
      <summary>获取或设置一个值，该值指示空白特性值是否规范化。</summary>
      <returns>如果空白特性值已规范化，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.IXmlTextParser.WhitespaceHandling">
      <summary>获取或设置一个值，该值指示在分析 XML 时如何处理空白。</summary>
      <returns>
        <see cref="T:System.Xml.WhitespaceHandling" /> 枚举的一个成员，说明在分析 XML 时如何处理空白。</returns>
    </member>
    <member name="T:System.Xml.Serialization.SchemaImporter">
      <summary>描述架构导入程序。</summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributeAttribute">
      <summary>指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 必须将类成员序列化为编码的 SOAP 特性。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeAttribute.#ctor(System.String)">
      <summary>使用指定值作为 XML 特性的名称来初始化 <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> 类的新实例。</summary>
      <param name="attributeName">XML 属性的名称。</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.AttributeName">
      <summary>获取或设置 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的 XML 特性的名称。</summary>
      <returns>XML 属性的名称。 默认值为成员标识符。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.DataType">
      <summary>获取或设置由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的 SOAP 特性的“XML 架构”定义语言 (XSD) 数据类型。</summary>
      <exception cref="T:System.Exception">已指定的 XML 架构数据类型无法映射到 .NET 数据类型。</exception>
      <returns>XML 架构数据类型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.Namespace">
      <summary>获取或设置 XML 属性的 XML 命名空间。</summary>
      <returns>XML 属性的 XML 命名空间。</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributeOverrides">
      <summary>允许您在使用 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 将对象序列化或反序列化为编码的 SOAP 时重写应用于属性、字段和类的特性。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.SoapAttributes)">
      <summary>将 <see cref="T:System.Xml.Serialization.SoapAttributes" /> 添加到 <see cref="T:System.Xml.Serialization.SoapAttributes" /> 所包含的 <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" /> 对象的集合中。 <paramref name="type" /> 参数指定由 <see cref="T:System.Xml.Serialization.SoapAttributes" /> 重写的对象。 <paramref name="member" /> 参数指定所替代的成员名称。</summary>
      <param name="type">要替代的对象的 <see cref="T:System.Type" />。</param>
      <param name="member">要替代的成员的名称。</param>
      <param name="attributes">表示重写特性的 <see cref="T:System.Xml.Serialization.SoapAttributes" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.Xml.Serialization.SoapAttributes)">
      <summary>将 <see cref="T:System.Xml.Serialization.SoapAttributes" /> 添加到 <see cref="T:System.Xml.Serialization.SoapAttributes" /> 对象的集合。 <paramref name="type" /> 参数指定由 <see cref="T:System.Xml.Serialization.SoapAttributes" /> 重写的对象。</summary>
      <param name="type">所替代的对象的 <see cref="T:System.Type" />。</param>
      <param name="attributes">表示重写特性的 <see cref="T:System.Xml.Serialization.SoapAttributes" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeOverrides.Item(System.Type)">
      <summary>获取与指定（基类）类型关联的对象。</summary>
      <param name="type">与要检索的属性的集合相关联的基类 <see cref="T:System.Type" />。</param>
      <returns>表示重写特性集合的 <see cref="T:System.Xml.Serialization.SoapAttributes" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeOverrides.Item(System.Type,System.String)">
      <summary>获取与指定（基类）类型关联的对象。 <paramref name="member" /> 参数指定被重写的基类成员。</summary>
      <param name="type">与要重写的特性的集合关联的基类 <see cref="T:System.Type" />。</param>
      <param name="member">指定要返回的 <see cref="T:System.Xml.Serialization.SoapAttributes" /> 的替代成员名称。</param>
      <returns>表示重写特性集合的 <see cref="T:System.Xml.Serialization.SoapAttributes" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributes">
      <summary>表示特性对象的集合，这些对象控制 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何序列化和反序列化 SOAP 方法。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributes.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapAttributes" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributes.#ctor(System.Reflection.ICustomAttributeProvider)">
      <summary>使用指定的自定义类型初始化 <see cref="T:System.Xml.Serialization.SoapAttributes" /> 类的新实例。</summary>
      <param name="provider">实现 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 接口的任何一个对象，如 <see cref="T:System.Type" /> 类。</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapAttribute">
      <summary>获取或设置要替代的 <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" />。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" />，在序列化成员时重写 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的行为。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapDefaultValue">
      <summary>获取或设置 XML 元素或属性的默认值。</summary>
      <returns>表示 XML 元素或特性的默认值的对象。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapElement">
      <summary>获取或设置要重写的 <see cref="T:System.Xml.Serialization.SoapElementAttribute" />。</summary>
      <returns>要重写的 <see cref="T:System.Xml.Serialization.SoapElementAttribute" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapEnum">
      <summary>获取或设置一个对象，该对象指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何序列化 SOAP 枚举。</summary>
      <returns>一个对象，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何序列化一个枚举成员。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapIgnore">
      <summary>获取或设置一个值，该值指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否将公共字段或属性序列化为经过编码的 SOAP XML。</summary>
      <returns>如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 不得序列化字段或属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapType">
      <summary>获取或设置指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何将对象类型序列化为经过编码的 SOAP XML 的对象。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.SoapTypeAttribute" />，它或者重写应用到类声明的 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" />，或者应用到类声明。</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapElementAttribute">
      <summary>指定公共成员值由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化为经过编码的 SOAP XML 元素。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapElementAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapElementAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> 类的新实例，并指定 XML 元素的名称。</summary>
      <param name="elementName">序列化成员的 XML 元素名。</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.DataType">
      <summary>获取或设置生成的 XML 元素的“XML 架构”定义语言 (XSD) 数据类型。</summary>
      <returns>“XML 架构”数据类型之一。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.ElementName">
      <summary>获取或设置生成的 XML 元素的名称。</summary>
      <returns>生成的 XML 元素的名称。 默认值为成员标识符。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.IsNullable">
      <summary>获取或者设置一个值，该值指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否必须序列化一个 <see langword="xsi:null" /> 特性设置为“1”的成员。</summary>
      <returns>如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成 <see langword="true" /> 属性，则为 <see langword="xsi:null" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapEnumAttribute">
      <summary>控制 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何序列化枚举成员。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapEnumAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapEnumAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapEnumAttribute.#ctor(System.String)">
      <summary>使用指定的元素名称初始化 <see cref="T:System.Xml.Serialization.SoapEnumAttribute" /> 类的新实例。</summary>
      <param name="name">由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的 XML 元素名称。</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapEnumAttribute.Name">
      <summary>获取或设置一个值，该值在 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化枚举时在 XML 文档中生成，或在它反序列化该枚举成员时被识别。</summary>
      <returns>当 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化枚举时在 XML 文档中生成的值，或当它反序列化该枚举成员时识别的值。</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapIgnoreAttribute">
      <summary>指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 不序列化公共字段或公共读/写属性值。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapIgnoreAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapIgnoreAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapIncludeAttribute">
      <summary>允许 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 在将对象序列化或反序列化为编码的 SOAP XML 时识别类型。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapIncludeAttribute.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.Xml.Serialization.SoapIncludeAttribute" /> 类的新实例。</summary>
      <param name="type">要包含的对象的类型。</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapIncludeAttribute.Type">
      <summary>获取或设置在序列化或反序列化对象时应使用的对象的类型。</summary>
      <returns>要包含的对象的类型。</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapReflectionImporter">
      <summary>生成从 .NET Framework 类型或 Web 服务方法信息到 SOAP 编码消息的映射。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> 类的新实例，指定导入的类型映射的默认 XML 命名空间。</summary>
      <param name="defaultNamespace">导入的类型映射要使用的默认 XML 命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides)">
      <summary>指定 XML 序列化的替代，初始化 <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> 类的新实例。</summary>
      <param name="attributeOverrides">一个 <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" /> 对象，该对象替代 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类使用 SOAP 编码序列化映射类型的方式。</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides,System.String)">
      <summary>指定 XML 序列化替代和默认 XML 命名空间，初始化 <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> 类的新实例。</summary>
      <param name="attributeOverrides">一个 <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" /> 对象，该对象替代 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类使用 SOAP 编码序列化映射类型的方式。</param>
      <param name="defaultNamespace">导入的类型映射要使用的默认 XML 命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[])">
      <summary>为从 Web 服务方法收集的信息生成内部类型映射。</summary>
      <param name="elementName">从 Web 服务方法生成的 XML 元素名称。</param>
      <param name="ns">从 Web 服务方法生成的 XML 元素命名空间。</param>
      <param name="members">属于 Web 服务方法的 .NET Framework 代码实体的数组。</param>
      <returns>到 WSDL 消息定义中元素部分的内部 .NET Framework 类型映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)">
      <summary>为从 Web 服务方法收集的信息生成内部类型映射。</summary>
      <param name="elementName">从 Web 服务方法生成的 XML 元素名称。</param>
      <param name="ns">从 Web 服务方法生成的 XML 元素命名空间。</param>
      <param name="members">属于 Web 服务方法的 .NET Framework 代码实体的数组。</param>
      <param name="hasWrapperElement">如果指示与 WSDL 消息部分对应的元素应包含在 SOAP 消息的额外包装器元素中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="writeAccessors">如果指示 RPC 样式的 Web 服务绑定，则为 <see langword="true" />；如果指示文档样式的 Web 服务绑定或 SOAP 标头，则为 <see langword="false" />。</param>
      <returns>到 WSDL 消息定义中元素部分的内部 .NET Framework 类型映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>为从 Web 服务方法收集的信息生成内部类型映射。</summary>
      <param name="elementName">从 Web 服务方法生成的 XML 元素名称。</param>
      <param name="ns">从 Web 服务方法生成的 XML 元素命名空间。</param>
      <param name="members">属于 Web 服务方法的 .NET Framework 代码实体的数组。</param>
      <param name="hasWrapperElement">如果指示与 WSDL 消息部分对应的元素应包含在 SOAP 消息的额外包装器元素中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="writeAccessors">如果指示 RPC 样式的 Web 服务绑定，则为 <see langword="true" />；如果指示文档样式的 Web 服务绑定或 SOAP 标头，则为 <see langword="false" />。</param>
      <param name="validate">如果指示生成的反序列化程序应检查包装器元素需要的限定名称，则为 <see langword="true" />；否则为 <see langword="false" />。 仅当 <paramref name="hasWrapperElement" /> 参数的值为 <see langword="true" /> 时，此参数的值才有意义。</param>
      <returns>到 WSDL 消息定义中元素部分的内部 .NET Framework 类型映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean,System.Xml.Serialization.XmlMappingAccess)">
      <summary>为从 Web 服务方法收集的信息生成内部类型映射。</summary>
      <param name="elementName">从 Web 服务方法生成的 XML 元素名称。</param>
      <param name="ns">从 Web 服务方法生成的 XML 元素命名空间。</param>
      <param name="members">属于 Web 服务方法的 .NET Framework 代码实体的数组。</param>
      <param name="hasWrapperElement">如果指示与 WSDL 消息部分对应的元素应包含在 SOAP 消息的额外包装器元素中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="writeAccessors">如果指示 RPC 样式的 Web 服务绑定，则为 <see langword="true" />；如果指示文档样式的 Web 服务绑定或 SOAP 标头，则为 <see langword="false" />。</param>
      <param name="validate">如果指示生成的反序列化程序应检查包装器元素需要的限定名称，则为 <see langword="true" />；否则为 <see langword="false" />。 仅当 <paramref name="hasWrapperElement" /> 参数的值为 <see langword="true" /> 时，此参数的值才有意义。</param>
      <param name="access">
        <see cref="T:System.Xml.Serialization.XmlMappingAccess" /> 值之一。</param>
      <returns>到 WSDL 消息定义中元素部分的内部 .NET Framework 类型映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type)">
      <summary>为 .NET Framework 类型生成到 XML 架构元素的映射。</summary>
      <param name="type">将为其生成类型映射的 .NET Framework 类型。</param>
      <returns>从一个类型到一个 XML 架构元素的 .NET Framework 内部映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type,System.String)">
      <summary>为 .NET Framework 类型生成到 XML 架构元素的映射。</summary>
      <param name="type">将为其生成类型映射的 .NET Framework 类型。</param>
      <param name="defaultNamespace">要使用的默认 XML 命名空间。</param>
      <returns>从一个类型到一个 XML 架构元素的 .NET Framework 内部映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.IncludeType(System.Type)">
      <summary>在 <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> 实例的上下文中放置某个类型的映射，以供以后调用导入方法时使用。</summary>
      <param name="type">要为其保存类型映射信息的 .NET Framework 类型。</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
      <summary>在 <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> 实例的上下文中放置派生类型的映射，以供以后调用导入方法时使用。</summary>
      <param name="provider">一个 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 反射对象，其中包含从 <see cref="T:System.Xml.Serialization.SoapIncludeAttribute" /> 属性派生的自定义属性。</param>
    </member>
    <member name="T:System.Xml.Serialization.SoapSchemaMember">
      <summary>表示 WSDL 文档中 XSD &lt;<see langword="part" />&gt; 元素的特定属性，用于从文档中生成类。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaMember.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapSchemaMember.MemberName">
      <summary>获取或设置一个值，该值对应于 WSDL part 元素的名称特性。</summary>
      <returns>元素名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapSchemaMember.MemberType">
      <summary>获取或设置一个值，该值对应于 WSDL part 元素的类型特性。</summary>
      <returns>对应于 XML 类型的 <see cref="T:System.Xml.XmlQualifiedName" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapTypeAttribute">
      <summary>将类实例序列化为 SOAP 编码的 XML 时，控制 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的架构。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> 类的新实例，并指定 XML 类型的名称。</summary>
      <param name="typeName">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化类实例时生成（和在反序列化类实例时识别）的 XML 类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> 类的新实例，并指定类型的名称和 XML 命名空间。</summary>
      <param name="typeName">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化类实例时生成（和在反序列化类实例时识别）的 XML 类型的名称。</param>
      <param name="ns">类型的 XML 命名空间。</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema">
      <summary>获取或设置一个值，该值指示是否在 SOAP 编码的 XML 架构文档中包括该类型。</summary>
      <returns>要在 SOAP 编码的“XML 架构”文档中包括该类型，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.Namespace">
      <summary>获取或设置 XML 类型的命名空间。</summary>
      <returns>XML 类型的命名空间。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.TypeName">
      <summary>获取或设置 XML 类型的名称。</summary>
      <returns>XML 类型的名称。 默认为类名称。</returns>
    </member>
    <member name="T:System.Xml.Serialization.UnreferencedObjectEventArgs">
      <summary>在反序列化期间，为在编码的 SOAP XML 流中找到的已知的（但未引用的）对象提供数据。</summary>
    </member>
    <member name="M:System.Xml.Serialization.UnreferencedObjectEventArgs.#ctor(System.Object,System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" /> 类的新实例。</summary>
      <param name="o">未引用的对象。</param>
      <param name="id">用于识别未引用的对象的唯一字符串。</param>
    </member>
    <member name="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId">
      <summary>获取对象的 ID。</summary>
      <returns>对象的 ID。</returns>
    </member>
    <member name="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject">
      <summary>获取已反序列化但尚未引用的对象。</summary>
      <returns>已反序列化但未引用的对象。</returns>
    </member>
    <member name="T:System.Xml.Serialization.UnreferencedObjectEventHandler">
      <summary>表示处理 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的 <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" />。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttributes">
      <summary>表示 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 对象集合。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Add(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>将 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 添加到集合中。</summary>
      <param name="attribute">要添加的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />。</param>
      <returns>新添加的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 的索引。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Contains(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>获取一个值，该值指示集合中是否存在指定的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />。</summary>
      <param name="attribute">您关注的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />。</param>
      <returns>如果集合中存在该 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.CopyTo(System.Xml.Serialization.XmlAnyElementAttribute[],System.Int32)">
      <summary>将整个集合复制到 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 对象的一个兼容一维数组，从目标数组的指定索引处开始。</summary>
      <param name="array">
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 对象的一维数组，它是从集合复制来的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.IndexOf(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>获取指定 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 的索引。</summary>
      <param name="attribute">您需要其索引的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />。</param>
      <returns>指定的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 的索引。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>在集合中的指定索引处插入 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />。</summary>
      <param name="index">
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 的插入位置的索引。</param>
      <param name="attribute">要插入的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Remove(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>从集合中移除指定的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />。</summary>
      <param name="attribute">要移除的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttributes.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />。</summary>
      <param name="index">
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 的索引。</param>
      <returns>指定的索引中的一个 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayAttribute">
      <summary>指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 必须将特定的类成员序列化为 XML 元素的数组。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> 类的新实例，并指定在 XML 文档实例中生成的 XML 元素名称。</summary>
      <param name="elementName">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的 XML 元素的名称。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.ElementName">
      <summary>获取或设置提供给序列化数组的 XML 元素名称。</summary>
      <returns>序列化数组的 XML 元素名称。 默认值为向其分配 <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> 的成员的名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Form">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的 XML 元素名称是限定的还是非限定的。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值之一。 默认值为 <see langword="XmlSchemaForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.IsNullable">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否必须将成员序列化为 <see langword="xsi:nil" /> 属性设置为 <see langword="true" /> 的 XML 空标记。</summary>
      <returns>如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成 <see langword="true" /> 属性，则为 <see langword="xsi:nil" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Namespace">
      <summary>获取或设置 XML 元素的命名空间。</summary>
      <returns>XML 元素的命名空间。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Order">
      <summary>获取或设置序列化或反序列化元素的显式顺序。</summary>
      <returns>代码生成的顺序。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttribute">
      <summary>表示指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可以放置在序列化数组中的派生类型的特性。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 类的新实例，并指定在 XML 文档中生成的 XML 元素的名称。</summary>
      <param name="elementName">XML 元素的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 类的新实例，并指定在 XML 文档中生成的 XML 元素的名称，以及可插入到所生成的 XML 文档中的 <see cref="T:System.Type" />。</summary>
      <param name="elementName">XML 元素的名称。</param>
      <param name="type">要序列化的对象的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 类的新实例，并指定可插入到序列化数组中的 <see cref="T:System.Type" />。</summary>
      <param name="type">要序列化的对象的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.DataType">
      <summary>获取或设置生成的 XML 元素的 XML 数据类型。</summary>
      <returns>XML 架构定义 (XSD) 数据类型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.ElementName">
      <summary>获取或设置生成的 XML 元素的名称。</summary>
      <returns>生成的 XML 元素的名称。 默认值为成员标识符。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Form">
      <summary>获取或设置一个值，该值指示生成的 XML 元素的名称是否是限定的。</summary>
      <exception cref="T:System.Exception">
        <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" /> 属性设置为 <see langword="XmlSchemaForm.Unqualified" />，并且指定 <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" /> 值。</exception>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值之一。 默认值为 <see langword="XmlSchemaForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否必须将成员序列化为 <see langword="xsi:nil" /> 属性设置为 <see langword="true" /> 的 XML 空标记。</summary>
      <returns>如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成 <see langword="true" /> 特性，则为 <see langword="xsi:nil" />；否则为 <see langword="false" />，且不生成实例。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace">
      <summary>获取或设置生成的 XML 元素的命名空间。</summary>
      <returns>生成的 XML 元素的命名空间。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel">
      <summary>获取或设置受 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 影响的 XML 元素的层次结构中的级别。</summary>
      <returns>数组的数组中的索引集从零开始的索引。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Type">
      <summary>获取或设置数组中允许的类型。</summary>
      <returns>数组中允许的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttributes">
      <summary>表示 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 对象集合。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Add(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>将 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 添加到集合中。</summary>
      <param name="attribute">要添加到集合中的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />。</param>
      <returns>所添加的项的索引。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Contains(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>确定集合是否包含指定的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />。</summary>
      <param name="attribute">要检查的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />。</param>
      <returns>如果该集合包含指定的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.CopyTo(System.Xml.Serialization.XmlArrayItemAttribute[],System.Int32)">
      <summary>从指定的目标索引开始，将 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 数组复制到集合。</summary>
      <param name="array">要复制到集合中的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 对象的数组。</param>
      <param name="index">从该处开始特性复制的索引。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.IndexOf(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>返回所指定 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 在集合中首个匹配项的从零开始的索引；如果在集合中找不到该特性，则为 -1。</summary>
      <param name="attribute">要在集合中查找的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />。</param>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 在集合中的首个索引；如果在集合中找不到该特性，则为 -1。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Insert(System.Int32,System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>在集合中的指定索引处插入 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />。</summary>
      <param name="index">在该处插入特性的索引。</param>
      <param name="attribute">要插入的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Remove(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>如果存在，则从集合中移除 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />。</summary>
      <param name="attribute">要移除的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttributes.Item(System.Int32)">
      <summary>获取或设置指定索引处的项。</summary>
      <param name="index">要获取或设置的从零开始的集合成员的索引。</param>
      <returns>指定索引处的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeEventArgs">
      <summary>为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.Attr">
      <summary>获取一个对象，该对象表示未知的 XML 特性。</summary>
      <returns>
        <see cref="T:System.Xml.XmlAttribute" />，表示未知的 XML 特性。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.ExpectedAttributes">
      <summary>获取 XML 特性名的逗号分隔列表，该列表应出现在 XML 文档实例中。</summary>
      <returns>XML 特性名的逗号分隔列表。 每个名称的格式为：<paramref name="namespace" />:<paramref name="name" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.LineNumber">
      <summary>获取未知 XML 特性的行号。</summary>
      <returns>未知 XML 特性的行号。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.LinePosition">
      <summary>获取未知 XML 特性行中的位置。</summary>
      <returns>未知 XML 特性的位置编号。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized">
      <summary>获取正在被反序列化的对象。</summary>
      <returns>要反序列化的对象。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeEventHandler">
      <summary>表示处理 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> 的方法</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Xml.Serialization.XmlAttributeEventArgs" />。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeOverrides">
      <summary>允许在使用 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 串行化或反序列化对象时替代属性、字段和类特性。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.XmlAttributes)">
      <summary>将 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 对象添加到 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 对象的集合中。 <paramref name="type" /> 参数指定要替代的对象。 <paramref name="member" /> 参数指定所替代的成员名称。</summary>
      <param name="type">要替代的对象的 <see cref="T:System.Type" />。</param>
      <param name="member">要替代的成员的名称。</param>
      <param name="attributes">表示替代属性的 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 对象。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.Xml.Serialization.XmlAttributes)">
      <summary>将 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 对象添加到 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 对象的集合中。 <paramref name="type" /> 参数指定由 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 对象替代的对象。</summary>
      <param name="type">所替代的对象的 <see cref="T:System.Type" />。</param>
      <param name="attributes">表示替代属性的 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 对象。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type)">
      <summary>获取与指定的基类类型相关联的对象。</summary>
      <param name="type">与要检索的属性的集合相关联的基类 <see cref="T:System.Type" />。</param>
      <returns>表示重写属性集合的 <see cref="T:System.Xml.Serialization.XmlAttributes" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type,System.String)">
      <summary>获取与指定（基类）类型相关联的对象。 成员参数指定被替代的基类成员。</summary>
      <param name="type">与所需属性的集合相关联的基类 <see cref="T:System.Type" />。</param>
      <param name="member">指定要返回的 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 的替代成员名称。</param>
      <returns>表示重写属性集合的 <see cref="T:System.Xml.Serialization.XmlAttributes" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributes">
      <summary>表示控制 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 串行化和反序列化对象方式的属性对象的集合。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributes.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributes.#ctor(System.Reflection.ICustomAttributeProvider)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributes" /> 类的新实例，并自定义 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 串行化和反序列化对象的方式。</summary>
      <param name="provider">可提供控制 XML 序列化的属性的其他实现的类。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute">
      <summary>获取或设置要替代的 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />。</summary>
      <returns>要重写的 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
      <summary>获取要替代的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 对象集合。</summary>
      <returns>表示 <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /> 对象集合的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlArray">
      <summary>获取或设置一个对象，该对象指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 串行化返回数组的公共字段或读/写属性的方式。</summary>
      <returns>一个 <see cref="T:System.Xml.Serialization.XmlArrayAttribute" />，指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化如何返回数组的公共字段或读/写属性。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
      <summary>获取或设置一个对象集合，该集合指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化插入数组（由公共字段或读/写属性返回）的项的方式。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /> 对象，它包含 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
      <summary>获取或设置一个对象，该对象指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 将公共字段或公共读/写属性串行化为 XML 特性的方式。</summary>
      <returns>控制将公共字段或读/写属性序列化为 XML 特性的 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier">
      <summary>获取或设置一个对象，该对象允许你区分一组选择。</summary>
      <returns>可应用到被序列化为 <see langword="xsi:choice" /> 元素的类成员的 <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
      <summary>获取或设置 XML 元素或属性的默认值。</summary>
      <returns>表示 XML 元素或属性的默认值的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlElements">
      <summary>获取一个对象集合，该集合指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 将公共字段或读/写属性串行化为 XML 元素的方式。</summary>
      <returns>包含一个 <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> 对象集合的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
      <summary>获取或设置一个对象，该对象指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 串行化枚举成员的方式。</summary>
      <returns>指定 <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> 如何序列化枚举成员的 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
      <summary>获取或设置一个值，该值指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否串行化公共字段或公共读/写属性。</summary>
      <returns>如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 不得序列化字段或属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.Xmlns">
      <summary>获取或设置一个值，该值指定当替代包含返回 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 对象的成员的对象时，是否保留所有的命名空间声明。</summary>
      <returns>如果应保留命名空间声明，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
      <summary>获取或设置一个对象，该对象指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 将类串行化为 XML 根元素的方式。</summary>
      <returns>重写特性化为 XML 根元素的类的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlText">
      <summary>获取或设置一个对象，该对象指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 将公共字段或公共读/写属性串行化为 XML 文本。</summary>
      <returns>重写公共属性或字段的默认序列化的 <see cref="T:System.Xml.Serialization.XmlTextAttribute" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlType">
      <summary>获取或设置一个对象，该对象指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 串行化已对其应用 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> 的类的方式。</summary>
      <returns>重写应用于类声明的 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> 的 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
      <summary>指定可以使用枚举进一步检测成员。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> 类的新实例。</summary>
      <param name="name">返回用于检测选项的枚举的成员名称。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
      <summary>获取或设置字段的名称，该字段返回在检测类型时使用的枚举。</summary>
      <returns>返回枚举的字段的名称。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlDeserializationEvents">
      <summary>包含可用于将事件委托传递给 <see cref="Overload:System.Xml.Serialization.XmlSerializer.Deserialize" /> 的线程安全的 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 方法的字段。</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnknownAttribute_p">
      <summary>获取或设置表示处理 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> 事件的方法的对象。</summary>
      <returns>指向事件处理程序的 <see cref="T:System.Xml.Serialization.XmlAttributeEventHandler" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnknownElement_p">
      <summary>获取或设置表示处理 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> 事件的方法的对象。</summary>
      <returns>指向事件处理程序的 <see cref="T:System.Xml.Serialization.XmlElementEventHandler" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnknownNode_p">
      <summary>获取或设置表示处理 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> 事件的方法的对象。</summary>
      <returns>指向事件处理程序的 <see cref="T:System.Xml.Serialization.XmlNodeEventHandler" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnreferencedObject_p">
      <summary>获取或设置表示处理 <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" /> 事件的方法的对象。</summary>
      <returns>指向事件处理程序的 <see cref="T:System.Xml.Serialization.UnreferencedObjectEventHandler" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttributes">
      <summary>表示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 用于重写其序列化类的默认方式的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Add(System.Xml.Serialization.XmlElementAttribute)">
      <summary>将 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 添加到集合中。</summary>
      <param name="attribute">要添加的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />。</param>
      <returns>新添加项的从零开始的索引。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Contains(System.Xml.Serialization.XmlElementAttribute)">
      <summary>确定集合中是否包含指定的对象。</summary>
      <param name="attribute">要查找的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />。</param>
      <returns>如果该集合中存在对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.CopyTo(System.Xml.Serialization.XmlElementAttribute[],System.Int32)">
      <summary>将 <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> 或它的一部分复制到一维数组中。</summary>
      <param name="array">保留所复制的元素的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 数组。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.IndexOf(System.Xml.Serialization.XmlElementAttribute)">
      <summary>获取指定 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 的索引。</summary>
      <param name="attribute">要检索其索引的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />。</param>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 的从零开始的索引。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlElementAttribute)">
      <summary>向集合插入 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />。</summary>
      <param name="index">从零开始的索引，在此处插入了成员。</param>
      <param name="attribute">要插入的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Remove(System.Xml.Serialization.XmlElementAttribute)">
      <summary>从集合中删除指定的对象。</summary>
      <param name="attribute">要从该集合中移除的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttributes.Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">设置了该属性，但 <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> 为只读。</exception>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementEventArgs">
      <summary>为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.Element">
      <summary>获取表示未知 XML 元素的对象。</summary>
      <returns>表示未知 XML 元素的对象。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.ExpectedElements">
      <summary>获取逗号分隔的 XML 元素名称列表，这些名称应在 XML 文档实例内。</summary>
      <returns>以逗号分隔的 XML 元素名称的列表。 每个名称的格式为：<paramref name="namespace" />:<paramref name="name" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.LineNumber">
      <summary>如果 XML 读取器为 <see cref="T:System.Xml.XmlTextReader" />，则在遇到未知元素的位置获取行号。</summary>
      <returns>如果 XML 读取器为 <see cref="T:System.Xml.XmlTextReader" />，则为遇到未知元素的位置处的行号；否则为 -1。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.LinePosition">
      <summary>如果 XML 读取器为 <see cref="T:System.Xml.XmlTextReader" />，则获取未知元素在行中出现的位置。</summary>
      <returns>如果 XML 读取器为 <see cref="T:System.Xml.XmlTextReader" />，则为出现未知元素的行的编号；否则为 -1。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.ObjectBeingDeserialized">
      <summary>获取 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 正在反序列化的对象。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 正在反序列化的对象。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementEventHandler">
      <summary>表示处理 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Xml.Serialization.XmlElementEventArgs" />。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlIncludeAttribute">
      <summary>允许 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 在它序列化或反序列化对象时识别类型。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIncludeAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" /> 类的新实例。</summary>
      <param name="type">要包含的对象的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlIncludeAttribute.Type">
      <summary>获取或设置要包含的对象的类型。</summary>
      <returns>要包含的对象的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlMapping">
      <summary>支持 .NET Framework 类型和 XML 架构数据类型之间的映射。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlMapping.SetKey(System.String)">
      <summary>设置用于查找映射的键。</summary>
      <param name="key">查找键。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlMapping.ElementName">
      <summary>获取被映射元素的名称。</summary>
      <returns>被映射元素的名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMapping.Namespace">
      <summary>获取被映射元素的命名空间。</summary>
      <returns>被映射元素的命名空间。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMapping.XsdElementName">
      <summary>获取映射的 XSD 元素的名称。</summary>
      <returns>XSD 元素名称。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlMappingAccess">
      <summary>指定映射是读取、写入，还是既读取又写入。</summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlMappingAccess.None">
      <summary>生成读取方法和写入方法。</summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlMappingAccess.Read">
      <summary>生成读取方法。</summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlMappingAccess.Write">
      <summary>生成写入方法。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlMemberMapping">
      <summary>将 .NET Framework Web 服务方法中的代码实体映射到 Web 服务描述语言 (WSDL) 消息中的元素。</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.Any">
      <summary>获取或设置一个值，该值指示 .NET Framework 类型是否可以映射到任何类型的 XML 元素或属性。</summary>
      <returns>如果该类型可以映射到任何 XML 元素或属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.CheckSpecified">
      <summary>获取一个值，该值指示 .NET Framework 类型中的伴随字段是否指定了值。</summary>
      <returns>如果伴随字段指定了值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.ElementName">
      <summary>获取应用于此映射的 XML 元素声明的非限定名。</summary>
      <returns>应用于此映射的 XML 元素声明的非限定名。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.MemberName">
      <summary>获取此映射所表示的 Web 服务方法成员的名称。</summary>
      <returns>此映射所表示的 Web 服务方法成员的名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.Namespace">
      <summary>获取应用于此映射的 XML 命名空间。</summary>
      <returns>应用于此映射的 XML 命名空间。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeFullName">
      <summary>获取此映射的 .NET Framework 类型的完全限定类型名称。</summary>
      <returns>此映射的 .NET Framework 类型的完全限定类型名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeName">
      <summary>获取此映射的 .NET Framework 类型的类型名称。</summary>
      <returns>此映射的 .NET Framework 类型的类型名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeNamespace">
      <summary>获取此映射的 .NET Framework 类型的命名空间。</summary>
      <returns>此映射的 .NET Framework 类型的命名空间。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.XsdElementName">
      <summary>获取服务描述文档中显示的 XML 元素名称。</summary>
      <returns>XML 元素名称。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlMembersMapping">
      <summary>提供 .NET Framework Web 服务方法与为 SOAP Web 服务定义的 Web 服务描述语言 (WSDL) 消息之间的映射。</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Count">
      <summary>获取 .NET Framework 代码实体的数目，这些实体属于 SOAP 消息所映射到的 Web 服务方法。</summary>
      <returns>集合中映射的数目。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Item(System.Int32)">
      <summary>获取一项，该项包含 .NET Framework 代码实体的内部类型映射信息，而 .NET Framework 代码实体属于映射到 SOAP 消息的 Web 服务方法。</summary>
      <param name="index">要返回的映射的索引。</param>
      <returns>请求的 <see cref="T:System.Xml.Serialization.XmlMemberMapping" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.TypeName">
      <summary>获取 .NET Framework 类型的名称，该类型映射到表示 SOAP 消息的 XML 架构元素的数据类型。</summary>
      <returns>.NET Framework 类型的名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.TypeNamespace">
      <summary>获取 .NET Framework 类型的命名空间，该类型映射到表示 SOAP 消息的 XML 架构元素的数据类型。</summary>
      <returns>映射的 .NET Framework 命名空间。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlNodeEventArgs">
      <summary>为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LineNumber">
      <summary>获取未知 XML 节点的行号。</summary>
      <returns>未知 XML 节点的行号。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LinePosition">
      <summary>获取未知 XML 节点行中的位置。</summary>
      <returns>未知 XML 节点的位置编号。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LocalName">
      <summary>获取正在被反序列化的 XML 节点的 XML 本地名称。</summary>
      <returns>正在被反序列化的节点的 XML 本地名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.Name">
      <summary>获取正在被反序列化的 XML 节点的名称。</summary>
      <returns>正在被反序列化的节点的名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.NamespaceURI">
      <summary>获取与正在被反序列化的 XML 节点关联的命名空间 URI。</summary>
      <returns>与正在被反序列化的 XML 节点关联的命名空间 URI。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.NodeType">
      <summary>获取正在被反序列化的 XML 节点的类型。</summary>
      <returns>表示正在被反序列化的 XML 节点的 <see cref="T:System.Xml.XmlNodeType" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.ObjectBeingDeserialized">
      <summary>获取正在被反序列化的对象。</summary>
      <returns>正被反序列化的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.Text">
      <summary>获取正在被反序列化的 XML 节点的文本。</summary>
      <returns>正在被反序列化的 XML 节点的文本。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlNodeEventHandler">
      <summary>表示处理 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Xml.Serialization.XmlNodeEventArgs" />。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlReflectionImporter">
      <summary>为 .NET Framework 类型或 Web 服务方法信息生成到 XML 架构元素声明（包括 Web 服务描述语言 (WSDL) 文档中的文本 XML 架构定义 (XSD) 消息部分）的映射。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.String)">
      <summary>使用指定的默认 XML 命名空间，初始化 <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> 类的新实例。</summary>
      <param name="defaultNamespace">导入的类型映射要使用的默认 XML 命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>使用指定的 XML 序列化重写，初始化 <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> 类的新实例。</summary>
      <param name="attributeOverrides">一个对象，该对象重写 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类序列化映射类型的方式。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides,System.String)">
      <summary>使用指定的 XML 序列化重写和默认的 XML 命名空间，初始化 <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> 类的新实例。</summary>
      <param name="attributeOverrides">一个对象，该对象重写 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类序列化映射类型的方式。</param>
      <param name="defaultNamespace">导入的类型映射要使用的默认 XML 命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean)">
      <summary>为 Web 服务方法的信息生成内部类型映射。</summary>
      <param name="elementName">从 Web 服务方法生成的 XML 元素名称。</param>
      <param name="ns">从 Web 服务方法生成的 XML 元素命名空间。</param>
      <param name="members">
        <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> 对象的数组，这些对象包含属于 Web 服务方法的 .NET Framework 代码实体。</param>
      <param name="hasWrapperElement">如果对应于 Web 服务描述语言 (WSDL) 消息部分的元素应包含在 SOAP 消息的额外包装元素中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlMembersMapping" />，其中具有到 WSDL 消息定义的元素部分的映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)">
      <summary>使用 Web 服务方法的信息返回内部类型映射，并允许指定 XML 元素名称、XML 命名空间和其他选项。</summary>
      <param name="elementName">从 Web 服务方法生成的 XML 元素名称。</param>
      <param name="ns">从 Web 服务方法生成的 XML 元素命名空间。</param>
      <param name="members">
        <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> 对象的数组，这些对象包含属于 Web 服务方法的 .NET Framework 代码实体。</param>
      <param name="hasWrapperElement">如果对应于 Web 服务描述语言 (WSDL) 消息部分的元素应包含在 SOAP 消息的额外包装元素中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="rpc">如果该方法是远程过程调用，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>包含映射的 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>使用 Web 服务方法的信息返回内部类型映射，并允许指定 XML 元素名称、XML 命名空间和其他选项。</summary>
      <param name="elementName">从 Web 服务方法生成的 XML 元素名称。</param>
      <param name="ns">从 Web 服务方法生成的 XML 元素命名空间。</param>
      <param name="members">
        <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> 对象的数组，这些对象包含属于 Web 服务方法的 .NET Framework 代码实体。</param>
      <param name="hasWrapperElement">如果对应于 Web 服务描述语言 (WSDL) 消息部分的元素应包含在 SOAP 消息的额外包装元素中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="rpc">如果该方法是远程过程调用，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="openModel">如果指定生成的架构类型用 <see langword="&lt;xs:anyAttribute&gt;" /> 元素标记，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>包含映射的 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean,System.Xml.Serialization.XmlMappingAccess)">
      <summary>为 Web 服务方法的信息生成内部类型映射。</summary>
      <param name="elementName">从 Web 服务方法生成的 XML 元素名称。</param>
      <param name="ns">从 Web 服务方法生成的 XML 元素命名空间。</param>
      <param name="members">
        <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> 对象的数组，这些对象包含属于 Web 服务方法的 .NET Framework 代码实体。</param>
      <param name="hasWrapperElement">如果对应于 Web 服务描述语言 (WSDL) 消息部分的元素应包含在 SOAP 消息的额外包装元素中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="rpc">如果该方法是远程过程调用，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="openModel">如果指定生成的架构类型用 <see langword="&lt;xs:anyAttribute&gt;" /> 元素标记，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="access">
        <see cref="T:System.Xml.Serialization.XmlMappingAccess" /> 值之一。 默认值为 <see langword="None" />。</param>
      <returns>包含映射的 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type)">
      <summary>为指定的 .NET Framework 类型生成到 XML 架构元素的映射。</summary>
      <param name="type">将为其生成类型映射的 .NET Framework 类型。</param>
      <returns>从一个类型到一个 XML 架构元素的 .NET Framework 内部映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.String)">
      <summary>使用指定的类型和命名空间为 .NET Framework 类型生成到 XML 架构元素的映射。</summary>
      <param name="type">将为其生成类型映射的 .NET Framework 类型。</param>
      <param name="defaultNamespace">要使用的默认 XML 命名空间。</param>
      <returns>从一个类型到一个 XML 架构元素的 .NET Framework 内部映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>使用指定的类型和特性为 .NET Framework 类型生成到 XML 架构元素的映射。</summary>
      <param name="type">将为其生成类型映射的 .NET Framework 类型。</param>
      <param name="root">应用于类型的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 特性。</param>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlTypeMapping" />，表示 .NET Framework 类型到 XML 架构元素的映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>使用指定的类型、特性和命名空间为 .NET Framework 类型生成到 XML 架构元素的映射。</summary>
      <param name="type">将为其生成类型映射的 .NET Framework 类型。</param>
      <param name="root">应用于类型的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 特性。</param>
      <param name="defaultNamespace">要使用的默认 XML 命名空间。</param>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlTypeMapping" />，其中包含一个类型到一个 XML 架构元素的 .NET Framework 内部映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeType(System.Type)">
      <summary>包含类型的映射，这些映射在以后调用导入方法时使用。</summary>
      <param name="type">要为其保存类型映射信息的 .NET Framework 类型。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
      <summary>包含派生类型的映射，这些映射在以后调用导入方法时使用。</summary>
      <param name="provider">
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 类的实例，该类包含从 <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" /> 特性派生的自定义特性。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlReflectionMember">
      <summary>提供 .NET Framework Web 服务方法中的代码实体与为 SOAP Web 服务定义的 Web 服务描述语言 (WSDL) 消息的内容之间的映射。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionMember.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.IsReturnValue">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> 是否表示 Web 服务方法返回值（而不是输出参数）。</summary>
      <returns>如果成员表示 Web 服务返回值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.MemberName">
      <summary>获取或设置映射的 Web 服务方法成员的名称。</summary>
      <returns>Web 服务方法的名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.MemberType">
      <summary>获取或设置此映射所表示的 Web 服务方法成员代码实体的类型。</summary>
      <returns>此映射所表示的 Web 服务方法成员代码实体的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.OverrideIsNullable">
      <summary>获取或设置一个值，该值指示相应 XML 元素定义的 <c>isNullable</c> 属性的值是 <see langword="false" />。</summary>
      <returns>如果要重写 <see cref="P:System.Xml.Serialization.XmlElementAttribute.IsNullable" /> 属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.SoapAttributes">
      <summary>使用应用于成员代码实体的 SOAP 相关特性的集合获取或设置 <see cref="T:System.Xml.Serialization.SoapAttributes" />。</summary>
      <returns>包含对象的 <see cref="T:System.Xml.Serialization.SoapAttributes" />，这些对象表示应用于成员的 SOAP 特性。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.XmlAttributes">
      <summary>使用应用于成员代码实体的 <see cref="T:System.Xml.Serialization.XmlAttributes" />相关属性的集合获取或设置 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlAttributes" />，表示应用于成员代码的 XML 属性。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaEnumerator">
      <summary>允许对 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象集合进行迭代。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaEnumerator.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSchemaEnumerator" /> 类的新实例。</summary>
      <param name="list">要在其上进行迭代的 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 对象。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaEnumerator.Dispose">
      <summary>释放由 <see cref="T:System.Xml.Serialization.XmlSchemaEnumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaEnumerator.MoveNext">
      <summary>使枚举数前进到集合中的下一项。</summary>
      <returns>如果移动成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaEnumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举器设置为其初始位置，该位置位于 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象集合中第一个元素之前。</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaEnumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaEnumerator.System#Collections#IEnumerator#Current">
      <summary>获取 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象集合中的当前元素。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象集合中的当前元素。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaExporter">
      <summary>使用类型映射对象中的 XML 架构元素声明填充 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSchemaExporter" /> 类的新实例。</summary>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象的集合，其中将添加从类型映射获取的元素声明。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportAnyType(System.String)">
      <summary>将 <c>&lt;any&gt;</c> 元素导出到由指定命名空间标识的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</summary>
      <param name="ns">向 XML 架构文档的命名空间添加 <c>&lt;any&gt;</c> 元素。</param>
      <returns>向 <c>&lt;any&gt;</c> 元素声明分配任意名称。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportAnyType(System.Xml.Serialization.XmlMembersMapping)">
      <summary>将对象或类型的元素声明添加到 SOAP 消息或 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</summary>
      <param name="members">包含要导出的映射的 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />。</param>
      <returns>追加有一个整数的字符串“any”。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>向文本 SOAP 消息定义中每一个元素部分的适用 <see cref="T:System.Xml.Schema.XmlSchema" /> 添加一个元素声明。</summary>
      <param name="xmlMembersMapping">Web 服务描述语言 (WSDL) 消息定义中元素部分的内部 .NET Framework 类型映射。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping,System.Boolean)">
      <summary>向文本 SOAP 消息定义中每一个元素部分的适用 <see cref="T:System.Xml.Schema.XmlSchema" /> 添加一个元素声明，并指定是否包含封闭元素。</summary>
      <param name="xmlMembersMapping">.NET Framework 类型和 XML 架构元素之间的内部映射。</param>
      <param name="exportEnclosingType">如果包含封闭架构的架构元素，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>向文本 SOAP 消息定义中单个元素部分的适用 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象添加一个元素声明。</summary>
      <param name="xmlMembersMapping">Web 服务描述语言 (WSDL) 消息定义中元素部分的内部 .NET Framework 类型映射。</param>
      <returns>
        <see cref="T:System.Xml.XmlQualifiedName" />，表示导出的元素声明的限定 XML 名称。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>将 .NET Framework 类型的元素声明添加到适用 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</summary>
      <param name="xmlTypeMapping">.NET Framework 类型和 XML 架构元素之间的内部映射。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaImporter">
      <summary>为 XML 架构元素声明（包括 WSDL 文档中的文本 XSD 消息部分）生成到 .NET Framework 类型的内部映射。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> 类的新实例，采用 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象的集合，表示 WSDL 文档中定义的 SOAP 文本消息所使用的 XML 架构。</summary>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象的集合。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> 类的新实例，需要 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象（表示 SOAP 文本消息所使用的 XML 架构）的集合，以及为 Web 服务描述语言 (WSDL) 文档中定义的绑定生成的类。</summary>
      <param name="schemas">一个 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 对象。</param>
      <param name="typeIdentifiers">一个 <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> 对象，指定为 WSDL 文档中定义的绑定生成的类的集合。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportAnyType(System.Xml.XmlQualifiedName,System.String)">
      <summary>为 WSDL 文档中定义的单个 (SOAP) 文本元素部分生成内部类型映射信息。</summary>
      <param name="typeName">一个 <see cref="T:System.Xml.XmlQualifiedName" /> ，指定为其生成.NET Framework 类型的元素类型名称。</param>
      <param name="elementName">WSDL 文档中 part 元素的名称。</param>
      <returns>表示 WSDL 消息定义中单个元素部分的 .NET Framework 类型映射的 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type)">
      <summary>为 XML 架构文档中定义的元素生成内部类型映射信息。</summary>
      <param name="name">一个 <see cref="T:System.Xml.XmlQualifiedName" />，指定在 XML 架构文档中定义的元素的名称。</param>
      <param name="baseType">对应于 XSD 元素的类型生成的 .NET Framework 类型的基类型。</param>
      <returns>表示 XML 架构元素的 .NET Framework 类型映射信息的 <see cref="T:System.Xml.Serialization.XmlTypeMapping" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
      <summary>为 XML 架构文档中定义的元素或作为 WSDL 文档的部分的元素生成内部类型映射信息。</summary>
      <param name="name">一个 <see cref="T:System.Xml.XmlQualifiedName" />，指定在 XML 架构文档中定义的元素的名称。</param>
      <param name="baseType">对应于 XSD 元素的类型生成的 .NET Framework 类型的基类型。</param>
      <param name="baseTypeCanBeIndirect">如果指示对应于 XSD 元素的类型可以从基类型间接继承，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>XML 架构元素的 .NET Framework 类型映射信息。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[])">
      <summary>为 WSDL 文档中定义的使用文本的 SOAP 消息的元素部分生成内部类型映射信息。</summary>
      <param name="name">为其生成映射的元素的名称。</param>
      <param name="ns">为其生成映射的元素的命名空间。</param>
      <param name="members">一个 <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> 实例的数组，指定为其生成映射的元素的成员。</param>
      <returns>一个 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />，包含类型映射信息。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName)">
      <summary>为 WSDL 文档中定义的使用文本的 SOAP 消息的单个元素部分生成内部类型映射信息。</summary>
      <param name="name">一个 <see cref="T:System.Xml.XmlQualifiedName" /> ，指定消息部分的名称。</param>
      <returns>包含单个元素部分的 WSDL 消息定义的 .NET Framework 类型映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[])">
      <summary>为 WSDL 文档中定义的使用文本的 SOAP 消息的元素部分生成内部类型映射信息。</summary>
      <param name="names">一个类型 <see cref="T:System.Xml.XmlQualifiedName" /> 的数组，指定消息部分的名称。</param>
      <returns>表示 WSDL 消息定义中元素部分的 .NET Framework 类型映射的 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[],System.Type,System.Boolean)">
      <summary>为 WSDL 文档中定义的使用文本的 SOAP 消息的元素部分生成内部类型映射信息。</summary>
      <param name="names">一个类型 <see cref="T:System.Xml.XmlQualifiedName" /> 的数组，指定消息部分的名称。</param>
      <param name="baseType">生成来对应消息部分的 .NET Framework 类型的基类型。</param>
      <param name="baseTypeCanBeIndirect">如果指示对应于消息部分的类型可以直接从基类型继承，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>WSDL 消息定义中元素部分的 .NET Framework 类型映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName)">
      <summary>为 XML 架构文档中定义的元素生成内部类型映射信息。</summary>
      <param name="typeName">
        <see cref="T:System.Xml.XmlQualifiedName" />，指定一个 XML 元素。</param>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> 对象，描述一个类型映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName,System.Type)">
      <summary>为 XML 架构文档中定义的元素生成内部类型映射信息。</summary>
      <param name="typeName">
        <see cref="T:System.Xml.XmlQualifiedName" />，指定一个 XML 元素。</param>
      <param name="baseType">
        <see cref="T:System.Type" /> 对象，指定一个基类型。</param>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> 对象，描述一个类型映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
      <summary>为 XML 架构文档中定义的元素生成内部类型映射信息。</summary>
      <param name="typeName">
        <see cref="T:System.Xml.XmlQualifiedName" />，指定一个 XML 元素。</param>
      <param name="baseType">
        <see cref="T:System.Type" /> 对象，指定一个基类型。</param>
      <param name="baseTypeCanBeIndirect">
        <see cref="T:System.Boolean" /> 值，指定生成的类型是否可以间接继承 <paramref name="baseType" />。</param>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> 对象，描述一个类型映射。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportTypeMapping(System.Xml.XmlQualifiedName)">
      <summary>为 XML 架构文档中定义的元素生成内部类型映射信息。</summary>
      <param name="name">一个 <see cref="T:System.Xml.XmlQualifiedName" />，指定在 XML 架构文档中定义的元素的名称。</param>
      <returns>XML 架构元素的 .NET Framework 类型映射信息。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemas">
      <summary>表示 XML 架构的集合。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Schema.XmlSchema)">
      <summary>将对象添加到集合的末尾。</summary>
      <param name="schema">要添加到对象的集合中的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</param>
      <returns>添加 <see cref="T:System.Xml.Schema.XmlSchema" /> 的位置的索引。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Schema.XmlSchema,System.Uri)">
      <summary>添加一个 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象，该对象表示对集合的程序集引用。</summary>
      <param name="schema">要添加的 <see cref="T:System.Xml.Schema.XmlSchema" />。</param>
      <param name="baseUri">架构对象的 <see cref="T:System.Uri" />。</param>
      <returns>添加 <see cref="T:System.Xml.Schema.XmlSchema" /> 的位置的索引。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Serialization.XmlSchemas)">
      <summary>将 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 类的实例添加到集合的末尾。</summary>
      <param name="schemas">要添加到集合末尾的 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 对象。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.AddReference(System.Xml.Schema.XmlSchema)">
      <summary>添加一个 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象，该对象表示对集合的程序集引用。</summary>
      <param name="schema">要添加的 <see cref="T:System.Xml.Schema.XmlSchema" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Compile(System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>处理 XML 架构中的元素和特性名称，还可以选择验证 XML 架构。</summary>
      <param name="handler">
        <see cref="T:System.Xml.Schema.ValidationEventHandler" />，在严格参数设置为 <see langword="true" /> 时指定在 XML 架构验证过程中处理错误和警告的回调方法。</param>
      <param name="fullCompile">为 <see langword="true" /> 则使用 <see cref="M:System.Xml.Serialization.XmlSchemas.Compile(System.Xml.Schema.ValidationEventHandler,System.Boolean)" /> 类的 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 方法验证集合中的 XML 架构；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Contains(System.String)">
      <summary>返回一个值，指示该集合是否包含属于指定命名空间的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</summary>
      <param name="targetNamespace">要检查的项的命名空间。</param>
      <returns>如果找到该项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Contains(System.Xml.Schema.XmlSchema)">
      <summary>确定 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 是否包含特定架构。</summary>
      <param name="schema">要定位的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</param>
      <returns>如果集合包含指定的项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">作为从 <see cref="T:System.Array" /> 复制的架构的目标位置的一维 <see cref="T:System.Xml.Serialization.XmlSchemas" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">一个 32 位整数，它表示在数组中开始复制的位置的索引。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Find(System.Xml.XmlQualifiedName,System.Type)">
      <summary>将一个 XML 架构放置具有指定名称和类型的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 中。</summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" />，指定带有命名空间的完全限定名，用来在集合中定位 <see cref="T:System.Xml.Schema.XmlSchema" />。</param>
      <param name="type">要查找的对象的 <see cref="T:System.Type" />。 可能的值包括：<see cref="T:System.Xml.Schema.XmlSchemaGroup" />、<see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />、<see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaNotation" />。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 实例，如 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.GetSchemas(System.String)">
      <summary>获取属于相同命名空间的架构的集合。</summary>
      <param name="ns">要检索的架构的命名空间。</param>
      <returns>包含这些架构的 <see cref="T:System.Collections.IList" /> 实现。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.IndexOf(System.Xml.Schema.XmlSchema)">
      <summary>搜索指定的架构，并返回整个 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 中第一个匹配项的从零开始的索引。</summary>
      <param name="schema">要查找的 <see cref="T:System.Xml.Schema.XmlSchema" />。</param>
      <returns>如果在整个 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 中找到值的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Insert(System.Int32,System.Xml.Schema.XmlSchema)">
      <summary>将架构插入 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 中的指定索引处。</summary>
      <param name="index">应插入 <paramref name="schema" /> 的从零开始的索引。</param>
      <param name="schema">要插入的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.IsDataSet(System.Xml.Schema.XmlSchema)">
      <summary>静态方法，该方法确定指定 XML 架构是否包含设置为 <see langword="IsDataSet" /> 的自定义 <see langword="true" /> 特性或其等效项。</summary>
      <param name="schema">要在其中检查值为 <see langword="IsDataSet" /> 的 <see langword="true" /> 特性的 XML 架构。</param>
      <returns>如果存在指定架构，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnClear">
      <summary>清除 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 实例的内容时执行其他自定义进程。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnInsert(System.Int32,System.Object)">
      <summary>在向 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 实例中插入新元素之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，在该处插入 <paramref name="value" />。</param>
      <param name="value">
        <paramref name="index" /> 处的元素的新值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnRemove(System.Int32,System.Object)">
      <summary>当从 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 实例移除元素时执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="value" />。</param>
      <param name="value">要移除的位于 <paramref name="index" /> 处的元素的值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnSet(System.Int32,System.Object,System.Object)">
      <summary>当在 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 实例中设置值之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="oldValue" />。</param>
      <param name="oldValue">要用 <paramref name="newValue" /> 替换的值。</param>
      <param name="newValue">
        <paramref name="index" /> 处的元素的新值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Remove(System.Xml.Schema.XmlSchema)">
      <summary>从 <see cref="T:System.Xml.Serialization.XmlSchemas" /> 中移除特定架构的第一个匹配项。</summary>
      <param name="schema">要移除的 <see cref="T:System.Xml.Schema.XmlSchema" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.System#Collections#Generic#IEnumerable{System#Xml#Schema#XmlSchema}#GetEnumerator">
      <summary>返回一个循环访问 XML 架构集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.IsCompiled">
      <summary>获取一个值，该值指示是否编译了架构。</summary>
      <returns>如果已编译架构，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.Item(System.Int32)">
      <summary>获取或设置位于指定索引处的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</summary>
      <param name="index">要检索的项的索引。</param>
      <returns>指定的 <see cref="T:System.Xml.Schema.XmlSchema" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.Item(System.String)">
      <summary>获取指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象，该对象表示和指定命名空间关联的 XML 架构。</summary>
      <param name="ns">指定对象的命名空间。</param>
      <returns>指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类用于对映射到集合或枚举的 SOAP 编码的 XML 数据类型进行反序列化的委托。</summary>
      <param name="collection">复制集合项数组的目标集合。</param>
      <param name="collectionItems">要复制到 <c>object collection</c> 的项的数组。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationFixupCallback">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类用来反序列化 SOAP 编码的 XML 数据的委托。</summary>
      <param name="fixup">
        <see cref="T:System.Xml.Serialization.XmlSerializationReader.Fixup" /> 类的一个实例，包含要链接的对象和待填写项的字符串标识符数组。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationGeneratedCode">
      <summary>一个抽象类，该类是 <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> 和 <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> 以及包含这两种类型的通用方法的那些类型的基类。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationGeneratedCode.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializationGeneratedCode" /> 类的实例。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReadCallback">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类为了对 SOAP 编码的非根 XML 数据的类型进行反序列化而使用的委托。</summary>
      <returns>由回叫返回的对象。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReader">
      <summary>控制由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类执行的反序列化。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddFixup(System.Xml.Serialization.XmlSerializationReader.CollectionFixup)">
      <summary>存储包含回调方法的对象，以便在必要时填充映射到 SOAP 编码的数组或 SOAP 编码的多引用元素的 .NET Framework 集合或枚举。</summary>
      <param name="fixup">
        <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> 委托和回调方法的输入数据。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddFixup(System.Xml.Serialization.XmlSerializationReader.Fixup)">
      <summary>存储包含回调方法实例的对象，以便在必要时填充 SOAP 编码的数组中的对象。</summary>
      <param name="fixup">
        <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> 委托和回调方法的输入数据。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddReadCallback(System.String,System.String,System.Type,System.Xml.Serialization.XmlSerializationReadCallback)">
      <summary>存储 <see cref="T:System.Xml.Serialization.XmlSerializationReadCallback" /> 委托的实现及其输入数据，以备以后调用。</summary>
      <param name="name">要反序列化的 .NET Framework 类型的名称。</param>
      <param name="ns">要反序列化的 .NET Framework 类型的命名空间。</param>
      <param name="type">要反序列化的 <see cref="T:System.Type" />。</param>
      <param name="read">
        <see cref="T:System.Xml.Serialization.XmlSerializationReadCallback" /> 委托。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddTarget(System.String,System.Object)">
      <summary>存储要从 SOAP 编码的 <see langword="multiRef" /> 元素反序列化的对象，以备以后通过 <see cref="M:System.Xml.Serialization.XmlSerializationReader.GetTarget(System.String)" /> 方法访问。</summary>
      <param name="id">标识 <see langword="id" /> 元素的 <see langword="multiRef" /> 特性的值。</param>
      <param name="o">从 XML 元素反序列化的对象。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CheckReaderCount(System.Int32@,System.Int32@)">
      <summary>检查反序列化程序是否已推进。</summary>
      <param name="whileIterations">While 循环中的当前 <see langword="count" />。</param>
      <param name="readerCount">当前的 <see cref="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount" /> 尚未推进。</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CollapseWhitespace(System.String)">
      <summary>从指定字符串的开始位置和末尾移除所有空白字符。</summary>
      <param name="value">将移除其空白的字符串。</param>
      <returns>裁剪后的字符串。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateAbstractTypeException(System.String,System.String)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示要反序列化的对象应是抽象对象。</summary>
      <param name="name">抽象类型的名称。</param>
      <param name="ns">抽象类型的 .NET Framework 命名空间。</param>
      <returns>一个 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateBadDerivationException(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>使用读取内部元素的选项，根据 <see cref="T:System.Xml.XmlReader" /> 当前位置的 XML 表示形式填充相应对象。</summary>
      <param name="xsdDerived">派生 XML 架构数据类型的本地名称。</param>
      <param name="nsDerived">派生 XML 架构数据类型的命名空间。</param>
      <param name="xsdBase">基 XML 架构数据类型的本地名称。</param>
      <param name="nsBase">基 XML 架构数据类型的命名空间。</param>
      <param name="clrDerived">派生 .NET Framework 类型的命名空间。</param>
      <param name="clrBase">基 .NET Framework 类型的名称。</param>
      <returns>一个 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateCtorHasSecurityException(System.String)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示要反序列化的对象无法实例化，原因是构造函数引发了安全性异常。</summary>
      <param name="typeName">类型的名称。</param>
      <returns>一个 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInaccessibleConstructorException(System.String)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示要反序列化的对象无法实例化，原因是无构造函数可用。</summary>
      <param name="typeName">类型的名称。</param>
      <returns>一个 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInvalidCastException(System.Type,System.Object)">
      <summary>创建一个 <see cref="T:System.InvalidCastException" />，该异常指示显式引用转换失败。</summary>
      <param name="type">对象无法强制转换为的 <see cref="T:System.Type" />。 此类型包含在异常消息中。</param>
      <param name="value">无法强制转换的对象。 此对象包含在异常消息中。</param>
      <returns>一个 <see cref="T:System.InvalidCastException" /> 异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInvalidCastException(System.Type,System.Object,System.String)">
      <summary>创建一个 <see cref="T:System.InvalidCastException" />，该异常指示显式引用转换失败。</summary>
      <param name="type">对象无法强制转换为的 <see cref="T:System.Type" />。 此类型包含在异常消息中。</param>
      <param name="value">无法强制转换的对象。 此对象包含在异常消息中。</param>
      <param name="id">字符串标识符。</param>
      <returns>一个 <see cref="T:System.InvalidCastException" /> 异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateMissingIXmlSerializableType(System.String,System.String,System.String)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示无法定位映射到 XML 架构数据类型的派生类型。</summary>
      <param name="name">映射到不可用派生类型的 XML 架构数据类型的本地名称。</param>
      <param name="ns">映射到不可用派生类型的 XML 架构数据类型的命名空间。</param>
      <param name="clrType">无法为其定位派生类型的 .NET Framework 基类型的全名。</param>
      <returns>一个 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateReadOnlyCollectionException(System.String)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示无法修改 SOAP 编码的集合类型，也无法填充其值。</summary>
      <param name="name">具有映射的 .NET Framework 类型的完全限定名。</param>
      <returns>一个 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownConstantException(System.String,System.Type)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示枚举值无效。</summary>
      <param name="value">无效的枚举值。</param>
      <param name="enumType">枚举类型。</param>
      <returns>一个 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownNodeException">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示表示未知 XML 节点的 <see cref="T:System.Xml.XmlReader" /> 的当前位置。</summary>
      <returns>一个 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownTypeException(System.Xml.XmlQualifiedName)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示类型未知。</summary>
      <param name="type">表示未知类型的名称的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>一个 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.EnsureArrayIndex(System.Array,System.Int32,System.Type)">
      <summary>确保给定的数组或副本足够大以包含指定的索引。</summary>
      <param name="a">要检查的 <see cref="T:System.Array" />。</param>
      <param name="index">要求的索引。</param>
      <param name="elementType">数组元素的 <see cref="T:System.Type" />。</param>
      <returns>如果数组足够大，则为现有的 <see cref="T:System.Array" />；否则为包含原始数组元素的一个更大的新数组。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.FixupArrayRefs(System.Object)">
      <summary>填充 SOAP 编码的数组的值，该数组的数据类型映射到 .NET Framework 引用类型。</summary>
      <param name="fixup">一个对象，包含填充值的数组。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetArrayLength(System.String,System.String)">
      <summary>获取 <see cref="T:System.Xml.XmlReader" /> 当前定位的 SOAP 编码的数组的长度。</summary>
      <param name="name">数组应具有的本地名称。</param>
      <param name="ns">数组应具有的命名空间。</param>
      <returns>SOAP 数组的长度。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetNullAttr">
      <summary>确定 <see cref="T:System.Xml.XmlReader" /> 当前定位的 XML 元素是否将某个空属性设置为值 <see langword="true" />。</summary>
      <returns>如果 <see cref="T:System.Xml.XmlReader" /> 当前定位于值为 <see langword="true" /> 的空属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetTarget(System.String)">
      <summary>获取先由 <see cref="M:System.Xml.Serialization.XmlSerializationReader.AddTarget(System.String,System.Object)" /> 存储，后从 SOAP 编码的 <see langword="multiRef" /> 元素反序列化的对象。</summary>
      <param name="id">标识 <see langword="id" /> 元素的 <see langword="multiRef" /> 特性的值。</param>
      <returns>要从 SOAP 编码的 <see langword="multiRef" /> 元素反序列化的对象。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetXsiType">
      <summary>获取 <see cref="T:System.Xml.XmlReader" /> 当前位置的 XML 元素的 <see langword="xsi:type" /> 属性的值。</summary>
      <returns>XML 限定名，指示 XML 元素的数据类型。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.InitCallbacks">
      <summary>初始化回调方法，该方法填充映射到 SOAP 编码的 XML 数据的对象。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.InitIDs">
      <summary>将元素名称和属性名称存储在 <see cref="T:System.Xml.NameTable" /> 对象中。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.IsXmlnsAttribute(System.String)">
      <summary>确定 XML 属性名称是否指示 XML 命名空间。</summary>
      <param name="name">XML 特性的名称。</param>
      <returns>如果 XML 属性名称指示 XML 命名空间，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ParseWsdlArrayType(System.Xml.XmlAttribute)">
      <summary>如果 XML 特性是 Web 服务描述语言 (WSDL) 命名空间的类型 <see langword="arrayType" />，则设置其值。</summary>
      <param name="attr">
        <see cref="T:System.Xml.XmlAttribute" />，可以具有类型 <see langword="wsdl:array" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadElementQualifiedName">
      <summary>使 <see cref="T:System.Xml.XmlReader" /> 读取其当前定位的元素的完全限定名。</summary>
      <returns>当前 XML 元素的完全限定名。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadEndElement">
      <summary>使 <see cref="T:System.Xml.XmlReader" /> 读取 XML 结束标记。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNull">
      <summary>如果当前 XML 元素某个 null 特性的值为 true，则指示 <see cref="T:System.Xml.XmlReader" /> 读取该元素。</summary>
      <returns>如果元素具有“null="true"”属性值并且已经读取，则为 <see langword="true" />；否则为 <see langword="false" /><c></c>。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableQualifiedName">
      <summary>指示 <see cref="T:System.Xml.XmlReader" /> 读取其当前定位的元素的完全限定名。</summary>
      <returns>
        <see cref="T:System.Xml.XmlQualifiedName" />，表示当前 XML 元素的完全限定名；如果存在 <c>null="true"</c> 属性值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableString">
      <summary>指示 <see cref="T:System.Xml.XmlReader" /> 读取可能为 <see langword="null" /> 的简单纯文本 XML 元素。</summary>
      <returns>字符串值；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReference(System.String@)">
      <summary>读取用于引用 SOAP 编码中的 XML 元素的 <see langword="href" /> 特性（在 SOAP 1.2 中为 <see langword="ref" /> 特性）的值。</summary>
      <param name="fixupReference">将 <see langword="href" /> 特性值读入到其中的输出字符串。</param>
      <returns>如果值已读取，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElement">
      <summary>从 SOAP 编码的 <see langword="multiRef" /> XML 元素反序列化对象。</summary>
      <returns>在文档中引用的元素的值。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElement(System.String,System.String)">
      <summary>从 SOAP 编码的 <see langword="multiRef" /> XML 元素反序列化对象。</summary>
      <param name="name">元素的 XML 架构数据类型的本地名称。</param>
      <param name="ns">元素的 XML 架构数据类型的命名空间。</param>
      <returns>在文档中引用的元素的值。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElements">
      <summary>从 SOAP 消息中的 SOAP 编码的 <see langword="multiRef" /> 元素反序列化对象。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String,System.String,System.Boolean,System.String@)">
      <summary>反序列化 SOAP 消息中的 XML 元素的对象，该消息包含对 <see langword="multiRef" /> 元素的引用。</summary>
      <param name="name">元素的 XML 架构数据类型的本地名称。</param>
      <param name="ns">元素的 XML 架构数据类型的命名空间。</param>
      <param name="elementCanBeType">如果元素名称也是 XML 架构数据类型名称，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="fixupReference">将 <see langword="href" /> 特性值读入到其中的输出字符串。</param>
      <returns>已反序列化的对象。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String,System.String,System.String@)">
      <summary>反序列化 SOAP 消息中的 XML 元素的对象，该消息包含对 <see langword="multiRef" /> 元素的引用。</summary>
      <param name="name">元素的 XML 架构数据类型的本地名称。</param>
      <param name="ns">元素的 XML 架构数据类型的命名空间。</param>
      <param name="fixupReference">将 <see langword="href" /> 特性值读入到其中的输出字符串。</param>
      <returns>已反序列化的对象。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String@)">
      <summary>反序列化 SOAP 消息中的 XML 元素的对象，该消息包含对 <see langword="multiRef" /> 元素的引用。</summary>
      <param name="fixupReference">将 <see langword="href" /> 特性值读入到其中的输出字符串。</param>
      <returns>已反序列化的对象。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadSerializable(System.Xml.Serialization.IXmlSerializable)">
      <summary>根据 <see cref="T:System.Xml.XmlReader" /> 当前位置的对象的 XML 表示形式填充该对象。</summary>
      <param name="serializable">对应于 <see cref="T:System.Xml.Serialization.IXmlSerializable" /> 当前位置的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>实现 <see cref="T:System.Xml.Serialization.IXmlSerializable" /> 接口的对象，其成员从 <see cref="T:System.Xml.XmlReader" /> 的位置填充。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadSerializable(System.Xml.Serialization.IXmlSerializable,System.Boolean)">
      <summary>此方法支持 .NET Framework 基础结构，但不适合直接在代码中使用。</summary>
      <param name="serializable">对应于 XMLReader 当前位置的 IXmlSerializable 对象。</param>
      <param name="wrappedAny">指明该可序列化的对象是否为包装的。</param>
      <returns>实现 IXmlSerializable 接口的对象，其成员从 XmlReader 的位置填充。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadString(System.String)">
      <summary>生成 <see cref="M:System.Xml.XmlReader.ReadString" /> 方法的调用结果，该结果被追加到输入值。</summary>
      <param name="value">作为 <see cref="M:System.Xml.XmlReader.ReadString" /> 方法调用结果的前缀的字符串。</param>
      <returns>
        <see cref="M:System.Xml.XmlReader.ReadString" /> 方法的调用结果，该结果被追加到输入值。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadString(System.String,System.Boolean)">
      <summary>返回 <see cref="M:System.Xml.XmlReader.ReadString" /> 类的 <see cref="T:System.Xml.XmlReader" /> 方法的调用结果，如果需要则移除空白，然后追加到输入值。</summary>
      <param name="value">要追加到的字符串。</param>
      <param name="trim">如果读取操作的结果应进行修整，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>追加到输入值的读取操作结果。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadTypedNull(System.Xml.XmlQualifiedName)">
      <summary>读取允许空值 (<see langword="xsi:nil = 'true'" />) 的 XML 元素，然后返回一个泛型 <see cref="T:System.Nullable`1" /> 值。</summary>
      <param name="type">
        <see cref="T:System.Xml.XmlQualifiedName" />，表示 <see cref="T:System.Xml.XmlReader" /> 当前位置的简单数据类型。</param>
      <returns>一个泛型 <see cref="T:System.Nullable`1" />，表示空的 XML 值。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadTypedPrimitive(System.Xml.XmlQualifiedName)">
      <summary>获取 <see cref="T:System.Xml.XmlReader" /> 当前定位的 XML 节点的值。</summary>
      <param name="type">
        <see cref="T:System.Xml.XmlQualifiedName" />，表示 <see cref="T:System.Xml.XmlReader" /> 当前位置的简单数据类型。</param>
      <returns>如果值是简单 XML 架构数据类型，则为 .NET Framework 值类型形式的节点值。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadXmlDocument(System.Boolean)">
      <summary>指示 <see cref="T:System.Xml.XmlReader" /> 在其当前位置读取 XML 文档的根元素。</summary>
      <param name="wrapped">如果该方法只在读取元素的开始元素之后读取内容，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Xml.XmlDocument" />，包含已读取的根元素。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadXmlNode(System.Boolean)">
      <summary>指示 <see cref="T:System.Xml.XmlReader" /> 在其当前位置读取 XML 节点。</summary>
      <param name="wrapped">如果只在读取元素的开始元素之后读取内容，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Xml.XmlNode" />，表示已读取的 XML 节点。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Referenced(System.Object)">
      <summary>存储要从 SOAP 编码的 <see langword="multiRef" /> 元素反序列化的对象。</summary>
      <param name="o">要反序列化的对象。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ResolveDynamicAssembly(System.String)">
      <summary>按名称获取动态生成的程序集。</summary>
      <param name="assemblyFullName">程序集的全名。</param>
      <returns>动态生成的 <see cref="T:System.Reflection.Assembly" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ShrinkArray(System.Array,System.Int32,System.Type,System.Boolean)">
      <summary>确保给定的数组或副本不大于指定的长度。</summary>
      <param name="a">要检查的数组。</param>
      <param name="length">数组的最大长度。</param>
      <param name="elementType">数组元素的 <see cref="T:System.Type" />。</param>
      <param name="isNullable">如果为 <see langword="true" />，则可对输入数组返回 <see langword="null" />；否则，返回一个更小的新数组。</param>
      <returns>如果数组足够小，则为现有的 <see cref="T:System.Array" />；否则为包含原始数组元素的一个更小的新数组，其最大大小为 <paramref name="length" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.Boolean)">
      <summary>指示 <see cref="T:System.Xml.XmlReader" /> 读取当前位置的字符串值并以 base-64 字节数组的形式返回该字符串值。</summary>
      <param name="isNull">如果要返回 <see langword="true" />，则为 <see langword="null" />；如果要返回 base-64 字节数组，则为 <see langword="false" />。</param>
      <returns>base-64 字节数组；如果 <paramref name="isNull" /> 参数的值为 <see langword="null" />，则为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.String)">
      <summary>从输入字符串生成一个 base-64 字节数组。</summary>
      <param name="value">要转换为 base-64 字节数组的字符串。</param>
      <returns>base-64 字节数组。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.Boolean)">
      <summary>指示 <see cref="T:System.Xml.XmlReader" /> 读取其当前位置的字符串值并以十六进制字节数组的形式返回该字符串值。</summary>
      <param name="isNull">如果要返回 <see langword="true" />，则为 <see langword="null" />；如果要返回十六进制字节数组，则为 <see langword="false" />。</param>
      <returns>十六进制字节数组；如果 <paramref name="isNull" /> 参数的值为 <see langword="true" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.String)">
      <summary>从输入字符串中生成一个十六进制字节数组。</summary>
      <param name="value">要转换为十六进制字节数组的字符串。</param>
      <returns>一个十六进制字节数组。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToChar(System.String)">
      <summary>从输入字符串生成一个 <see cref="T:System.Char" /> 对象。</summary>
      <param name="value">要转换为 <see cref="T:System.Char" /> 对象的字符串。</param>
      <returns>
        <see cref="T:System.Char" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToDate(System.String)">
      <summary>从输入字符串生成一个 <see cref="T:System.DateTime" /> 对象。</summary>
      <param name="value">要转换为 <see cref="T:System.DateTime" /> 类对象的字符串。</param>
      <returns>
        <see cref="T:System.DateTime" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToDateTime(System.String)">
      <summary>从输入字符串生成一个 <see cref="T:System.DateTime" /> 对象。</summary>
      <param name="value">要转换为 <see cref="T:System.DateTime" /> 对象的字符串。</param>
      <returns>
        <see cref="T:System.DateTime" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToEnum(System.String,System.Collections.Hashtable,System.String)">
      <summary>从由分隔的标识符组成的字符串生成数字枚举值，这些标识符表示枚举器列表中的常数。</summary>
      <param name="value">一个由分隔的标识符组成的字符串，其中每个标识符都表示已经设置的枚举数列表的一个常数。</param>
      <param name="h">由标识符（作为键）和常数（作为整数）组成的 <see cref="T:System.Collections.Hashtable" />。</param>
      <param name="typeName">枚举类型的名称。</param>
      <returns>由枚举值组成的长值，其中枚举值的形式为一系列按位 <see langword="OR" /> 操作。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToTime(System.String)">
      <summary>从表示时间的字符串生成一个 <see cref="T:System.DateTime" />。</summary>
      <param name="value">要转换为 <see cref="T:System.DateTime" /> 对象的字符串。</param>
      <returns>
        <see cref="T:System.DateTime" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlName(System.String)">
      <summary>解码 XML 名称。</summary>
      <param name="value">要解码的 XML 名称。</param>
      <returns>已解码的字符串。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNCName(System.String)">
      <summary>解码 XML 名称。</summary>
      <param name="value">要解码的 XML 名称。</param>
      <returns>已解码的字符串。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmToken(System.String)">
      <summary>解码 XML 名称。</summary>
      <param name="value">要解码的 XML 名称。</param>
      <returns>已解码的字符串。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmTokens(System.String)">
      <summary>解码 XML 名称。</summary>
      <param name="value">要解码的 XML 名称。</param>
      <returns>已解码的字符串。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlQualifiedName(System.String)">
      <summary>从可能包含前缀的名称中获取 <see cref="T:System.Xml.XmlQualifiedName" />。</summary>
      <param name="value">可能包含前缀的名称。</param>
      <returns>
        <see cref="T:System.Xml.XmlQualifiedName" />，表示命名空间限定的 XML 名称。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownAttribute(System.Object,System.Xml.XmlAttribute)">
      <summary>为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> 的当前位置引发 <see cref="T:System.Xml.XmlReader" /> 事件。</summary>
      <param name="o">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 尝试反序列化的对象，该对象随后可通过 <see cref="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized" /> 属性进行访问。</param>
      <param name="attr">
        <see cref="T:System.Xml.XmlAttribute" />，表示要考查的特性。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownAttribute(System.Object,System.Xml.XmlAttribute,System.String)">
      <summary>为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> 的当前位置引发 <see cref="T:System.Xml.XmlReader" /> 事件。</summary>
      <param name="o">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 尝试反序列化的对象，该对象随后可通过 <see cref="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized" /> 属性进行访问。</param>
      <param name="attr">
        <see cref="T:System.Xml.XmlAttribute" />，表示要考查的特性。</param>
      <param name="qnames">以逗号分隔的 XML 限定名列表。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownElement(System.Object,System.Xml.XmlElement)">
      <summary>为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> 的当前位置引发 <see cref="T:System.Xml.XmlReader" /> 事件。</summary>
      <param name="o">要反序列化的 <see cref="T:System.Object" />。</param>
      <param name="elem">为其引发事件的 <see cref="T:System.Xml.XmlElement" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownElement(System.Object,System.Xml.XmlElement,System.String)">
      <summary>为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> 的当前位置引发 <see cref="T:System.Xml.XmlReader" /> 事件。</summary>
      <param name="o">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 尝试反序列化的对象，该对象随后可通过 <see cref="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized" /> 属性进行访问。</param>
      <param name="elem">为其引发事件的 <see cref="T:System.Xml.XmlElement" />。</param>
      <param name="qnames">以逗号分隔的 XML 限定名列表。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownNode(System.Object)">
      <summary>为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> 的当前位置引发 <see cref="T:System.Xml.XmlReader" /> 事件。</summary>
      <param name="o">要反序列化的对象。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownNode(System.Object,System.String)">
      <summary>为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> 的当前位置引发 <see cref="T:System.Xml.XmlReader" /> 事件。</summary>
      <param name="o">要反序列化的对象。</param>
      <param name="qnames">以逗号分隔的 XML 限定名列表。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnreferencedObject(System.String,System.Object)">
      <summary>为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" /> 的当前位置引发 <see cref="T:System.Xml.XmlReader" /> 事件。</summary>
      <param name="id">用于标识未引用对象的唯一字符串，该字符串随后可通过 <see cref="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId" /> 属性进行访问。</param>
      <param name="o">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 尝试反序列化的对象，该对象随后可通过 <see cref="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject" /> 属性进行访问。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.DecodeName">
      <summary>获取或设置一个值，该值确定 XML 字符串是否转换为有效的 .NET Framework 类型名称。</summary>
      <returns>如果 XML 字符串解码为有效的 .NET Framework 类型名称，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Document">
      <summary>获取 XML 文档反序列化到的 XML 文档对象。</summary>
      <returns>表示反序列化 <see cref="T:System.Xml.XmlDocument" /> 数据的 <see cref="T:System.Xml.XmlDocument" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.IsReturnValue">
      <summary>获取或设置一个值，对于 SOAP 1.1 返回值，该值应为 <see langword="true" />。</summary>
      <returns>如果该值是返回值，则为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Reader">
      <summary>获取由 <see cref="T:System.Xml.XmlReader" /> 使用的 <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> 对象。</summary>
      <returns>由 <see cref="T:System.Xml.XmlReader" /> 使用的 <see cref="T:System.Xml.Serialization.XmlSerializationReader" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount">
      <summary>获取 <see cref="T:System.Xml.XmlReader" /> 的当前计数。</summary>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> 的当前计数。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReader.CollectionFixup">
      <summary>保存 <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> 委托实例和方法的输入；还提供方法的参数。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationCollectionFixupCallback,System.Object)">
      <summary>使用回调方法的参数实例化 <see cref="T:System.Xml.Serialization.XmlSerializationReader.CollectionFixup" /> 类的新实例。</summary>
      <param name="collection">回调方法将集合项数组复制到的目标集合。</param>
      <param name="callback">对 <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> 委托进行实例化的方法。</param>
      <param name="collectionItems">回调方法将集合复制到的目标数组。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.Callback">
      <summary>获取对 <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> 委托进行实例化的回调方法。</summary>
      <returns>指向回调方法的 <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> 委托。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.Collection">
      <summary>获取回调方法的 <paramref name="object collection" />。</summary>
      <returns>用于链接地址信息的集合。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.CollectionItems">
      <summary>获取回调方法将集合复制到的目标数组。</summary>
      <returns>回调方法将集合复制到的目标数组。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReader.Fixup">
      <summary>保存 <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> 委托实例，以及该方法的输入；也作为该方法的参数使用。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Fixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationFixupCallback,System.Int32)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializationReader.Fixup" /> 类的新实例。</summary>
      <param name="o">包含值由回叫实现填充的其他对象的对象。</param>
      <param name="callback">对 <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> 委托进行实例化的方法。</param>
      <param name="count">通过 <see cref="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids" /> 属性获取的字符串数组大小。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Fixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationFixupCallback,System.String[])">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializationReader.Fixup" /> 类的新实例。</summary>
      <param name="o">包含值由回叫实现填充的其他对象的对象。</param>
      <param name="callback">对 <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> 委托进行实例化的方法。</param>
      <param name="ids">通过 <see cref="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids" /> 属性获取的字符串数组。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Callback">
      <summary>获取创建 <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> 委托的实例的回叫方法。</summary>
      <returns>创建 <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> 委托的实例的回调方法。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids">
      <summary>为属于 <see cref="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Source" /> 属性的对象（值由回叫实现填入）获取或设置键的数组。</summary>
      <returns>键的数组。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Source">
      <summary>获取或设置包含值由回叫实现填充的其他对象的对象。</summary>
      <returns>包含要填充值的对象的源。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationWriteCallback">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类为了对 SOAP 编码的非根 XML 数据的类型进行序列化而使用的委托。</summary>
      <param name="o">将序列化的对象。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationWriter">
      <summary>表示抽象类，用于控制由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类执行的序列化。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.AddWriteCallback(System.Type,System.String,System.String,System.Xml.Serialization.XmlSerializationWriteCallback)">
      <summary>存储 <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback" /> 委托的实现及其应用的类型，以备以后调用。</summary>
      <param name="type">被序列化的对象的 <see cref="T:System.Type" />。</param>
      <param name="typeName">被序列化的对象的类型的名称。</param>
      <param name="typeNs">被序列化的对象的类型的命名空间。</param>
      <param name="callback">
        <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback" /> 委托的实例。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateChoiceIdentifierValueException(System.String,System.String,System.String,System.String)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示符合 XML 架构 <see langword="choice" /> 元素声明的元素具有意外名称。</summary>
      <param name="value">无效的名称。</param>
      <param name="identifier">名称所属的 <see langword="choice" /> 元素声明。</param>
      <param name="name">元素需要的本地名称。</param>
      <param name="ns">元素需要的命名空间。</param>
      <returns>新创建的异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidAnyTypeException(System.Object)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 无效地应用于某个成员；只有 <see cref="T:System.Xml.XmlNode" /> 类型的成员或从 <see cref="T:System.Xml.XmlNode" /> 派生的成员才可有效应用。</summary>
      <param name="o">表示无效成员的对象。</param>
      <returns>新创建的异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidAnyTypeException(System.Type)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 无效地应用于某个成员；只有 <see cref="T:System.Xml.XmlNode" /> 类型的成员或从 <see cref="T:System.Xml.XmlNode" /> 派生的成员才可有效应用。</summary>
      <param name="type">无效的 <see cref="T:System.Type" />。</param>
      <returns>新创建的异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidChoiceIdentifierValueException(System.String,System.String)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示在应用 XML 架构 <see langword="choice" /> 元素声明的位置写入数组时操作失败。</summary>
      <param name="type">正在序列化的类型。</param>
      <param name="identifier">
        <see langword="choice" /> 元素声明的名称。</param>
      <returns>新创建的异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidEnumValueException(System.Object,System.String)">
      <summary>为一个无效的枚举值创建 <see cref="T:System.InvalidOperationException" />。</summary>
      <param name="value">表示无效枚举的对象。</param>
      <param name="typeName">XML 类型名。</param>
      <returns>新创建的异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateMismatchChoiceException(System.String,System.String,System.String)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示 XML 元素的某个值与枚举类型不匹配。</summary>
      <param name="value">无效的值。</param>
      <param name="elementName">具有无效值的 XML 元素的名称。</param>
      <param name="enumValue">有效值。</param>
      <returns>新创建的异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownAnyElementException(System.String,System.String)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示无法处理某个应符合 XML 架构 <see langword="any" /> 元素声明的 XML 元素。</summary>
      <param name="name">无法处理的 XML 元素。</param>
      <param name="ns">XML 元素的命名空间。</param>
      <returns>新创建的异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Object)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示被序列化的类型的使用方式无效，或者意外遇到该类型。</summary>
      <param name="o">无法序列化其类型的对象。</param>
      <returns>新创建的异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Type)">
      <summary>创建一个 <see cref="T:System.InvalidOperationException" />，该异常指示被序列化的类型的使用方式无效，或者意外遇到该类型。</summary>
      <param name="type">无法序列化的类型。</param>
      <returns>新创建的异常。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayBase64(System.Byte[])">
      <summary>处理 base-64 字节数组。</summary>
      <param name="value">base-64 <see cref="T:System.Byte" /> 数组。</param>
      <returns>作为参数传入的字节数组。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayHex(System.Byte[])">
      <summary>从输入的十六进制字节数组生成一个字符串。</summary>
      <param name="value">要转换为字符串的十六进制字节数组。</param>
      <returns>转换为字符串的字节数组值。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromChar(System.Char)">
      <summary>从输入的 <see cref="T:System.Char" /> 生成一个字符串。</summary>
      <param name="value">要转换为字符串的 <see cref="T:System.Char" />。</param>
      <returns>转换为字符串的 <see cref="T:System.Char" /> 值。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDate(System.DateTime)">
      <summary>从 <see cref="T:System.DateTime" /> 对象生成一个字符串。</summary>
      <param name="value">要转换为字符串的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DateTime" /> 的字符串表示形式，该对象显示日期但不显示时间。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDateTime(System.DateTime)">
      <summary>从输入的 <see cref="T:System.DateTime" /> 生成一个字符串。</summary>
      <param name="value">要转换为字符串的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DateTime" /> 的字符串表示形式，该对象显示日期和时间。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromEnum(System.Int64,System.String[],System.Int64[])">
      <summary>生成一个由分隔的标识符组成的字符串，这些标识符表示已经设置的枚举成员。</summary>
      <param name="value">形式为一系列按位 <see langword="OR" /> 运算的枚举值。</param>
      <param name="values">枚举的名称值。</param>
      <param name="ids">枚举的常数值。</param>
      <returns>一个由分隔的标识符组成的字符串，其中每个标识符都表示已经设置的枚举器列表的一个成员。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromEnum(System.Int64,System.String[],System.Int64[],System.String)">
      <summary>接受一个数字枚举值以及该枚举的枚举列表中的名称和常数，返回一个由分隔的标识符组成的字符串，这些标识符表示已经设置的枚举成员。</summary>
      <param name="value">形式为一系列按位 <see langword="OR" /> 运算的枚举值。</param>
      <param name="values">枚举的值。</param>
      <param name="ids">枚举的常数。</param>
      <param name="typeName">类型的名称</param>
      <returns>一个由分隔的标识符组成的字符串，其中每一项都是由按位运算设置的一个值。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromTime(System.DateTime)">
      <summary>从 <see cref="T:System.DateTime" /> 对象生成一个字符串。</summary>
      <param name="value">转换为字符串的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DateTime" /> 对象的字符串表示形式，该对象显示时间但不显示日期。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlName(System.String)">
      <summary>通过使用转义序列替换无效字符，对一个有效的 XML 名称进行编码。</summary>
      <param name="name">要用作 XML 名称的字符串。</param>
      <returns>已编码的字符串。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNCName(System.String)">
      <summary>通过使用转义序列替换无效字符，对一个有效的 XML 本地名称进行编码。</summary>
      <param name="ncName">要用作本地（非限定）XML 名称的字符串。</param>
      <returns>已编码的字符串。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmToken(System.String)">
      <summary>对 XML 名称进行编码。</summary>
      <param name="nmToken">要进行编码的 XML 名称。</param>
      <returns>已编码的字符串。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmTokens(System.String)">
      <summary>将以空格分隔的 XML 名称序列编码为单个 XML 名称。</summary>
      <param name="nmTokens">要进行编码的以空格分隔的 XML 名称序列。</param>
      <returns>已编码的字符串。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName)">
      <summary>返回一个 XML 限定名，其中无效字符已由转义序列替换。</summary>
      <param name="xmlQualifiedName">
        <see cref="T:System.Xml.XmlQualifiedName" />，表示要写入的 XML。</param>
      <returns>一个 XML 限定名，其中无效字符已由转义序列替换。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName,System.Boolean)">
      <summary>生成一个可以写入为 XML 限定名的字符串，其中无效字符已由转义序列替换。</summary>
      <param name="xmlQualifiedName">
        <see cref="T:System.Xml.XmlQualifiedName" />，表示要写入的 XML。</param>
      <param name="ignoreEmpty">如果忽略字符串中的空格，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个 XML 限定名，其中无效字符已由转义序列替换。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.InitCallbacks">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback" /> 委托的一个实例，以序列化 SOAP 编码的 XML 数据。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.ResolveDynamicAssembly(System.String)">
      <summary>按名称获取动态生成的程序集。</summary>
      <param name="assemblyFullName">程序集的全名。</param>
      <returns>动态生成的程序集。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.TopLevelElement">
      <summary>仅在序列化 SOAP 编码的 SOAP 消息时初始化对象引用。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.Byte[])">
      <summary>指示 <see cref="T:System.Xml.XmlWriter" /> 对象写入未为其名称指定命名空间的 XML 属性。</summary>
      <param name="localName">XML 特性的本地名称。</param>
      <param name="value">XML 特性的值，形式为字节数组。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String)">
      <summary>指示 <see cref="T:System.Xml.XmlWriter" /> 写入未为其名称指定命名空间的 XML 属性。</summary>
      <param name="localName">XML 特性的本地名称。</param>
      <param name="value">字符串形式的 XML 特性值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.Byte[])">
      <summary>指示 <see cref="T:System.Xml.XmlWriter" /> 对象写入 XML 属性。</summary>
      <param name="localName">XML 特性的本地名称。</param>
      <param name="ns">XML 特性的命名空间。</param>
      <param name="value">XML 特性的值，形式为字节数组。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String)">
      <summary>写入 XML 属性。</summary>
      <param name="localName">XML 特性的本地名称。</param>
      <param name="ns">XML 特性的命名空间。</param>
      <param name="value">字符串形式的 XML 特性值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String,System.String)">
      <summary>写入 XML 属性，其中命名空间前缀是手动提供的。</summary>
      <param name="prefix">要写入的命名空间前缀。</param>
      <param name="localName">XML 特性的本地名称。</param>
      <param name="ns">前缀所表示的命名空间。</param>
      <param name="value">字符串形式的 XML 特性值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementEncoded(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>在命名 XML 元素体内写入 XML 节点对象。</summary>
      <param name="node">要写入的 XML 节点，可能是一个子 XML 元素。</param>
      <param name="name">要写入的 XML 父元素的本地名称。</param>
      <param name="ns">要写入的 XML 父元素的命名空间。</param>
      <param name="isNullable">若要在要序列化的对象为 <see langword="true" /> 时写入 <see langword="xsi:nil='true'" /> 特性，则为 <see langword="null" />；否则为 <see langword="false" />。</param>
      <param name="any">若要指示节点（如果是 XML 元素）遵守 XML 架构 <see langword="true" /> 元素声明，则为 <see langword="any" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementLiteral(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>指示 <see cref="T:System.Xml.XmlWriter" /> 对象在命名 XML 元素体内写入 <see cref="T:System.Xml.XmlNode" /> 对象。</summary>
      <param name="node">要写入的 XML 节点，可能是一个子 XML 元素。</param>
      <param name="name">要写入的 XML 父元素的本地名称。</param>
      <param name="ns">要写入的 XML 父元素的命名空间。</param>
      <param name="isNullable">若要在要序列化的对象为 <see langword="true" /> 时写入 <see langword="xsi:nil='true'" /> 特性，则为 <see langword="null" />；否则为 <see langword="false" />。</param>
      <param name="any">若要指示节点（如果是 XML 元素）遵守 XML 架构 <see langword="true" /> 元素声明，则为 <see langword="any" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>写入一个其主体中具有指定限定名的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="ns">XML 元素的命名空间。</param>
      <param name="value">要在元素文本中写入的名称（如果是命名空间限定的，则使用其前缀）。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>写入一个其主体中具有指定限定名的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="ns">XML 元素的命名空间。</param>
      <param name="value">要在元素文本中写入的名称（如果是命名空间限定的，则使用其前缀）。</param>
      <param name="xsiType">要写入 <see langword="xsi:type" /> 特性的“XML 架构”数据类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName)">
      <summary>写入一个其主体中具有指定限定名的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="value">要在元素文本中写入的名称（如果是命名空间限定的，则使用其前缀）。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>写入一个其主体中具有指定限定名的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="value">要在元素文本中写入的名称（如果是命名空间限定的，则使用其前缀）。</param>
      <param name="xsiType">要写入 <see langword="xsi:type" /> 特性的“XML 架构”数据类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String)">
      <summary>写入一个其主体中具有指定值的 XML 元素。</summary>
      <param name="localName">要写入的 XML 元素的本地名称，该名称不具有命名空间限定。</param>
      <param name="value">XML 元素的文本值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>写入一个其主体中具有指定值的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="ns">XML 元素的命名空间。</param>
      <param name="value">XML 元素的文本值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>写入一个其主体中具有指定值的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="ns">XML 元素的命名空间。</param>
      <param name="value">XML 元素的文本值。</param>
      <param name="xsiType">要写入 <see langword="xsi:type" /> 特性的“XML 架构”数据类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>写入一个其主体中具有指定值的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="value">XML 元素的文本值。</param>
      <param name="xsiType">要写入 <see langword="xsi:type" /> 特性的“XML 架构”数据类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[])">
      <summary>写入一个其主体中具有指定值的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="value">XML 元素的文本值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[],System.Xml.XmlQualifiedName)">
      <summary>写入一个其主体中具有指定值的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="value">XML 元素的文本值。</param>
      <param name="xsiType">要写入 <see langword="xsi:type" /> 特性的“XML 架构”数据类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String)">
      <summary>写入一个其主体中具有指定值的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="value">XML 元素的文本值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[])">
      <summary>写入一个其主体中具有指定值的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="ns">XML 元素的命名空间。</param>
      <param name="value">XML 元素的文本值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
      <summary>写入一个其主体中具有指定值的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="ns">XML 元素的命名空间。</param>
      <param name="value">XML 元素的文本值。</param>
      <param name="xsiType">要写入 <see langword="xsi:type" /> 特性的“XML 架构”数据类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String)">
      <summary>写入一个其主体中具有指定值的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="ns">XML 元素的命名空间。</param>
      <param name="value">XML 元素的文本值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>写入一个其主体中具有指定值的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="ns">XML 元素的命名空间。</param>
      <param name="value">XML 元素的文本值。</param>
      <param name="xsiType">要写入 <see langword="xsi:type" /> 特性的“XML 架构”数据类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>写入一个其主体中具有指定值的 XML 元素。</summary>
      <param name="localName">XML 元素的本地名称。</param>
      <param name="value">XML 元素的文本值。</param>
      <param name="xsiType">要写入 <see langword="xsi:type" /> 特性的“XML 架构”数据类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String)">
      <summary>写入一个其主体为空的 XML 元素。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String,System.String)">
      <summary>写入一个其主体为空的 XML 元素。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement">
      <summary>写入一个 <see langword="&lt;closing&gt;" /> 元素标记。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement(System.Object)">
      <summary>写入一个 <see langword="&lt;closing&gt;" /> 元素标记。</summary>
      <param name="o">将序列化的对象。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteId(System.Object)">
      <summary>写入一个在 SOAP 编码的 <see langword="id" /> 元素中出现的 <see langword="multiRef" /> 特性。</summary>
      <param name="o">将序列化的对象。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNamespaceDeclarations(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>写入该命名空间声明特性。</summary>
      <param name="xmlns">要声明的 XML 命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameEncoded(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>写入一个其主体包含有效 XML 限定名的 XML 元素。 如果字符串的值是 <see langword="xsi:nil='true'" />，则 <see cref="T:System.Xml.XmlWriter" /> 插入一个 <see langword="null" /> 属性。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="value">要写入 XML 元素体的 XML 限定名。</param>
      <param name="xsiType">要写入 <see langword="xsi:type" /> 特性的“XML 架构”数据类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameLiteral(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>写入一个其主体包含有效 XML 限定名的 XML 元素。 如果字符串的值是 <see langword="xsi:nil='true'" />，则 <see cref="T:System.Xml.XmlWriter" /> 插入一个 <see langword="null" /> 属性。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="value">要写入 XML 元素体的 XML 限定名。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncoded(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>写入一个 XML 元素，该元素包含一个作为主体的字符串。 如果字符串的值是 <see langword="xsi:nil='true'" />，则 <see cref="T:System.Xml.XmlWriter" /> 插入一个 <see langword="null" /> 属性。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="value">要写入 XML 元素体的字符串。</param>
      <param name="xsiType">要写入 <see langword="xsi:type" /> 特性的“XML 架构”数据类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
      <summary>写入一个作为 XML 元素主体的字节数组。 如果字符串的值是 <see langword="xsi:nil='true'" />，则 <see cref="T:System.Xml.XmlWriter" /> 插入一个 <see langword="null" /> 属性。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="value">要写入 XML 元素体的字节数组。</param>
      <param name="xsiType">要写入 <see langword="xsi:type" /> 特性的“XML 架构”数据类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>写入一个 XML 元素，该元素包含一个作为主体的字符串。 如果字符串的值是 <see langword="xsi:nil='true'" />，则 <see cref="T:System.Xml.XmlWriter" /> 插入一个 <see langword="null" /> 属性。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="value">要写入 XML 元素体的字符串。</param>
      <param name="xsiType">要写入 <see langword="xsi:type" /> 特性的“XML 架构”数据类型的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteral(System.String,System.String,System.String)">
      <summary>写入一个 XML 元素，该元素包含一个作为主体的字符串。 如果字符串的值是 <see langword="xsi:nil='true'" />，则 <see cref="T:System.Xml.XmlWriter" /> 插入一个 <see langword="null" /> 属性。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="value">要写入 XML 元素体的字符串。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.Byte[])">
      <summary>写入一个作为 XML 元素主体的字节数组。 如果字符串的值是 <see langword="xsi:nil='true'" />，则 <see cref="T:System.Xml.XmlWriter" /> 插入一个 <see langword="null" /> 属性。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="value">要写入 XML 元素体的字节数组。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.String)">
      <summary>写入一个 XML 元素，该元素包含一个作为主体的字符串。 如果字符串的值是 <see langword="xsi:nil='true'" />，则 <see cref="T:System.Xml.XmlWriter" /> 插入一个 <see langword="null" /> 属性。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="value">要写入 XML 元素体的字符串。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String)">
      <summary>写入一个具有 <see langword="xsi:nil='true'" /> 属性的 XML 元素。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String,System.String)">
      <summary>写入一个具有 <see langword="xsi:nil='true'" /> 属性的 XML 元素。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String)">
      <summary>写入一个具有 <see langword="xsi:nil='true'" /> 属性的 XML 元素。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String,System.String)">
      <summary>写入一个具有 <see langword="xsi:nil='true'" /> 属性的 XML 元素。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object)">
      <summary>写入一个 SOAP 消息 XML 元素，它可以包含对给定对象的 <see langword="&lt;multiRef&gt;" /> XML 元素的引用。</summary>
      <param name="n">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="o">当前 XML 元素或当前元素所引用的 <see langword="multiRef" /> 元素中被序列化的对象。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type)">
      <summary>写入一个 SOAP 消息 XML 元素，它可以包含对给定对象的 <see langword="&lt;multiRef&gt;" /> XML 元素的引用。</summary>
      <param name="n">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="o">当前 XML 元素或当前元素所引用的 <see langword="multiRef" /> 元素中被序列化的对象。</param>
      <param name="ambientType">存储在对象的类型映射中的类型（与通过 <see langword="typeof" /> 操作直接找到的对象的类型相对）。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type,System.Boolean)">
      <summary>写入一个 SOAP 消息 XML 元素，它可以包含对给定对象的 <see langword="&lt;multiRef&gt;" /> XML 元素的引用。</summary>
      <param name="n">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="o">当前 XML 元素或当前元素所引用的 <see langword="multiRef" /> 元素中被序列化的对象。</param>
      <param name="ambientType">存储在对象的类型映射中的类型（与通过 <see langword="typeof" /> 操作直接找到的对象的类型相对）。</param>
      <param name="suppressReference">如果直接将对象序列化为 XML 元素，而不是使该元素引用另一个包含该数据的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type,System.Boolean,System.Boolean)">
      <summary>写入一个 SOAP 消息 XML 元素，它可以包含对给定对象的 <see langword="multiRef" /> XML 元素的引用。</summary>
      <param name="n">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="o">当前 XML 元素或当前元素所引用的 <see langword="multiRef" /> 元素中被序列化的对象。</param>
      <param name="ambientType">存储在对象的类型映射中的类型（与通过 <see langword="typeof" /> 操作直接找到的对象的类型相对）。</param>
      <param name="suppressReference">如果直接将对象序列化为 XML 元素，而不是使该元素引用另一个包含该数据的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="isNullable">若要在要序列化的对象为 <see langword="true" /> 时写入 <see langword="xsi:nil='true'" /> 特性，则为 <see langword="null" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencedElements">
      <summary>将对象序列化为 SOAP 编码的 SOAP 消息 <see langword="multiRef" /> XML 元素。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencingElement(System.String,System.String,System.Object)">
      <summary>写入一个 SOAP 消息 XML 元素，该元素包含对给定对象的 <see langword="multiRef" /> 元素的引用。</summary>
      <param name="n">正被写入的引用元素的本地名称。</param>
      <param name="ns">正被写入的引用元素的命名空间。</param>
      <param name="o">将序列化的对象。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencingElement(System.String,System.String,System.Object,System.Boolean)">
      <summary>写入一个 SOAP 消息 XML 元素，该元素包含对给定对象的 <see langword="multiRef" /> 元素的引用。</summary>
      <param name="n">正被写入的引用元素的本地名称。</param>
      <param name="ns">正被写入的引用元素的命名空间。</param>
      <param name="o">将序列化的对象。</param>
      <param name="isNullable">若要在要序列化的对象为 <see langword="true" /> 时写入 <see langword="xsi:nil='true'" /> 特性，则为 <see langword="null" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteRpcResult(System.String,System.String)">
      <summary>使用指定的限定名将 SOAP 1.2 RPC 结果元素写入其体中。</summary>
      <param name="name">结果体的本地名称。</param>
      <param name="ns">结果体的命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(System.Xml.Serialization.IXmlSerializable,System.String,System.String,System.Boolean)">
      <summary>写入一个对象，该对象使用自定义 XML 格式作为 XML 元素。</summary>
      <param name="serializable">实现 <see cref="T:System.Xml.Serialization.IXmlSerializable" /> 接口的对象，该接口使用自定义 XML 格式。</param>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="isNullable">如果 <see cref="T:System.Xml.Serialization.IXmlSerializable" /> 类对象是 <see langword="true" /> 时写入 <see langword="xsi:nil='true'" /> 特性，则为 <see langword="null" />；否则，为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(System.Xml.Serialization.IXmlSerializable,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>指示 <see cref="T:System.Xml.XmlNode" /> 写入一个对象，该对象使用自定义 XML 格式作为 XML 元素。</summary>
      <param name="serializable">实现 <see cref="T:System.Xml.Serialization.IXmlSerializable" /> 接口的对象，该接口使用自定义 XML 格式。</param>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="isNullable">如果为 <see langword="true" />，则在 <see cref="T:System.Xml.Serialization.IXmlSerializable" /> 对象是 <see langword="xsi:nil='true'" /> 时写入 <see langword="null" /> 特性，则为 ；否则，为<see langword="false" />。</param>
      <param name="wrapped">如果忽略写入开始元素标记，则为 <see langword="true" />；如果写入开始元素标记，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartDocument">
      <summary>如果编写器位于 XML 文档的开头，则写入 XML 声明。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String)">
      <summary>写入一个包括任何属性的开始元素标记。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String)">
      <summary>写入一个包括任何属性的开始元素标记。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Boolean)">
      <summary>写入一个包括任何属性的开始元素标记。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="writePrefixed">若要在指定的命名空间无可用元素名称时写入带有前缀的元素名称，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object)">
      <summary>写入一个包括任何属性的开始元素标记。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="o">被序列化为 XML 元素的对象。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object,System.Boolean)">
      <summary>写入一个包括任何属性的开始元素标记。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="o">被序列化为 XML 元素的对象。</param>
      <param name="writePrefixed">若要在指定的命名空间无可用元素名称时写入带有前缀的元素名称，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object,System.Boolean,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>写入一个包括任何属性的开始元素标记。</summary>
      <param name="name">要写入的 XML 元素的本地名称。</param>
      <param name="ns">要写入的 XML 元素的命名空间。</param>
      <param name="o">被序列化为 XML 元素的对象。</param>
      <param name="writePrefixed">若要在指定的命名空间无可用元素名称时写入带有前缀的元素名称，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="xmlns">
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 类的实例，包含要在生成的 XML 中使用的前缀和命名空间对。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteTypedPrimitive(System.String,System.String,System.Object,System.Boolean)">
      <summary>写入一个 XML 元素，其文本正文是一个简单 XML 架构数据类型的值。</summary>
      <param name="name">要写入的元素的本地名称。</param>
      <param name="ns">要写入的元素的命名空间。</param>
      <param name="o">要序列化到元素体中的对象。</param>
      <param name="xsiType">如果 XML 元素使用 <see langword="true" /> 特性显式指定文本值的类型，则为 <see langword="xsi:type" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.Byte[])">
      <summary>写入 base-64 字节数组。</summary>
      <param name="value">要写入的字节数组。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.String)">
      <summary>写入指定的字符串值。</summary>
      <param name="value">要写入的字符串的值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXmlAttribute(System.Xml.XmlNode)">
      <summary>将指定的 <see cref="T:System.Xml.XmlNode" /> 写入为一个 XML 特性。</summary>
      <param name="node">要编写的 XML 名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXmlAttribute(System.Xml.XmlNode,System.Object)">
      <summary>将指定的 <see cref="T:System.Xml.XmlNode" /> 对象写入为一个 XML 特性。</summary>
      <param name="node">要编写的 XML 名称。</param>
      <param name="container">一个 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 对象（或 <see langword="null" />），用于为 Web Services 描述语言 (WSDL) 命名空间 ("http://schemas.xmlsoap.org/wsdl/") 中的 <see langword="arrayType" /> 属性生成限定名值。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXsiType(System.String,System.String)">
      <summary>为要序列化为文档的 XML 元素写入一个 <see langword="xsi:type" /> 属性。</summary>
      <param name="name">XML 架构数据类型的本地名称。</param>
      <param name="ns">XML 架构数据类型的命名空间。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.EscapeName">
      <summary>获取或设置一个值，该值指示 <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> 方法是否用于写入有效的 XML。</summary>
      <returns>如果 <see cref="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName)" /> 方法返回一个编码名称，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.Namespaces">
      <summary>获取或设置 XML 限定名对象的列表，这些对象包含用于在 XML 文档中生成限定名的命名空间和前缀。</summary>
      <returns>包含命名空间和前缀对的 <see cref="T:System.Collections.ArrayList" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.Writer">
      <summary>获取或设置由 <see cref="T:System.Xml.XmlWriter" /> 使用的自定义 <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />。</summary>
      <returns>由类实例使用的 <see cref="T:System.Xml.XmlWriter" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializer">
      <summary>在对象和 XML 文档之间进行序列化和反序列化操作。 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 使您得以控制如何将对象编码到 XML 中。</summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute">
      <summary>当 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 在反序列化过程中遇到未知类型的 XML 特性时发生。</summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
      <summary>当 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 在反序列化过程中遇到未知类型的 XML 元素时发生。</summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownNode">
      <summary>当 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 在反序列化过程中遇到未知类型的 XML 节点时发生。</summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
      <summary>在反序列化 SOAP 编码的 XML 流的过程中发生，此时 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 遇到未使用（或未引用）的识别类型。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的新实例，该类可以将指定类型的对象序列化为 XML 文档，也可以将 XML 文档反序列化为指定类型的对象。</summary>
      <param name="type">此 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的对象的类型。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的新实例，该类可以将指定类型的对象序列化为 XML 文档，也可以将 XML 文档反序列化为指定类型的对象。 指定所有 XML 元素的默认命名空间。</summary>
      <param name="type">此 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的对象的类型。</param>
      <param name="defaultNamespace">用于所有 XML 元素的默认命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的新实例，该类可以将指定类型的对象序列化为 XML 文档，也可以将 XML 文档反序列化为指定类型的对象。 如果属性或字段返回一个数组，则 <paramref name="extraTypes" /> 参数指定可插入到该数组的对象。</summary>
      <param name="type">此 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的对象的类型。</param>
      <param name="extraTypes">要序列化的其他对象类型的 <see cref="T:System.Type" /> 数组。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的新实例，该类可以将指定类型的对象序列化为 XML 文档，也可以将 XML 文档反序列化为指定类型的对象。 要序列化的每个对象本身可包含类的实例，此重载可使用其他类重写这些实例。</summary>
      <param name="type">要序列化的对象的类型。</param>
      <param name="overrides">
        <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的新实例，该类可将 <see cref="T:System.Object" /> 类型的对象序列化为 XML 文档实例，并可将 XML 文档实例反序列化为 <see cref="T:System.Object" /> 类型的对象。 要序列化的每个对象本身可包含类的实例，此重载可使用其他类重写这些实例。 此重载还指定所有 XML 元素的默认命名空间和用作 XML 根元素的类。</summary>
      <param name="type">此 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的对象的类型。</param>
      <param name="overrides">一个 <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />，它扩展或重写 <paramref name="type" /> 参数中指定类的行为。</param>
      <param name="extraTypes">要序列化的其他对象类型的 <see cref="T:System.Type" /> 数组。</param>
      <param name="root">定义 XML 根元素属性的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />。</param>
      <param name="defaultNamespace">XML 文档中所有 XML 元素的默认命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的新实例，该类可将 <see cref="T:System.Object" /> 类型的对象序列化为 XML 文档实例，并可将 XML 文档实例反序列化为 <see cref="T:System.Object" /> 类型的对象。 要序列化的每个对象本身可包含类的实例，此重载可使用其他类重写这些实例。 此重载还指定所有 XML 元素的默认命名空间和用作 XML 根元素的类。</summary>
      <param name="type">此 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的对象的类型。</param>
      <param name="overrides">一个 <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />，它扩展或重写 <paramref name="type" /> 参数中指定类的行为。</param>
      <param name="extraTypes">要序列化的其他对象类型的 <see cref="T:System.Type" /> 数组。</param>
      <param name="root">定义 XML 根元素属性的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />。</param>
      <param name="defaultNamespace">XML 文档中所有 XML 元素的默认命名空间。</param>
      <param name="location">该类型的位置。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的新实例，该类可以将指定类型的对象序列化为 XML 文档，也可以将 XML 文档反序列化为指定类型的对象。 还可以指定作为 XML 根元素使用的类。</summary>
      <param name="type">此 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可序列化的对象的类型。</param>
      <param name="root">表示 XML 根元素的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
      <summary>使用将一个类型映射到另一个类型的对象来初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的实例。</summary>
      <param name="xmlTypeMapping">将一种类型映射到另一种类型的 <see cref="T:System.Xml.Serialization.XmlTypeMapping" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否可以反序列化指定的 XML 文档。</summary>
      <param name="xmlReader">指向要反序列化的文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>如果此 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可以反序列化 <see cref="T:System.Xml.XmlReader" /> 指向的对象，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CreateReader">
      <summary>返回一个对象，该对象用于读取要进行序列化的 XML 文档。</summary>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该方法时，为访问该方法进行的任何尝试。</exception>
      <returns>一个用于读取 XML 文档的 <see cref="T:System.Xml.Serialization.XmlSerializationReader" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CreateWriter">
      <summary>当在派生类中重写时，返回用于序列化对象的编写器。</summary>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该方法时，为访问该方法进行的任何尝试。</exception>
      <returns>实现 <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> 类的实例。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
      <summary>反序列化指定 <see cref="T:System.IO.Stream" /> 包含的 XML 文档。</summary>
      <param name="stream">包含要反序列化的 XML 文档的 <see cref="T:System.IO.Stream" />。</param>
      <returns>正被反序列化的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
      <summary>反序列化指定 <see cref="T:System.IO.TextReader" /> 包含的 XML 文档。</summary>
      <param name="textReader">包含要反序列化的 XML 文档的 <see cref="T:System.IO.TextReader" />。</param>
      <exception cref="T:System.InvalidOperationException">反序列化期间发生错误。 使用 <see cref="P:System.Exception.InnerException" /> 属性时可使用原始异常。</exception>
      <returns>正被反序列化的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.Serialization.XmlSerializationReader)">
      <summary>反序列化指定 <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> 包含的 XML 文档。</summary>
      <param name="reader">包含要反序列化的 XML 文档的 <see cref="T:System.Xml.Serialization.XmlSerializationReader" />。</param>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该方法时，为访问该方法进行的任何尝试。</exception>
      <returns>已反序列化的对象。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
      <summary>反序列化指定 <see cref="T:System.Xml.XmlReader" /> 包含的 XML 文档。</summary>
      <param name="xmlReader">包含要反序列化的 XML 文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.InvalidOperationException">反序列化期间发生错误。 使用 <see cref="P:System.Exception.InnerException" /> 属性时可使用原始异常。</exception>
      <returns>正被反序列化的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
      <summary>反序列化指定 <see cref="T:System.Xml.XmlReader" /> 和编码样式包含的 XML 文档。</summary>
      <param name="xmlReader">包含要反序列化的 XML 文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="encodingStyle">序列化的 XML 的编码样式。</param>
      <exception cref="T:System.InvalidOperationException">反序列化期间发生错误。 使用 <see cref="P:System.Exception.InnerException" /> 属性时可使用原始异常。</exception>
      <returns>已反序列化的对象。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 包含的数据反序列化该对象。</summary>
      <param name="xmlReader">
        <see cref="T:System.Xml.XmlReader" /> 类的实例，用于读取文档。</param>
      <param name="encodingStyle">使用的编码方式。</param>
      <param name="events">
        <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> 类的实例。</param>
      <returns>要反序列化的对象。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)">
      <summary>反序列化一个由指定的 <see cref="T:System.Xml.XmlReader" /> 包含的 XML 文档，并允许重写反序列化过程中发生的事件。</summary>
      <param name="xmlReader">包含要反序列化的文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="events">
        <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> 类的实例。</param>
      <returns>正被反序列化的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[])">
      <summary>返回从 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 对象的数组创建的 <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> 对象的数组。</summary>
      <param name="mappings">将一种类型映射到另一种类型的 <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> 的数组。</param>
      <returns>一个 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 对象数组。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Type)">
      <summary>从指定的映射返回 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的实例。</summary>
      <param name="mappings">一个 <see cref="T:System.Xml.Serialization.XmlMapping" /> 对象数组。</param>
      <param name="type">反序列化的对象的 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的实例。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
      <summary>返回从类型数组创建的 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 对象的数组。</summary>
      <param name="types">一个 <see cref="T:System.Type" /> 对象数组。</param>
      <returns>一个 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 对象数组。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)">
      <summary>返回程序集的名称，该程序集包含专门为序列化或反序列化特定类型创建的 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的一个或多个版本。</summary>
      <param name="type">正在进行反序列化的 <see cref="T:System.Type" />。</param>
      <returns>包含该类型的 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的程序集的名称。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)">
      <summary>返回程序集的名称，该程序集包含指定命名空间中指定类型的序列化程序。</summary>
      <param name="type">您关注的 <see cref="T:System.Type" />。</param>
      <param name="defaultNamespace">类型的命名空间。</param>
      <returns>程序集的名称，该程序集包含专门生成的序列化程序。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
      <summary>使用指定的 <see cref="T:System.Object" /> 序列化指定的 <see cref="T:System.IO.Stream" /> 并将 XML 文档写入文件。</summary>
      <param name="stream">用于编写 XML 文档的 <see cref="T:System.IO.Stream" />。</param>
      <param name="o">要序列化的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.InvalidOperationException">序列化期间发生错误。 使用 <see cref="P:System.Exception.InnerException" /> 属性时可使用原始异常。</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>使用引用指定命名空间的指定 <see cref="T:System.IO.Stream" /> 序列化指定的 <see cref="T:System.Object" /> 并将 XML 文档写入文件。</summary>
      <param name="stream">用于编写 XML 文档的 <see cref="T:System.IO.Stream" />。</param>
      <param name="o">要序列化的 <see cref="T:System.Object" />。</param>
      <param name="namespaces">该对象所引用的 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />。</param>
      <exception cref="T:System.InvalidOperationException">序列化期间发生错误。 使用 <see cref="P:System.Exception.InnerException" /> 属性时可使用原始异常。</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>使用指定的 <see cref="T:System.Object" /> 序列化指定的 <see cref="T:System.IO.TextWriter" /> 并将 XML 文档写入文件。</summary>
      <param name="textWriter">用于编写 XML 文档的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">要序列化的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>使用指定的 <see cref="T:System.Object" /> 和指定命名空间序列化指定的 <see cref="T:System.IO.TextWriter" /> 并将 XML 文档写入文件。</summary>
      <param name="textWriter">用于编写 XML 文档的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">要序列化的 <see cref="T:System.Object" />。</param>
      <param name="namespaces">包含生成的 XML 文档的命名空间的 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />。</param>
      <exception cref="T:System.InvalidOperationException">序列化期间发生错误。 使用 <see cref="P:System.Exception.InnerException" /> 属性时可使用原始异常。</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializationWriter)">
      <summary>使用指定的 <see cref="T:System.Object" /> 序列化指定的 <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> 并将 XML 文档写入文件。</summary>
      <param name="o">要序列化的 <see cref="T:System.Object" />。</param>
      <param name="writer">用于编写 XML 文档的 <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />。</param>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该方法时，为访问该方法进行的任何尝试。</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
      <summary>使用指定的 <see cref="T:System.Object" /> 序列化指定的 <see cref="T:System.Xml.XmlWriter" /> 并将 XML 文档写入文件。</summary>
      <param name="xmlWriter">用于编写 XML 文档的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="o">要序列化的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.InvalidOperationException">序列化期间发生错误。 使用 <see cref="P:System.Exception.InnerException" /> 属性时可使用原始异常。</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>使用指定的 <see cref="T:System.Object" /> 和指定命名空间序列化指定的 <see cref="T:System.Xml.XmlWriter" /> 并将 XML 文档写入文件。</summary>
      <param name="xmlWriter">用于编写 XML 文档的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="o">要序列化的 <see cref="T:System.Object" />。</param>
      <param name="namespaces">该对象所引用的 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />。</param>
      <exception cref="T:System.InvalidOperationException">序列化期间发生错误。 使用 <see cref="P:System.Exception.InnerException" /> 属性时可使用原始异常。</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 和指定命名空间及编码样式序列化指定对象并将 XML 文档写入文件。</summary>
      <param name="xmlWriter">用于编写 XML 文档的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="o">要序列化的对象。</param>
      <param name="namespaces">该对象所引用的 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />。</param>
      <param name="encodingStyle">序列化的 XML 的编码样式。</param>
      <exception cref="T:System.InvalidOperationException">序列化期间发生错误。 使用 <see cref="P:System.Exception.InnerException" /> 属性时可使用原始异常。</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
      <summary>使用指定的 <see cref="T:System.Object" />、XML 命名空间和编码序列化指定的 <see cref="T:System.Xml.XmlWriter" /> 并将 XML 文档写入文件。</summary>
      <param name="xmlWriter">用于编写 XML 文档的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="o">要序列化的对象。</param>
      <param name="namespaces">
        <see langword="XmlSerializerNamespaces" /> 的实例，其中包含要使用的命名空间和前缀。</param>
      <param name="encodingStyle">该文档中使用的编码。</param>
      <param name="id">对于 SOAP 编码消息，这是用于生成 id 特性的基。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute">
      <summary>应用于 Web 服务客户端代理，可用来指定包含自定义序列化程序的程序集。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor(System.String)">
      <summary>用指定的程序集名称初始化 <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute" /> 类的新实例。</summary>
      <param name="assemblyName">程序集的未加密的简单名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor(System.String,System.String)">
      <summary>用指定的程序集名称和程序集位置初始化 <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute" /> 类的新实例。</summary>
      <param name="assemblyName">程序集的未加密的简单名称。</param>
      <param name="codeBase">一个字符串，它是程序集的 URL 位置。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerAssemblyAttribute.AssemblyName">
      <summary>获取或设置程序集的名称，该程序集包含一组特定类型的序列化程序。</summary>
      <returns>程序集的未加密的简单名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerAssemblyAttribute.CodeBase">
      <summary>获取或设置包含序列化程序的程序集的位置。</summary>
      <returns>指向程序集的位置，如路径或 URI。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerFactory">
      <summary>创建 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的类型化版本，以使序列化更为有效。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type)">
      <summary>返回 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的一个派生类，用于对指定类型进行序列化。</summary>
      <param name="type">要序列化的 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的一个派生类，专为对指定类型进行序列化而创建。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.String)">
      <summary>返回 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的一个派生类，用于对指定类型和命名空间进行序列化。</summary>
      <param name="type">要序列化的 <see cref="T:System.Type" />。</param>
      <param name="defaultNamespace">用于所有 XML 元素的默认命名空间。</param>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的一个派生类，专为对指定类型进行序列化而创建。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Type[])">
      <summary>返回 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的一个派生类，用于对指定类型进行序列化。 如果属性或字段返回一个数组，则 <paramref name="extraTypes" /> 参数指定可插入到该数组的对象。</summary>
      <param name="type">要序列化的 <see cref="T:System.Type" />。</param>
      <param name="extraTypes">要序列化的其他对象类型的 <see cref="T:System.Type" /> 数组。</param>
      <returns>派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>返回一个 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 派生类，该派生类可以将指定类型的对象序列化为 XML 文档，反之亦然。 要序列化的每个对象本身可包含类的实例，此重载可使用其他类重写这些实例。</summary>
      <param name="type">要序列化的 <see cref="T:System.Type" />。</param>
      <param name="overrides">一个包含重写默认序列化行为的字段的 <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />。</param>
      <returns>派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>返回 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的一个派生类，该派生类可以将指定类型的对象序列化为 XML 文档实例，反之亦然。 要序列化的每个对象本身可包含类的实例，此重载可使用其他类重写这些实例。 此重载还指定所有 XML 元素的默认命名空间和用作 XML 根元素的类。</summary>
      <param name="type">要序列化的 <see cref="T:System.Type" />。</param>
      <param name="overrides">一个包含重写默认序列化行为的字段的 <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />。</param>
      <param name="extraTypes">要序列化的其他对象类型的 <see cref="T:System.Type" /> 数组。</param>
      <param name="root">表示 XML 根元素的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />。</param>
      <param name="defaultNamespace">XML 文档中所有 XML 元素的默认命名空间。</param>
      <returns>派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)">
      <summary>返回 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的一个派生类，该派生类可以将指定类型的对象序列化为 XML 文档实例，反之亦然。 要序列化的每个对象本身可包含类的实例，此重载可使用其他类重写这些实例。 此重载还指定所有 XML 元素的默认命名空间和用作 XML 根元素的类。</summary>
      <param name="type">此 <see cref="T:System.Type" /> 可序列化的对象的 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</param>
      <param name="overrides">一个 <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />，它扩展或重写 type 参数中指定类的行为。</param>
      <param name="extraTypes">要序列化的其他对象类型的 <see cref="T:System.Type" /> 数组。</param>
      <param name="root">定义 XML 根元素属性的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />。</param>
      <param name="defaultNamespace">XML 文档中所有 XML 元素的默认命名空间。</param>
      <param name="location">用于指定类型位置的路径。</param>
      <returns>派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>返回一个 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 派生类，该派生类可以将指定类型的对象序列化为 XML 文档，反之亦然。 指定用于表示 XML 根元素的对象。</summary>
      <param name="type">要序列化的 <see cref="T:System.Type" />。</param>
      <param name="root">表示 XML 根元素的 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />。</param>
      <returns>派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Xml.Serialization.XmlTypeMapping)">
      <summary>使用将一个类型映射到另一个类型的对象，返回 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的一个派生类。</summary>
      <param name="xmlTypeMapping">将一种类型映射到另一种类型的 <see cref="T:System.Xml.Serialization.XmlTypeMapping" />。</param>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的一个派生类，专为对映射类型进行序列化而创建。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerImplementation">
      <summary>为预生成的类型化序列化程序定义读取器、编写器和方法。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerImplementation.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializerImplementation" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerImplementation.CanSerialize(System.Type)">
      <summary>获取一个值，该值确定某一类型是否可进行序列化。</summary>
      <param name="type">要序列化的类型。</param>
      <returns>如果类型可进行序列化，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerImplementation.GetSerializer(System.Type)">
      <summary>返回指定类型的序列化程序。</summary>
      <param name="type">要序列化的类型。</param>
      <returns>从 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类派生的类型的实例。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.Reader">
      <summary>获取序列化程序所使用的 XML 读取器对象。</summary>
      <returns>用于读取 XML 文档或数据流的 <see cref="T:System.Xml.Serialization.XmlSerializationReader" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.ReadMethods">
      <summary>获取用于读取数据流的方法的集合。</summary>
      <returns>包含方法的 <see cref="T:System.Collections.Hashtable" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.TypedSerializers">
      <summary>获取程序集中的类型化序列化程序的集合。</summary>
      <returns>包含类型化序列化程序的 <see cref="T:System.Collections.Hashtable" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.WriteMethods">
      <summary>获取用于写入数据流的方法的集合。</summary>
      <returns>包含方法的 <see cref="T:System.Collections.Hashtable" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.Writer">
      <summary>获取序列化程序的 XML 编写器对象。</summary>
      <returns>用于写入到 XML 数据流或文档的 <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerVersionAttribute">
      <summary>表示代码是由序列化基础结构生成的，向程序集应用此特性时，可重复使用以提高性能。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerVersionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializerVersionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerVersionAttribute.#ctor(System.Type)">
      <summary>为指定类型初始化 <see cref="T:System.Xml.Serialization.XmlSerializerVersionAttribute" /> 类的新实例。</summary>
      <param name="type">正在进行串行化的类型。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.Namespace">
      <summary>获取或设置程序集的公共语言运行时 (CLR) 命名空间。</summary>
      <returns>一个 <see cref="T:System.String" />，包含程序集的公共语言运行时 (CLR) 命名空间。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.ParentAssemblyId">
      <summary>获取或设置父程序集的标识。</summary>
      <returns>父程序集的版本。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.Type">
      <summary>获取或设置序列化程序所操作的类型。</summary>
      <returns>要序列化的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.Version">
      <summary>获取或设置程序集的版本号。</summary>
      <returns>该程序集的版本。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeAttribute">
      <summary>控制当属性目标由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化时生成的 XML 架构。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> 类的新实例，并指定 XML 类型的名称。</summary>
      <param name="typeName">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化类实例时生成（和在反序列化类实例时识别）的 XML 类型的名称。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.AnonymousType">
      <summary>获取或设置一个值，该值确定生成的构架类型是否为 XSD 匿名类型。</summary>
      <returns>如果结果架构类型为 XSD 匿名类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema">
      <summary>获取或设置一个值，该值指示是否要在 XML 架构文档中包含该类型。</summary>
      <returns>若要将此类型包括到 XML 架构文档中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.Namespace">
      <summary>获取或设置 XML 类型的命名空间。</summary>
      <returns>XML 类型的命名空间。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.TypeName">
      <summary>获取或设置 XML 类型的名称。</summary>
      <returns>XML 类型的名称。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeMapping">
      <summary>包含从一种类型到另一种类型的映射。</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.TypeFullName">
      <summary>包含命名空间和类型的完全限定类型名。</summary>
      <returns>完全限定的类型名称</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.TypeName">
      <summary>获取所映射对象的类型名。</summary>
      <returns>所映射对象的类型名。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.XsdTypeName">
      <summary>获取所映射对象的 XML 元素名称。</summary>
      <returns>所映射对象的 XML 元素名称。 默认值为对象的类名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.XsdTypeNamespace">
      <summary>获取所映射对象的 XML 命名空间。</summary>
      <returns>所映射对象的 XML 命名空间。 默认值为空字符串("")。</returns>
    </member>
  </members>
</doc>