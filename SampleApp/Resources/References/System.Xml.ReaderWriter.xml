<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml.ReaderWriter</name>
  </assembly>
  <members>
    <member name="T:System.Xml.ConformanceLevel">
      <summary>指定 <see cref="T:System.Xml.XmlReader" /> 和 <see cref="T:System.Xml.XmlWriter" /> 对象执行的输入或输出检查的量。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Auto">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.Xml.XmlWriter" /> 对象自动检测是否应该执行文档级别或片段级别检查，并执行相应的检查。 如果你正在包装另一个 <see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.Xml.XmlWriter" /> 对象，外层对象不进行任何附加一致性检查。 一致性检查只针对基础对象。  
  
有关如何确定符合性级别，请参见 <see cref="P:System.Xml.XmlReaderSettings.ConformanceLevel" /> 和 <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> 属性详细信息。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
      <summary>按 W3C 定义，XML 数据符合格式良好的 XML 1.0 document。 此级别的检查确保所读写的流可由任何充当 XML 1.0 文档的处理器使用。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Fragment">
      <summary>按 W3C 定义，XML 数据是格式良好的 XML 片段。  此符合性级别表示可能没有根元素但其他方面格式标准的 XML 文档。 此级别的检查确保所读写的流可由任何充当 XML 1.0 外部已分析实体的处理器使用。</summary>
    </member>
    <member name="T:System.Xml.DtdProcessing">
      <summary>指定用于处理 DTD 的选项。 <see cref="T:System.Xml.DtdProcessing" /> 枚举由 <see cref="T:System.Xml.XmlReaderSettings" /> 类使用。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Ignore">
      <summary>将导致忽略 DOCTYPE 元素。 未发生 DTD 处理，且 DTD/DOCTYPE 在输出中丢失。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Parse">
      <summary>用于分析 DTD。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Prohibit">
      <summary>指定在遇到 DTD 时将引发 <see cref="T:System.Xml.XmlException" />，同时有消息指示禁用 DTD。 此选项为默认行为。</summary>
    </member>
    <member name="T:System.Xml.EntityHandling">
      <summary>指定 <see cref="T:System.Xml.XmlTextReader" /> 或 <see cref="T:System.Xml.XmlValidatingReader" /> 如何处理实体。</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandCharEntities">
      <summary>展开字符实体，并将常规实体作为 <see cref="F:System.Xml.XmlNodeType.EntityReference" /> 节点返回。 
        
必须调用 <see cref="Overload:System.Xml.XmlReader.ResolveEntity" /> 以查看常规实体扩展到的内容。 这样仅在第一次使用实体时扩展实体，就能优化实体的处理。  
  
设置为 <see langword="ExpandCharEntities" /> 时，对 <see cref="Overload:System.Xml.XmlReader.GetAttribute" /> 方法的读取器调用扩展所有实体（常规实体和字符实体）。</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandEntities">
      <summary>展开所有实体并返回展开的节点。
        
不返回 <see cref="F:System.Xml.XmlNodeType.EntityReference" /> 节点。 扩展实体文本而不是实体引用。</summary>
    </member>
    <member name="T:System.Xml.Formatting">
      <summary>指定 <see cref="T:System.Xml.XmlTextWriter" /> 的格式设置选项。</summary>
    </member>
    <member name="F:System.Xml.Formatting.Indented">
      <summary>使子元素根据 <see cref="P:System.Xml.XmlTextWriter.Indentation" /> 和 <see cref="P:System.Xml.XmlTextWriter.IndentChar" /> 设置缩进。

此选项仅缩进元素内容；混合内容不受影响。 有关这些术语的 XML 1.0 定义，请参阅万维网联合会 (W3C) 文档元素内容和混合内容。</summary>
    </member>
    <member name="F:System.Xml.Formatting.None">
      <summary>不应用特殊的格式设置。 这是默认设置。</summary>
    </member>
    <member name="T:System.Xml.IApplicationResourceStreamResolver">
      <summary>表示应用程序资源流解析程序。</summary>
    </member>
    <member name="M:System.Xml.IApplicationResourceStreamResolver.GetApplicationResourceStream(System.Uri)">
      <summary>从指定的 URI 返回应用程序资源流。</summary>
      <param name="relativeUri">相对 URI。</param>
      <returns>应用程序资源流。</returns>
    </member>
    <member name="T:System.Xml.IHasXmlNode">
      <summary>使类可以从当前上下文或位置返回 <see cref="T:System.Xml.XmlNode" />。</summary>
    </member>
    <member name="M:System.Xml.IHasXmlNode.GetNode">
      <summary>返回当前位置的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <returns>当前位置的 <see langword="XmlNode" />。</returns>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary>提供一个使类可以返回行和位置信息的接口。</summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary>获取一个值，该值指示该类是否可返回行信息。</summary>
      <returns>如果可以提供 <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> 和 <see cref="P:System.Xml.IXmlLineInfo.LinePosition" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary>获取当前行号。</summary>
      <returns>当前行号；如果没有行信息可用（例如 <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> 返回 <see langword="false" />），则为 0。</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary>获取当前行位置。</summary>
      <returns>当前行位置；如果没有行信息可用（例如 <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> 返回 <see langword="false" />），则为 0。</returns>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
      <summary>提供对一组前缀和命名空间映射的只读访问。</summary>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>获取当前在范围内的已定义前缀/命名空间映射的集合。</summary>
      <param name="scope">一个 <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要返回的命名空间节点的类型。</param>
      <returns>一个包含当前在范围内的命名空间的 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
      <summary>获取映射到指定前缀的命名空间 URI。</summary>
      <param name="prefix">要查找其命名空间 URI 的前缀。</param>
      <returns>映射到前缀的命名空间 URI；如果前缀未映射到命名空间 URI，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
      <summary>获取映射到指定命名空间 URI 的前缀。</summary>
      <param name="namespaceName">要查找其前缀的命名空间 URI。</param>
      <returns>映射到命名空间 URI 的前缀；如果命名空间 URI 未映射到前缀，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.NamespaceHandling">
      <summary>指定是否在 <see cref="T:System.Xml.XmlWriter" /> 中移除重复的命名空间声明。</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.Default">
      <summary>指定将不移除重复的命名空间声明。</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.OmitDuplicates">
      <summary>指定将移除重复的命名空间声明。 对于要移除的重复命名空间，前缀和命名空间必须匹配。</summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary>实现单线程 <see cref="T:System.Xml.XmlNameTable" />。</summary>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary>初始化 <see langword="NameTable" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>将指定的字符串原子化，并将其添加到 <see langword="NameTable" />。</summary>
      <param name="key">包含要添加字符串的字符数组。</param>
      <param name="start">数组中指定字符串第一个字符的从零开始的索引。</param>
      <param name="len">字符串中的字符数。</param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />  
  
- 或 - 
 <paramref name="start" /> &gt;= <paramref name="key" />.Length 
- 或 - 
 <paramref name="len" /> &gt;= <paramref name="key" />.Length 
如果 <paramref name="len" /> =0，则上述条件不会导致引发异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0。</exception>
      <returns>原子化字符串；如果 <see langword="NameTable" /> 中已存在字符串，则为现有字符串。 如果 <paramref name="len" /> 为零，则返回 String.Empty。</returns>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary>将指定的字符串原子化，并将其添加到 <see langword="NameTable" />。</summary>
      <param name="key">要添加的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <returns>原子化字符串；如果 <see langword="NameTable" /> 中已存在字符串，则为现有字符串。</returns>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>获取包含相同字符（与给定数组中指定范围的字符相同）的原子化字符串。</summary>
      <param name="key">包含要查找的名称的字符数组。</param>
      <param name="start">数组中指定名称第一个字符的从零开始的索引。</param>
      <param name="len">名称中的字符数。</param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />  
  
- 或 - 
 <paramref name="start" /> &gt;= <paramref name="key" />.Length 
- 或 - 
 <paramref name="len" /> &gt;= <paramref name="key" />.Length 
如果 <paramref name="len" /> =0，则上述条件不会导致引发异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0。</exception>
      <returns>原子化字符串；如果字符串尚未原子化，则为 <see langword="null" />。 如果 <paramref name="len" /> 为零，则返回 String.Empty。</returns>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary>获取具有指定值的原子化字符串。</summary>
      <param name="value">要查找的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <returns>原子化字符串对象；如果字符串尚未原子化，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.NewLineHandling">
      <summary>指定如何处理换行符。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Entitize">
      <summary>新行字符已实体化。 当通过某个正常化 <see cref="T:System.Xml.XmlReader" /> 来读取输出时，此设置将保留所有字符。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.None">
      <summary>新行字符未更改。 输出与输入一样。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Replace">
      <summary>替换新行字符才能与 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> 属性中指定的字符匹配。</summary>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary>指定读取器的状态。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary>已调用 <see cref="M:System.Xml.XmlReader.Close" /> 方法。</summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary>已成功到达文件结尾。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary>出现错误，阻止读取操作继续进行。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary>未调用 <see langword="Read" /> 方法。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary>已调用 <see langword="Read" /> 方法。 可能对读取器调用了其他方法。</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlKnownDtds">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlKnownDtds" /> 枚举由 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 使用，定义 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 可识别的已知 DTD。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.All">
      <summary>指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 将识别当前支持的所有 DTD。 此选项为默认行为。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.None">
      <summary>指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 将不识别任何预定义的 DTD。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Rss091">
      <summary>指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 将识别在 RSS 0.91 中定义的 DTD 和实体。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Xhtml10">
      <summary>指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 将识别在 XHTML 1.0 中定义的 DTD 和实体。</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlPreloadedResolver">
      <summary>表示类，其用于通过 DTD 或 XML 流预填充缓存。</summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.Resolvers.XmlKnownDtds)">
      <summary>用指定的预加载已知 DTD 初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 类的新实例。</summary>
      <param name="preloadedDtds">应该预填充到缓存中的已知 DTD。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver)">
      <summary>用指定的回退冲突解决程序初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 类的新实例。</summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" /> 或您自己的冲突解决程序。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds)">
      <summary>用指定的回退冲突解决程序和预加载的已知 DTD 初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 类的新实例。</summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" /> 或您自己的冲突解决程序。</param>
      <param name="preloadedDtds">应该预填充到缓存中的已知 DTD。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds,System.Collections.Generic.IEqualityComparer{System.Uri})">
      <summary>使用指定的回退解析程序、预加载的已知 DTD 以及 URI 相等比较器初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 类的新实例。</summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" /> 或您自己的冲突解决程序。</param>
      <param name="preloadedDtds">应该预填充到缓存中的已知 DTD。</param>
      <param name="uriComparer">在比较 URI 时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口的实现。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[])">
      <summary>向 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储区添加字节数组，并将其映射到 URI。 如果存储区中已包含相同 URI 的映射，将重写现有映射。</summary>
      <param name="uri">当前添加到 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储区的数据的 URI。</param>
      <param name="value">具有与所提供 URI 相对应的数据的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[],System.Int32,System.Int32)">
      <summary>向 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储区添加字节数组，并将其映射到 URI。 如果存储区中已包含相同 URI 的映射，将重写现有映射。</summary>
      <param name="uri">当前添加到 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储区的数据的 URI。</param>
      <param name="value">具有与所提供 URI 相对应的数据的字节数组。</param>
      <param name="offset">提供的字节数组中数据开始位置处的偏移量。</param>
      <param name="count">要从字节数组中读取的字节数，从提供的偏移量开始。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于 0。  
  
- 或 - 
<paramref name="value" /> 的长度减去 <paramref name="offset" /> 小于 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.IO.Stream)">
      <summary>添加 <see cref="T:System.IO.Stream" /> 到 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储区，并将其映射到 URI。 如果存储区中已包含相同 URI 的映射，将重写现有映射。</summary>
      <param name="uri">当前添加到 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储区的数据的 URI。</param>
      <param name="value">具有与所提供 URI 相对应的数据的 <see cref="T:System.IO.Stream" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.String)">
      <summary>将包含预加载数据的字符串添加到 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />，存储并将它映射到一个 URI。 如果存储区中已包含相同 URI 的映射，将重写现有映射。</summary>
      <param name="uri">当前添加到 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储区的数据的 URI。</param>
      <param name="value">具有与所提供 URI 相对应的数据的 <see langword="String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>将 URI 映射到包含实际资源的对象。</summary>
      <param name="absoluteUri">从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。</param>
      <param name="role">当解析 URI 时，.NET Framework for Silverlight 的当前版本不使用此参数。 提供此参数是为了将来扩展使用。 例如，此参数可以映射到 xlink:role 并在其他方案中用作特定于实现的参数。</param>
      <param name="ofObjectToReturn">要返回的对象的类型。 对于已作为 <see langword="String" /> 添加的 URI，<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 支持 <see cref="T:System.IO.Stream" /> 对象和 <see cref="T:System.IO.TextReader" /> 对象。 如果冲突解决程序不支持请求的类型，则引发异常。 使用 <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> 方法可以确定此解析程序是否支持某个 <see langword="Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.XmlException">无法解析 <paramref name="absoluteUri" /> 中传递的 URI。  
  
- 或 - 
 <paramref name="ofObjectToReturn" /> 不属于受支持的类型。</exception>
      <returns>
        <see cref="T:System.IO.Stream" /> 或 <see cref="T:System.IO.TextReader" /> 对象对应的实际源。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>将 URI 异步映射到包含实际资源的对象。</summary>
      <param name="absoluteUri">从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。</param>
      <param name="role">当解析 URI 时，.NET Framework for Silverlight 的当前版本不使用此参数。 提供此参数是为了将来扩展使用。 例如，此参数可以映射到 xlink:role 并在其他方案中用作特定于实现的参数。</param>
      <param name="ofObjectToReturn">要返回的对象的类型。 对于已作为 <see langword="String" /> 添加的 URI，<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 支持 <see cref="T:System.IO.Stream" /> 对象和 <see cref="T:System.IO.TextReader" /> 对象。 如果冲突解决程序不支持请求的类型，则引发异常。 使用 <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> 方法可以确定此解析程序是否支持某个 <see langword="Type" />。</param>
      <returns>
        <see cref="T:System.IO.Stream" /> 或 <see cref="T:System.IO.TextReader" /> 对象对应的实际源。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Remove(System.Uri)">
      <summary>从 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 中移除与 URI 相对应的数据。</summary>
      <param name="uri">应从 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存储区移除的数据的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.ResolveUri(System.Uri,System.String)">
      <summary>从基 URI 和相对 URI 解析绝对 URI。</summary>
      <param name="baseUri">用于解析相对 URI 的基 URI。</param>
      <param name="relativeUri">要解析的 URI。 该 URI 可以是绝对的或相对的。 如果是绝对的，此值有效地替换 <paramref name="baseUri" /> 值。 如果是相对的，它与 <paramref name="baseUri" /> 组合以构成绝对 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。</exception>
      <returns>不能解析相对URI时表示绝对 URI 的 <see cref="T:System.Uri" /> 或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)">
      <summary>确定解析器是否支持其他的 <see cref="T:System.Type" /> 而不是仅仅支持 <see cref="T:System.IO.Stream" />。</summary>
      <param name="absoluteUri">要检查的绝对 URI。</param>
      <param name="type">要返回的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。</exception>
      <returns>如果 <see cref="T:System.Type" /> 受支持，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.Credentials">
      <summary>设置用于对基础 <see cref="T:System.Net.WebRequest" /> 进行身份验证的凭据。</summary>
      <returns>用于对基础 Web 请求进行身份验证的凭据。</returns>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.PreloadedUris">
      <summary>获取预加载 URI 的集合。</summary>
      <returns>预加载 URI 的集合。</returns>
    </member>
    <member name="T:System.Xml.Schema.IXmlSchemaInfo">
      <summary>定义被验证的 XML 节点的架构验证后信息集。</summary>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsDefault">
      <summary>获取一个值，该值指示这个被验证的 XML 节点是否设置为在 XML 架构定义语言 (XSD) 架构验证期间应用的默认值的结果。</summary>
      <returns>如果此被验证的 XML 节点设置为架构验证期间应用的默认值的结果，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsNil">
      <summary>获取一个值，此值指示这个被验证的 XML 节点的值是否为零。</summary>
      <returns>如果此被验证的 XML 节点的值为零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.MemberType">
      <summary>为这个被验证的 XML 节点获取动态架构类型。</summary>
      <returns>表示此验证的 XML 节点的动态架构类型的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute">
      <summary>获取与此被验证的 XML 节点对应的已编译的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 对应的此验证的 XML 节点。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaElement">
      <summary>获取与此被验证的 XML 节点对应的已编译的 <see cref="T:System.Xml.Schema.XmlSchemaElement" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 对应的此验证的 XML 节点。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaType">
      <summary>获取这个被验证的 XML 节点的静态 XML 架构定义语言 (XSD) 架构类型。</summary>
      <returns>此验证的 XML 节点的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.Validity">
      <summary>获取这个被验证的 XML 节点的 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。</summary>
      <returns>一个验证的 XML 节点的 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventArgs">
      <summary>返回与 <see langword="ValidationEventHandler" /> 相关的详细信息。</summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Exception">
      <summary>获取与该验证事件关联的 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</summary>
      <returns>与该验证事件关联的 <see langword="XmlSchemaException" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Message">
      <summary>获取与验证事件对应的文本说明。</summary>
      <returns>文本说明。</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Severity">
      <summary>获取验证事件的严重度。</summary>
      <returns>表示验证事件的严重度的 <see cref="T:System.Xml.Schema.XmlSeverityType" /> 值。</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventHandler">
      <summary>表示将处理 XML 架构验证事件和 <see cref="T:System.Xml.Schema.ValidationEventArgs" /> 的回调方法。</summary>
      <param name="sender">事件源。  
  
 注意：在代码中使用发送方之前先确定其类型****。 您不能假设发送方是某种特定类型的实例， 也不能保证发送方不为 Null。 总是要求您使用失败处理逻辑进行强制转换。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlAtomicValue">
      <summary>表示经验证的 XML 元素或特性的类型化值。 不能继承 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 类。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.Clone">
      <summary>返回此 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 对象的一个副本。</summary>
      <returns>此 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 对象的一个 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 对象副本。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Schema.XmlAtomicValue.Clone" />。</summary>
      <returns>该 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 对象的一个副本。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ToString">
      <summary>获取经验证的 XML 元素或特性的 <see langword="string" /> 值。</summary>
      <returns>经验证的 XML 元素或特性的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>将经验证的 XML 元素或特性值按指定类型返回，并使用指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象解析命名空间前缀。</summary>
      <param name="type">将经验证的 XML 元素或特性值返回时使用的类型。</param>
      <param name="nsResolver">用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。</param>
      <exception cref="T:System.FormatException">验证的 XML 元素或特性的值不是适用于目标类型的正确格式。</exception>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.OverflowException">尝试进行的强制转换导致溢出。</exception>
      <returns>请求类型的经验证的 XML 元素或特性值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.IsNode">
      <summary>获取一个值，指示经验证的 XML 元素或特性是一个 XPath 节点还是一个原子值。</summary>
      <returns>如果经验证的 XML 元素或特性是一个 XPath 节点，为 <see langword="true" />；如果经验证的 XML 元素或特性是一个原子值，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.TypedValue">
      <summary>根据架构类型，以最适合的 Microsoft .NET Framework 类型的已装箱对象的形式获取当前经验证的 XML 元素或特性。</summary>
      <returns>作为最适合的 .NET Framework 类型的已装箱对象的当前经验证的 XML 元素或特性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.Value">
      <summary>获取经验证的 XML 元素或特性的 <see langword="string" /> 值。</summary>
      <returns>经验证的 XML 元素或特性的 <see langword="string" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsBoolean">
      <summary>获取经验证的 XML 元素或特性的 <see cref="T:System.Boolean" /> 形式的值。</summary>
      <exception cref="T:System.FormatException">验证的 XML 元素或特性的值不是适用于 <see cref="T:System.Boolean" /> 类型的正确格式。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.Boolean" /> 的强制转换无效。</exception>
      <returns>经验证的 XML 元素或特性的 <see cref="T:System.Boolean" /> 形式的值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDateTime">
      <summary>获取经验证的 XML 元素或特性的 <see cref="T:System.DateTime" /> 形式的值。</summary>
      <exception cref="T:System.FormatException">验证的 XML 元素或特性的值不是适用于 <see cref="T:System.DateTime" /> 类型的正确格式。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.DateTime" /> 的强制转换无效。</exception>
      <returns>经验证的 XML 元素或特性的 <see cref="T:System.DateTime" /> 形式的值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDouble">
      <summary>获取经验证的 XML 元素或特性的 <see cref="T:System.Double" /> 形式的值。</summary>
      <exception cref="T:System.FormatException">验证的 XML 元素或特性的值不是适用于 <see cref="T:System.Double" /> 类型的正确格式。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.Double" /> 的强制转换无效。</exception>
      <exception cref="T:System.OverflowException">尝试进行的强制转换导致溢出。</exception>
      <returns>经验证的 XML 元素或特性的 <see cref="T:System.Double" /> 形式的值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsInt">
      <summary>获取经验证的 XML 元素或特性的 <see cref="T:System.Int32" /> 形式的值。</summary>
      <exception cref="T:System.FormatException">验证的 XML 元素或特性的值不是适用于 <see cref="T:System.Int32" /> 类型的正确格式。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.Int32" /> 的强制转换无效。</exception>
      <exception cref="T:System.OverflowException">尝试进行的强制转换导致溢出。</exception>
      <returns>经验证的 XML 元素或特性的 <see cref="T:System.Int32" /> 形式的值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsLong">
      <summary>获取经验证的 XML 元素或特性的 <see cref="T:System.Int64" /> 形式的值。</summary>
      <exception cref="T:System.FormatException">验证的 XML 元素或特性的值不是适用于 <see cref="T:System.Int64" /> 类型的正确格式。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.Int64" /> 的强制转换无效。</exception>
      <exception cref="T:System.OverflowException">尝试进行的强制转换导致溢出。</exception>
      <returns>经验证的 XML 元素或特性的 <see cref="T:System.Int64" /> 形式的值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueType">
      <summary>获取经验证的 XML 元素或特性的 Microsoft .NET Framework 类型。</summary>
      <returns>经验证的 XML 元素或特性的 .NET Framework 类型。 默认值是 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.XmlType">
      <summary>获取经验证的 XML 元素或特性的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</summary>
      <returns>经验证的 XML 元素或特性的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary>按照万维网联合会 (W3C) XML 架构第 1 部分：“结构”和 XML 架构第 2 部分：“数据类型”内容指定的 XML 架构内存中表示形式。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.InstanceNamespace">
      <summary>XML 架构实例命名空间。 此字段为常数。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.Namespace">
      <summary>XML 架构命名空间。 此字段为常数。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchema" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)">
      <summary>将 XML 架构对象模型 (SOM) 编译为架构信息供验证使用。 用于检查以编程方式生成的 SOM 的语法和语义结构。 语义验证检查在编译期间执行。</summary>
      <param name="validationEventHandler">验证事件处理程序，它接收 XML 架构验证错误的相关信息。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlResolver)">
      <summary>将 XML 架构对象模型 (SOM) 编译为架构信息供验证使用。 用于检查以编程方式生成的 SOM 的语法和语义结构。 语义验证检查在编译期间执行。</summary>
      <param name="validationEventHandler">验证事件处理程序，它接收有关 XML 架构验证错误的信息。</param>
      <param name="resolver">用于解析 <see langword="include" /> 和 <see langword="import" /> 元素中引用的命名空间的 <see langword="XmlResolver" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
      <summary>从提供的流中读取 XML 架构。</summary>
      <param name="stream">提供的数据流。</param>
      <param name="validationEventHandler">验证事件处理程序，它接收 XML 架构语法错误的相关信息。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">如果未指定 <see cref="T:System.Xml.Schema.XmlSchemaException" />，则引发 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</exception>
      <returns>表示 XML 架构的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>从提供的 <see cref="T:System.IO.TextReader" /> 读取 XML 架构。</summary>
      <param name="reader">包含要读取的 XML 架构的 <see langword="TextReader" />。</param>
      <param name="validationEventHandler">验证事件处理程序，它接收 XML 架构语法错误的相关信息。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">如果未指定 <see cref="T:System.Xml.Schema.XmlSchemaException" />，则引发 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</exception>
      <returns>表示 XML 架构的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>从提供的 <see cref="T:System.Xml.XmlReader" /> 读取 XML 架构。</summary>
      <param name="reader">包含要读取的 XML 架构的 <see langword="XmlReader" />。</param>
      <param name="validationEventHandler">验证事件处理程序，它接收 XML 架构语法错误的相关信息。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">如果未指定 <see cref="T:System.Xml.Schema.XmlSchemaException" />，则引发 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</exception>
      <returns>表示 XML 架构的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)">
      <summary>将　XML 架构写入提供的数据流中。</summary>
      <param name="stream">提供的数据流。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 将“XML 架构”写入提供的 <see cref="T:System.Xml.XmlNamespaceManager" />。</summary>
      <param name="stream">提供的数据流。</param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)">
      <summary>将“XML 架构”写入提供的 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">要向其中进行写入的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)">
      <summary>将“XML 架构”写入提供的 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">要向其中进行写入的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)">
      <summary>将“XML 架构”写入提供的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)">
      <summary>将“XML 架构”写入提供的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />
      </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeFormDefault">
      <summary>获取或设置在架构的目标命名空间中声明的属性的窗体。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值，它表明来自目标命名空间的特性是否需要用命名空间前缀限定。 默认值为 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeGroups">
      <summary>获取架构中所有全局属性组的架构编译后值。</summary>
      <returns>架构中所有全局特性组的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Attributes">
      <summary>获取架构中所有属性的架构编译后值。</summary>
      <returns>架构中所有特性的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.BlockDefault">
      <summary>获取或设置 <see langword="blockDefault" /> 特性，该特性设置 <see langword="block" /> 架构中的元素和复杂类型的 <see langword="targetNamespace" /> 特性的默认值。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值，它表示阻止派生的不同方法。 默认值是 <see langword="XmlSchemaDerivationMethod.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.ElementFormDefault">
      <summary>获取或设置在架构的目标命名空间中声明的元素的窗体。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值，它表明来自目标命名空间的元素是否需要用命名空间前缀限定。 默认值为 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Elements">
      <summary>获取架构中所有元素的架构编译后值。</summary>
      <returns>架构中所有元素的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.FinalDefault">
      <summary>获取或设置 <see langword="finalDefault" /> 特性，该特性设置架构目标命名空间中的元素和复杂类型的 <see langword="final" /> 特性的默认值。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值，它表示阻止派生的不同方法。 默认值是 <see langword="XmlSchemaDerivationMethod.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Groups">
      <summary>获取架构中所有组的架构编译后值。</summary>
      <returns>架构中所有组的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Id">
      <summary>获取或设置字符串 ID。</summary>
      <returns>字符串的 ID。 默认值是 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Includes">
      <summary>获取包含的和导入的架构的集合。</summary>
      <returns>包含的和导入的架构的 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.IsCompiled">
      <summary>表明架构是否已编译。</summary>
      <returns>如果已编译，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Items">
      <summary>获取架构中架构元素的集合，并在 <see langword="schema" /> 元素级别用于添加新的元素类型。</summary>
      <returns>架构中架构元素的 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Notations">
      <summary>获取架构中所有注释的架构编译后值。</summary>
      <returns>架构中所有表示法的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.SchemaTypes">
      <summary>获取架构中所有架构类型的架构编译后值。</summary>
      <returns>架构中所有架构类型的 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.TargetNamespace">
      <summary>获取或设置架构目标命名空间的统一资源标识符 (URI)。</summary>
      <returns>架构目标命名空间。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.UnhandledAttributes">
      <summary>获取或设置不属于架构目标命名空间的限定属性。</summary>
      <returns>不属于架构目标命名空间的限定 <see cref="T:System.Xml.XmlAttribute" /> 对象的数组。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Version">
      <summary>获取或设置架构的版本。</summary>
      <returns>架构的版本。 默认值是 <see langword="String.Empty" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAll">
      <summary>表示万维网联合会 (W3C)<see langword="all" /> 元素（复合器）。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAll.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAll.Items">
      <summary>获取包含在 <see langword="XmlSchemaElement" /> 复合器内的 <see langword="all" /> 元素的集合。</summary>
      <returns>包含在 <see langword="XmlSchemaAll" /> 中的元素的集合。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotated">
      <summary>可包含批注元素的任何元素的基类。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotated.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnnotated" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Annotation">
      <summary>获取或设置 <see langword="annotation" /> 属性。</summary>
      <returns>表示 <see langword="annotation" /> 属性的 <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Id">
      <summary>获取或设置字符串 ID。</summary>
      <returns>字符串 id。默认值为 <see langword="String.Empty" /> 。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes">
      <summary>获取或设置不属于当前架构目标命名空间的限定特性。</summary>
      <returns>一组不属于架构目标命名空间的 <see cref="T:System.Xml.XmlAttribute" /> 对象。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotation">
      <summary>表示万维网联合会 (W3C)<see langword="annotation" /> 元素。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotation.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Id">
      <summary>获取或设置字符串 ID。</summary>
      <returns>字符串 id。默认值为 <see langword="String.Empty" /> 。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Items">
      <summary>获取用于存储 <see langword="Items" /> 和 <see langword="appinfo" /> 子元素的 <see langword="documentation" /> 集合。</summary>
      <returns>
        <see langword="appinfo" /> 和 <see langword="documentation" /> 子元素的 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.UnhandledAttributes">
      <summary>获取或设置不属于架构目标命名空间的限定特性。</summary>
      <returns>
        <see cref="T:System.Xml.XmlAttribute" /> 对象的数组，它不属于架构的目标命名空间。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAny">
      <summary>表示万维网联合会 (W3C)<see langword="any" /> 元素。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAny.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAny" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.Namespace">
      <summary>获取或设置包含可使用的元素的命名空间。</summary>
      <returns>可以使用的元素的命名空间。 默认值为 <see langword="##any" />。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.ProcessContents">
      <summary>获取或设置信息，该信息有关应用程序或 XML 处理器应如何为 <see langword="any" /> 元素指定的元素处理 XML 文档的验证。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 值之一。 如果未指定 <see langword="processContents" /> 特性，则默认为 <see langword="Strict" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnyAttribute">
      <summary>表示万维网联合会 (W3C)<see langword="anyAttribute" /> 元素。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.Namespace">
      <summary>获取或设置包含可以使用的特性的命名空间。</summary>
      <returns>可以使用的特性的命名空间。 默认值为 <see langword="##any" />。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.ProcessContents">
      <summary>获取或设置有关应用程序或 XML 处理器应如何为 <see langword="anyAttribute" /> 元素指定的特性来验证 XML 文档的信息。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 值之一。 如果未指定 <see langword="processContents" /> 特性，则默认为 <see langword="Strict" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAppInfo">
      <summary>表示万维网联合会 (W3C)<see langword="appinfo" /> 元素。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAppInfo.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAppInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Markup">
      <summary>获取或设置一个数组，它表示 <see langword="appinfo" /> 子节点的 <see cref="T:System.Xml.XmlNode" /> 对象。</summary>
      <returns>一个表示 <see langword="appinfo" /> 子节点的 <see cref="T:System.Xml.XmlNode" /> 对象的数组。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Source">
      <summary>获取或设置应用程序信息的源。</summary>
      <returns>统一资源标识符 (URI) 引用。 默认值为 <see langword="String.Empty" />。 可选。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttribute">
      <summary>按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的 <see langword="attribute" /> 元素。 属性为其他文档元素提供额外信息。 属性标记嵌套在架构的文档元素标记之间。 XML 文档将属性显示为元素开始标记中的已命名项。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeSchemaType">
      <summary>获取一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 对象，该对象表示基于特性的 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> 或 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> 的特性类型。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeType">
      <summary>基于保存编译后 <see langword="AttributeType" /> 属性值的特性的 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> 或 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" />，获取公共语言运行时 (CLR) 对象。</summary>
      <returns>公共运行库 (CLR) 对象，保存 <see langword="AttributeType" /> 属性的编译后值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.DefaultValue">
      <summary>获取或设置属性的默认值。</summary>
      <returns>属性的默认值。 默认为空引用。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.FixedValue">
      <summary>获取或设置属性的固定值。</summary>
      <returns>属性的固定值。 默认值为 NULL。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Form">
      <summary>获取或设置属性的窗体。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值之一。 默认为包含该特性的架构元素的 <see cref="P:System.Xml.Schema.XmlSchema.AttributeFormDefault" /> 值。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Name">
      <summary>获取或设置属性的名称。</summary>
      <returns>属性名。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.QualifiedName">
      <summary>获取属性的限定名称。</summary>
      <returns>
        <see langword="QualifiedName" /> 属性的编译后值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.RefName">
      <summary>获取或设置在此架构（或指定命名空间指示的另一个架构）中声明的属性的名称。</summary>
      <returns>所声明属性的名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType">
      <summary>获取属性类型或将其设置为简单类型。</summary>
      <returns>此架构中定义的简单类型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName">
      <summary>获取或设置在此架构（或指定命名空间指示的另一个架构）中定义的简单类型的名称。</summary>
      <returns>简单类型的名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Use">
      <summary>获取或设置如何使用该属性的相关信息。</summary>
      <returns>下列值之一：“None”、“Prohibited”、“Optional”或“Required”。 默认为“Optional”。 可选。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroup">
      <summary>按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的 <see langword="attributeGroup" /> 元素。 AttributesGroups 提供将一组特性声明归为一组的机制，以便将它们作为一个组并入到复杂类型定义中。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroup.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.AnyAttribute">
      <summary>获取或设置特性组的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 组件。</summary>
      <returns>万维网联合会（W3C）<see langword="anyAttribute" /> 元素。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Attributes">
      <summary>获取属性组的属性的集合。 包含 <see langword="XmlSchemaAttribute" /> 和 <see langword="XmlSchemaAttributeGroupRef" /> 元素。</summary>
      <returns>属性组的属性的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Name">
      <summary>获取或设置属性组的名称。</summary>
      <returns>属性组的名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.QualifiedName">
      <summary>获取属性组的限定名称。</summary>
      <returns>属性组的限定名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.RedefinedAttributeGroup">
      <summary>从 XML 架构中获取重新定义的属性组属性。</summary>
      <returns>重新定义的属性组属性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroupRef">
      <summary>表示由万维网联合会 (W3C) 所指定的 XML 架构中具有 <see langword="ref" /> 特性的 <see langword="attributeGroup" /> 元素。 AttributesGroupRef 是对 attributeGroup 的引用，name 属性包含要引用的特性组。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroupRef.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroupRef.RefName">
      <summary>获取或设置所引用的 <see langword="attributeGroup" /> 元素的名称。</summary>
      <returns>引用的特性组的名称。 该值必须是 QName。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaChoice">
      <summary>按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的 <see langword="choice" /> 元素（复合器）。 <see langword="choice" /> 仅允许它的一个子级出现在实例中。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaChoice.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaChoice.Items">
      <summary>获取复合器（<see langword="choice" />）中包含的元素的集合，这些元素有：<see langword="XmlSchemaElement" />、<see langword="XmlSchemaGroupRef" />、<see langword="XmlSchemaChoice" />、<see langword="XmlSchemaSequence" /> 或 <see langword="XmlSchemaAny" />。</summary>
      <returns>包含在 <see langword="XmlSchemaChoice" /> 中的元素的集合。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollection">
      <summary>包含 XML 架构定义语言 (XSD) 和 XML 数据简化 (XDR) 架构的缓存。 <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> 类已过时。 请改用 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaCollection.ValidationEventHandler">
      <summary>设置事件处理程序，以接收 XDR 和 XML 架构验证错误的相关信息。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor">
      <summary>初始化 <see langword="XmlSchemaCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)">
      <summary>使用指定的 <see langword="XmlSchemaCollection" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。 加载架构时使用 <see langword="XmlNameTable" />。</summary>
      <param name="nametable">要使用的 <see langword="XmlNameTable" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)">
      <summary>将由给定的 URL 定位的架构添加到架构集合中。</summary>
      <param name="ns">与架构关联的命名空间 URI。 对于 XML 架构，这通常是 <see langword="targetNamespace" />。</param>
      <param name="uri">指定要加载的架构的 URL。</param>
      <exception cref="T:System.Xml.XmlException">此架构不是有效的架构。</exception>
      <returns>添加到架构集合中的 <see cref="T:System.Xml.Schema.XmlSchema" />；如果所添加的架构为 XDR 架构，或者如果架构中有编译错误，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)">
      <summary>将 <see cref="T:System.Xml.XmlReader" /> 中包含的架构添加到架构集合中。</summary>
      <param name="ns">与架构关联的命名空间 URI。 对于 XML 架构，这通常是 <see langword="targetNamespace" />。</param>
      <param name="reader">包含要添加的架构的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.Xml.XmlException">此架构不是有效的架构。</exception>
      <returns>添加到架构集合中的 <see cref="T:System.Xml.Schema.XmlSchema" />；如果所添加的架构为 XDR 架构，或者如果架构中有编译错误，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>将 <see cref="T:System.Xml.XmlReader" /> 中包含的架构添加到架构集合中。 指定的 <see cref="T:System.Xml.XmlResolver" /> 用于解析任何可能引用的外部资源。</summary>
      <param name="ns">与架构关联的命名空间 URI。 对于 XML 架构，这通常是 <see langword="targetNamespace" />。</param>
      <param name="reader">包含要添加的架构的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="resolver">用于解析 <see langword="include" /> 和 <see langword="import" /> 元素或 <see langword="x-schema" /> 特性（XDR 架构）中引用的命名空间的 <see cref="T:System.Xml.XmlResolver" />。 如果这为 <see langword="null" />，则不解析外部引用。</param>
      <exception cref="T:System.Xml.XmlException">此架构不是有效的架构。</exception>
      <returns>添加到架构集合中的 <see cref="T:System.Xml.Schema.XmlSchema" />；如果所添加的架构为 XDR 架构，或者如果架构中有编译错误，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)">
      <summary>将 <see cref="T:System.Xml.Schema.XmlSchema" /> 添加到集合。</summary>
      <param name="schema">要添加到集合中的 <see langword="XmlSchema" />。</param>
      <returns>
        <see langword="XmlSchema" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)">
      <summary>将 <see cref="T:System.Xml.Schema.XmlSchema" /> 添加到集合。 用指定的 <see cref="T:System.Xml.XmlResolver" /> 解析任何外部引用。</summary>
      <param name="schema">要添加到集合中的 <see langword="XmlSchema" />。</param>
      <param name="resolver">用于解析 <see langword="include" /> 和 <see langword="import" /> 元素中引用的命名空间的 <see cref="T:System.Xml.XmlResolver" />。 如果这为 <see langword="null" />，则不解析外部引用。</param>
      <exception cref="T:System.Xml.XmlException">此架构不是有效的架构。</exception>
      <returns>添加到架构集合中的 <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)">
      <summary>将在给定集合（包括其关联架构）中定义的所有命名空间添加到该集合。</summary>
      <param name="schema">要添加到该集合的 <see langword="XmlSchemaCollection" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)">
      <summary>获取一个值，该值指示具有指定命名空间的架构是否在集合中。</summary>
      <param name="ns">与架构关联的命名空间 URI。 对于 XML 架构，这通常是目标命名空间。</param>
      <returns>如果具有指定的命名空间的架构在集合中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 的 <see langword="targetNamespace" /> 是否在集合中。</summary>
      <param name="schema">
        <see langword="XmlSchema" /> 对象。</param>
      <returns>如果集合中的一个架构具有同样的 <see langword="true" />，则为 <see langword="targetNamespace" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>将该集合中的所有 <see langword="XmlSchema" /> 对象复制到起始位置为给定索引的给定数组中。</summary>
      <param name="array">要向其复制对象的数组。</param>
      <param name="index">
        <paramref name="array" /> 中的索引，复制将从此处开始。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator">
      <summary>为通过架构集合的“用于每个”样式迭代提供支持。</summary>
      <returns>循环访问当前集合中所有架构的枚举。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />。</summary>
      <param name="array">要向其复制对象的数组。</param>
      <param name="index">
        <paramref name="array" /> 中的索引，复制将从此处开始。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator" />。</summary>
      <returns>集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Count">
      <summary>获取在该集合中定义的命名空间的数目。</summary>
      <returns>在该集合中定义的命名空间的数目。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Item(System.String)">
      <summary>获取与给定的命名空间 URI 关联的 <see cref="T:System.Xml.Schema.XmlSchema" />。</summary>
      <param name="ns">与要返回的架构关联的命名空间 URI。 这通常会是架构的 <see langword="targetNamespace" />。</param>
      <returns>与命名空间 URI 关联的 <see langword="XmlSchema" />；如果没有加载与给定的命名空间关联的架构，或者，如果该命名空间与 XDR 架构关联，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.NameTable">
      <summary>获取加载新架构时由 <see langword="XmlNameTable" /> 使用的默认 <see langword="XmlSchemaCollection" />。</summary>
      <returns>
        <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#Count">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Xml.Schema.XmlSchemaCollection.Count" />。</summary>
      <returns>集合中项的计数。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized" />。</summary>
      <returns>如果同步集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot" />。</summary>
      <returns>一个 <see cref="P:System.Collections.ICollection.SyncRoot" /> 对象，该对象可用于同步对集合的访问。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollectionEnumerator">
      <summary>支持对集合执行简单迭代。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext">
      <summary>将枚举换到集合中的下一个架构。</summary>
      <returns>如果移动成功，则为 <see langword="true" />；如果枚举已传递至集合的结尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext" />。</summary>
      <returns>下一个节点。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset" />。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current">
      <summary>获取集合中的当前 <see cref="T:System.Xml.Schema.XmlSchema" />。</summary>
      <returns>集合中的当前 <see langword="XmlSchema" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Current">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current" />。</summary>
      <returns>当前节点。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCompilationSettings">
      <summary>为 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 类提供架构编译选项。该类不能被继承。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCompilationSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 是否应检查唯一粒子属性 (UPA) 冲突。</summary>
      <returns>如果 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 应检查唯一粒子属性 (UPA) 冲突，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContent">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="complexContent" /> 来自 XML 架构的元素。 此类表示复杂类型的复杂内容模型。 它包含对仅具有元素或混合内容的复杂类型的扩展或限制。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContent.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.Content">
      <summary>获取或设置内容。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> 类之一，或 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> 类之一。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.IsMixed">
      <summary>获取或设置确定类型是否具有混合内容模型的信息。</summary>
      <returns>如果该属性为 <see langword="true" />，则允许字符数据出现在复杂类型（混合内容模型）的子元素之间。 默认值为 <see langword="false" />。 可选。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentExtension">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="extension" /> 来自 XML 架构的元素。 此类用于通过扩展而派生的具有复杂内容模型的复杂类型。 它通过添加属性或元素扩展复杂类型。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentExtension.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.AnyAttribute">
      <summary>获取或设置复杂内容模型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 组件。</summary>
      <returns>复杂内容模型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 组件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Attributes">
      <summary>获取复杂内容的属性集合。 包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 元素。</summary>
      <returns>复杂内容的属性集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.BaseTypeName">
      <summary>获取或设置复杂类型（该类型由它进行扩展而派生）的名称。</summary>
      <returns>复杂类型（该类型由它进行扩展而派生）的名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Particle">
      <summary>获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类之一。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类之一。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentRestriction">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="restriction" /> 来自 XML 架构的元素。 此类用于具有由限制派生出的复杂内容模型的复杂类型。 它将复杂类型的内容限制为继承的复杂类型的子集。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentRestriction.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.AnyAttribute">
      <summary>获取或设置复杂内容模型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 组件。</summary>
      <returns>复杂内容模型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 组件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Attributes">
      <summary>获取复杂类型的属性集合。 包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 元素。</summary>
      <returns>复杂类型的属性集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.BaseTypeName">
      <summary>获取或设置复杂类型（该类型通过它进行限制而派生）的名称。</summary>
      <returns>复杂类型（该类型通过它进行限制而派生）的名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Particle">
      <summary>获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类之一。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类之一。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexType">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="complexType" /> 来自 XML 架构的元素。 此类定义一个复杂类型，它确定属性集和元素的内容。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexType.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AnyAttribute">
      <summary>获取或设置复杂类型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 组件的值。</summary>
      <returns>复杂类型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 组件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Attributes">
      <summary>获取复杂类型的属性集合。</summary>
      <returns>包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 类。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeUses">
      <summary>获取该复杂类型及其基类型的所有已编译属性的集合。</summary>
      <returns>来自该复杂类型及其基类型的所有属性的集合。 <see langword="AttributeUses" /> 属性的编译后值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeWildcard">
      <summary>获取该复杂类型及其基类型的 <see langword="anyAttribute" /> 的编译后值。</summary>
      <returns>
        <see langword="anyAttribute" /> 属性的编译后值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Block">
      <summary>获取或设置 <see langword="block" /> 特性。</summary>
      <returns>
        <see langword="block" /> 特性禁止在指定的派生类型中使用复杂类型。 默认值为 <see langword="XmlSchemaDerivationMethod.None" />。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.BlockResolved">
      <summary>在已将类型编译为架构验证后信息集 (infoset) 之后获取值。 该值指示在实例文档中使用 <see langword="xsi:type" /> 时如何强制类型。</summary>
      <returns>架构验证后信息 infoset 值。 默认为 <see langword="BlockDefault" /> 元素中的 <see langword="schema" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentModel">
      <summary>获取或设置该复杂类型的编译后 <see cref="T:System.Xml.Schema.XmlSchemaContentModel" />。</summary>
      <returns>内容模型类型，它是 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> 类之一。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentType">
      <summary>获取复杂类型的内容模型，它保存编译后值。</summary>
      <returns>复杂类型的内容模型的编译后值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentTypeParticle">
      <summary>获取保存 <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> 粒子的编译后值的粒子。</summary>
      <returns>内容类型的微粒。 <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> 粒子的编译后值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsAbstract">
      <summary>获取或设置信息，该信息确定是否可在实例文档中使用 <see langword="complexType" /> 元素。</summary>
      <returns>如果为 <see langword="true" />，则元素不可以直接使用该 <see langword="complexType" /> 元素，而是必须使用从该 <see langword="complexType" /> 元素中派生的复杂类型。 默认值为 <see langword="false" />。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsMixed">
      <summary>获取或设置确定复杂类型是否具有混合内容模型（内容中的标记）的相关信息。</summary>
      <returns>如果字符数据可以出现在此复杂类型的子元素之间，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Particle">
      <summary>获取组合类型或将其设置为 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类之一。</summary>
      <returns>合成程序类型。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContent">
      <summary>架构内容的抽象类。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContent.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaContent" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentModel">
      <summary>指定一种类型的子元素的顺序和结构。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContentModel.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaContentModel.Content">
      <summary>获取或设置类型的内容。</summary>
      <returns>提供类型的内容。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentProcessing">
      <summary>提供有关 <see langword="any" /> 和 <see langword="anyAttribute" /> 元素替换的验证模式的信息。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Lax">
      <summary>如果找到关联架构，则验证文档项。 否则，不会引发任何错误。
        
如果未验证该项，则 XML 处理器尝试通过 <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> 的验证事件处理程序通知客户端。 如果尚未设置验证事件处理程序，生成警告时不返回任何信息。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.None">
      <summary>未验证文档项。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Skip">
      <summary>文档项必须由格式良好的 XML 组成，并且未经架构验证。
        
XML 处理器尝试通过 <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> 的验证事件处理程序通知客户端给定项未发生验证。 如果尚未设置验证事件处理程序，生成警告时不返回任何信息。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Strict">
      <summary>架构处理器必须找到与指示的命名空间关联的架构才能验证文档项。
        
如果处理器无法找到架构或如果未验证项，则 XML 处理器尝试通过 <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> 的验证事件处理程序通知客户端。 如果发生验证错误且不提供验证事件处理程序，将引发异常。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentType">
      <summary>复杂类型的内容模型的枚举。 这表示后架构验证信息集 (infoset) 中的内容。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.ElementOnly">
      <summary>纯元素内容。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Empty">
      <summary>空内容。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Mixed">
      <summary>混合内容。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.TextOnly">
      <summary>纯文本内容。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatype">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 类是将 XML 架构定义语言 (XSD) 类型映射为公共语言运行时 (CLR) 类型的抽象类。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type)">
      <summary>将指定值转换为指定的 CLR 类型，该指定值的类型为由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示的 XML 架构类型的一种有效公共语言运行时 (CLR) 表示形式。</summary>
      <param name="value">要转换为指定类型的输入值。</param>
      <param name="targetType">输入值要转换成的目标类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Object" /> 或 <see cref="T:System.Type" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示的类型不支持从指定值的类型转换为指定类型。</exception>
      <returns>转换后的输入值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>如果 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示 xs:QName 类型或从中派生的类型，将指定值转换为用 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 指定的 CLR 类型，该指定值的类型为用 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示的 XML 架构类型的一种有效公共语言运行时 (CLR) 表示形式。</summary>
      <param name="value">要转换为指定类型的输入值。</param>
      <param name="targetType">输入值要转换成的目标类型。</param>
      <param name="namespaceResolver">用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" />。 只有 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示 xs:QName 类型或从该类型派生的类型时，这才有用。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Object" /> 或 <see cref="T:System.Type" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示的类型不支持从指定值的类型转换为指定类型。</exception>
      <returns>转换后的输入值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)">
      <summary>
        <see cref="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)" /> 方法始终返回 <see langword="false" />。</summary>
      <param name="datatype">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
      </param>
      <returns>始终返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)">
      <summary>当在派生类中重写时，根据内置或用户定义的简单类型验证指定的 <see langword="string" />。</summary>
      <param name="s">要根据简单类型验证的 <see langword="string" />。</param>
      <param name="nameTable">如果 <see cref="T:System.Xml.XmlNameTable" /> 对象表示 xs:NCName 类型，在分析 <see langword="string" /> 时用于原子化的 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</param>
      <param name="nsmgr">如果 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象表示 xs:QName 类型，在分析 <see langword="string" /> 时使用的 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 对象。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">输入值不是该 W3C XML 架构类型的有效实例。</exception>
      <exception cref="T:System.ArgumentNullException">要分析的值不可以为 <see langword="null" />。</exception>
      <returns>
        <see cref="T:System.Object" />，它可以被安全地强制转换为由 <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" /> 属性返回的类型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType">
      <summary>当在派生类中重写时，获取在 WWW 联合会 (W3C) XML 1.0 规范中指定的 <see langword="string" /> 的类型。</summary>
      <returns>用于 <see langword="string" /> 的 <see cref="T:System.Xml.XmlTokenizedType" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TypeCode">
      <summary>获取简单类型的 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值。</summary>
      <returns>简单类型的 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.ValueType">
      <summary>在派生类中重写时，获取项的公共语言运行时 (CLR) 类型。</summary>
      <returns>项的公共语言运行时 (CLR) 类型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.Variety">
      <summary>获取简单类型的 <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 值。</summary>
      <returns>简单类型的 <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatypeVariety">
      <summary>指定此类型的 W3C XML 架构数据类型种类。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Atomic">
      <summary>一种 W3C XML 架构原子类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.List">
      <summary>一种 W3C XML 架构列表类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Union">
      <summary>一种 W3C XML 架构联合类型。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDerivationMethod">
      <summary>提供阻止派生的不同方法。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.All">
      <summary>
        <see langword="#all" />. 引用所有派生方法。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Empty">
      <summary>重写默认派生方法以允许所有派生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Extension">
      <summary>通过 <see langword="Extension" /> 引用派生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.List">
      <summary>通过 <see langword="List" /> 引用派生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.None">
      <summary>接受默认派生方法。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction">
      <summary>通过 <see langword="Restriction" /> 引用派生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution">
      <summary>通过 <see langword="Substitution" /> 引用派生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Union">
      <summary>通过 <see langword="Union" /> 引用派生。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDocumentation">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="documentation" /> 来自 XML 架构的元素。 此类在 <see langword="annotation" /> 中指定人们要读取或使用的信息。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDocumentation.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaDocumentation" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Language">
      <summary>获取或设置 <see langword="xml:lang" /> 特性。 这作为在内容中使用的语言的指示器。</summary>
      <returns>
        <see langword="xml:lang" /> 特性。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Markup">
      <summary>获取或设置 <see langword="XmlNodes" /> 的数组，它表示文档子节点。</summary>
      <returns>表示文档子节点的数组。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Source">
      <summary>获取或设置信息的统一资源标识符 (URI) 源。</summary>
      <returns>URI 引用。 默认值为 <see langword="String.Empty" />。 可选。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaElement">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="element" /> 来自 XML 架构的元素。 此类是所有微粒类型的基类，用于描述 XML 文档中的元素。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaElement.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Block">
      <summary>获取或设置 <see langword="Block" /> 派生。</summary>
      <returns>用于阻止类型派生的属性。 默认值为 <see langword="XmlSchemaDerivationMethod.None" />。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.BlockResolved">
      <summary>获取 <see langword="Block" /> 属性的编译后值。</summary>
      <returns>
        <see langword="Block" /> 属性的编译后值。 默认为 <see langword="BlockDefault" /> 元素中的 <see langword="schema" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Constraints">
      <summary>获取对元素的约束的集合。</summary>
      <returns>约束的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.DefaultValue">
      <summary>如果元素的内容是简单类型，或者元素的内容为 <see langword="textOnly" />，获取或设置元素的默认值。</summary>
      <returns>元素的默认值。 默认为空引用。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementSchemaType">
      <summary>获取一个 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象，该对象表示元素基于其 <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaType" /> 或 <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName" /> 值的类型。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementType">
      <summary>基于保存编译后 <see langword="ElementType" /> 属性值的元素的 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaElement" />，获取公共语言运行时 (CLR) 对象。</summary>
      <returns>公共语言运行库对象。 <see langword="ElementType" /> 属性的编译后值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Final">
      <summary>获取或设置 <see langword="Final" /> 属性以指示不允许进一步派生。</summary>
      <returns>
        <see langword="Final" /> 属性。 默认值为 <see langword="XmlSchemaDerivationMethod.None" />。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FinalResolved">
      <summary>获取 <see langword="Final" /> 属性的编译后值。</summary>
      <returns>
        <see langword="Final" /> 属性的编译后值。 默认值为 <see langword="FinalDefault" /> 元素中的 <see langword="schema" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FixedValue">
      <summary>获取或设置固定值。</summary>
      <returns>预设的且不可更改的固定值。 默认为空引用。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Form">
      <summary>获取或设置元素的窗体。</summary>
      <returns>该元素的形式。 默认为 <see cref="P:System.Xml.Schema.XmlSchema.ElementFormDefault" /> 值。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsAbstract">
      <summary>获取或设置信息以指示是否可在实例文档中使用该元素。</summary>
      <returns>如果为 <see langword="true" />，则元素不能出现在实例文档中。 默认值为 <see langword="false" />。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsNillable">
      <summary>获取或设置指示 <see langword="xsi:nil" /> 是否可以在实例数据中出现的信息。 指示是否可以为元素赋予显式 Nil 值。</summary>
      <returns>如果 nillable 为 <see langword="true" />，元素的实例便可以将 <see langword="nil" /> 特性设置为 <see langword="true" />。 <see langword="nil" /> 特性被定义为实例的“XML 架构”命名空间的一部分。 默认值为 <see langword="false" />。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Name">
      <summary>获取或设置元素的名称。</summary>
      <returns>元素的名称。 默认值为 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.QualifiedName">
      <summary>获取给定元素的实际限定名称。</summary>
      <returns>元素的限定名。 <see langword="QualifiedName" /> 属性的编译后值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.RefName">
      <summary>获取或设置在该架构（或指定的命名空间指示的另一个架构）中声明的元素的引用名称。</summary>
      <returns>元素的引用名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaType">
      <summary>获取或设置元素类型。 这可以是复杂类型，也可以是简单类型。</summary>
      <returns>元素的类型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName">
      <summary>获取或设置在该架构或由指定的命名空间指示的其他架构中定义的内置数据类型的名称。</summary>
      <returns>内置数据类型的名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SubstitutionGroup">
      <summary>获取或设置由该元素替换的元素的名称。</summary>
      <returns>由该元素替换的元素的限定名称。 可选。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaEnumerationFacet">
      <summary>按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的 <see langword="enumeration" /> 方面。 此类为 simpleType 元素指定有效值列表。 声明包含在 <see langword="restriction" /> 声明中。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaEnumerationFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaException">
      <summary>返回关于架构异常的详细信息。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用包含 <see langword="XmlSchemaException" /> 所有属性的给定的 <see langword="SerializationInfo" /> 和 <see langword="StreamingContext" /> 信息构造新的 <see langword="XmlSchemaException" /> 对象。</summary>
      <param name="info">SerializationInfo。</param>
      <param name="context">StreamingContext。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String)">
      <summary>用指定的异常消息初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 类的新实例。</summary>
      <param name="message">关于错误情况的 <see langword="string" /> 说明。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)">
      <summary>使用异常消息和导致此指定的异常的原始 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 对象初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
      <param name="message">关于错误情况的 <see langword="string" /> 说明。</param>
      <param name="innerException">导致该异常的原始 <see cref="T:System.Exception" /> 对象。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>使用指定的异常消息和导致此指定异常的原始 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 对象、XML 的行号和行位置初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
      <param name="message">关于错误情况的 <see langword="string" /> 说明。</param>
      <param name="innerException">导致该异常的原始 <see cref="T:System.Exception" /> 对象。</param>
      <param name="lineNumber">导致该异常的 XML 行号。</param>
      <param name="linePosition">导致此异常的 XML 的行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>对于给定的 <see langword="XmlSchemaException" />，将所有的 <see langword="SerializationInfo" /> 属性流式写入 <see langword="StreamingContext" /> 类。</summary>
      <param name="info">
        <see langword="SerializationInfo" />
      </param>
      <param name="context">
        <see langword="StreamingContext" /> 信息。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LineNumber">
      <summary>获取指示错误发生位置的行号。</summary>
      <returns>指示错误发生位置的行号。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LinePosition">
      <summary>获取指示错误发生位置的行位置。</summary>
      <returns>指示错误发生位置的行位置。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.Message">
      <summary>获取此异常的错误情况的说明。</summary>
      <returns>此异常的错误情况的说明。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceSchemaObject">
      <summary>生成 <see langword="XmlSchemaObject" /> 的 <see langword="XmlSchemaException" />。</summary>
      <returns>有效的对象实例表示 XML“架构对象模型”(SOM) 中的结构验证错误。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceUri">
      <summary>获取导致此异常的架构的统一资源标识符 (URI) 位置。</summary>
      <returns>导致此异常的架构的 URI 位置。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaExternal">
      <summary>一个抽象类。 提供有关所包含架构的信息。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaExternal.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Id">
      <summary>获取或设置字符串 ID。</summary>
      <returns>字符串 id。默认值为 <see langword="String.Empty" /> 。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Schema">
      <summary>获取或设置所引用架构的 <see langword="XmlSchema" />。</summary>
      <returns>所引用架构的 <see langword="XmlSchema" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.SchemaLocation">
      <summary>获取或设置架构的唯一资源标识符 (URI) 位置，该位置告诉架构处理器架构所在的物理位置。</summary>
      <returns>架构的 URI 位置。 对于所导入架构可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.UnhandledAttributes">
      <summary>获取或设置不属于架构目标命名空间的限定属性。</summary>
      <returns>属于另一个目标命名空间的限定特性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFacet">
      <summary>当简单类型由限制派生时，使用所有方面的抽象类。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaFacet" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.IsFixed">
      <summary>获取或设置指示此方面已固定的信息。</summary>
      <returns>如果为 <see langword="true" />，则值是固定的；否则为 <see langword="false" />。 默认值为 <see langword="false" />。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.Value">
      <summary>获取或设置此方面的 <see langword="value" /> 特性。</summary>
      <returns>value 特性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary>指示是否需要用命名空间前缀限定特性或元素。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary>架构中不指定元素和属性窗体。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary>必须用命名空间前缀限定元素和属性。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary>不要求用命名空间前缀限定元素和属性。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet">
      <summary>指定可以为 simpleType 元素的小数值输入的位数的限制。 fractionDigits 的值必须是正整数。 表示“万维网联合会”(W3C)<see langword="fractionDigits" /> 方面。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFractionDigitsFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroup">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="group" /> 来自 XML 架构的元素。 此类在 <see langword="schema" /> 级别上定义从复杂类型中引用的组。 它将若干元素声明归为一组，以便将它们当作一个组并入复杂类型定义。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroup.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaGroup" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Name">
      <summary>获取或设置架构组的名称。</summary>
      <returns>架构组的名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Particle">
      <summary>获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类之一。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类之一。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.QualifiedName">
      <summary>获取架构组的限定名称。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlQualifiedName" /> 对象，表示架构组的限定名。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupBase">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAll" /> , <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> 的一个抽象类，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupBase.Items">
      <summary>该集合用于将新元素添至复合器。</summary>
      <returns>
        <see langword="XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupRef">
      <summary>按万维网联合会 (W3C)指定的方式表示来自 XML 架构的具有 <see langword="ref" /> 属性的 <see langword="group" /> 元素。 此类在复杂类型中使用，而这些复杂类型引用在 <see langword="group" /> 级别定义的 <see langword="schema" />。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroupRef.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.Particle">
      <summary>获取 <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> 类、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 类或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类中的一个，这些类保存 <see langword="Particle" /> 属性的编译后值。</summary>
      <returns>
        <see langword="Particle" /> 属性的编译后值（<see cref="T:System.Xml.Schema.XmlSchemaChoice" /> 类、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 类或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类之一）。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.RefName">
      <summary>获取或设置在此架构（或指定命名空间指示的其他架构）中定义的组的名称。</summary>
      <returns>在此架构中定义的组的名称。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaIdentityConstraint">
      <summary>标识约束的类：<see langword="key" />、<see langword="keyref" /> 和 <see langword="unique" /> 元素。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaIdentityConstraint.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaIdentityConstraint" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Fields">
      <summary>获取应用为“XML 路径语言”(XPath) 表达式选择器的子级的域集合。</summary>
      <returns>字段的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Name">
      <summary>获取或设置标识约束的名称。</summary>
      <returns>标识约束的名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.QualifiedName">
      <summary>获取标识约束的限定名，此标识约束保留 <see langword="QualifiedName" /> 属性的编译后值。</summary>
      <returns>
        <see langword="QualifiedName" /> 属性的编译后值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Selector">
      <summary>获取或设置 XPath 表达式 <see langword="selector" /> 元素。</summary>
      <returns>XPath 表达式 <see langword="selector" /> 元素。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaImport">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="import" /> 来自 XML 架构的元素。 此类用于从其他架构导入架构组件。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaImport.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaImport" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Annotation">
      <summary>获取或设置 <see langword="annotation" /> 属性。</summary>
      <returns>批注。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Namespace">
      <summary>获取或设置作为统一资源标识符 (URI) 引用的已导入架构的目标命名空间。</summary>
      <returns>作为 URI 引用的已导入架构的目标命名空间。 可选。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInclude">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="include" /> 来自 XML 架构的元素。 此类用于包括来自外部架构的声明和定义。 然后，包括的声明和定义可用于包含架构中的处理。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInclude.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaInclude" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInclude.Annotation">
      <summary>获取或设置 <see langword="annotation" /> 属性。</summary>
      <returns>批注。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference">
      <summary>从 XML 文档中推理出 XML 架构定义语言 (XSD) 架构。 不能继承 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 类。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 对象包含的 XML 文档推理出 XML 架构定义语言 (XSD) 架构。</summary>
      <param name="instanceDocument">
        <see cref="T:System.Xml.XmlReader" /> 对象，该对象包含要从其推理出架构的 XML 文档。</param>
      <exception cref="T:System.Xml.XmlException">XML 文档不是格式良好的文档。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">
        <see cref="T:System.Xml.XmlReader" /> 对象不位于根节点或元素上。 架构推理过程中出现错误。</exception>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，该对象包含推理出的架构。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 对象包含的 XML 文档推理出 XML 架构定义语言 (XSD) 架构，并通过用相同目标命名空间指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象中的现有架构精炼已推理出的架构。</summary>
      <param name="instanceDocument">
        <see cref="T:System.Xml.XmlReader" /> 对象，该对象包含要从其推理出架构的 XML 文档。</param>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，包含用于精炼推理出的架构的现有架构。</param>
      <exception cref="T:System.Xml.XmlException">XML 文档不是格式良好的文档。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">
        <see cref="T:System.Xml.XmlReader" /> 对象不位于根节点或元素上。 架构推理过程中出现错误。</exception>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，该对象包含推理出的架构。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.Occurrence">
      <summary>获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 值，该值影响从 XML 文档推理出的架构匹配项声明。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.TypeInference">
      <summary>获取或设置影响从 XML 文档推理出的类型的 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 值。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 对象。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference.InferenceOption">
      <summary>影响 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 类推导出的有关 XML 文档中元素和特性的匹配项和类型信息。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed">
      <summary>指示应推导特定元素或特性的限制性较低的架构声明。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted">
      <summary>指示应推导特定元素或特性的限制性较高的架构声明。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInferenceException">
      <summary>返回有关 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 类在从 XML 文档推断架构时所遇错误的信息。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象（这两个对象包含 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 的所有属性）初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 类的新实例。</summary>
      <param name="message">对错误的说明。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception)">
      <summary>用指定的错误信息和导致指定的 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的原始 <see cref="T:System.Exception" /> 初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 类的新实例。</summary>
      <param name="message">对错误的说明。</param>
      <param name="innerException">一个 <see cref="T:System.Exception" /> 对象，它包含导致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的原始异常。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>用指定的错误信息、导致指定的 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的原始 <see cref="T:System.Exception" /> 和指定 XML 文档中错误的行号和行位置初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 类的新实例。</summary>
      <param name="message">对错误的说明。</param>
      <param name="innerException">一个 <see cref="T:System.Exception" /> 对象，它包含导致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的原始异常。</param>
      <param name="lineNumber">XML 文档中的行号，导致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />。</param>
      <param name="linePosition">XML 文档中的行位置，导致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将所有 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 对象属性流式处理到为指定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象指定的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象中。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInfo">
      <summary>表示已验证的 XML 节点的后架构验证信息集。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInfo.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.ContentType">
      <summary>获取或设置对应于此已验证的 XML 节点的内容类型的 <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsDefault">
      <summary>获取或设置一个值，该值指示这个被验证的 XML 节点是否设置为在 XML 架构定义语言 (XSD) 架构验证期间应用的默认值的结果。</summary>
      <returns>一个 <see langword="bool" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsNil">
      <summary>获取或设置一个值，此值指示这个被验证的 XML 节点的值是否为零。</summary>
      <returns>一个 <see langword="bool" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.MemberType">
      <summary>获取或设置这个被验证的 XML 节点的动态架构类型。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute">
      <summary>获取或设置编译的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 对象，此对象与这个被验证的 XML 节点相对应。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaElement">
      <summary>获取或设置编译的 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 对象，此对象与这个被验证的 XML 节点相对应。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaType">
      <summary>获取或设置这个被验证的 XML 节点的静态 XML 架构定义语言 (XSD) 架构类型。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.Validity">
      <summary>获取或设置这个被验证的 XML 节点的 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKey">
      <summary>此类按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的 <see langword="key" /> 元素。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKey.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaKey" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKeyref">
      <summary>此类按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的 <see langword="keyref" /> 元素。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKeyref.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaKeyref" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaKeyref.Refer">
      <summary>获取或设置键的名称（此约束在另一个简单或复杂的类型中引用）。</summary>
      <returns>此约束引用的键的 QName。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaLengthFacet">
      <summary>按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的 <see langword="length" /> 方面。 此类可用于指定数据类型的 <see langword="simpleType" /> 元素的长度限制。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaLengthFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="maxExclusive" /> 来自 XML 架构的元素。 此类可用于指定对 <see langword="simpleType" /> 元素的最大值的限制。 该元素的值必须小于 <see langword="maxExclusive" /> 元素的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxExclusiveFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="maxInclusive" /> 来自 XML 架构的元素。 此类可用于指定对 <see langword="simpleType" /> 元素的最大值的限制。 该元素的值必须小于或等于 <see langword="maxInclusive" /> 元素的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxInclusiveFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxLengthFacet">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="maxLength" /> 来自 XML 架构的元素。 此类可用于指定对 <see langword="simpleType" /> 元素数据值的最大长度的限制。 该长度必须小于 <see langword="maxLength" /> 元素的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxLengthFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="minExclusive" /> 来自 XML 架构的元素。 此类可用于对 <see langword="simpleType" /> 元素的最小值进行限制。 此元素的值必须大于 <see langword="minExclusive" /> 元素的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinExclusiveFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="minInclusive" /> 来自 XML 架构的元素。 此类可用于对 simpleType 元素的最小值进行限制。 此元素的值必须大于或等于 <see langword="minInclusive" /> 元素的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinInclusiveFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinLengthFacet">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="minLength" /> 来自 XML 架构的元素。 此类可以用来指定 <see langword="simpleType" /> 元素的数据值的最小长度限制。 该长度必须大于 <see langword="minLength" /> 元素的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinLengthFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNotation">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="notation" /> 来自 XML 架构的元素。 XML 架构 <see langword="notation" /> 声明是 <see langword="XML 1.0 NOTATION" /> 声明的重新构造。 批注的目的是描述 XML 文档中的非 XML 数据的格式。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNotation.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaNotation" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Name">
      <summary>获取或设置批注的名称。</summary>
      <returns>批注的名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Public">
      <summary>获取或设置 <see langword="public" /> 标识符。</summary>
      <returns>
        <see langword="public" /> 标识符。 该值必须是有效的统一资源标识符 (URI)。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.System">
      <summary>获取或设置 <see langword="system" /> 标识符。</summary>
      <returns>
        <see langword="system" /> 标识符。 该值必须是有效的 URI。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNumericFacet">
      <summary>用于定义 <see langword="numeric" /> 方面的抽象类。 此类是数值方面类（如 <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />）的基类</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNumericFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaNumericFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary>表示 Xml 架构对象模型层次结构的根类，并作为诸如 <see cref="T:System.Xml.Schema.XmlSchema" /> 的类基类。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LineNumber">
      <summary>获取或设置 <see langword="schema" /> 元素引用的文件中的行号。</summary>
      <returns>行号。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LinePosition">
      <summary>获取或设置 <see langword="schema" /> 元素引用的文件中的行位置。</summary>
      <returns>行位置。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Namespaces">
      <summary>获取或设置用于此架构对象的 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />。</summary>
      <returns>架构对象的 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 属性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Parent">
      <summary>获取或设置此 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的父级。</summary>
      <returns>此 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的父级 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.SourceUri">
      <summary>获取或设置加载了架构的文件的源位置。</summary>
      <returns>文件的源位置 (URI)。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectCollection">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的集合。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor">
      <summary>初始化 <see langword="XmlSchemaObjectCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)">
      <summary>初始化使用 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的 <see langword="XmlSchemaObjectCollection" /> 类的新实例。</summary>
      <param name="parent">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)">
      <summary>将 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 添加到 <see langword="XmlSchemaObjectCollection" /> 中。</summary>
      <param name="item">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  
  
- 或 - 
 <paramref name="index" /> 大于 <see langword="Count" />。</exception>
      <exception cref="T:System.InvalidCastException">指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 参数的类型不是 <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> 类型或其派生类型 <see cref="T:System.Xml.Schema.XmlSchemaImport" />、<see cref="T:System.Xml.Schema.XmlSchemaInclude" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaRedefine" />。</exception>
      <returns>添加项时所在的索引。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)">
      <summary>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 是否在 <see langword="XmlSchemaObjectCollection" /> 中。</summary>
      <param name="item">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />
      </param>
      <returns>如果指定限定名在集合内，则为 <see langword="true" />；否则返回 <see langword="false" />。 如果提供了空值，会因为没有具有空名称的限定名而返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)">
      <summary>将集合中的所有 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 复制到给定数组中并从给定索引处开始。</summary>
      <param name="array">一维数组，它是从 <see langword="XmlSchemaObjectCollection" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">数组中开始复制的位置的索引（从零开始）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。  
  
- 或 - 
 <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。  
  
- 或 - 
源 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 中的元素数大于从索引到目标数组末尾处的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的类型无法自动转换为目标数组的类型。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator">
      <summary>返回用于循环访问 <see langword="XmlSchemaObjects" /> 中包含的 <see langword="XmlSchemaObjectCollection" /> 的枚举数。</summary>
      <returns>该迭代程序返回 <see cref="T:System.Xml.Schema.XmlSchemaObjectEnumerator" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)">
      <summary>获取与指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 相对应的集合索引。</summary>
      <param name="item">要返回其索引的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <returns>与指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 相对应的索引。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)">
      <summary>将 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 插入 <see langword="XmlSchemaObjectCollection" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入项。</param>
      <param name="item">要插入的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  
  
- 或 - 
 <paramref name="index" /> 大于 <see langword="Count" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnClear">
      <summary>在标准的 <see langword="OnClear" /> 行为之前调用 <see langword="Clear" />。 有关更多信息，请参见 <see cref="T:System.Collections.CollectionBase" /> 的 OnClear 方法。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary>在标准的 <see langword="OnInsert" /> 行为之前调用 <see langword="Insert" />。 有关更多信息，请参见 <see cref="T:System.Collections.CollectionBase" /> 的 <see langword="OnInsert" /> 方法。</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的索引。</param>
      <param name="item">项。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnRemove(System.Int32,System.Object)">
      <summary>在标准的 <see langword="OnRemove" /> 行为之前调用 <see langword="Remove" />。 有关更多信息，请参见 <see cref="T:System.Collections.CollectionBase" /> 的 <see langword="OnRemove" /> 方法。</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的索引。</param>
      <param name="item">项。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>在标准的 <see langword="OnSet" /> 行为之前调用 <see langword="Set" />。 有关更多信息，请参见 <see cref="T:System.Collections.CollectionBase" /> 的 OnSet 方法。</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的索引。</param>
      <param name="oldValue">旧值。</param>
      <param name="newValue">新值。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)">
      <summary>从 <see langword="XmlSchemaObjectCollection" /> 移除 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</summary>
      <param name="item">要移除的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectCollection.Item(System.Int32)">
      <summary>获取位于指定索引处的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的索引。</param>
      <returns>指定索引处的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectEnumerator">
      <summary>表示 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> 的枚举器。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext">
      <summary>移至集合中的下一项。</summary>
      <returns>集合末尾处的 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset">
      <summary>将枚举数重置为集合的开头。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext" />。</summary>
      <returns>下一个 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Reset">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset" />。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current">
      <summary>获取集合中的当前 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</summary>
      <returns>当前的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current" />。</summary>
      <returns>当前的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectTable">
      <summary>提供 <see cref="T:System.Xml.Schema.XmlSchema" /> 类中包含的元素（例如，Attributes、AttributeGroups、Elements 等）的集合。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)">
      <summary>确定集合中是否存在指定的限定名。</summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" />
      </param>
      <returns>如果集合中存在指定的限定名，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator">
      <summary>返回一个可以循环访问 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 的枚举器。</summary>
      <returns>一个可循环访问 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Count">
      <summary>获取 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中包含的项的数量。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中包含的项的数量。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Item(System.Xml.XmlQualifiedName)">
      <summary>返回由限定名指定的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中的元素。</summary>
      <param name="name">要返回的元素的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>由限定名指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 中的元素的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Names">
      <summary>返回 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所有命名元素的集合。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所有命名元素的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Values">
      <summary>返回 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所有元素的所有值的集合。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所有元素的所有值的集合。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaParticle">
      <summary>所有粒子类型的基类的抽象类（例如，<see cref="T:System.Xml.Schema.XmlSchemaAny" />）。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaParticle.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccurs">
      <summary>获取或设置粒子可发生的最大次数。</summary>
      <returns>粒子可发生的最大次数。 默认值为 1。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccursString">
      <summary>获取设置字符串值形式的数字。 粒子可发生的最大次数。</summary>
      <returns>字符串值形式的数字。 <see langword="String.Empty" /> 指示 <see langword="MaxOccurs" /> 等于默认值。 默认为空引用。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccurs">
      <summary>获取或设置粒子可发生的最小次数。</summary>
      <returns>粒子可发生的最小次数。 默认值为 1。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccursString">
      <summary>获取设置字符串值形式的数字。 粒子可发生的最小次数。</summary>
      <returns>字符串值形式的数字。 <see langword="String.Empty" /> 指示 <see langword="MinOccurs" /> 等于默认值。 默认为空引用。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaPatternFacet">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="pattern" /> 来自 XML 架构的元素。 此类可用于对为 <see langword="simpleType" /> 元素输入的值进行限制。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaPatternFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaRedefine">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="redefine" /> 来自 XML 架构的元素。 此类可用于允许在当前架构中重新定义来自外部架构文件中的简单和复杂类型、组和属性组。 此类还可用于为架构元素提供版本控制。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaRedefine.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaRedefine" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.AttributeGroups">
      <summary>获取架构中所有特性的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />，它保存 <see langword="AttributeGroups" /> 属性的编译后值。</summary>
      <returns>架构中所有特性的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="AttributeGroups" /> 属性的编译后值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Groups">
      <summary>获取架构中所有组的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />，它保存 <see langword="Groups" /> 属性的编译后值。</summary>
      <returns>架构中所有组的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="Groups" /> 属性的编译后值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Items">
      <summary>获取下列类的集合：<see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />、<see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />、<see cref="T:System.Xml.Schema.XmlSchemaComplexType" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaGroup" />。</summary>
      <returns>重新定义的元素中包含的元素。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.SchemaTypes">
      <summary>获取用于架构中所有简单和复杂类型的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />，此架构保存 <see langword="SchemaTypes" /> 属性的编译后值。</summary>
      <returns>架构中所有架构类型的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="SchemaTypes" /> 属性的编译后值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSequence">
      <summary>按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的 <see langword="sequence" /> 元素（复合器）。 <see langword="sequence" /> 要求组中的元素以指定的顺序出现在包含元素中。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSequence.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSequence.Items">
      <summary>包含在排序器中的元素。 <see cref="T:System.Xml.Schema.XmlSchemaElement" />、 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaAny" /> 的集合。</summary>
      <returns>包含在排序器中的元素。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
      <summary>包含 XML 架构定义语言 (XSD) 架构的缓存。</summary>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler">
      <summary>指定一个事件处理程序，用于接收有关 XML 架构定义语言 (XSD) 架构验证错误的信息。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)">
      <summary>使用指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。</summary>
      <param name="nameTable">要使用的 <see cref="T:System.Xml.XmlNameTable" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.XmlNameTable" /> 对象为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)">
      <summary>将位于指定 URL 的 XML 架构定义语言 (XSD) 架构添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="targetNamespace">架构的 <paramref name="targetNamespace" /> 属性或 <see langword="null" /> 以使用架构中指定的 <paramref name="targetNamespace" />。</param>
      <param name="schemaUri">指定要加载的架构的 URL。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">该架构无效。</exception>
      <exception cref="T:System.ArgumentNullException">作为参数传递的 URL 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>如果架构有效，则为 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。 如果架构无效且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，则将返回 <see langword="null" /> 并引发适当的验证事件。 否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)">
      <summary>将 <see cref="T:System.Xml.XmlReader" /> 中包含的 XML 架构定义语言 (XSD) 架构添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="targetNamespace">架构的 <paramref name="targetNamespace" /> 属性或 <see langword="null" /> 以使用架构中指定的 <paramref name="targetNamespace" />。</param>
      <param name="schemaDocument">
        <see cref="T:System.Xml.XmlReader" /> 对象。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">该架构无效。</exception>
      <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.XmlReader" /> 对象为 <see langword="null" />。</exception>
      <returns>如果架构有效，则为 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。 如果架构无效且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，则将返回 <see langword="null" /> 并引发适当的验证事件。 否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)">
      <summary>将指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schema">添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">该架构无效。</exception>
      <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象为 <see langword="null" />。</exception>
      <returns>如果架构有效，则为 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。 如果架构无效且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，则将返回 <see langword="null" /> 并引发适当的验证事件。 否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)">
      <summary>将给定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的所有 XML 架构定义语言 (XSD) 架构添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的架构无效。</exception>
      <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Compile">
      <summary>将添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD) 架构编译成一个逻辑架构。</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">当验证和编译 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的架构时发生错误。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)">
      <summary>指示具有指定目标命名空间 URI 的 XML 架构定义语言 (XSD) 架构是否位于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="targetNamespace">架构 <paramref name="targetNamespace" /> 属性。</param>
      <returns>如果具有指定目标命名空间 URI 的架构位于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)">
      <summary>指示指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> 对象是否位于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 为 <see langword="null" />。</exception>
      <returns>如果 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>将 <see cref="T:System.Xml.Schema.XmlSchema" /> 中的所有 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象复制到起始位置为给定索引的给定数组中。</summary>
      <param name="schemas">要向其复制对象的数组。</param>
      <param name="index">数组中开始复制处的索引。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)">
      <summary>从 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 移除指定的 XML 架构定义语言 (XSD) 架构。</summary>
      <param name="schema">要从 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">此架构不是有效的架构。</exception>
      <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchema" /> 为 <see langword="null" />。</exception>
      <returns>从 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，或如果在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中未找到该架构，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)">
      <summary>从 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中移除指定的 XML 架构定义语言 (XSD) 架构和它导入的所有架构。</summary>
      <param name="schemaToRemove">要从 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchema" /> 为 <see langword="null" />。</exception>
      <returns>如果已成功移除 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象和其导入的所有内容，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)">
      <summary>重新处理已经存在于 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XML 架构定义语言 (XSD) 架构。</summary>
      <param name="schema">要重新处理的架构。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">该架构无效。</exception>
      <exception cref="T:System.ArgumentNullException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">作为参数传递的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象并不存在于 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中。</exception>
      <returns>如果架构有效，则为 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。 如果架构无效且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，则将返回 <see langword="null" /> 并引发适当的验证事件。 否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas">
      <summary>返回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 架构定义语言 (XSD) 架构的集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，它包含已添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的所有架构。 如果没有架构添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，则返回空的 <see cref="T:System.Collections.ICollection" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)">
      <summary>返回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中属于给定命名空间的所有 XML 架构定义语言 (XSD) 架构的集合。</summary>
      <param name="targetNamespace">架构 <paramref name="targetNamespace" /> 属性。</param>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，它包含已添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的中的属于给定命名空间的所有架构。 如果没有架构添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，则返回空的 <see cref="T:System.Collections.ICollection" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings">
      <summary>获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 默认为 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 属性设置为 <see langword="true" /> 的 <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> 实例。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.Count">
      <summary>获取 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中逻辑 XML 架构定义语言 (XSD) 架构的数量。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的逻辑架构数。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes">
      <summary>获取 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 架构定义语言 (XSD) 架构的所有全局特性。</summary>
      <returns>属性特性的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalElements">
      <summary>获取 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 架构定义语言 (XSD) 架构的所有全局元素。</summary>
      <returns>全局元素的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes">
      <summary>获取 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 架构定义语言 (XSD) 架构的所有全局简单和复杂类型。</summary>
      <returns>全局简单和复杂类型的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.IsCompiled">
      <summary>获取一个值指示 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XML 架构定义语言 (XSD) 架构是否已编译的值。</summary>
      <returns>如果 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的架构自上次在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中添加或移除以来已被编译，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.NameTable">
      <summary>获取加载新的 XML 架构定义语言 (XSD) 架构时 <see cref="T:System.Xml.XmlNameTable" /> 使用的默认 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <returns>原子化字符串对象表。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.XmlResolver">
      <summary>设置用于解析在架构的包含和导入元素中引用的命名空间或位置的 <see cref="T:System.Xml.XmlResolver" />。</summary>
      <returns>
        <see cref="T:System.Xml.XmlResolver" />，用于解析在架构的包含和导入元素中引用的命名空间或位置。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContent">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="simpleContent" /> 来自 XML 架构的元素。 此类用于具有简单内容模型的简单和复杂类型。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContent.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContent.Content">
      <summary>获取 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> 之一。</summary>
      <returns>
        <see langword="XmlSchemaSimpleContentRestriction" /> 或 <see langword="XmlSchemaSimpleContentExtension" /> 类中包含的内容。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentExtension">
      <summary>按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的简单内容的 <see langword="extension" /> 元素。 此类可用于按扩展派生简单类型。 通过添加属性，此类派生可用于扩展元素的简单类型内容。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentExtension.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.AnyAttribute">
      <summary>获取或设置要用于特性值的 <see langword="XmlSchemaAnyAttribute" />。</summary>
      <returns>
        <see langword="XmlSchemaAnyAttribute" /> 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.Attributes">
      <summary>获取 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 的集合。</summary>
      <returns>
        <see langword="simpleType" /> 元素的特性集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.BaseTypeName">
      <summary>获取或设置内置数据类型或简单类型的名称（从其中扩展该类型）。</summary>
      <returns>基类型名称。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction">
      <summary>按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的简单内容的 <see langword="restriction" /> 元素。 此类可用以通过限制派生简单类型。 此种派生可用于将元素的值范围限制为在继承的简单类型中指定的值的子集。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.AnyAttribute">
      <summary>获取或设置将用于特性值的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />。</summary>
      <returns>特性值的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />。 可选。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Attributes">
      <summary>获取简单类型的属性的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 集合。</summary>
      <returns>简单类型的属性集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseType">
      <summary>获取或设置简单类型基值。</summary>
      <returns>简单类型基值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseTypeName">
      <summary>获取或设置内置数据类型或简单类型（该类型从其中派生）的名称。</summary>
      <returns>基类型的名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Facets">
      <summary>获取或设置一个 XML 架构方面。</summary>
      <returns>以下方面类之一： 
 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleType">
      <summary>按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的简单内容的 <see langword="simpleType" /> 元素。 此类定义简单类型。 简单类型可以为具有纯文本内容的属性值或元素值指定信息和约束。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleType.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleType.Content">
      <summary>获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> 中的一个。</summary>
      <returns>
        <see langword="XmlSchemaSimpleTypeUnion" />、<see langword="XmlSchemaSimpleTypeList" /> 或 <see langword="XmlSchemaSimpleTypeRestriction" /> 中的一个。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeContent">
      <summary>简单类型内容类的抽象类。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeContent.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeContent" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeList">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="list" /> 来自 XML 架构的元素。 此类可用于将 <see langword="simpleType" /> 元素定义为指定数据类型的值的列表。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeList.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.BaseItemType">
      <summary>根据简单类型的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 和 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType" /> 值，获取或设置表示该 <see langword="simpleType" /> 元素类型的 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName" />。</summary>
      <returns>表示 <see langword="simpleType" /> 元素的类型的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType">
      <summary>获取或设置从基值指定的类型中派生的 <see langword="simpleType" /> 元素。</summary>
      <returns>简单类型元素的项类型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName">
      <summary>获取或设置内置数据类型的名称或在该架构（或由指定命名空间指示的另一架构）中定义的 <see langword="simpleType" /> 元素的名称。</summary>
      <returns>简单类型列表的类型名称。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction">
      <summary>按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的简单类型的 <see langword="restriction" /> 元素。 此类可用于限制 <see langword="simpleType" /> 元素。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseType">
      <summary>获取或设置有关基类型的信息。</summary>
      <returns>
        <see langword="simpleType" /> 元素的基类型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseTypeName">
      <summary>获取或设置限定的基类型的名称。</summary>
      <returns>简单类型限制基类型的限定名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets">
      <summary>获取或设置一个 XML 架构方面。</summary>
      <returns>以下方面类之一： 
 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion">
      <summary>按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的简单类型的 <see langword="union" /> 元素。 <see langword="union" /> 数据类型可用于指定 <see langword="simpleType" /> 的内容。 <see langword="simpleType" /> 元素的值必须是该联合中指定的一组替代数据类型之一。 联合类型始终是派生类型，必须至少包含两种替代数据类型。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseMemberTypes">
      <summary>基于简单类型的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 和 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes" /> 值，获取表示 <see langword="simpleType" /> 元素的类型的 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes" /> 对象的数组。</summary>
      <returns>表示 <see langword="simpleType" /> 元素的类型的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 对象的数组。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes">
      <summary>获取基类型的集合。</summary>
      <returns>简单类型基值的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes">
      <summary>获取或设置内置数据类型合格成员名称的数组或在该架构（或由指定的命名空间指示的另一架构）中定义的 <see langword="simpleType" /> 元素。</summary>
      <returns>一个由内置数据类型或简单类型的成员列表组成的数组。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet">
      <summary>按万维网联合会 (W3C) 指定的方式表示来自 XML 架构的 <see langword="totalDigits" /> 方面。 此类可用于指定一个约束，该约束限制可为 <see langword="simpleType" /> 元素的值输入的位数。 <see langword="totalDigits" /> 的值必须是正整数。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaTotalDigitsFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaType">
      <summary>所有简单类型和复杂类型的基类。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
      <summary>返回一个 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，它表示指定的复杂类型的内置复杂类型。</summary>
      <param name="typeCode">其中一个表示复杂类型的 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值。</param>
      <returns>表示内置复杂类型的 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
      <summary>返回一个 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，它表示由限定名所指定的复杂类型的内置复杂类型。</summary>
      <param name="qualifiedName">复杂类型的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlQualifiedName" /> 参数为 <see langword="null" />。</exception>
      <returns>表示内置复杂类型的 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
      <summary>返回一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />，它表示指定的简单类型的内置简单类型。</summary>
      <param name="typeCode">其中一个表示简单类型的 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值。</param>
      <returns>表示内置简单类型的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
      <summary>返回一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />，它表示由限定名所指定的简单类型的内置简单类型。</summary>
      <param name="qualifiedName">简单类型的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlQualifiedName" /> 参数为 <see langword="null" />。</exception>
      <returns>表示内置简单类型的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
      <summary>返回一个值，指示指定的派生架构类型是否从指定的基架构类型派生。</summary>
      <param name="derivedType">要测试的派生 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</param>
      <param name="baseType">测试派生 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 所依据的基 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</param>
      <param name="except">一个 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值，表示不包括在测试中的类型派生方法。</param>
      <returns>如果派生类型从基类型派生，为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
      <summary>获取编译后对象类型或内置 XML 架构定义语言 (XSD) 数据类型、simpleType 元素或 complexType 元素。 这是一个后架构编译信息集属性。</summary>
      <returns>内置 XSD 数据类型、simpleType 元素或 complexType 元素。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
      <summary>获取此架构类型的基类型的编译后值。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象，表示此架构类型的基类型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Datatype">
      <summary>获取此复杂类型的数据类型的编译后值。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 后架构编译值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
      <summary>获取有关此元素如何从其基类型派生的编译后信息。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 有效值之一。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Final">
      <summary>获取或设置指示是否允许进一步派生的类型派生的最终特性。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 有效值之一。 默认值为 <see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
      <summary>获取 <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> 属性的编译后值。</summary>
      <returns>
        <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> 属性的编译后值。 默认值为 <see langword="finalDefault" /> 元素中的 <see langword="schema" /> 特性值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.IsMixed">
      <summary>获取或设置指示此类型是否具有混合内容模型的值。 该属性仅在复杂类型中有效。</summary>
      <returns>如果类型有混合内容模型，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Name">
      <summary>获取或设置类型的名称。</summary>
      <returns>类型的名称。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
      <summary>获取从此类型的 <see langword="Name" /> 特性中生成的此类型的限定名。 这是一个后架构编译属性。</summary>
      <returns>类型的 <see cref="T:System.Xml.XmlQualifiedName" />，从该类型的 <see langword="Name" /> 特性生成。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.TypeCode">
      <summary>获取类型的 <see cref="T:System.Xml.Schema.XmlTypeCode" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值之一。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUnique">
      <summary>按 WWW 联合会 (W3C) 指定的方式显示 <see langword="unique" /> 来自 XML 架构的元素。 此类可用于标识一组元素中的唯一约束。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaUnique.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaUnique" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUse">
      <summary>特性使用方式的指示器。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.None">
      <summary>没有指定的特性用法。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Optional">
      <summary>特性可选。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Prohibited">
      <summary>不能使用属性。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Required">
      <summary>属性必须出现一次。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationException">
      <summary>表示在所验证的 XML 文档中遇到 XML 架构定义语言 (XSD) 架构验证错误和警告时引发的异常。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的一个新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String)">
      <summary>用指定的异常消息初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 类的新实例。</summary>
      <param name="message">关于错误情况的 <see langword="string" /> 说明。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception)">
      <summary>使用异常消息和导致此指定的异常的原始 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 对象初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
      <param name="message">关于错误情况的 <see langword="string" /> 说明。</param>
      <param name="innerException">导致该异常的原始 <see cref="T:System.Exception" /> 对象。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>使用指定的异常消息和导致此指定异常的原始 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 对象、XML 的行号和行位置初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
      <param name="message">关于错误情况的 <see langword="string" /> 说明。</param>
      <param name="innerException">导致该异常的原始 <see cref="T:System.Exception" /> 对象。</param>
      <param name="lineNumber">导致该异常的 XML 行号。</param>
      <param name="linePosition">导致此异常的 XML 的行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用包含 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 所有属性的给定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 信息构造新的 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 对象。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />
      </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.SetSourceObject(System.Object)">
      <summary>设置导致此错误的 XML 节点。</summary>
      <param name="sourceObject">源对象。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidationException.SourceObject">
      <summary>获取导致此 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 的 XML 节点。</summary>
      <returns>导致此 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 的 XML 节点。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationFlags">
      <summary>指定由 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 和 <see cref="T:System.Xml.XmlReader" /> 类使用的架构验证选项。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes">
      <summary>即使架构中未定义 xml:* 特性，也允许这些特性。 将根据这些特性的数据类型对它们进行验证。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.None">
      <summary>不要处理标识约束、内联架构、架构位置提示或报告架构验证警告。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints">
      <summary>处理验证过程中遇到的标识约束（<c>xs:ID</c>、<c>xs:IDREF</c>、<c>xs:key</c>、<c>xs:keyref</c>、<c>xs:unique</c>）。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema">
      <summary>处理在验证过程中遇到的内联架构。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation">
      <summary>处理验证过程中遇到的架构位置提示（<c>xsi:schemaLocation</c>、<c>xsi:noNamespaceSchemaLocation</c>）。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings">
      <summary>报告在验证过程中遇到的架构验证警告。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidator">
      <summary>表示一个 XML 架构定义语言 (XSD) 架构验证引擎。 不能继承 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 类。</summary>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
      <summary>
        <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 接收架构验证过程中遇到的架构验证警告和错误。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 类的新实例。</summary>
      <param name="nameTable">一个 <see cref="T:System.Xml.XmlNameTable" /> 对象，其中包含作为原子化字符串的元素名和特性名。</param>
      <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，包含用于验证的 XML 架构定义语言 (XSD) 架构。</param>
      <param name="namespaceResolver">一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析在验证过程中遇到的命名空间。</param>
      <param name="validationFlags">一个 <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> 值，指定架构验证选项。</param>
      <exception cref="T:System.ArgumentNullException">指定的一个或多个参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 参数中编译架构时发生的错误。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
      <summary>将一个 XML 架构定义语言 (XSD) 架构添加到用于验证的架构集。</summary>
      <param name="schema">一个 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象，要将其添加到用于验证的架构集。</param>
      <exception cref="T:System.ArgumentNullException">指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 参数的目标命名空间与 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象已经遇到的任何元素或特性的目标命名空间匹配。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 参数无效。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
      <summary>结束验证，并检查整个 XML 文档的标识约束。</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">在 XML 文档中发现一个标识约束错误。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
      <summary>返回当前元素上下文的期望属性。</summary>
      <returns>如果没有期望特性，则为一个 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 对象数组或一个空数组。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
      <summary>返回当前元素上下文中的期望微粒。</summary>
      <returns>如果没有期望粒子，则为一个 <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> 对象数组或一个空数组。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
      <summary>验证默认特性的标识约束，并使用以下任何特性的 <see cref="T:System.Collections.ArrayList" /> 对象填充指定的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />，这些特性的默认值以前在元素上下文中从未使用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法进行过验证。</summary>
      <param name="defaultAttributes">一个 <see cref="T:System.Collections.ArrayList" />，要使用以下任何特性的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 对象对其进行填充，这些特性在元素上下文的验证过程中尚未遇到。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象的状态。</summary>
      <exception cref="T:System.InvalidOperationException">在构造一个 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 对象之后或在仅调用 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 之后马上就调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 方法是有效的。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
      <summary>使用为部分验证指定的 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 初始化 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 对象的状态。</summary>
      <param name="partialValidationType">一个 <see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象，用于初始化进行部分验证的 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象的验证上下文。</param>
      <exception cref="T:System.InvalidOperationException">在构造一个 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 对象之后或在仅调用 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 之后马上就调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 方法是有效的。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 参数不是一个 <see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 参数不能为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>跳过当前元素内容的验证并准备 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象以验证父元素的上下文中的内容。</summary>
      <param name="schemaInfo">一个 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象，其属性在成功跳过当前元素内容时设置。 此参数可以为 <see langword="null" />。</param>
      <exception cref="T:System.InvalidOperationException">未按正确的顺序调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 方法。 例如，调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 之后又调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>验证当前元素上下文中的属性名称、命名空间 URI 和值。</summary>
      <param name="localName">要验证的属性的本地名称。</param>
      <param name="namespaceUri">要验证的属性的命名空间 URI。</param>
      <param name="attributeValue">要验证的属性的值。</param>
      <param name="schemaInfo">一个 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象，其属性是在成功验证特性之后设置的。 此参数可以为 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">此特性在当前元素上下文中无效。</exception>
      <exception cref="T:System.InvalidOperationException">未按正确的顺序调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。 例如，调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 之后又调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
      <exception cref="T:System.ArgumentNullException">指定的一个或多个参数为 <see langword="null" />。</exception>
      <returns>验证的属性的值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
      <summary>验证当前元素上下文中的属性名称、命名空间 URI 和值。</summary>
      <param name="localName">要验证的属性的本地名称。</param>
      <param name="namespaceUri">要验证的属性的命名空间 URI。</param>
      <param name="attributeValue">一个 <see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />，用于将属性的值作为与该属性的 XML 架构定义语言 (XSD) 类型兼容的公共语言运行时 (CLR) 类型进行传递。</param>
      <param name="schemaInfo">一个 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象，其属性是在成功验证特性之后设置的。 此参数可以为 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">此特性在当前元素上下文中无效。</exception>
      <exception cref="T:System.InvalidOperationException">未按正确的顺序调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。 例如，调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 之后又调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
      <exception cref="T:System.ArgumentNullException">指定的一个或多个参数为 <see langword="null" />。</exception>
      <returns>验证的属性的值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>验证当前上下文中的元素。</summary>
      <param name="localName">要验证的元素的本地名称。</param>
      <param name="namespaceUri">要验证的元素的命名空间 URI。</param>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象，它的属性在成功验证元素的名称时设置。 此参数可以为 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">此元素的名称在当前上下文中无效。</exception>
      <exception cref="T:System.InvalidOperationException">未按正确的顺序调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 方法。 例如，在调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
      <summary>验证当前上下文中指定了具有 <c>xsi:Type</c>、<c>xsi:Nil</c>、<c>xsi:SchemaLocation</c> 和 <c>xsi:NoNamespaceSchemaLocation</c> 属性值的元素。</summary>
      <param name="localName">要验证的元素的本地名称。</param>
      <param name="namespaceUri">要验证的元素的命名空间 URI。</param>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象，它的属性在成功验证元素的名称时设置。 此参数可以为 <see langword="null" />。</param>
      <param name="xsiType">元素的 <c>xsi:Type</c> 属性值。 此参数可以为 <see langword="null" />。</param>
      <param name="xsiNil">元素的 <c>xsi:Nil</c> 属性值。 此参数可以为 <see langword="null" />。</param>
      <param name="xsiSchemaLocation">元素的 <c>xsi:SchemaLocation</c> 属性值。 此参数可以为 <see langword="null" />。</param>
      <param name="xsiNoNamespaceSchemaLocation">元素的 <c>xsi:NoNamespaceSchemaLocation</c> 属性值。 此参数可以为 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">此元素的名称在当前上下文中无效。</exception>
      <exception cref="T:System.InvalidOperationException">未按正确的顺序调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 方法。 例如，在调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>对于具有简单内容的元素，根据其数据类型验证元素的文本内容是否有效；对于具有复杂内容的元素，验证当前元素的内容是否完整。</summary>
      <param name="schemaInfo">一个 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象，其属性是在成功验证元素之后设置的。 此参数可以为 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">元素的内容无效。</exception>
      <exception cref="T:System.InvalidOperationException">未按正确的顺序调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 方法。 例如，在调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 方法。</exception>
      <returns>如果元素具有简单内容，则为该元素已分析的类型化文本值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
      <summary>根据指定元素的数据类型验证该元素的文本内容是否有效。</summary>
      <param name="schemaInfo">一个 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象，其属性是在成功验证元素的文本内容之后设置的。 此参数可以为 <see langword="null" />。</param>
      <param name="typedValue">元素中的类型化文本内容。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">元素的文本内容无效。</exception>
      <exception cref="T:System.InvalidOperationException">未按正确顺序调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 方法（例如，在调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 方法），以前已经调用了 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法，或者元素具有复杂内容。</exception>
      <exception cref="T:System.ArgumentNullException">类型化文本内容参数不能为 <see langword="null" />。</exception>
      <returns>元素的已分析的类型化简单内容。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
      <summary>验证元素上下文中所有必需的属性是否已存在，并且 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象是否已准备好验证元素的子内容。</summary>
      <param name="schemaInfo">一个 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 对象，其属性是在成功验证元素上下文中存在所有必需特性之后设置的。 此参数可以为 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">找不到当前元素上下文中的一个或多个必需特性。</exception>
      <exception cref="T:System.InvalidOperationException">未按正确的顺序调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> 方法。 例如，调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> 之后又调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
      <exception cref="T:System.ArgumentNullException">指定的一个或多个参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
      <summary>验证当前元素上下文中是否允许指定的文本 <see langword="string" />，如果当前元素具有简单内容，则累积文本以进行验证。</summary>
      <param name="elementValue">一个文本 <see langword="string" />，要在当前元素上下文中对其进行验证。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">当前元素上下文中不允许指定的文本 <see langword="string" />。</exception>
      <exception cref="T:System.InvalidOperationException">未按正确的顺序调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法。 例如，在调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
      <exception cref="T:System.ArgumentNullException">文本 <see langword="string" /> 参数不能为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
      <summary>验证当前元素上下文中是否允许指定的 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 对象返回的文本，如果当前元素具有简单内容，则累积文本以进行验证。</summary>
      <param name="elementValue">一个 <see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />，用于将文本值作为与该属性的 XML 架构定义语言 (XSD) 类型兼容的公共语言运行时 (CLR) 类型进行传递。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">当前元素上下文中不允许指定的文本 <see langword="string" />。</exception>
      <exception cref="T:System.InvalidOperationException">未按正确的顺序调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法。 例如，在调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
      <exception cref="T:System.ArgumentNullException">文本 <see langword="string" /> 参数不能为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
      <summary>验证当前元素上下文中是否允许指定的 <see langword="string" /> 中的空白，如果当前元素具有简单内容，则累积空白以进行验证。</summary>
      <param name="elementValue">一个空白 <see langword="string" />，要在当前元素上下文中对其进行验证。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">当前元素上下文中不允许空白。</exception>
      <exception cref="T:System.InvalidOperationException">未按正确的顺序调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 方法。 例如，在调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
      <summary>验证当前元素上下文中是否允许指定的 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 对象返回的空白，如果当前元素具有简单内容，则累积空白以进行验证。</summary>
      <param name="elementValue">一个 <see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />，用于将空白值作为与该属性的 XML 架构定义语言 (XSD) 类型兼容的公共语言运行时 (CLR) 类型进行传递。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">当前元素上下文中不允许空白。</exception>
      <exception cref="T:System.InvalidOperationException">未按正确的顺序调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 方法。 例如，在调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
      <summary>获取或设置所验证的 XML 节点的行号信息。</summary>
      <returns>一个 <see cref="T:System.Xml.IXmlLineInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
      <summary>获取或设置所验证 XML 节点的源 URI。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 对象，表示所验证 XML 节点的源 URI；默认值为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
      <summary>获取或设置作为验证事件的发件人对象所发送的对象。</summary>
      <returns>一个 <see cref="T:System.Object" />；默认值为此 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
      <summary>设置用于解析 <c>xs:import</c> 和 <c>xs:include</c> 元素，以及 <c>xsi:schemaLocation</c> 和 <c>xsi:noNamespaceSchemaLocation</c> 属性的 <see cref="T:System.Xml.XmlResolver" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlResolver" /> 对象；默认值为 <see cref="T:System.Xml.XmlUrlResolver" /> 对象。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidity">
      <summary>表示由 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 类验证的 XML 项的有效性。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Invalid">
      <summary>XML 项无效。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.NotKnown">
      <summary>XML 项的有效性未知。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Valid">
      <summary>XML 项有效。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet">
      <summary>表示“万维网联合会”(W3C)<see langword="whiteSpace" /> 方面。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaWhiteSpaceFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaXPath">
      <summary>表示万维网联合会 (W3C)<see langword="selector" /> 元素。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaXPath.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaXPath" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaXPath.XPath">
      <summary>获取或设置 XPath 表达式的特性。</summary>
      <returns>XPath 表达式的字符串特性值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary>表示验证事件的严重度。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary>指示在验证实例文件时发生了验证错误。 这一点应用于文档类型定义 (DTD) 和 XML 架构定义语言 (XSD) 架构。 “万维网联合会”(W3C) 有效性约束被视为错误。 如果尚未创建任何验证事件处理程序，错误会引发异常。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary>指示发生的验证事件不是错误。 警告通常是在没有 DTD 或 XML 架构（要对其验证特定元素或特性）时发出。 与错误不同，如果没有验证事件处理程序，警告就不会引发异常。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlTypeCode">
      <summary>表示 W3C XML 架构定义语言 (XSD) 构架类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
      <summary>一个联合的任何原子值。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
      <summary>W3C XML 架构 <see langword="xs:anyURI" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
      <summary>此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
      <summary>W3C XML 架构 <see langword="xs:base64Binary" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
      <summary>W3C XML 架构 <see langword="xs:boolean" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Byte">
      <summary>W3C XML 架构 <see langword="xs:byte" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Comment">
      <summary>此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Date">
      <summary>W3C XML 架构 <see langword="xs:date" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
      <summary>W3C XML 架构 <see langword="xs:dateTime" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
      <summary>此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
      <summary>W3C XML 架构 <see langword="xs:decimal" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Document">
      <summary>此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Double">
      <summary>W3C XML 架构 <see langword="xs:double" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Duration">
      <summary>W3C XML 架构 <see langword="xs:Duration" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Element">
      <summary>此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Entity">
      <summary>W3C XML 架构 <see langword="xs:ENTITY" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Float">
      <summary>W3C XML 架构 <see langword="xs:float" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GDay">
      <summary>W3C XML 架构 <see langword="xs:gDay" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
      <summary>W3C XML 架构 <see langword="xs:gMonth" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
      <summary>W3C XML 架构 <see langword="xs:gMonthDay" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYear">
      <summary>W3C XML 架构 <see langword="xs:gYear" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
      <summary>W3C XML 架构 <see langword="xs:gYearMonth" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
      <summary>W3C XML 架构 <see langword="xs:hexBinary" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Id">
      <summary>W3C XML 架构 <see langword="xs:ID" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Idref">
      <summary>W3C XML 架构 <see langword="xs:IDREF" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Int">
      <summary>W3C XML 架构 <see langword="xs:int" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Integer">
      <summary>W3C XML 架构 <see langword="xs:integer" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Item">
      <summary>一个项，例如，一个节点或原子值。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Language">
      <summary>W3C XML 架构 <see langword="xs:language" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Long">
      <summary>W3C XML 架构 <see langword="xs:long" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Name">
      <summary>W3C XML 架构 <see langword="xs:Name" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
      <summary>此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NCName">
      <summary>W3C XML 架构 <see langword="xs:NCName" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
      <summary>W3C XML 架构 <see langword="xs:negativeInteger" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
      <summary>W3C XML 架构 <see langword="xs:NMTOKEN" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Node">
      <summary>此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.None">
      <summary>无类型信息。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
      <summary>W3C XML 架构 <see langword="xs:nonNegativeInteger" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
      <summary>W3C XML 架构 <see langword="xs:nonPositiveInteger" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
      <summary>W3C XML 架构 <see langword="xs:normalizedString" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Notation">
      <summary>W3C XML 架构 <see langword="xs:NOTATION" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
      <summary>W3C XML 架构 <see langword="xs:positiveInteger" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
      <summary>此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.QName">
      <summary>W3C XML 架构 <see langword="xs:QName" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Short">
      <summary>W3C XML 架构 <see langword="xs:short" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.String">
      <summary>W3C XML 架构 <see langword="xs:string" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Text">
      <summary>此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Time">
      <summary>W3C XML 架构 <see langword="xs:time" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Token">
      <summary>W3C XML 架构 <see langword="xs:token" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
      <summary>W3C XML 架构 <see langword="xs:unsignedByte" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
      <summary>W3C XML 架构 <see langword="xs:unsignedInt" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
      <summary>W3C XML 架构 <see langword="xs:unsignedLong" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
      <summary>W3C XML 架构 <see langword="xs:unsignedShort" /> 类型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
      <summary>非类型化原子值。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
      <summary>此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlValueGetter">
      <summary>一个 <see langword="delegate" />，<see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 类使用它将特性、文本和空白值作为与特性、文本或空白的 XML 架构定义语言 (XSD) 类型相兼容的公共语言运行时 (CLR) 类型进行传递。</summary>
      <returns>包含特性、文本或空白值的对象。 此对象是与特性、文本或空白值的 XSD 类型相对应的 CLR 类型。</returns>
    </member>
    <member name="T:System.Xml.Serialization.IXmlSerializable">
      <summary>为 XML 序列化和反序列化提供自定义格式。</summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <summary>此方法是保留方法，请不要使用。 在实现 <see langword="IXmlSerializable" /> 接口时，应从此方法返回 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />），如果需要指定自定义架构，应向该类应用 <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" />。</summary>
      <returns>由 <see cref="T:System.Xml.Schema.XmlSchema" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法使用的对象的 XML 表示形式的 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary>从其 XML 表示形式生成对象。</summary>
      <param name="reader">从中对对象进行反序列化的 <see cref="T:System.Xml.XmlReader" /> 流。</param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary>将对象转换为其 XML 表示形式。</summary>
      <param name="writer">要将对象序列化到的 <see cref="T:System.Xml.XmlWriter" /> 流。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyAttributeAttribute">
      <summary>指定成员（返回 <see cref="T:System.Xml.XmlAttribute" /> 对象的数组的字段）可以包含任何 XML 特性。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor">
      <summary>构造 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary>指定成员（返回 <see cref="T:System.Xml.XmlElement" /> 或 <see cref="T:System.Xml.XmlNode" /> 对象的数组的字段）可以包含对象，该对象表示在序列化或反序列化的对象中没有相应成员的所有 XML 元素。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 类的新实例并指定在 XML 文档中生成的 XML 元素名称。</summary>
      <param name="name">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的 XML 元素的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 类的新实例并指定在 XML 文档中生成的 XML 元素名称及其 XML 命名空间。</summary>
      <param name="name">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的 XML 元素的名称。</param>
      <param name="ns">XML 元素的 XML 命名空间。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary>获取或设置 XML 元素名。</summary>
      <exception cref="T:System.InvalidOperationException">数组成员的元素名称与 <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> 属性指定的元素名称不匹配。</exception>
      <returns>XML 元素的名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary>获取或设置在 XML 文档中生成的 XML 命名空间。</summary>
      <returns>一个 XML 命名空间。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
      <summary>获取或设置序列化或反序列化元素的显式顺序。</summary>
      <returns>代码生成的顺序。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary>指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 必须将类成员序列化为 XML 属性。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 类的新实例，并指定生成的 XML 属性的名称。</summary>
      <param name="attributeName">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的 XML 特性的名称。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 类的新实例。</summary>
      <param name="attributeName">生成的 XML 特性的名称。</param>
      <param name="type">用来存储特性的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 类的新实例。</summary>
      <param name="type">用来存储特性的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary>获取或设置 XML 属性的名称。</summary>
      <returns>XML 属性的名称。 默认值为成员名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary>获取或设置 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的 XML 属性的 XSD 数据类型。</summary>
      <returns>XSD (XML 架构文档) 数据类型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的 XML 属性名称是否是限定的。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值之一。 默认值为 <see langword="XmlForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary>获取或设置 XML 属性的 XML 命名空间。</summary>
      <returns>XML 属性的 XML 命名空间。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
      <summary>获取或设置 XML 属性的复杂类型。</summary>
      <returns>XML 属性的类型。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary>指示公共字段或属性在 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化或反序列化包含它们的对象时表示 XML 元素。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 类的新实例，并指定 XML 元素的名称。</summary>
      <param name="elementName">序列化成员的 XML 元素名。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 的新实例，并指定 XML 元素的名称和 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 应用到的成员的派生类型。 此成员类型在 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化包含它的对象时使用。</summary>
      <param name="elementName">序列化成员的 XML 元素名。</param>
      <param name="type">从该成员的类型派生的对象的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 类的新实例，并指定 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 所应用到的成员的类型。 此类型在序列化或反序列化包含它的对象时由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 使用。</summary>
      <param name="type">从该成员的类型派生的对象的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary>获取或设置由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的 XMl 元素的 XML 架构定义 (XSD) 数据类型。</summary>
      <exception cref="T:System.Exception">已指定的 XML 架构数据类型无法映射到 .NET 数据类型。</exception>
      <returns>XML 架构数据类型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary>获取或设置生成的 XML 元素的名称。</summary>
      <returns>生成的 XML 元素的名称。 默认值为成员标识符。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary>获取或设置一个值，该值指示元素是否是限定的。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值之一。 默认值为 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否必须将设置为 <see langword="null" /> 的成员序列化为 <see langword="xsi:nil" /> 属性设置为 <see langword="true" /> 的空标记。</summary>
      <returns>如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成 <see langword="true" /> 属性，则为 <see langword="xsi:nil" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary>获取或设置分配给 XML 元素的命名空间，这些 XML 元素是在序列化类时得到的。</summary>
      <returns>XML 元素的命名空间。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
      <summary>获取或设置序列化或反序列化元素的显式顺序。</summary>
      <returns>代码生成的顺序。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary>获取或设置用于表示 XML 元素的对象类型。</summary>
      <returns>成员的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary>控制 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 如何序列化枚举成员。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> 类的新实例，并指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成或识别的（当该序列化程序分别序列化或反序列化枚举时）XML 值。</summary>
      <param name="name">该枚举成员的重写名。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary>获取或设置当 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化枚举时在 XML 文档实例中生成的值，或当它反序列化该枚举成员时识别的值。</summary>
      <returns>当 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化枚举时在 XML 文档实例中生成的值，或当它反序列化该枚举成员时识别的值。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary>指示 <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> 的 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 方法不序列化公共字段或公共读/写属性值。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary>指定目标属性、参数、返回值或类成员包含与 XML 文档中使用的命名空间相关联的前缀。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary>控制视为 XML 根元素的属性目标的 XML 序列化。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 类的新实例，并指定 XML 根元素的名称。</summary>
      <param name="elementName">XML 根元素的名称。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary>获取或设置 XML 根元素的 XSD 数据类型。</summary>
      <returns>XSD (XML 架构文档) 数据类型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary>获取或设置由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 类的 <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> 和 <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> 方法分别生成和识别的 XML 元素的名称。</summary>
      <returns>在 XML 文档实例中生成和识别的 XML 根元素的名称。 默认值为序列化类的名称。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否必须将设置为 <see langword="null" /> 的成员序列化为设置为 <see langword="xsi:nil" /> 的 <see langword="true" /> 属性。</summary>
      <returns>如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成 <see langword="true" /> 属性，则为 <see langword="xsi:nil" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary>获取或设置 XML 根元素的命名空间。</summary>
      <returns>XML 元素的命名空间。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
      <summary>应用于某个类型时，存储返回 XML 架构的该类型静态方法的名称和控制该类型序列化的 <see cref="T:System.Xml.XmlQualifiedName" />（对于匿名类型，为 <see cref="T:System.Xml.Schema.XmlSchemaType" />）。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> 类的新实例，需要一个静态方法的名称，该方法提供了该类型的 XML 架构。</summary>
      <param name="methodName">必须实现的静态方法的名称。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
      <summary>获取或设置一个值，该值确定目标类是否为通配符，或者此类架构是否只包含 <see langword="xs:any" /> 元素。</summary>
      <returns>如果此类是通配符或者其架构仅包含 <see langword="xs:any" /> 元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
      <summary>获取静态方法的名称，该方法提供类型的 XML 架构和类型的 XML 架构数据类型的名称。</summary>
      <returns>该方法的名称，XML 基础结构调用该方法以返回 XML 架构。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
      <summary>包含 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 用于在 XML 文档实例中生成限定名的 XML 命名空间和前缀。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>使用包含前缀和命名空间对集合的 <see langword="XmlSerializerNamespaces" /> 的指定实例，初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 类的新实例。</summary>
      <param name="namespaces">包含命名空间和前缀对的 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 的实例。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 类的新实例。</summary>
      <param name="namespaces">一个 <see cref="T:System.Xml.XmlQualifiedName" /> 对象数组。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
      <summary>将前缀和命名空间对添加到 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 对象。</summary>
      <param name="prefix">与 XML 命名空间关联的前缀。</param>
      <param name="ns">一个 XML 命名空间。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
      <summary>获取 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 对象中前缀和命名空间对的数组。</summary>
      <returns>在 XML 文档中用作限定名的 <see cref="T:System.Xml.XmlQualifiedName" /> 对象的数组。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
      <summary>获取集合中前缀和命名空间对的数目。</summary>
      <returns>集合中前缀和命名空间对的数目。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary>当串行化或反序列化包含该成员的类时，向 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 指示应将该成员作为 XML 文本处理。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 类的新实例。</summary>
      <param name="type">要进行串行化的成员的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary>获取或设置由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成的文本的 XML 架构定义语言 (XSD) 数据类型。</summary>
      <exception cref="T:System.Exception">已指定的 XML 架构数据类型无法映射到 .NET 数据类型。</exception>
      <exception cref="T:System.InvalidOperationException">已指定的 XML 架构数据类型对该属性无效，且无法转换为成员类型。</exception>
      <returns>XML 架构 (XSD) 数据类型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary>获取或设置成员的类型。</summary>
      <returns>成员的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.ValidationType">
      <summary>指定要执行的验证的类型。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Auto">
      <summary>验证是否找到 DTD 或架构信息。 

自 .NET Framework 2.0 开始，此字段已过时。 它仅适用于已过时的 <see cref="T:System.Xml.XmlValidatingReader" /> 类。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.DTD">
      <summary>根据 DTD 进行验证。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.None">
      <summary>未执行任何验证，且未引发验证错误。 此设置创建符合 XML 1.0 的非验证分析程序。
        
<see cref="M:System.Xml.XmlReader.ResolveEntity" /> 调用报告默认属性并解析常规实体。 DOCTYPE 不用于验证目的。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Schema">
      <summary>根据 XML 架构定义语言 (XSD) 架构（包括内联 XML 架构）进行验证。 通过使用 <see langword="schemaLocation" /> 特性或提供的 <see langword="Schemas" /> 特性将 XSD 架构和命名空间 URI 关联起来。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.XDR">
      <summary>根据 XML 数据简化 (XDR) 架构（包括内联 XDR 架构）进行验证。 使用 <see langword="x-schema" /> 命名空间前缀或 <see cref="P:System.Xml.XmlValidatingReader.Schemas" /> 属性识别 XDR 架构。
        
自 .NET Framework 2.0 开始，此字段已过时。 它仅适用于已过时的 <see cref="T:System.Xml.XmlValidatingReader" /> 类。</summary>
    </member>
    <member name="T:System.Xml.WhitespaceHandling">
      <summary>指定如何处理空白。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.All">
      <summary>返回 <see langword="Whitespace" /> 和 <see langword="SignificantWhitespace" /> 节点。 这是默认设置。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.None">
      <summary>不返回任何 <see langword="Whitespace" /> 和 <see langword="SignificantWhitespace" /> 节点。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.Significant">
      <summary>只返回 <see langword="SignificantWhitespace" /> 节点。</summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary>指定 <see cref="T:System.Xml.XmlWriter" /> 的状态。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary>指示正在写入特性值。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary>指示已调用 <see cref="M:System.Xml.XmlWriter.Close" /> 方法。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary>指示正在写入元素内容。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary>指示正在写入元素开始标记。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Error">
      <summary>已引发异常，使 <see cref="T:System.Xml.XmlWriter" /> 仍处于无效状态。 可以调用 <see cref="M:System.Xml.XmlWriter.Close" /> 方法来将 <see cref="T:System.Xml.XmlWriter" /> 置于 <see cref="F:System.Xml.WriteState.Closed" /> 状态。 任何其他 <see cref="T:System.Xml.XmlWriter" /> 方法调用都将导致 <see cref="T:System.InvalidOperationException" />。

此字段已添加到 .NET Framework 2.0 中。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary>指示正在写入 Prolog。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary>指示尚未调用 Write 方法。</summary>
    </member>
    <member name="T:System.Xml.XmlAttribute">
      <summary>表示属性。 属性的有效值和默认值在文档类型定义 (DTD) 或架构中定义。</summary>
    </member>
    <member name="M:System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlAttribute" /> 类的新实例。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">命名空间统一资源标识符 (URI)。</param>
      <param name="doc">父 XML 文档。</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)">
      <summary>将指定的节点添加到该节点的子节点列表的末尾。</summary>
      <param name="newChild">要添加的 <see cref="T:System.Xml.XmlNode" />。</param>
      <exception cref="T:System.InvalidOperationException">此节点的类型不允许 <paramref name="newChild" /> 节点类型的子节点。  
  
<paramref name="newChild" /> 是此节点的上级节点。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 是从不同于创建此节点的文档创建的。  
  
该节点是只读的。</exception>
      <returns>已添加的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">如果为 <see langword="true" />，则以递归方式克隆指定节点下的子树；如果为 <see langword="false" />，则只克隆节点本身。</param>
      <returns>重复节点。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>将指定的节点紧接着插入指定的引用节点之后。</summary>
      <param name="newChild">要插入的 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="refChild">
        <see cref="T:System.Xml.XmlNode" />，它是引用节点。 <paramref name="newChild" /> 放置在 <paramref name="refChild" /> 之后。</param>
      <exception cref="T:System.InvalidOperationException">此节点的类型不允许 <paramref name="newChild" /> 节点类型的子节点。  
  
<paramref name="newChild" /> 是此节点的上级节点。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 是从不同于创建此节点的文档创建的。  
  
<paramref name="refChild" /> 不是此节点的子级。  
  
该节点是只读的。</exception>
      <returns>已插入的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>将指定的节点紧接着插入指定的引用节点之前。</summary>
      <param name="newChild">要插入的 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="refChild">
        <see cref="T:System.Xml.XmlNode" />，它是引用节点。 <paramref name="newChild" /> 放置在该节点之前。</param>
      <exception cref="T:System.InvalidOperationException">当前节点的类型不允许 <paramref name="newChild" /> 节点类型的子节点。  
  
<paramref name="newChild" /> 是此节点的上级节点。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 是从不同于创建此节点的文档创建的。  
  
<paramref name="refChild" /> 不是此节点的子级。  
  
该节点是只读的。</exception>
      <returns>已插入的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)">
      <summary>将指定的节点添加到该节点的子节点列表的开头。</summary>
      <param name="newChild">要添加的 <see cref="T:System.Xml.XmlNode" />。 如果它是一个 <see cref="T:System.Xml.XmlDocumentFragment" />，则会将文档片段的全部内容移动到该节点的子列表中。</param>
      <exception cref="T:System.InvalidOperationException">此节点的类型不允许 <paramref name="newChild" /> 节点类型的子节点。  
  
<paramref name="newChild" /> 是此节点的上级节点。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 是从不同于创建此节点的文档创建的。  
  
该节点是只读的。</exception>
      <returns>已添加的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)">
      <summary>移除指定的子节点。</summary>
      <param name="oldChild">要移除的 <see cref="T:System.Xml.XmlNode" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldChild" /> 不是此节点的子级。 或者此节点是只读的。</exception>
      <returns>已移除的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>用指定的新子节点替换指定的子节点。</summary>
      <param name="newChild">新的子 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldChild">要替换的 <see cref="T:System.Xml.XmlNode" />。</param>
      <exception cref="T:System.InvalidOperationException">此节点的类型不允许 <paramref name="newChild" /> 节点类型的子节点。  
  
<paramref name="newChild" /> 是此节点的上级节点。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 是从不同于创建此节点的文档创建的。  
  
该节点是只读的。  
  
<paramref name="oldChild" /> 不是此节点的子级。</exception>
      <returns>被替换的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlAttribute.BaseURI">
      <summary>获取节点的基统一资源标识符 (URI)。</summary>
      <returns>从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。 特性节点与它们的所有者元素具有相同的基 URI。 如果特性节点没有所有者元素，则 <see langword="BaseURI" /> 返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerText">
      <summary>设置节点及其所有子级的串联值。</summary>
      <returns>节点及其所有子级的串连值。 对于特性节点，此属性与 <see cref="P:System.Xml.XmlAttribute.Value" /> 属性具有相同的功能。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerXml">
      <summary>设置属性的值。</summary>
      <exception cref="T:System.Xml.XmlException">设置此属性时指定的 XML 格式不正确。</exception>
      <returns>特性值。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.LocalName">
      <summary>获取节点的本地名称。</summary>
      <returns>移除了前缀的特性节点的名称。 在以下示例 &lt; book bk：流派 = "novel" 中 &gt; ， <see langword="LocalName" /> 属性的为 <see langword="genre" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Name">
      <summary>获取节点的限定名称。</summary>
      <returns>特性节点的限定名。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NamespaceURI">
      <summary>获取该节点的命名空间 URI。</summary>
      <returns>该节点的命名空间 URI。 如果没有显式地为特性指定一个命名空间，则此属性返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>
        <see langword="XmlAttribute" /> 节点的节点类型是 XmlNodeType.Attribute。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerDocument">
      <summary>获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>此节点从属的 XML 文档。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerElement">
      <summary>获取该特性所属的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <returns>该特性所属的 <see langword="XmlElement" />；如果该特性不是 <see langword="null" /> 的一部分，则为 <see langword="XmlElement" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.ParentNode">
      <summary>获取该节点的父级。 对于 <see langword="XmlAttribute" /> 节点，该属性总是返回 <see langword="null" />。</summary>
      <returns>对于 <see langword="XmlAttribute" /> 节点，该属性总是返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Prefix">
      <summary>获取或设置该节点的命名空间前缀。</summary>
      <exception cref="T:System.ArgumentException">该节点是只读的。</exception>
      <exception cref="T:System.Xml.XmlException">指定的前缀包含无效字符。  
  
指定的前缀格式不正确。  
  
该节点的 namespaceURI 为 <see langword="null" />。  
  
指定的前缀为“xml”，而该节点的 namespaceURI 与“http://www.w3.org/XML/1998/namespace”不同。  
  
该节点是一个属性，指定的前缀为“xmlns”，且该节点的 namespaceURI 与“http://www.w3.org/2000/xmlns/”不同。  
  
该节点是一个特性，并且该节点的 qualifiedName 是“xmlns”[Namespaces]。</exception>
      <returns>该节点的命名空间前缀。 如果没有前缀，则该属性返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.SchemaInfo">
      <summary>获取作为架构验证的结果分配到此节点的后架构验证信息集。</summary>
      <returns>包含此节点的后架构验证信息集的 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Specified">
      <summary>获取一个值，该值指示是否显式设置了特性值。</summary>
      <returns>如果在原始实例文档中显式地为该特性给定一个值，则为 <see langword="true" />；否则为 <see langword="false" />。 <see langword="false" /> 值指示该特性的值来自 DTD。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Value">
      <summary>获取或设置节点的值。</summary>
      <exception cref="T:System.ArgumentException">该节点是只读节点，但调用了设置操作。</exception>
      <returns>返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />。 对于 <see langword="XmlAttribute" /> 节点，此属性是特性的值。</returns>
    </member>
    <member name="T:System.Xml.XmlAttributeCollection">
      <summary>表示可以按名称或索引访问的属性的集合。</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)">
      <summary>将指定的特性插入集合，并将其作为集合中的最后一个节点。</summary>
      <param name="node">要插入的属性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> 是从创建此集合的文档之外的另一个文档创建的。</exception>
      <returns>追加到集合末尾的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)">
      <summary>从该集合中将所有 <see cref="T:System.Xml.XmlAttribute" /> 对象复制到给定数组。</summary>
      <param name="array">从该集合向其中复制对象的数组。</param>
      <param name="index">array 中复制开始处的索引。</param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>将指定特性直接插入到指定引用特性之后。</summary>
      <param name="newNode">要插入的属性。</param>
      <param name="refNode">引用属性。 <paramref name="newNode" /> 放置在 <paramref name="refNode" /> 之后。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newNode" /> 是从创建此集合的文档之外的另一个文档创建的。 或者，<paramref name="refNode" /> 不是此集合的成员。</exception>
      <returns>要插入到集合中的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>将指定特性直接插入到指定引用特性之前。</summary>
      <param name="newNode">要插入的属性。</param>
      <param name="refNode">引用属性。 <paramref name="newNode" /> 放置在 <paramref name="refNode" /> 之前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newNode" /> 是从创建此集合的文档之外的另一个文档创建的。 或者，<paramref name="refNode" /> 不是此集合的成员。</exception>
      <returns>要插入到集合中的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)">
      <summary>将指定特性插入集合中，并将其作为集合的第一个节点。</summary>
      <param name="node">要插入的属性。</param>
      <returns>添加到集合中的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)">
      <summary>从集合中移除指定的特性。</summary>
      <param name="node">要移除的特性。</param>
      <returns>移除的节点，或者，如果在集合中找不到此节点，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAll">
      <summary>从集合中移除所有特性。</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除与指定的索引对应的特性。</summary>
      <param name="i">要删除的节点的索引。 第一个节点的索引为 0。</param>
      <returns>如果在指定索引处没有特性，则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)">
      <summary>使用 <see cref="P:System.Xml.XmlNode.Name" /> 属性添加 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="node">要存储在此集合中的特性节点。 以后可以使用节点的名称访问该节点。 如果集合中已存在具有该名称的节点，则用新的进行替换；否则，将把该节点追加到集合的末尾。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> 是从创建此集合的文档之外的另一个 <see cref="T:System.Xml.XmlDocument" /> 创建的。  
  
此 <see langword="XmlAttributeCollection" /> 为只读。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 是 <see cref="T:System.Xml.XmlAttribute" />，后者已经是另一个 <see cref="T:System.Xml.XmlElement" /> 对象的特性。 若要在其他元素中重新使用特性，必须克隆想重新使用的 <see langword="XmlAttribute" /> 对象。</exception>
      <returns>如果 <paramref name="node" /> 替换具有相同名称的现有节点，则返回旧节点；否则返回新添加的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)" />。</summary>
      <param name="array">从该集合向其中复制对象的数组。</param>
      <param name="index">array 中复制开始处的索引。</param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)">
      <summary>获取具有指定索引的特性。</summary>
      <param name="i">属性的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">正在传递的索引超出范围。</exception>
      <returns>指定索引处的特性。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String)">
      <summary>获取具有指定名称的特性。</summary>
      <param name="name">属性的限定名称。</param>
      <returns>具有指定名称的属性。 如果此特性不存在，则此属性返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)">
      <summary>获取具有指定的本地名称和命名空间唯一资源标识符 (URI) 的特性。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <returns>具有指定的本地名称和命名空间 URI 的属性。 如果此特性不存在，则此属性返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count" />。</summary>
      <returns>一个 <see langword="int" /> ，该整数包含特性的计数。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized" />。</summary>
      <returns>
        <see langword="true" /> 如果集合是同步的，则为。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot" />。</summary>
      <returns>作为 <see cref="T:System.Object" /> 集合的根的。</returns>
    </member>
    <member name="T:System.Xml.XmlCDataSection">
      <summary>表示 CDATA 节。</summary>
    </member>
    <member name="M:System.Xml.XmlCDataSection.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlCDataSection" /> 类的新实例。</summary>
      <param name="data">包含字符数据的 <see cref="T:System.String" />。</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 对象。</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。 由于 CDATA 节点没有子级，因此不管参数的设置如何，克隆的节点都将始终包含数据内容。</param>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将节点的子级保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlCDataSection.LocalName">
      <summary>获取节点的本地名称。</summary>
      <returns>对于 CDATA 节点，本地名称是 <see langword="#cdata-section" />。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.Name">
      <summary>获取节点的限定名称。</summary>
      <returns>对于 CDATA 节点，该名称为 <see langword="#cdata-section" />。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>节点类型。 对于 CDATA 节点，该值是 XmlNodeType.CDATA。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.ParentNode">
      <summary>获取该节点的父级（针对可以拥有父级的节点）。</summary>
      <returns>作为当前节点父级的 <see langword="XmlNode" />。 如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />。 对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />。 下表描述了 <see langword="ParentNode" /> 属性可能的返回值。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.PreviousText">
      <summary>获取紧接在该节点之前的文本节点。</summary>
      <returns>返回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="T:System.Xml.XmlCharacterData">
      <summary>提供由几个类使用的文本操作方法。</summary>
    </member>
    <member name="M:System.Xml.XmlCharacterData.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlCharacterData" /> 类的新实例。</summary>
      <param name="data">包含要添加到文档中的字符数据的字符串。</param>
      <param name="doc">用于包含字符数据的 <see cref="T:System.Xml.XmlDocument" />。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.AppendData(System.String)">
      <summary>将指定的字符串追加到节点的字符数据的结尾。</summary>
      <param name="strData">要插入现有字符串的字符串。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)">
      <summary>从节点移除一组字符。</summary>
      <param name="offset">字符串中开始进行删除的位置。</param>
      <param name="count">要删除的字符数。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)">
      <summary>从指定的字符偏移量开始插入指定的字符串。</summary>
      <param name="offset">字符串中插入所提供字符串数据的位置。</param>
      <param name="strData">要插入现有字符串的字符串数据。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
      <summary>从指定的偏移量开始用指定的字符串替换指定数目的字符。</summary>
      <param name="offset">字符串中要开始替换的位置。</param>
      <param name="count">要替换的字符数。</param>
      <param name="strData">替换旧字符串数据的新数据。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)">
      <summary>在指定的范围内检索完整字符串的子字符串。</summary>
      <param name="offset">字符串中开始检索的位置。 偏移量为零指示起始点在数据的开始处。</param>
      <param name="count">要检索的字符数。</param>
      <returns>对应于指定范围的子字符串。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Data">
      <summary>包含节点的数据。</summary>
      <returns>节点的数据。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.InnerText">
      <summary>获取或设置节点及该节点所有子级的串联值。</summary>
      <returns>节点及该节点所有子级的串联值。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Length">
      <summary>获取数据的长度（以字符为单位）。</summary>
      <returns>
        <see cref="P:System.Xml.XmlCharacterData.Data" /> 属性中字符串的长度（以字符为单位）。 长度可能为零；也就是说 CharacterData 节点可能是空的。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Value">
      <summary>获取或设置节点的值。</summary>
      <exception cref="T:System.ArgumentException">节点是只读的。</exception>
      <returns>节点的值。</returns>
    </member>
    <member name="T:System.Xml.XmlComment">
      <summary>表示 XML 注释的内容。</summary>
    </member>
    <member name="M:System.Xml.XmlComment.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlComment" /> 类的新实例。</summary>
      <param name="comment">注释元素的内容。</param>
      <param name="doc">父 XML 文档。</param>
    </member>
    <member name="M:System.Xml.XmlComment.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。 由于注释节点没有子级，因此克隆的节点始终包含文本内容，而不管参数的设置如何。</param>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。 因为注释节点没有子级，所以此方法不会产生任何效果。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlComment.LocalName">
      <summary>获取节点的本地名称。</summary>
      <returns>对于注释节点，该值为 <see langword="#comment" />。</returns>
    </member>
    <member name="P:System.Xml.XmlComment.Name">
      <summary>获取节点的限定名称。</summary>
      <returns>对于注释节点，该值为 <see langword="#comment" />。</returns>
    </member>
    <member name="P:System.Xml.XmlComment.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>对于注释节点，该值为 XmlNodeType.Comment。</returns>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary>对 XML 名称进行编码和解码，并提供方法在公共语言运行时类型和 XML 架构定义语言 (XSD) 类型之间进行转换。 转换数据类型时，返回的值是独立于区域设置的。</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlConvert" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary>对名称进行解码。 该方法完成 <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> 和 <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> 方法的反向操作。</summary>
      <param name="name">要转换的名称。</param>
      <returns>解码的名称。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary>将名称转换为有效的 XML 本地名称。</summary>
      <param name="name">要编码的名称。</param>
      <returns>已编码的名称。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary>将名称转换为有效的 XML 名称。</summary>
      <param name="name">要转换的名称。</param>
      <returns>任何无效的字符都由转义字符串替换。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary>根据 XML 规范验证该名称是否有效。</summary>
      <param name="name">要编码的名称。</param>
      <returns>已编码的名称。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsNCNameChar(System.Char)">
      <summary>检查传入的字符是否是有效的非冒号字符类型。</summary>
      <param name="ch">要验证是否为非冒号字符的字符。</param>
      <returns>如果字符是有效的非冒号字符类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsPublicIdChar(System.Char)">
      <summary>如果参数中的字符是有效的公共 ID 字符，则返回传入的字符实例；否则返回 <see langword="null" />。</summary>
      <param name="ch">要验证的 <see cref="T:System.Char" /> 对象。</param>
      <returns>如果字符是有效的公共 ID 字符，则为传入的字符；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsStartNCNameChar(System.Char)">
      <summary>检查传入的字符是否为有效的启动名称字符类型。</summary>
      <param name="ch">要验证的字符。</param>
      <returns>如果字符是有效的启动名称字符类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsWhitespaceChar(System.Char)">
      <summary>检查传入的字符是否是有效的 XML 空白字符。</summary>
      <param name="ch">要验证的字符。</param>
      <returns>如果传入的字符是有效的 XML 空白字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlChar(System.Char)">
      <summary>检查传入的字符是否是有效的 XML 字符。</summary>
      <param name="ch">要验证的字符。</param>
      <returns>如果传入的字符是有效的 XML 字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlSurrogatePair(System.Char,System.Char)">
      <summary>检查传入的代理项字符对是否是有效的 XML 字符。</summary>
      <param name="lowChar">要验证的代理项字符。</param>
      <param name="highChar">要验证的代理项字符。</param>
      <returns>如果传入的字符代理项对是有效的 XML 字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Boolean" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不代表 <see langword="Boolean" /> 值。</exception>
      <returns>一个 <see langword="Boolean" /> 值，即 <see langword="true" /> 或 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Byte" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
      <returns>与该字符串等效的 <see langword="Byte" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Char" />。</summary>
      <param name="s">包含所要转换的单个字符的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数的值为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 参数包含多个字符。</exception>
      <returns>代表单个字符的 <see langword="Char" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 为空字符串或格式不正确。</exception>
      <returns>与该字符串等效的 <see langword="DateTime" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">要转换的字符串。</param>
      <param name="format">该格式结构适用于转换的 <see langword="DateTime" />。 有效格式包括“yyyy-MM-ddTHH:mm:sszzzzzz”及其子集。 根据此格式验证字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 为 String.Empty 
- 或 - 
 <paramref name="s" /> 不包含与 <paramref name="format" /> 对应的日期和时间。</exception>
      <returns>与该字符串等效的 <see langword="DateTime" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">要转换的字符串。</param>
      <param name="formats">包含格式结构的数组，这些格式结构适用于转换的 <see langword="DateTime" />。 有效格式包括“yyyy-MM-ddTHH:mm:sszzzzzz”及其子集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="formats" /> 的一个元素为 String.Empty 
- 或 - 
 <paramref name="s" /> 不包含与 <paramref name="formats" /> 的任何元素对应的日期和时间。</exception>
      <returns>与该字符串等效的 <see langword="DateTime" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 将 <see cref="T:System.String" /> 转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="s">要转换的 <see cref="T:System.String" /> 值。</param>
      <param name="dateTimeOption">枚举值之一，用于指定日期是应转换为本地时间，还是应保留为协调通用时间 (UTC)（如果它为 UTC 日期）。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateTimeOption" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 是一个空字符串或其格式无效。</exception>
      <returns>
        <see cref="T:System.DateTime" /> 的等效 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)">
      <summary>将提供的 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="s">要转换的字符串。  
  
 注意 该字符串必须属于针对 XML dateTime 类型的 W3C 建议的子集。 有关详细信息，请参阅 XML 架构规范的 dateTime 部分。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">传递给此方法的参数不在允许值的范围内。 有关允许值的信息，请参见 <see cref="T:System.DateTimeOffset" />。</exception>
      <exception cref="T:System.FormatException">传递给此方法的参数不符合 XML DateTime 类型的 W3C 建议的子集。 有关详细信息，请参阅 XML 架构规范的 dateTime 部分。</exception>
      <returns>与提供的字符串等效的 <see cref="T:System.DateTimeOffset" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)">
      <summary>将提供的 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="s">要转换的字符串。</param>
      <param name="format">从中转换 <paramref name="s" /> 的格式。 该格式参数可以是 XML DateTime 类型的 W3C 建议的任何子集。 （有关详细信息，请参阅 XML 架构规范的 dateTime 部分。）将根据此格式验证字符串 <paramref name="s" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是一个空字符串或者未采用指定的格式。</exception>
      <returns>与提供的字符串等效的 <see cref="T:System.DateTimeOffset" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])">
      <summary>将提供的 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="s">要转换的字符串。</param>
      <param name="formats">可以转换 <paramref name="s" /> 的格式数组。 <paramref name="formats" /> 中的每个格式均可以是 XML DateTime 类型的 W3C 建议的任何子集。 （有关详细信息，请参阅 XML 架构规范的 dateTime 部分。）将根据这些格式中的一个格式验证字符串 <paramref name="s" />。</param>
      <returns>与提供的字符串等效的 <see cref="T:System.DateTimeOffset" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Decimal" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
      <returns>与该字符串等效的 <see langword="Decimal" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Double" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
      <returns>与该字符串等效的 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Guid" />。</summary>
      <param name="s">要转换的字符串。</param>
      <returns>与该字符串等效的 <see langword="Guid" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Int16" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
      <returns>与该字符串等效的 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Int32" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
      <returns>与该字符串等效的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Int64" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
      <returns>与该字符串等效的 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.SByte" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
      <returns>与该字符串等效的 <see langword="SByte" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.Single" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
      <returns>与该字符串等效的 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary>将 <see cref="T:System.Boolean" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see langword="Boolean" /> 的字符串表示形式，即“true”或“false”。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Byte)">
      <summary>将 <see cref="T:System.Byte" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see langword="Byte" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary>将 <see cref="T:System.Char" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see langword="Char" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime)">
      <summary>将 <see cref="T:System.DateTime" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see langword="DateTime" /> 的字符串表示形式，格式为 yyyy-MM-ddTHH:mm:ss，其中“T”是常数文本。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)">
      <summary>将 <see cref="T:System.DateTime" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <param name="format">定义如何显示转换的字符串的格式结构。 有效格式包括“yyyy-MM-ddTHH:mm:sszzzzzz”及其子集。</param>
      <returns>指定格式的 <see langword="DateTime" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 将 <see cref="T:System.DateTime" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的 <see cref="T:System.DateTime" /> 值。</param>
      <param name="dateTimeOption">
        <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 值之一，用于指定如何处理 <see cref="T:System.DateTime" /> 值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTimeOption" /> 值无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="dateTimeOption" /> 值为 <see langword="null" />。</exception>
      <returns>
        <see cref="T:System.String" /> 的等效 <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)">
      <summary>将提供的 <see cref="T:System.DateTimeOffset" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的 <see cref="T:System.DateTimeOffset" />。</param>
      <returns>提供的 <see cref="T:System.DateTimeOffset" /> 的 <see cref="T:System.String" /> 表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)">
      <summary>将提供的 <see cref="T:System.DateTimeOffset" /> 转换为指定格式的 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的 <see cref="T:System.DateTimeOffset" />。</param>
      <param name="format">
        <paramref name="s" /> 转换为的格式。 该格式参数可以是 XML DateTime 类型的 W3C 建议的任何子集。 （有关详细信息，请参阅 XML 架构规范的 dateTime 部分。）</param>
      <returns>提供的 <see cref="T:System.DateTimeOffset" /> 的指定格式的 <see cref="T:System.String" /> 表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary>将 <see cref="T:System.Decimal" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see langword="Decimal" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary>将 <see cref="T:System.Double" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see cref="T:System.Double" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary>将 <see cref="T:System.Guid" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see langword="Guid" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary>将 <see cref="T:System.Int16" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see cref="T:System.Int16" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary>将 <see cref="T:System.Int32" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see cref="T:System.Int32" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary>将 <see cref="T:System.Int64" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see cref="T:System.Int64" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary>将 <see cref="T:System.SByte" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see langword="SByte" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary>将 <see cref="T:System.Single" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see cref="T:System.Single" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary>将 <see cref="T:System.TimeSpan" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see langword="TimeSpan" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt16)">
      <summary>将 <see cref="T:System.UInt16" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see cref="T:System.UInt16" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary>将 <see cref="T:System.UInt32" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see cref="T:System.UInt32" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary>将 <see cref="T:System.UInt64" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的值。</param>
      <returns>
        <see cref="T:System.UInt64" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="s">要转换的字符串。 字符串格式必须符合 W3C XML 架构第 2 部分：持续时间数据类型建议。</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 格式不正确，不能代表 <see langword="TimeSpan" /> 值。</exception>
      <returns>与该字符串等效的 <see langword="TimeSpan" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.UInt16" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
      <returns>与该字符串等效的 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.UInt32" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
      <returns>与该字符串等效的 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary>将 <see cref="T:System.String" /> 转换为等效的 <see cref="T:System.UInt64" />。</summary>
      <param name="s">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
      <returns>与该字符串等效的 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary>根据 W3C 可扩展标记语言建议验证该名称是否是有效的名称。</summary>
      <param name="name">要验证的名称。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> 不是有效的 XML 名称。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" /> 或 String.Empty。</exception>
      <returns>该名称（如果它是有效的 XML 名称）。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary>根据 W3C 可扩展标记语言建议，验证名称是否是有效的 <see langword="NCName" />。 <see langword="NCName" /> 是不能包含冒号的名称。</summary>
      <param name="name">要验证的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" /> 或 <c>String.Empty</c>.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" />不是有效的非冒号名。</exception>
      <returns>该名称（如果它是有效的 NCName）。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
      <summary>根据“W3C 的 XML 架构第 2 部分：数据类型建议”，验证字符串是否是有效的 NMTOKEN。</summary>
      <param name="name">要验证的字符串。</param>
      <exception cref="T:System.Xml.XmlException">该字符串不是有效的名称标记。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <returns>名称标记（如果它是有效的 NMTOKEN）。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyPublicId(System.String)">
      <summary>如果字符串自变量中的所有字符都是有效的公共 ID 字符，则返回传入的字符串实例。</summary>
      <param name="publicId">包含要验证的 ID 的 <see cref="T:System.String" />。</param>
      <returns>如果自变量中的所有字符都是有效的公共 ID 字符，则为传入字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyTOKEN(System.String)">
      <summary>根据 W3C XML 架构第 2 部分“数据类型”建议，验证该字符串是否为有效标记。</summary>
      <param name="token">要验证的字符串值。</param>
      <exception cref="T:System.Xml.XmlException">该属性值不是有效的标记。</exception>
      <returns>标记（如果它是有效的标记）。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyWhitespace(System.String)">
      <summary>如果字符串参数中的所有字符都是有效的空白字符，则返回传入的字符串实例。</summary>
      <param name="content">要验证的 <see cref="T:System.String" />。</param>
      <returns>如果字符串参数中的所有字符都是有效的空白字符，则为传入字符串实例；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyXmlChars(System.String)">
      <summary>如果字符串自变量中的所有字符和代理项对字符都是有效的 XML 字符，则返回传入的字符串；否则将引发 <see langword="XmlException" /> 并提供有关遇到的第一个无效字符的信息。</summary>
      <param name="content">包含要验证的字符的 <see cref="T:System.String" />。</param>
      <returns>如果字符串参数中的所有字符和代理项对字符都是有效的 XML 字符，则为传入字符串；否则将引发 <see langword="XmlException" /> 并提供有关遇到的第一个无效字符的信息。</returns>
    </member>
    <member name="T:System.Xml.XmlDateTimeSerializationMode">
      <summary>指定在字符串与 <see cref="T:System.DateTime" /> 之间转换时，如何处理时间值。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
      <summary>作为本地时间处理。 如果 <see cref="T:System.DateTime" /> 对象表示协调通用时间 (UTC)，它将转换为本地时间。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
      <summary>转换时应保留时区信息。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
      <summary>如果 <see cref="T:System.DateTime" /> 要转换为字符串，将作为本地时间处理。 如果正在将字符串转换为 <see cref="T:System.DateTime" />，则在指定了时区时转换为本地时间。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
      <summary>作为 UTC 处理。 如果 <see cref="T:System.DateTime" /> 对象表示本地时间，它将转换为 UTC。</summary>
    </member>
    <member name="T:System.Xml.XmlDeclaration">
      <summary>表示 XML 声明节点 &lt;?xml version='1.0'...?&gt;。</summary>
    </member>
    <member name="M:System.Xml.XmlDeclaration.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlDeclaration" /> 类的新实例。</summary>
      <param name="version">XML 版本，请参见 <see cref="P:System.Xml.XmlDeclaration.Version" /> 属性。</param>
      <param name="encoding">编码方案，请参见 <see cref="P:System.Xml.XmlDeclaration.Encoding" /> 属性。</param>
      <param name="standalone">指示 XML 文档是否取决于外部 DTD，请参见 <see cref="P:System.Xml.XmlDeclaration.Standalone" /> 属性。</param>
      <param name="doc">父 XML 文档。</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。 由于 <see langword="XmlDeclaration" /> 节点没有子级，因此克隆的节点始终包含数据值，而不管参数的设置如何。</param>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将节点的子级保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。 由于 <see langword="XmlDeclaration" /> 节点没有子级，因此该方法无效。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Encoding">
      <summary>获取或设置 XML 文档的编码级别。</summary>
      <returns>有效的字符编码名称。 受到最广泛支持的 XML 字符编码名称如下：  
  
 <list type="table"><listheader><term> 类别</term><description> 编码名</description></listheader><item><term> Unicode</term><description> UTF-8、UTF-16</description></item><item><term> ISO 10646</term><description> ISO-10646-UCS-2、ISO-10646-UCS-4</description></item><item><term> ISO 8859</term><description> ISO-8859-n（其中“n”表示从 1 到 9 的数字）</description></item><item><term> JIS X-0208-1997</term><description> ISO-2022-JP、Shift_JIS、EUC-JP</description></item></list>  

 此值是可选的。 如果未设置值，该属性将返回 String.Empty。  
  
 如果未包含编码特性，则在写出或保存文档时将假定为 UTF-8 编码。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.InnerText">
      <summary>获取或设置 <see langword="XmlDeclaration" /> 的连接的值。</summary>
      <returns> (的连接值 <see langword="XmlDeclaration" /> ，即<c> &lt; ？ xml</c>和<c>？ &gt; </c>) 之间的所有内容。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.LocalName">
      <summary>获取节点的本地名称。</summary>
      <returns>对于 <see langword="XmlDeclaration" /> 节点，本地名称为 <see langword="xml" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Name">
      <summary>获取节点的限定名称。</summary>
      <returns>对于 <see langword="XmlDeclaration" /> 节点，该名称为 <see langword="xml" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>对于 <see langword="XmlDeclaration" /> 节点，该值为 XmlNodeType.XmlDeclaration。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Standalone">
      <summary>获取或设置独立特性的值。</summary>
      <returns>如果 XML 文档所需要的所有实体声明都包含在文档内，则有效值为 <see langword="yes" />，或者如果需要外部文档类型定义 (DTD)，则为 <see langword="no" />。 如果 XML 声明中没有独立特性，该属性将返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Value">
      <summary>获取或设置 <see langword="XmlDeclaration" /> 的值。</summary>
      <returns>
        <see langword="XmlDeclaration" /> (的内容，即<c> &lt; ？ xml</c>和<c>？ &gt; </c>) 之间的所有内容。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Version">
      <summary>获取文档的 XML 版本。</summary>
      <returns>该值始终为 <see langword="1.0" />。</returns>
    </member>
    <member name="T:System.Xml.XmlDocument">
      <summary>表示 XML 文档。 可使用此类在文档中加载、验证、编辑、添加和放置 XML。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanged">
      <summary>当属于该文档的节点的 <see cref="P:System.Xml.XmlNode.Value" /> 已被更改时发生。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanging">
      <summary>当属于该文档的节点的 <see cref="P:System.Xml.XmlNode.Value" /> 将被更改时发生。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserted">
      <summary>将属于该文档的节点插入另一个节点时发生。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserting">
      <summary>当属于该文档的节点将被插入另一个节点时发生。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoved">
      <summary>当属于该文档的节点已从其父级中移除时发生。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoving">
      <summary>当属于该文档的节点将从文档中移除时发生。</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlDocument" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)">
      <summary>使用指定的 <see langword="XmlDocument" /> 初始化 <see cref="T:System.Xml.XmlImplementation" /> 类的新实例。</summary>
      <param name="imp">要使用的 <see langword="XmlImplementation" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)">
      <summary>使用指定的 <see langword="XmlDocument" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。</summary>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。</param>
      <returns>克隆的 <see langword="XmlDocument" /> 节点。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String)">
      <summary>创建具有指定 <see cref="P:System.Xml.XmlDocument.Name" /> 的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="name">属性的限定名称。 如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" /> 属性反映名称中第一个冒号之前的部分，<see cref="P:System.Xml.XmlDocument.LocalName" /> 属性反映名称中第一个冒号之后的部分。 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 保持为空，除非该前缀是一个可识别的内置前缀，例如 xmlns。 在此情况下，<see langword="NamespaceURI" /> 的值为 <c>http://www.w3.org/2000/xmlns/</c>。</param>
      <returns>新的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)">
      <summary>创建具有指定限定名和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="qualifiedName">属性的限定名称。 如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" /> 属性将反映名称中位于冒号前的部分，而 <see cref="P:System.Xml.XmlDocument.LocalName" /> 属性将反映名称中位于冒号后的部分。</param>
      <param name="namespaceURI">属性的 namespaceURI。 如果限定名称包含前缀 xmlns，则该参数必须是 <c>http://www.w3.org/2000/xmlns/</c>。</param>
      <returns>新的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary>创建一个具有指定的 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="prefix">属性的前缀（如果有的话）。 String.Empty 与 <see langword="null" /> 等效。</param>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI（如果有的话）。 String.Empty 与 <see langword="null" /> 等效。 如果 <paramref name="prefix" /> 为 xmlns，则此参数必须是 <c>http://www.w3.org/2000/xmlns/</c>；否则会引发异常。</param>
      <returns>新的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateCDataSection(System.String)">
      <summary>创建包含指定数据的 <see cref="T:System.Xml.XmlCDataSection" />。</summary>
      <param name="data">新 <see langword="XmlCDataSection" /> 的内容。</param>
      <returns>新的 <see langword="XmlCDataSection" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateComment(System.String)">
      <summary>创建包含指定数据的 <see cref="T:System.Xml.XmlComment" />。</summary>
      <param name="data">新 <see langword="XmlComment" /> 的内容。</param>
      <returns>新的 <see langword="XmlComment" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)">
      <summary>创建具有指定前缀、本地名称和命名空间 URI 的默认属性。</summary>
      <param name="prefix">属性的前缀（如果有的话）。</param>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI（如果有的话）。</param>
      <returns>新的 <see cref="T:System.Xml.XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentFragment">
      <summary>创建 <see cref="T:System.Xml.XmlDocumentFragment" />。</summary>
      <returns>新的 <see langword="XmlDocumentFragment" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)">
      <summary>返回新 <see cref="T:System.Xml.XmlDocumentType" /> 对象。</summary>
      <param name="name">此文档类型的名称。</param>
      <param name="publicId">此文档类型的公共标识符或 <see langword="null" />。 你可以指定一个公共 URI 以及一个系统标识符以标识外部 DTD 子集的位置。</param>
      <param name="systemId">此文档类型的系统标识符或 <see langword="null" />。 指定外部 DTD 子集的文件位置的 URL。</param>
      <param name="internalSubset">此文档类型的 DTD 内部子集或 <see langword="null" />。</param>
      <returns>新的 <see langword="XmlDocumentType" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String)">
      <summary>创建具有指定名称的元素。</summary>
      <param name="name">元素的限定名。 如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" /> 属性反映名称中位于冒号之前的部分，<see cref="P:System.Xml.XmlDocument.LocalName" /> 属性反映名称中位于冒号之后的部分。 限定名称不能包含“xmlns”前缀。</param>
      <returns>新的 <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)">
      <summary>创建具有限定名和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <param name="qualifiedName">元素的限定名。 如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" /> 属性将反映名称中位于冒号前的部分，而 <see cref="P:System.Xml.XmlDocument.LocalName" /> 属性将反映名称中位于冒号后的部分。 限定名称不能包含“xmlns”前缀。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <returns>新的 <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary>创建具有指定 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的元素。</summary>
      <param name="prefix">新元素的前缀（如果有的话）。 String.Empty 与 <see langword="null" /> 等效。</param>
      <param name="localName">新元素的本地名称。</param>
      <param name="namespaceURI">新元素的命名空间 URI（如果有的话）。 String.Empty 与 <see langword="null" /> 等效。</param>
      <returns>新的 <see cref="T:System.Xml.XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateEntityReference(System.String)">
      <summary>创建具有指定名称的 <see cref="T:System.Xml.XmlEntityReference" />。</summary>
      <param name="name">实体引用的名称。</param>
      <exception cref="T:System.ArgumentException">名称无效（例如，以“#”开头的名称无效。）</exception>
      <returns>新的 <see langword="XmlEntityReference" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator">
      <summary>创建一个用于导航此文档的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>创建 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，以定位位于指定的 <see cref="T:System.Xml.XmlNode" /> 上的此文档。</summary>
      <param name="node">希望导航器最初定位在的 <see cref="T:System.Xml.XmlNode" />。</param>
      <returns>一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)">
      <summary>创建具有指定的节点类型、<see cref="P:System.Xml.XmlDocument.Name" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="nodeTypeString">新节点的 <see cref="T:System.Xml.XmlNodeType" /> 的字符串版本。 该参数必须是下表中列出的值之一。</param>
      <param name="name">新节点的限定名称。 如果名称包含一个冒号，则将它解析为 <see cref="P:System.Xml.XmlNode.Prefix" /> 和 <see cref="P:System.Xml.XmlDocument.LocalName" /> 两部分。</param>
      <param name="namespaceURI">新节点的命名空间 URI。</param>
      <exception cref="T:System.ArgumentException">未提供名称，而 <see langword="XmlNodeType" /> 需要名称；或者 <paramref name="nodeTypeString" /> 不是下列字符串之一。</exception>
      <returns>新的 <see langword="XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
      <summary>创建一个具有指定的 <see cref="T:System.Xml.XmlNodeType" />、<see cref="P:System.Xml.XmlDocument.Name" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="type">新节点的 <see langword="XmlNodeType" />。</param>
      <param name="name">新节点的限定名称。 如果名称包含一个冒号，则将其解析为 <see cref="P:System.Xml.XmlNode.Prefix" /> 和 <see cref="P:System.Xml.XmlDocument.LocalName" /> 两部分。</param>
      <param name="namespaceURI">新节点的命名空间 URI。</param>
      <exception cref="T:System.ArgumentException">未提供名称，而 <see langword="XmlNodeType" /> 需要名称。</exception>
      <returns>新的 <see langword="XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)">
      <summary>创建一个具有指定的<see cref="T:System.Xml.XmlNodeType" />、<see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.Name" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="type">新节点的 <see langword="XmlNodeType" />。</param>
      <param name="prefix">新节点的前缀。</param>
      <param name="name">新节点的本地名称。</param>
      <param name="namespaceURI">新节点的命名空间 URI。</param>
      <exception cref="T:System.ArgumentException">未提供名称，而 <see langword="XmlNodeType" /> 需要名称。</exception>
      <returns>新的 <see langword="XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)">
      <summary>创建一个具有指定名称和数据的 <see cref="T:System.Xml.XmlProcessingInstruction" />。</summary>
      <param name="target">处理指令的名称。</param>
      <param name="data">处理指令的数据。</param>
      <returns>新的 <see langword="XmlProcessingInstruction" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)">
      <summary>创建一个 <see cref="T:System.Xml.XmlSignificantWhitespace" /> 节点。</summary>
      <param name="text">此字符串只能包含下列字符：&amp;#20、&amp;#10、&amp;#13 和 &amp;#9</param>
      <returns>一个新的 <see langword="XmlSignificantWhitespace" /> 节点。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateTextNode(System.String)">
      <summary>创建具有指定文本的 <see cref="T:System.Xml.XmlText" />。</summary>
      <param name="text">Text 节点的文本。</param>
      <returns>新的 <see langword="XmlText" /> 节点。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateWhitespace(System.String)">
      <summary>创建一个 <see cref="T:System.Xml.XmlWhitespace" /> 节点。</summary>
      <param name="text">此字符串只能包含下列字符：&amp;#20、&amp;#10、&amp;#13 和 &amp;#9</param>
      <returns>一个新的 <see langword="XmlWhitespace" /> 节点。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)">
      <summary>创建一个具有指定值的 <see cref="T:System.Xml.XmlDeclaration" /> 节点。</summary>
      <param name="version">版本必须为“1.0”。</param>
      <param name="encoding">编码属性的值。 这是当将 <see cref="T:System.Xml.XmlDocument" /> 保存到文件或流时使用的编码方式；因此必须将其设置为 <see cref="T:System.Text.Encoding" /> 类支持的字符串，否则 <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> 失败。 如果这是 <see langword="null" /> 或 String.Empty，则 <see langword="Save" /> 方法不在 XML 声明上写出编码方式特性，因此将使用默认的编码方式 UTF-8。  
  
注意：如果将 <see langword="XmlDocument" /> 保存到 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.Xml.XmlTextWriter" />，则放弃该编码值。 而改用 <see langword="TextWriter" /> 或 <see langword="XmlTextWriter" /> 的编码方式。 这会确保可以使用正确的编码读回写出的 XML。</param>
      <param name="standalone">该值必须是“yes”或“no”。 如果这是 <see langword="null" /> 或 String.Empty，<see langword="Save" /> 方法不在 XML 声明上写出独立特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> 或 <paramref name="standalone" /> 的值是除上面指定的值以外的值。</exception>
      <returns>新的 <see langword="XmlDeclaration" /> 节点。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementById(System.String)">
      <summary>获取具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <param name="elementId">要匹配的属性 ID。</param>
      <returns>具有匹配 ID 的 <see langword="XmlElement" />；如果未找到匹配的元素，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)">
      <summary>返回一个 <see cref="T:System.Xml.XmlNodeList" />，它包含与指定 <see cref="P:System.Xml.XmlDocument.Name" /> 匹配的所有子代元素的列表。</summary>
      <param name="name">要匹配的限定名称。 它针对匹配节点的 <see langword="Name" /> 属性进行匹配。 特殊值“*”匹配所有标记。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有匹配节点的列表。 如果没有任何节点与 <paramref name="name" /> 匹配，则返回的集合将为空。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)">
      <summary>返回一个 <see cref="T:System.Xml.XmlNodeList" />，它包含与指定 <see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 匹配的所有子代元素的列表。</summary>
      <param name="localName">要匹配的 LocalName。 特殊值“*”匹配所有标记。</param>
      <param name="namespaceURI">要匹配的 NamespaceURI。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有匹配节点的列表。 如果没有任何节点与指定的 <paramref name="localName" /> 和 <paramref name="namespaceURI" /> 匹配，则返回的集合将为空。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)">
      <summary>将节点从另一个文档导入到当前文档。</summary>
      <param name="node">正在被导入的节点。</param>
      <param name="deep">如果执行深层克隆，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">在无法导入的节点类型上调用此方法。</exception>
      <returns>导入的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.Stream)">
      <summary>从指定的流加载 XML 文档。</summary>
      <param name="inStream">包含要加载的 XML 文档的流。</param>
      <exception cref="T:System.Xml.XmlException">XML 中存在加载或分析错误。 在这种情况下，将引发 <see cref="T:System.IO.FileNotFoundException" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.TextReader)">
      <summary>从指定的 <see cref="T:System.IO.TextReader" /> 加载 XML 文档。</summary>
      <param name="txtReader">用于将 XML 数据输送到文档中的 <see langword="TextReader" />。</param>
      <exception cref="T:System.Xml.XmlException">XML 中存在加载或分析错误。 在这种情况下，该文档保留为空。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.String)">
      <summary>从指定的 URL 加载 XML 文档。</summary>
      <param name="filename">含要加载的 XML 文档的文件的 URL。 URL 既可以是本地文件，也可以是 HTTP URL（Web 地址）。</param>
      <exception cref="T:System.Xml.XmlException">XML 中存在加载或分析错误。 在这种情况下，将引发 <see cref="T:System.IO.FileNotFoundException" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filename" /> 是一个长度为零的字符串，仅包含空格，或包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" /> 定义的无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filename" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
      <exception cref="T:System.IO.IOException">打开文件时发生 I/O 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="filename" /> 指定了一个只读文件。  
  
- 或 - 
当前平台不支持此操作。  
  
- 或 - 
 <paramref name="filename" /> 指定了一个目录。  
  
- 或 - 
调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="filename" /> 中指定的文件。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="filename" /> 的格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 加载 XML 文档。</summary>
      <param name="reader">用于将 XML 数据输送到文档中的 <see langword="XmlReader" />。</param>
      <exception cref="T:System.Xml.XmlException">XML 中存在加载或分析错误。 在这种情况下，该文档保留为空。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.LoadXml(System.String)">
      <summary>从指定的字符串加载 XML 文档。</summary>
      <param name="xml">包含要加载的 XML 文档的字符串。</param>
      <exception cref="T:System.Xml.XmlException">XML 中存在加载或分析错误。 在这种情况下，该文档保留为空。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)">
      <summary>根据 <see cref="T:System.Xml.XmlReader" /> 中的信息创建一个 <see cref="T:System.Xml.XmlNode" /> 对象。 读取器必须定位在节点或属性上。</summary>
      <param name="reader">XML 源</param>
      <exception cref="T:System.NullReferenceException">此读取器位于未转换为有效的 DOM 节点（例如，EndElement 或 EndEntity）的节点类型上。</exception>
      <returns>新的 <see langword="XmlNode" />；如果不存在其他节点，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.Stream)">
      <summary>将 XML 文档保存到指定的流。</summary>
      <param name="outStream">要保存到其中的流。</param>
      <exception cref="T:System.Xml.XmlException">该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)">
      <summary>将 XML 文档保存到指定的 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">要保存到其中的 <see langword="TextWriter" />。</param>
      <exception cref="T:System.Xml.XmlException">该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.String)">
      <summary>将 XML 文档保存到指定的文件。 如果存在指定文件，则此方法会覆盖它。</summary>
      <param name="filename">要将文档保存到其中的文件的位置。</param>
      <exception cref="T:System.Xml.XmlException">该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)">
      <summary>将 XML 文档保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
      <exception cref="T:System.Xml.XmlException">该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)">
      <summary>验证 <see cref="T:System.Xml.XmlDocument" /> 是不是 <see cref="P:System.Xml.XmlDocument.Schemas" /> 属性中包含的 XML 架构定义语言 (XSD) 架构。</summary>
      <param name="validationEventHandler">接收有关架构验证警告和错误的信息的 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 对象。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">发生了架构验证事件并且没有指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 对象。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)">
      <summary>根据 <see cref="P:System.Xml.XmlDocument.Schemas" /> 属性中的 XML 架构定义语言 (XSD) 架构，验证指定的 <see cref="T:System.Xml.XmlNode" /> 对象。</summary>
      <param name="validationEventHandler">接收有关架构验证警告和错误的信息的 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 对象。</param>
      <param name="nodeToValidate">从 <see cref="T:System.Xml.XmlDocument" /> 创建的要验证的 <see cref="T:System.Xml.XmlNode" /> 对象。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlNode" /> 对象参数不是从 <see cref="T:System.Xml.XmlDocument" /> 创建的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlNode" /> 对象参数不是元素、特性、文档片段或根节点。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">发生了架构验证事件并且没有指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 对象。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将 <see langword="XmlDocument" /> 节点的所有子级保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。</summary>
      <param name="xw">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>将 <see langword="XmlDocument" /> 节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocument.BaseURI">
      <summary>获取当前节点的基 URI。</summary>
      <returns>从其加载节点的位置。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentElement">
      <summary>获取文档的根 <see cref="T:System.Xml.XmlElement" />。</summary>
      <returns>表示 XML 文档树的根的 <see langword="XmlElement" />。 如果不存在根，则返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentType">
      <summary>获取包含 DOCTYPE 声明的节点。</summary>
      <returns>包含 DocumentType（DOCTYPE 声明）的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Implementation">
      <summary>获取当前文档的 <see cref="T:System.Xml.XmlImplementation" /> 对象。</summary>
      <returns>当前文档的 <see langword="XmlImplementation" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerText">
      <summary>在所有情况下引发 <see cref="T:System.InvalidOperationException" />。</summary>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
      <returns>节点及其所有子节点的值。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerXml">
      <summary>获取或设置表示当前节点的子级的标记。</summary>
      <exception cref="T:System.Xml.XmlException">设置此属性时指定的 XML 格式不正确。</exception>
      <returns>当前节点的子级的标记。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.IsReadOnly">
      <summary>获取一个值，该值指示当前节点是否是只读的。</summary>
      <returns>如果当前节点为只读，则为 <see langword="true" />；否则为 <see langword="false" />。 <see langword="XmlDocument" /> 节点始终返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.LocalName">
      <summary>获取节点的本地名称。</summary>
      <returns>对于 <see langword="XmlDocument" /> 节点，本地名称是 #document。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Name">
      <summary>获取节点的限定名称。</summary>
      <returns>对于 <see langword="XmlDocument" /> 节点，该名称是 #document。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.NameTable">
      <summary>获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see langword="XmlNameTable" />，它使您能够获取该文档中字符串的原子化版本。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>节点类型。 对于 <see langword="XmlDocument" /> 节点，该值是 XmlNodeType.Document。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.OwnerDocument">
      <summary>获取当前节点所属的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>对于 <see langword="XmlDocument" /> 节点（<see cref="P:System.Xml.XmlDocument.NodeType" /> 等于 XmlNodeType.Document），该属性总是返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.ParentNode">
      <summary>获取该节点的父节点（针对可以拥有父级的节点）。</summary>
      <returns>始终返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.PreserveWhitespace">
      <summary>获取或设置一个值，该值指示是否在元素内容中保留空白区域。</summary>
      <returns>
        <see langword="true" /> 表示保留空白；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.SchemaInfo">
      <summary>返回节点的后架构验证信息集 (PSVI)。</summary>
      <returns>表示节点的 PSVI 的 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Schemas">
      <summary>获取或设置与此 <see cref="T:System.Xml.XmlDocument" /> 关联的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。</summary>
      <returns>为一个包含与此 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 关联的 XML 架构定义语言 (XSD) 架构的 <see cref="T:System.Xml.XmlDocument" /> 对象；否则，为一个空 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.XmlResolver">
      <summary>设置 <see cref="T:System.Xml.XmlResolver" /> 以用于解析外部资源。</summary>
      <exception cref="T:System.Xml.XmlException">此属性设置为 <see langword="null" />，并且遇到了外部 DTD 或实体。</exception>
      <returns>要使用的 <see langword="XmlResolver" />。  
  
在 .NET Framework 1.1 版中，调用方必须受到完全信任才能指定 <see langword="XmlResolver" />。</returns>
    </member>
    <member name="T:System.Xml.XmlDocumentFragment">
      <summary>表示对树插入操作有用的轻量对象。</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.#ctor(System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlDocumentFragment" /> 类的新实例。</summary>
      <param name="ownerDocument">为片段源的 XML 文档。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。</param>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.InnerXml">
      <summary>获取或设置表示此节点子级的标记。</summary>
      <exception cref="T:System.Xml.XmlException">设置此属性时指定的 XML 格式不正确。</exception>
      <returns>此节点子级的标记。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.LocalName">
      <summary>获取节点的本地名称。</summary>
      <returns>对于 <see langword="XmlDocumentFragment" /> 节点，本地名称为 <see langword="#document-fragment" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.Name">
      <summary>获取节点的限定名称。</summary>
      <returns>对于 <see langword="XmlDocumentFragment" /> 节点，该名称为 <see langword="#document-fragment" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>对于 <see langword="XmlDocumentFragment" /> 节点，该值是 XmlNodeType.DocumentFragment。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.OwnerDocument">
      <summary>获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>该节点所属的 <see langword="XmlDocument" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.ParentNode">
      <summary>获取该节点的父级（针对可以拥有父级的节点）。</summary>
      <returns>该节点的父级。  
  
对于 <see langword="XmlDocumentFragment" /> 节点，该属性总是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlDocumentType">
      <summary>表示文档类型声明。</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentType.#ctor(System.String,System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlDocumentType" /> 类的新实例。</summary>
      <param name="name">限定名称，请参见 <see cref="P:System.Xml.XmlDocumentType.Name" /> 属性。</param>
      <param name="publicId">公共标识符，请参见 <see cref="P:System.Xml.XmlDocumentType.PublicId" /> 属性。</param>
      <param name="systemId">系统标识符，请参见 <see cref="P:System.Xml.XmlDocumentType.SystemId" /> 属性。</param>
      <param name="internalSubset">DTD 内部子集，请参见 <see cref="P:System.Xml.XmlDocumentType.InternalSubset" /> 属性。</param>
      <param name="doc">父文档。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。 对于文档类型节点，不管参数设置如何，克隆的节点总是包括子树。</param>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。 对于 <see langword="XmlDocumentType" /> 节点，此方法无效。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Entities">
      <summary>获取文档类型声明中声明的 <see cref="T:System.Xml.XmlEntity" /> 节点的集合。</summary>
      <returns>包含 <see langword="XmlEntity" /> 节点的 <see cref="T:System.Xml.XmlNamedNodeMap" />。 返回的 <see langword="XmlNamedNodeMap" /> 是只读的。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.InternalSubset">
      <summary>获取 DOCTYPE 声明上文档类型定义 (DTD) 内部子集的值。</summary>
      <returns>DOCTYPE 上的 DTD 内部子集。 如果没有 DTD 内部子集，则返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.IsReadOnly">
      <summary>获取指示节点是否只读的值。</summary>
      <returns>
        <see langword="true" /> 如果节点是只读的，则为;否则为 <see langword="false" /> 。  
  
由于 DocumentType 节点是只读的，所以此属性总是返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.LocalName">
      <summary>获取节点的本地名称。</summary>
      <returns>对于 DocumentType 节点，此属性返回文档类型的名称。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Name">
      <summary>获取节点的限定名称。</summary>
      <returns>对于 DocumentType 节点，此属性返回文档类型的名称。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>对于 DocumentType 节点，该值是 XmlNodeType.DocumentType。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Notations">
      <summary>获取文档类型声明中存在的 <see cref="T:System.Xml.XmlNotation" /> 节点的集合。</summary>
      <returns>包含 <see langword="XmlNotation" /> 节点的 <see cref="T:System.Xml.XmlNamedNodeMap" />。 返回的 <see langword="XmlNamedNodeMap" /> 是只读的。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.PublicId">
      <summary>获取 DOCTYPE 声明上公共标识符的值。</summary>
      <returns>DOCTYPE 上的公共标识符。 如果没有公共标识符，则返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.SystemId">
      <summary>获取 DOCTYPE 声明上系统标识符的值。</summary>
      <returns>DOCTYPE 上的系统标识符。 如果没有系统标识符，则返回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlElement">
      <summary>表示元素。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlElement" /> 类的新实例。</summary>
      <param name="prefix">命名空间前缀，请参见 <see cref="P:System.Xml.XmlElement.Prefix" /> 属性。</param>
      <param name="localName">本地名称，请参见 <see cref="P:System.Xml.XmlElement.LocalName" /> 属性。</param>
      <param name="namespaceURI">命名空间 URI，请参见 <see cref="P:System.Xml.XmlElement.NamespaceURI" /> 属性。</param>
      <param name="doc">父 XML 文档。</param>
    </member>
    <member name="M:System.Xml.XmlElement.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身（如果节点是 <see langword="XmlElement" />，还克隆其属性），则为 <see langword="false" />。</param>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String)">
      <summary>返回具有指定名称的属性的值。</summary>
      <param name="name">要检索的属性的名称。 这是限定名。 它针对匹配节点的 <see langword="Name" /> 属性进行匹配。</param>
      <returns>指定的属性的值。 如果未找到匹配属性，或者如果此属性没有指定值或默认值，则返回空字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String,System.String)">
      <summary>返回具有指定本地名称和命名空间 URI 的特性的值。</summary>
      <param name="localName">要检索的特性的本地名称。</param>
      <param name="namespaceURI">要检索的特性的命名空间 URI。</param>
      <returns>指定的属性的值。 如果未找到匹配属性，或者如果此属性没有指定值或默认值，则返回空字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String)">
      <summary>返回具有指定名称的 <see langword="XmlAttribute" />。</summary>
      <param name="name">要检索的属性的名称。 这是限定名。 它针对匹配节点的 <see langword="Name" /> 属性进行匹配。</param>
      <returns>如果找到匹配的属性，则为指定的 <see langword="XmlAttribute" />；如果未找到，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)">
      <summary>返回具有指定本地名称和命名空间 URI 的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <returns>如果找到匹配的属性，则为指定的 <see langword="XmlAttribute" />；如果未找到，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String)">
      <summary>返回一个 <see cref="T:System.Xml.XmlNodeList" />，它包含与指定 <see cref="P:System.Xml.XmlElement.Name" /> 匹配的所有子代元素的列表。</summary>
      <param name="name">要匹配的名称标记。 这是限定名。 它针对匹配节点的 <see langword="Name" /> 属性进行匹配。 星号 (*) 是匹配所有标记的特殊值。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有匹配节点的列表。 如果不存在任何匹配节点，则该列表为空。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)">
      <summary>返回一个 <see cref="T:System.Xml.XmlNodeList" />，它包含与指定 <see cref="P:System.Xml.XmlElement.LocalName" /> 和 <see cref="P:System.Xml.XmlElement.NamespaceURI" /> 匹配的所有子代元素的列表。</summary>
      <param name="localName">要匹配的本地名称。 星号 (*) 是匹配所有标记的特殊值。</param>
      <param name="namespaceURI">要匹配的命名空间 URI。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有匹配节点的列表。 如果不存在任何匹配节点，则该列表为空。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String)">
      <summary>确定当前节点是否具有带有指定名称的属性。</summary>
      <param name="name">要查找的属性的名称。 这是限定名。 它针对匹配节点的 <see langword="Name" /> 属性进行匹配。</param>
      <returns>如果当前节点具有指定的属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String,System.String)">
      <summary>确定当前节点是否具有带有指定本地名称和命名空间 URI 的特性。</summary>
      <param name="localName">要查找的特性的本地名称。</param>
      <param name="namespaceURI">要查找的特性的命名空间 URI。</param>
      <returns>如果当前节点具有指定的属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAll">
      <summary>删除当前节点的所有指定特性和子级。 不删除默认属性。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAllAttributes">
      <summary>从元素中删除所有指定的属性。 不删除默认属性。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String)">
      <summary>按名称删除特性。</summary>
      <param name="name">要移除的属性的名称。 这是限定名。 它针对匹配节点的 <see langword="Name" /> 属性进行匹配。</param>
      <exception cref="T:System.ArgumentException">该节点是只读的。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)">
      <summary>移除具有指定本地名称和命名空间 URI 的特性。 （如果删除的特性具有默认值时，则将立即替换它）。</summary>
      <param name="localName">要移除的特性的本地名称。</param>
      <param name="namespaceURI">要移除的特性的命名空间 URI。</param>
      <exception cref="T:System.ArgumentException">该节点是只读的。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)">
      <summary>从元素中删除具有指定索引的特性节点。 （如果删除的特性具有默认值时，则将立即替换它）。</summary>
      <param name="i">要删除的节点的索引。 第一个节点的索引为 0。</param>
      <returns>已删除的特性节点；若给定索引处无节点则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)">
      <summary>移除由本地名称和命名空间 URI 指定的 <see cref="T:System.Xml.XmlAttribute" />。 （如果删除的特性具有默认值时，则将立即替换它）。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <exception cref="T:System.ArgumentException">该节点是只读的。</exception>
      <returns>移除的 <see langword="XmlAttribute" />；如果 <see langword="null" /> 不具有匹配的特性节点，则为 <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
      <summary>删除指定的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="oldAttr">要移除的 <see langword="XmlAttribute" /> 节点。 如果移除的特性具有默认值，则立即替换它。</param>
      <exception cref="T:System.ArgumentException">该节点是只读的。</exception>
      <returns>移除的 <see langword="XmlAttribute" />；如果 <paramref name="oldAttr" /> 不是 <see langword="null" /> 的特性节点，则为 <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)">
      <summary>设置具有指定名称的特性的值。</summary>
      <param name="name">要创建或更改的特性的名称。 这是限定名。 如果该名称包含一个冒号，则将其解析为前缀和本地名称两个部分。</param>
      <param name="value">要为此特性设置的值。</param>
      <exception cref="T:System.Xml.XmlException">指定的名称包含无效字符。</exception>
      <exception cref="T:System.ArgumentException">该节点是只读的。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)">
      <summary>设置具有指定本地名称和命名空间 URI 的特性的值。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <param name="value">要为此特性设置的值。</param>
      <returns>特性值。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)">
      <summary>添加指定的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <returns>要添加的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
      <summary>添加指定的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="newAttr">要添加到该元素的特性集合的 <see langword="XmlAttribute" /> 节点。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newAttr" /> 是从不同于创建此节点的文档创建的。 或者此节点是只读的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newAttr" /> 已经是另一个 <see langword="XmlElement" /> 对象的特性。 您必须显式克隆 <see langword="XmlAttribute" /> 节点以在其他 <see langword="XmlElement" /> 对象中重用它们。</exception>
      <returns>如果该特性替换同名现有特性，则返回旧 <see langword="XmlAttribute" />；否则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)">
      <summary>将当前节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlElement.Attributes">
      <summary>获取包含此节点的属性列表的 <see cref="T:System.Xml.XmlAttributeCollection" />。</summary>
      <returns>包含此节点的属性列表的 <see cref="T:System.Xml.XmlAttributeCollection" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.HasAttributes">
      <summary>获取一个 <see langword="boolean" /> 值，该值指示当前节点是否有任何属性。</summary>
      <returns>如果当前节点具有属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerText">
      <summary>获取或设置节点及其所有子级的串连值。</summary>
      <returns>节点及其所有子级的串连值。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerXml">
      <summary>获取或设置仅表示此节点的子级的标记。</summary>
      <exception cref="T:System.Xml.XmlException">设置此属性时指定的 XML 格式不正确。</exception>
      <returns>此节点子级的标记。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.IsEmpty">
      <summary>获取或设置元素的标记格式。</summary>
      <returns>
        <see langword="true" />如果元素将以短标记格式 "item/" 进行序列化，则 &lt; &gt; <see langword="false" /> 为长格式 " &lt; item &gt; &lt; /item &gt; "。  
  
在设置此属性时，如果设置为 <see langword="true" />，将删除元素的子级，并且以短标记格式序列化该元素。 如果设置为 <see langword="false" />，将更改属性值（无论元素是否有内容）；如果该元素为空，则会采用长格式序列化。  
  
此属性是文档对象模型 (DOM) 的 Microsoft 扩展。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.LocalName">
      <summary>获取当前节点的本地名称。</summary>
      <returns>移除了前缀的当前节点的名称。 例如， <see langword="LocalName" /> 对于元素 &lt; bk： book，是 book &gt; 。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Name">
      <summary>获取节点的限定名称。</summary>
      <returns>节点的限定名称。 对于 <see langword="XmlElement" /> 节点，这是元素的标记名称。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NamespaceURI">
      <summary>获取该节点的命名空间 URI。</summary>
      <returns>该节点的命名空间 URI。 如果没有命名空间 URI，则此属性返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NextSibling">
      <summary>获取紧接在该元素后面的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <returns>紧接在该元素后面的 <see langword="XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>节点类型。 对于 <see langword="XmlElement" /> 节点，该值是 XmlNodeType.Element。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.OwnerDocument">
      <summary>获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>此元素所属的 <see langword="XmlDocument" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.ParentNode">
      <summary>获取该节点的父级（针对可以拥有父级的节点）。</summary>
      <returns>作为当前节点父级的 <see langword="XmlNode" />。 如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />。 对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />。 下表描述了 <see langword="ParentNode" /> 属性可能的返回值。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Prefix">
      <summary>获取或设置该节点的命名空间前缀。</summary>
      <exception cref="T:System.ArgumentException">该节点是只读的</exception>
      <exception cref="T:System.Xml.XmlException">指定的前缀包含无效字符。  
  
指定的前缀格式不正确。  
  
该节点的 namespaceURI 为 <see langword="null" />。  
  
指定的前缀为“xml”，而该节点的 namespaceURI 与 http://www.w3.org/XML/1998/namespace 不同。</exception>
      <returns>该节点的命名空间前缀。 如果没有前缀，则该属性返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.SchemaInfo">
      <summary>获取作为架构验证的结果分配给此节点的后架构验证信息集。</summary>
      <returns>包含此节点的架构验证后信息集的 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 对象。</returns>
    </member>
    <member name="T:System.Xml.XmlEntity">
      <summary>表示实体声明，如 &lt;!ENTITY... &gt;。</summary>
    </member>
    <member name="M:System.Xml.XmlEntity.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。 无法克隆 Entity 节点。 对 <see cref="T:System.Xml.XmlEntity" /> 对象调用此方法将引发异常。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">无法克隆 Entity 节点。 对 <see cref="T:System.Xml.XmlEntity" /> 对象调用此方法将引发异常。</exception>
      <returns>从中调用该方法的 <see cref="T:System.Xml.XmlNode" /> 的副本。</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。 对于 <see langword="XmlEntity" /> 节点，此方法无效。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。 对于 <see langword="XmlEntity" /> 节点，此方法无效。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlEntity.BaseURI">
      <summary>获取当前节点的基础统一资源标识符 (URI)。</summary>
      <returns>从其加载节点的位置。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerText">
      <summary>获取实体节点和所有其子级的串联值。</summary>
      <exception cref="T:System.InvalidOperationException">尝试设置此属性。</exception>
      <returns>节点及其所有子级的串连值。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerXml">
      <summary>获取表示此节点子级的标记。</summary>
      <exception cref="T:System.InvalidOperationException">尝试设置此属性。</exception>
      <returns>对于 <see langword="XmlEntity" /> 节点，返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.IsReadOnly">
      <summary>获取指示节点是否只读的值。</summary>
      <returns>
        <see langword="true" /> 如果节点是只读的，则为;否则为 <see langword="false" /> 。  
  
由于 <see langword="XmlEntity" /> 节点为只读，该属性总是返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.LocalName">
      <summary>获取不带有命名空间前缀的节点名称。</summary>
      <returns>对于 <see langword="XmlEntity" /> 节点，此属性返回实体的名称。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.Name">
      <summary>获取节点的名称。</summary>
      <returns>实体的名称。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NodeType">
      <summary>获取节点的类型。</summary>
      <returns>节点类型。 对于 <see langword="XmlEntity" /> 节点，该值为 XmlNodeType.Entity。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NotationName">
      <summary>获取实体声明上可选 NDATA 特性的名称。</summary>
      <returns>NDATA 特性的名称。 如果没有 NDATA，则返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.OuterXml">
      <summary>获取表示此节点及其所有子级的标记。</summary>
      <returns>对于 <see langword="XmlEntity" /> 节点，返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.PublicId">
      <summary>获取实体声明上公共标识符的值。</summary>
      <returns>实体上的公共标识符。 如果没有公共标识符，则返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.SystemId">
      <summary>获取实体声明上系统标识符的值。</summary>
      <returns>实体上的系统标识符。 如果没有系统标识符，则返回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlEntityReference">
      <summary>表示实体引用节点。</summary>
    </member>
    <member name="M:System.Xml.XmlEntityReference.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlEntityReference" /> 类的新实例。</summary>
      <param name="name">实体引用的名称，请参见 <see cref="P:System.Xml.XmlEntityReference.Name" /> 属性。</param>
      <param name="doc">父 XML 文档。</param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。 对于 <see langword="XmlEntityReference" /> 节点，此方法总是返回不带任何子级的实体引用节点。 当将节点插入父级时，设置替换文本。</param>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.BaseURI">
      <summary>获取当前节点的基础统一资源标识符 (URI)。</summary>
      <returns>从其加载节点的位置。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.IsReadOnly">
      <summary>获取指示节点是否只读的值。</summary>
      <returns>如果节点是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。  
  
由于 <see langword="XmlEntityReference" /> 节点为只读，该属性总是返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.LocalName">
      <summary>获取节点的本地名称。</summary>
      <returns>对于 <see langword="XmlEntityReference" /> 节点，此属性返回引用的实体的名称。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Name">
      <summary>获取节点的名称。</summary>
      <returns>引用的实体的名称。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.NodeType">
      <summary>获取节点的类型。</summary>
      <returns>节点类型。 对于 <see langword="XmlEntityReference" /> 节点，该值是 XmlNodeType.EntityReference。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Value">
      <summary>获取或设置节点的值。</summary>
      <exception cref="T:System.ArgumentException">节点是只读的。</exception>
      <exception cref="T:System.InvalidOperationException">设置该属性。</exception>
      <returns>节点的值。 对于 <see langword="XmlEntityReference" /> 节点，此属性返回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary>返回有关上一个异常的详细信息。</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary>初始化 <see langword="XmlException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象中的信息初始化 <see langword="XmlException" /> 类的新实例。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象，包含 <see langword="XmlException" /> 的所有属性。</param>
      <param name="context">
        <see langword="StreamingContext" /> 对象，包含上下文信息。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see langword="XmlException" /> 类的新实例。</summary>
      <param name="message">错误说明。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see langword="XmlException" /> 类的新实例。</summary>
      <param name="message">错误条件的说明。</param>
      <param name="innerException">引发 <see cref="T:System.Exception" /> 的 <see langword="XmlException" />（如果有的话）。 此值可为 <see langword="null" />。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>用指定的消息、内部异常、行号和行位置初始化 <see langword="XmlException" /> 类的新实例。</summary>
      <param name="message">错误说明。</param>
      <param name="innerException">导致当前异常的异常。 此值可为 <see langword="null" />。</param>
      <param name="lineNumber">指示错误发生位置的行号。</param>
      <param name="linePosition">指示错误发生位置的行位置。</param>
    </member>
    <member name="M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>对于给定的 <see langword="XmlException" />，将所有的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 属性流式写入 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象。</param>
      <param name="context">
        <see langword="StreamingContext" /> 对象。</param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary>获取指示错误发生位置的行号。 行号从 1 开始。</summary>
      <returns>指示错误发生位置的行号。</returns>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary>获取指示错误发生位置的行位置。 行位置从 1 开始。</summary>
      <returns>指示错误发生位置的行位置。</returns>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary>获取描述当前异常的消息。</summary>
      <returns>解释异常原因的错误消息。</returns>
    </member>
    <member name="P:System.Xml.XmlException.SourceUri">
      <summary>获取 XML 文件的位置。</summary>
      <returns>XML 数据的源 URI。 如果没有源 URI，则该属性将返回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlImplementation">
      <summary>为一组 <see cref="T:System.Xml.XmlDocument" /> 对象定义上下文。</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlImplementation" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)">
      <summary>用指定的 <see cref="T:System.Xml.XmlImplementation" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。</summary>
      <param name="nt">一个 <see cref="T:System.Xml.XmlNameTable" /> 对象。</param>
    </member>
    <member name="M:System.Xml.XmlImplementation.CreateDocument">
      <summary>创建一个新的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>新的 <see langword="XmlDocument" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)">
      <summary>测试文档对象模型 (DOM) 实现是否实现某个特定的功能。</summary>
      <param name="strFeature">要测试的功能的程序包名称。 该名称不区分大小写。</param>
      <param name="strVersion">这是要测试的软件包名称的版本号。 如果不指定版本 (<see langword="null" />)，则支持该功能的任何版本会导致方法返回 <see langword="true" />。</param>
      <returns>如果指定的版本中实现了该功能，则为 <see langword="true" />；否则为 <see langword="false" />。  
  
下表显示导致 <see langword="HasFeature" /> 返回 <see langword="true" /> 的组合。  
  
 <list type="table"><listheader><term> strFeature</term><description> strVersion</description></listheader><item><term> XML</term><description> 1.0</description></item><item><term> XML</term><description> 2.0</description></item></list></returns>
    </member>
    <member name="T:System.Xml.XmlLinkedNode">
      <summary>获取紧靠该节点（之前或之后）的节点。</summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.NextSibling">
      <summary>获取紧接在该节点之后的节点。</summary>
      <returns>紧随该节点之后的 <see cref="T:System.Xml.XmlNode" />，或者如果不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.PreviousSibling">
      <summary>获取紧接在该节点之前的节点。</summary>
      <returns>前面的 <see cref="T:System.Xml.XmlNode" />，如果不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNamedNodeMap">
      <summary>表示可以按名称或索引访问的节点的集合。</summary>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetEnumerator">
      <summary>提供对 <see langword="XmlNamedNodeMap" /> 中节点集合上“foreach”样式迭代的支持。</summary>
      <returns>枚举器对象。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)">
      <summary>检索通过名称指定的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="name">要检索节点的限定名。 它针对匹配节点的 <see cref="P:System.Xml.XmlNode.Name" /> 属性进行匹配。</param>
      <returns>具有指定名称的 <see langword="XmlNode" />；如果未找到匹配节点，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)">
      <summary>检索具有匹配的 <see cref="P:System.Xml.XmlNode.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的节点。</summary>
      <param name="localName">要检索的节点的本地名称。</param>
      <param name="namespaceURI">要检索的节点的命名空间统一资源标识符 (URI)。</param>
      <returns>具有匹配的本地名称和命名空间 URI 的 <see cref="T:System.Xml.XmlNode" />；如果未找到匹配节点，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)">
      <summary>检索位于 <see langword="XmlNamedNodeMap" /> 中指定索引处的节点。</summary>
      <param name="index">要从 <see langword="XmlNamedNodeMap" /> 中检索的节点的索引位置。 索引是从零开始的；因此第一个节点的索引是 0，最后一个节点的索引是 <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> -1。</param>
      <returns>指定索引处的 <see cref="T:System.Xml.XmlNode" />。 如果 <paramref name="index" /> 小于 0 或大于等于 <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> 属性，则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)">
      <summary>从 <see langword="XmlNamedNodeMap" /> 中移除节点。</summary>
      <param name="name">要移除的节点的限定名。 该名称针对匹配节点的 <see cref="P:System.Xml.XmlNode.Name" /> 属性进行匹配。</param>
      <returns>从此 <see langword="XmlNode" /> 中移除的 <see langword="XmlNamedNodeMap" />；如果未找到匹配的节点，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)">
      <summary>移除具有匹配的 <see cref="P:System.Xml.XmlNode.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的节点。</summary>
      <param name="localName">要移除的节点的本地名称。</param>
      <param name="namespaceURI">要移除的节点的命名空间 URI。</param>
      <returns>移除的 <see cref="T:System.Xml.XmlNode" />；如果未找到匹配的节点，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
      <summary>使用其 <see cref="T:System.Xml.XmlNode" /> 属性添加 <see cref="P:System.Xml.XmlNode.Name" />。</summary>
      <param name="node">要存储在 <see langword="XmlNode" /> 中的 <see langword="XmlNamedNodeMap" />。 如果具有该名称的节点已存在于映射中，则用新节点将其替换。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> 是从不同于创建此 <see langword="XmlNamedNodeMap" /> 的 <see cref="T:System.Xml.XmlDocument" /> 创建的；或者 <see langword="XmlNamedNodeMap" /> 是只读的。</exception>
      <returns>如果 <paramref name="node" /> 替换具有相同名称的现有节点，则返回旧节点；否则返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNamedNodeMap.Count">
      <summary>获取 <see langword="XmlNamedNodeMap" /> 中的节点数。</summary>
      <returns>节点数。</returns>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary>解析集合的命名空间、向集合添加命名空间和从集合中移除命名空间，以及提供对这些命名空间的范围管理。</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlNamespaceManager" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。</summary>
      <param name="nameTable">要使用的 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">向构造函数传递了 <see langword="null" /></exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary>将给定的命名空间添加到集合。</summary>
      <param name="prefix">与要添加的命名空间关联的前缀。 使用 String.Empty 来添加默认命名空间。  
  
 注意：如果 <see cref="T:System.Xml.XmlNamespaceManager" /> 将用于解析 XML 路径语言 (XPath) 表达式中的命名空间，则必须指定前缀。 如果 XPath 表达式不包含前缀，则假定命名空间统一资源标识符 (URI) 为空命名空间。 有关 XPath 表达式和 <see cref="T:System.Xml.XmlNamespaceManager" /> 的更多信息，请参考 <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" /> 和 <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" /> 方法。</param>
      <param name="uri">要添加的命名空间。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="prefix" /> 的值为“xml”或“xmlns”。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 或 <paramref name="uri" /> 的值为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary>返回一个枚举数，将使用该枚举数循环访问 <see cref="T:System.Xml.XmlNamespaceManager" /> 集合中的命名空间。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，包含 <see cref="T:System.Xml.XmlNamespaceManager" /> 存储的前缀。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>获取被可用于枚举当前范围内的命名空间的前缀键控的命名空间名称的集合。</summary>
      <param name="scope">一个指定要返回的命名空间节点的类型的枚举值。</param>
      <returns>当前范围中的命名空间和前缀对的集合。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary>获取一个值，该值指示所提供的前缀是否具有为当前推送的范围定义的命名空间。</summary>
      <param name="prefix">要查找的命名空间的前缀。</param>
      <returns>如果定义有命名空间，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary>获取指定前缀的命名空间 URI。</summary>
      <param name="prefix">要解析其命名空间 URI 的前缀。 若要匹配默认命名空间，请传递 String.Empty。</param>
      <returns>
        <paramref name="prefix" /> 的命名空间 URI，如果没有映射的命名空间，则为 <see langword="null" />。 返回的字符串是原子化的。  
  
有关原子化字符串的更多信息，请参见 <see cref="T:System.Xml.XmlNameTable" /> 类。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary>查找为给定的命名空间 URI 声明的前缀。</summary>
      <param name="uri">要为前缀解析的命名空间。</param>
      <returns>匹配的前缀。 如果没有映射的前缀，则方法返回 String.Empty。 如果提供空值，则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary>将命名空间范围弹出堆栈。</summary>
      <returns>如果堆栈上留有命名空间范围，则为 <see langword="true" />；如果不再有要弹出的命名空间，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary>将命名空间范围推送到堆栈上。</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary>为给定的前缀移除给定的命名空间。</summary>
      <param name="prefix">命名空间的前缀</param>
      <param name="uri">要为给定的前缀移除的命名空间。 所移除的命名空间来自当前的命名空间范围。 忽略当前范围以外的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 或 <paramref name="uri" /> 的值为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary>获取默认命名空间的命名空间 URI。</summary>
      <returns>默认命名空间的命名空间 URI; 如果没有默认命名空间，则为空字符串。</returns>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary>获取与此对象关联的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>此对象使用的 <see cref="T:System.Xml.XmlNameTable" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
      <summary>定义命名空间范围。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
      <summary>在当前节点范围内定义的所有命名空间。 这包括总是隐式声明的 xmlns:xml 命名空间。 未定义返回的命名空间的顺序。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
      <summary>在当前节点范围内定义的所有命名空间，但不包括总是隐式声明的 xmlns:xml 命名空间。 未定义返回的命名空间的顺序。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
      <summary>在当前节点本地定义的所有命名空间。</summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary>原子化字符串对象表。</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>当在派生类中被重写时，将指定的字符串原子化并将其添加到 <see langword="XmlNameTable" />。</summary>
      <param name="array">包含要添加的名称的字符数组。</param>
      <param name="offset">数组中指定名称第一个字符的从零开始的索引。</param>
      <param name="length">名称中的字符数。</param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />  
  
- 或 - 
 <paramref name="offset" /> &gt;= <paramref name="array" />.Length 
- 或 - 
 <paramref name="length" /> &gt; <paramref name="array" />.Length 
如果 <paramref name="length" /> =0，则上述条件不会导致引发异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0。</exception>
      <returns>新的原子化字符串；如果已存在原子化字符串，则为此现有的原子化字符串。 如果 length 为零，则返回 String.Empty。</returns>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary>当在派生类中被重写时，将指定的字符串原子化并将其添加到 <see langword="XmlNameTable" />。</summary>
      <param name="array">要添加的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <returns>新的原子化字符串；如果已存在原子化字符串，则为此现有的原子化字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>当在派生类中被重写时，获取与给定数组中指定范围的字符包含相同字符的原子化字符串。</summary>
      <param name="array">包含要查找的名称的字符数组。</param>
      <param name="offset">数组中指定名称第一个字符的从零开始的索引。</param>
      <param name="length">名称中的字符数。</param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />  
  
- 或 - 
 <paramref name="offset" /> &gt;= <paramref name="array" />.Length 
- 或 - 
 <paramref name="length" /> &gt; <paramref name="array" />.Length 
如果 <paramref name="length" /> =0，则上述条件不会导致引发异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0。</exception>
      <returns>原子化字符串；如果字符串尚未原子化，则为 <see langword="null" />。 如果 <paramref name="length" /> 为零，则返回 String.Empty。</returns>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary>当在派生类中被重写时，获取与指定的字符串包含相同值的原子化字符串。</summary>
      <param name="array">要查找的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <returns>原子化字符串；如果字符串尚未原子化，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNode">
      <summary>表示 XML 文档中的单个节点。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)">
      <summary>将指定的节点添加到该节点的子节点列表的末尾。</summary>
      <param name="newChild">要添加的节点。 要添加的节点的全部内容会移动到指定位置。</param>
      <exception cref="T:System.InvalidOperationException">此节点的类型不允许 <paramref name="newChild" /> 节点类型的子节点。  
  
<paramref name="newChild" /> 是此节点的上级节点。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 是从不同于创建此节点的文档创建的。  
  
该节点是只读的。</exception>
      <returns>添加的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Clone">
      <summary>创建此节点的副本。</summary>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.CloneNode(System.Boolean)">
      <summary>当在派生类中被重写时，创建该节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">在不能被克隆的节点类型上调用该方法。</exception>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.CreateNavigator">
      <summary>创建 <see cref="T:System.Xml.XPath.XPathNavigator" /> 以浏览此对象。</summary>
      <returns>用于导航节点的 <see langword="XPathNavigator" /> 对象。 <see langword="XPathNavigator" /> 定位在从其调用方法的节点上。 它不定位在文档的根上。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetEnumerator">
      <summary>获取循环访问当前节点中子节点的枚举数。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象，可用于循环访问当前节点中的子节点。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)">
      <summary>查找当前节点范围内离给定的前缀最近的 xmlns 声明，并返回声明中的命名空间 URI。</summary>
      <param name="prefix">你想查找的命名空间 URI 的前缀。</param>
      <returns>指定前缀的命名空间 URI。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)">
      <summary>查找当前节点范围内离给定的命名空间 URI 最近的 xmlns 声明，并返回声明中定义的前缀。</summary>
      <param name="namespaceURI">要查找其前缀的命名空间 URI。</param>
      <returns>指定的命名空间 URI 的前缀。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>将指定的节点紧接着插入指定的引用节点之后。</summary>
      <param name="newChild">要插入的节点。</param>
      <param name="refChild">引用节点。 <paramref name="newChild" /> 放置在 <paramref name="refChild" /> 之后。</param>
      <exception cref="T:System.InvalidOperationException">此节点的类型不允许 <paramref name="newChild" /> 节点类型的子节点。  
  
<paramref name="newChild" /> 是此节点的上级节点。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 是从不同于创建此节点的文档创建的。  
  
<paramref name="refChild" /> 不是此节点的子级。  
  
该节点是只读的。</exception>
      <returns>插入的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>将指定的节点紧接着插入指定的引用节点之前。</summary>
      <param name="newChild">要插入的节点。</param>
      <param name="refChild">引用节点。 <paramref name="newChild" /> 放置在该节点之前。</param>
      <exception cref="T:System.InvalidOperationException">当前节点的类型不允许 <paramref name="newChild" /> 节点类型的子节点。  
  
<paramref name="newChild" /> 是此节点的上级节点。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 是从不同于创建此节点的文档创建的。  
  
<paramref name="refChild" /> 不是此节点的子级。  
  
该节点是只读的。</exception>
      <returns>插入的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Normalize">
      <summary>将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)">
      <summary>将指定的节点添加到该节点的子节点列表的开头。</summary>
      <param name="newChild">要添加的节点。 要添加的节点的全部内容会移动到指定位置。</param>
      <exception cref="T:System.InvalidOperationException">此节点的类型不允许 <paramref name="newChild" /> 节点类型的子节点。  
  
<paramref name="newChild" /> 是此节点的上级节点。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 是从不同于创建此节点的文档创建的。  
  
该节点是只读的。</exception>
      <returns>添加的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveAll">
      <summary>移除当前节点的所有子节点和/或属性。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)">
      <summary>移除指定的子节点。</summary>
      <param name="oldChild">正在被移除的节点。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldChild" /> 不是此节点的子级。 或者此节点是只读的。</exception>
      <returns>已移除的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>用 <paramref name="oldChild" /> 节点替换子节点 <paramref name="newChild" />。</summary>
      <param name="newChild">要放入子列表的新节点。</param>
      <param name="oldChild">列表中正在被替换的节点。</param>
      <exception cref="T:System.InvalidOperationException">此节点的类型不允许 <paramref name="newChild" /> 节点类型的子节点。  
  
<paramref name="newChild" /> 是此节点的上级节点。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 是从不同于创建此节点的文档创建的。  
  
该节点是只读的。  
  
<paramref name="oldChild" /> 不是此节点的子级。</exception>
      <returns>被替换的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String)">
      <summary>选择匹配 XPath 表达式的节点列表。</summary>
      <param name="xpath">XPath 表达式。</param>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式包含前缀。 请参见 XPath 示例。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlNodeList" />，包含匹配 XPath 查询的节点集合。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)">
      <summary>选择匹配 XPath 表达式的节点列表。 XPath 表达式中的任何前缀都使用提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 进行解析。</summary>
      <param name="xpath">XPath 表达式。 请参见 XPath 示例。</param>
      <param name="nsmgr">一个 <see cref="T:System.Xml.XmlNamespaceManager" />，用于为 XPath 表达式中的前缀解析命名空间。</param>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式包含 <see langword="XmlNamespaceManager" /> 中没有定义的前缀。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlNodeList" />，包含匹配 XPath 查询的节点集合。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String)">
      <summary>选择匹配 XPath 表达式的第一个 <see langword="XmlNode" />。</summary>
      <param name="xpath">XPath 表达式。 请参见 XPath 示例。</param>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式包含前缀。</exception>
      <returns>与 XPath 查询匹配的第一个 <see langword="XmlNode" />；如果未找到任何匹配节点，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)">
      <summary>选择匹配 XPath 表达式的第一个 <see langword="XmlNode" />。 XPath 表达式中的任何前缀都使用提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 进行解析。</summary>
      <param name="xpath">XPath 表达式。 请参见 XPath 示例。</param>
      <param name="nsmgr">一个 <see cref="T:System.Xml.XmlNamespaceManager" />，用于为 XPath 表达式中的前缀解析命名空间。</param>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式包含 <see langword="XmlNamespaceManager" /> 中没有定义的前缀。</exception>
      <returns>与 XPath 查询匹配的第一个 <see langword="XmlNode" />；如果未找到任何匹配节点，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Supports(System.String,System.String)">
      <summary>测试 DOM 实现是否实现特定的功能。</summary>
      <param name="feature">要测试的功能的程序包名称。 该名称不区分大小写。</param>
      <param name="version">要测试的程序包名称的版本号。 如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。</param>
      <returns>如果指定的版本中实现了该功能，则为 <see langword="true" />；否则为 <see langword="false" />。 下表描述返回 <see langword="true" /> 的组合。  
  
 <list type="table"><listheader><term> Feature</term><description> Version</description></listheader><item><term> XML</term><description> 1.0</description></item><item><term> XML</term><description> 2.0</description></item></list></returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.XmlNode.GetEnumerator" />。</summary>
      <returns>集合的枚举数。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.XmlNode.Clone" />。</summary>
      <returns>节点的副本，它通过该节点调用。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)">
      <summary>当在派生类中被重写时，该节点的所有子节点会保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)">
      <summary>当在派生类中被重写时，将当前节点保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlNode.Attributes">
      <summary>获取一个 <see cref="T:System.Xml.XmlAttributeCollection" />，它包含该节点的特性。</summary>
      <returns>一个 <see langword="XmlAttributeCollection" />，它包含该节点的特性。  
  
如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。 对于其他类型的单元格，此属性返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.BaseURI">
      <summary>获取当前节点的基 URI。</summary>
      <returns>从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ChildNodes">
      <summary>获取节点的所有子节点。</summary>
      <returns>一个包含节点的所有子节点的对象。  
  
如果没有子节点，该属性返回空 <see cref="T:System.Xml.XmlNodeList" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.FirstChild">
      <summary>获取节点的第一个子级。</summary>
      <returns>节点的第一个子级。 如果没有这样的节点，则返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.HasChildNodes">
      <summary>获取一个值，该值指示此节点是否有任何子节点。</summary>
      <returns>如果该节点具有子节点，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerText">
      <summary>获取或设置节点及其所有子节点的串连值。</summary>
      <returns>节点及其所有子节点的串连值。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerXml">
      <summary>获取或设置仅表示该节点的子节点的标记。</summary>
      <exception cref="T:System.InvalidOperationException">在不能具有子节点的节点上设置该属性。</exception>
      <exception cref="T:System.Xml.XmlException">设置此属性时指定的 XML 格式不正确。</exception>
      <returns>该节点的子节点的标记。  
  
 <block subset="none" type="note"><para><see langword="InnerXml" /> 不返回默认特性。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlNode.IsReadOnly">
      <summary>获取指示节点是否只读的值。</summary>
      <returns>
        <see langword="true" /> 如果节点是只读的，则为;否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String)">
      <summary>获取具有指定 <see cref="P:System.Xml.XmlNode.Name" /> 的第一个子元素。</summary>
      <param name="name">要检索的元素的限定名。</param>
      <returns>与指定名称匹配的第一个 <see cref="T:System.Xml.XmlElement" />。 如果没有匹配项，则它返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String,System.String)">
      <summary>获取具有指定 <see cref="P:System.Xml.XmlNode.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的第一个子元素。</summary>
      <param name="localname">元素的本地名称。</param>
      <param name="ns">元素的命名空间 URI。</param>
      <returns>具有匹配的 <paramref name="localname" /> 和 <paramref name="ns" /> 的第一个 <see cref="T:System.Xml.XmlElement" />。 如果没有匹配项，则它返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LastChild">
      <summary>获取节点的最后一个子级。</summary>
      <returns>节点的最后一个子级。 如果没有这样的节点，则返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LocalName">
      <summary>当在派生类中被重写时，获取节点的本地名称。</summary>
      <returns>移除了前缀的节点的名称。 例如， <see langword="LocalName" /> 对于元素 &lt; bk： book，是 book &gt; 。  
  
返回的名称取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />： 
 <list type="table"><listheader><term> 类型</term><description> 名称</description></listheader><item><term> Attribute</term><description> 属性的本地名称。</description></item><item><term> CDATA</term><description> #cdata-section</description></item><item><term> 评论</term><description> #comment</description></item><item><term> 文档</term><description> #document</description></item><item><term> DocumentFragment</term><description> #document-fragment</description></item><item><term> DocumentType</term><description> 文档类型名称。</description></item><item><term> 元素</term><description> 元素的本地名称。</description></item><item><term> 实体</term><description> 实体的名称。</description></item><item><term> EntityReference</term><description> 引用的实体的名称。</description></item><item><term> 表示法</term><description> 表示法名称。</description></item><item><term> ProcessingInstruction</term><description> 处理指令的目标。</description></item><item><term> 文本</term><description> #text</description></item><item><term> 空格</term><description> #whitespace</description></item><item><term> SignificantWhitespace</term><description> #significant-whitespace</description></item><item><term> XmlDeclaration</term><description> #xml-declaration</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNode.Name">
      <summary>当在派生类中被重写时，获取节点的限定名称。</summary>
      <returns>节点的限定名称。 返回的名称取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />： 
 <list type="table"><listheader><term> 类型</term><description> 名称</description></listheader><item><term> Attribute</term><description> 属性的限定名称。</description></item><item><term> CDATA</term><description> #cdata-section</description></item><item><term> 评论</term><description> #comment</description></item><item><term> 文档</term><description> #document</description></item><item><term> DocumentFragment</term><description> #document-fragment</description></item><item><term> DocumentType</term><description> 文档类型名称。</description></item><item><term> 元素</term><description> 元素的限定名。</description></item><item><term> 实体</term><description> 实体的名称。</description></item><item><term> EntityReference</term><description> 引用的实体的名称。</description></item><item><term> 表示法</term><description> 表示法名称。</description></item><item><term> ProcessingInstruction</term><description> 处理指令的目标。</description></item><item><term> 文本</term><description> #text</description></item><item><term> 空格</term><description> #whitespace</description></item><item><term> SignificantWhitespace</term><description> #significant-whitespace</description></item><item><term> XmlDeclaration</term><description> #xml-declaration</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNode.NamespaceURI">
      <summary>获取该节点的命名空间 URI。</summary>
      <returns>该节点的命名空间 URI。 如果没有命名空间 URI，则此属性返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NextSibling">
      <summary>获取紧接在该节点之后的节点。</summary>
      <returns>下一个 <see langword="XmlNode" />。 如果没有下一个节点，则返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NodeType">
      <summary>当在派生类中被重写时，获取当前节点的类型。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 值之一。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.OuterXml">
      <summary>获取包含此节点及其所有子节点的标记。</summary>
      <returns>包含此节点及其所有子节点的标记。  
  
 <block subset="none" type="note"><para><see langword="OuterXml" /> 不返回默认特性。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlNode.OwnerDocument">
      <summary>获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>该节点所属的 <see cref="T:System.Xml.XmlDocument" />。  
  
如果该节点是一个 <see cref="T:System.Xml.XmlDocument" />（NodeType 等于 XmlNodeType.Document），则此属性返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ParentNode">
      <summary>获取该节点的父级（针对可以拥有父级的节点）。</summary>
      <returns>作为当前节点父级的 <see langword="XmlNode" />。 如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />。 对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />。 下表描述了 <see langword="ParentNode" /> 属性可能的返回值。  
  
 <list type="table"><listheader><term> NodeType</term><description> ParentNode 的返回值</description></listheader><item><term> Attribute、Document、DocumentFragment、Entity、Notation</term><description> 返回 <see langword="null" />；这些节点不具有父级。</description></item><item><term> CDATA</term><description> 返回包含 CDATA 节的元素或实体引用。</description></item><item><term> 评论</term><description> 返回包含注释的元素、实体引用、文档类型或文档。</description></item><item><term> DocumentType</term><description> 返回文档节点。</description></item><item><term> 元素</term><description> 返回该元素的父节点。 如果该元素是树中的根节点，则父级是文档节点。</description></item><item><term> EntityReference</term><description> 返回包含该实体引用的元素、特性或实体引用。</description></item><item><term> ProcessingInstruction</term><description> 返回包含该处理指令的文档、元素、文档类型或实体引用。</description></item><item><term> 文本</term><description> 返回包含该文本节点的父元素、特性或实体引用。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNode.Prefix">
      <summary>获取或设置该节点的命名空间前缀。</summary>
      <exception cref="T:System.ArgumentException">该节点是只读的。</exception>
      <exception cref="T:System.Xml.XmlException">指定的前缀包含无效字符。  
  
 指定的前缀格式不正确。  
  
 指定的前缀为“xml”，而该节点的 namespaceURI 与“http://www.w3.org/XML/1998/namespace”不同。  
  
 该节点是一个属性，指定的前缀为“xmlns”，且该节点的 namespaceURI 与“http://www.w3.org/2000/xmlns/”不同。  
  
 该节点是一个特性，而该节点的 qualifiedName 是“xmlns”。</exception>
      <returns>该节点的命名空间前缀。 例如， <see langword="Prefix" /> 对于元素 &lt; bk： book 为 bk &gt; 。 如果没有前缀，则该属性返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousSibling">
      <summary>获取紧接在该节点之前的节点。</summary>
      <returns>前一个 <see langword="XmlNode" />。 如果前面没有节点，则返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousText">
      <summary>获取紧接在该节点之前的文本节点。</summary>
      <returns>返回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.SchemaInfo">
      <summary>获取作为架构验证的结果分配给此节点的后架构验证信息集。</summary>
      <returns>包含此节点的架构验证后信息集的 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Value">
      <summary>获取或设置节点的值。</summary>
      <exception cref="T:System.ArgumentException">设置只读节点的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置不允许具有值的节点（例如 Element 节点）的值。</exception>
      <returns>返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />。 
 <list type="table"><listheader><term> 类型</term><description> Value</description></listheader><item><term> 特性</term><description> 属性的值。</description></item><item><term> CDATASection</term><description> CDATA 节的内容。</description></item><item><term> 注释</term><description> 注释的内容。</description></item><item><term> 文档</term><description><see langword="null" />.</description></item><item><term> DocumentFragment</term><description><see langword="null" />.</description></item><item><term> DocumentType</term><description><see langword="null" />.</description></item><item><term> 元素</term><description><see langword="null" />. 您可以使用 <see cref="P:System.Xml.XmlElement.InnerText" /> 或 <see cref="P:System.Xml.XmlElement.InnerXml" /> 属性访问元素节点的值。</description></item><item><term> 实体</term><description><see langword="null" />.</description></item><item><term> EntityReference</term><description><see langword="null" />.</description></item><item><term> 表示法</term><description><see langword="null" />.</description></item><item><term> ProcessingInstruction</term><description> 全部内容（不包括指令目标）。</description></item><item><term> 文本</term><description> 文本节点的内容。</description></item><item><term> SignificantWhitespace</term><description> 空格字符。 空白可由一个或多个空格字符、回车符、换行符或制表符组成。</description></item><item><term> 空格</term><description> 空格字符。 空白可由一个或多个空格字符、回车符、换行符或制表符组成。</description></item><item><term> XmlDeclaration</term><description> 声明的内容 (也就是说， &lt; ？ xml 和？) 之间的所有内容 &gt; 。</description></item></list></returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedAction">
      <summary>指定节点更改的类型。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Change">
      <summary>正在更改节点值。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Insert">
      <summary>正在将节点插入树中。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Remove">
      <summary>正在从树中移除节点。</summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventArgs">
      <summary>提供以下事件的数据：<see cref="E:System.Xml.XmlDocument.NodeChanged" />、<see cref="E:System.Xml.XmlDocument.NodeChanging" />、<see cref="E:System.Xml.XmlDocument.NodeInserted" />、<see cref="E:System.Xml.XmlDocument.NodeInserting" />、<see cref="E:System.Xml.XmlDocument.NodeRemoved" /> 和 <see cref="E:System.Xml.XmlDocument.NodeRemoving" />。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)">
      <summary>初始化 <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> 类的新实例。</summary>
      <param name="node">生成事件的 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldParent">生成了该事件的 <see cref="T:System.Xml.XmlNode" /> 的旧父级 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="newParent">生成了该事件的 <see cref="T:System.Xml.XmlNode" /> 的新父级 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldValue">生成了该事件的 <see cref="T:System.Xml.XmlNode" /> 的旧值。</param>
      <param name="newValue">生成了该事件的 <see cref="T:System.Xml.XmlNode" /> 的新值。</param>
      <param name="action">
        <see cref="T:System.Xml.XmlNodeChangedAction" />
      </param>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Action">
      <summary>获取一个值，该值指示正在发生哪种类型的节点更改事件。</summary>
      <returns>描述节点更改事件的枚举值之一。 <see langword="Action" /> 值不区分事件何时发生（之前或之后）。 您可以创建单独的事件处理程序来处理两种情况。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewParent">
      <summary>获取操作完成后 <see cref="P:System.Xml.XmlNode.ParentNode" /> 的值。</summary>
      <returns>操作完成后 <see langword="ParentNode" /> 的值。 如果节点正被移除，此属性返回 <see langword="null" />。  
  
 <block subset="none" type="note"><para>  
 对于特性节点，此属性返回 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewValue">
      <summary>获取节点的新值。</summary>
      <returns>节点的新值。 如果节点既不是特性节点也不是文本节点，或者节点要被移除，则此属性将返回 <see langword="null" />。  
  
如果在 <see cref="E:System.Xml.XmlDocument.NodeChanging" /> 事件中调用 <see langword="NewValue" />，则在更改成功后返回节点的值。 如果在 <see cref="E:System.Xml.XmlDocument.NodeChanged" /> 事件中调用 <see langword="NewValue" />，将返回节点的当前值。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Node">
      <summary>获取正被添加、移除或更改的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <returns>正被添加、移除或更改的 <see langword="XmlNode" />；此属性从不返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldParent">
      <summary>获取操作开始前的 <see cref="P:System.Xml.XmlNode.ParentNode" /> 的值。</summary>
      <returns>操作开始前 <see langword="ParentNode" /> 的值。 如果节点不具有父级，则此属性返回 <see langword="null" />。  
  
 <block subset="none" type="note"><para>  
 对于特性节点，此属性返回 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldValue">
      <summary>获取节点的原始值。</summary>
      <returns>节点的原始值。 如果节点既不是特性节点也不是文本节点，或者节点要被插入，此属性将返回 <see langword="null" />。  
  
如果在 <see cref="E:System.Xml.XmlDocument.NodeChanging" /> 事件中调用 <see langword="OldValue" />，则在更改成功后返回将被替换的节点的当前值。 如果在 <see cref="E:System.Xml.XmlDocument.NodeChanged" /> 事件中调用 <see langword="OldValue" />，则将返回更改前节点的值。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventHandler">
      <summary>表示处理以下事件的方法：<see cref="E:System.Xml.XmlDocument.NodeChanged" />、<see cref="E:System.Xml.XmlDocument.NodeChanging" />、<see cref="E:System.Xml.XmlDocument.NodeInserted" />、<see cref="E:System.Xml.XmlDocument.NodeInserting" />、<see cref="E:System.Xml.XmlDocument.NodeRemoved" /> 和 <see cref="E:System.Xml.XmlDocument.NodeRemoving" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Xml.XmlNodeChangedEventArgs" />。</param>
    </member>
    <member name="T:System.Xml.XmlNodeList">
      <summary>表示节点的有序集合。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlNodeList" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.GetEnumerator">
      <summary>获取一个循环访问其集合节点的枚举数。</summary>
      <returns>用于循环访问节点集合的枚举器。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.Item(System.Int32)">
      <summary>检索给定索引处的节点。</summary>
      <param name="index">节点列表中从零开始的索引。</param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 与集合中的指定索引. 如果 <paramref name="index" /> 大于或等于列表中的节点数，则这返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.PrivateDisposeNodeList">
      <summary>私下释放节点列表里的资源。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.System#IDisposable#Dispose">
      <summary>释放 <see cref="T:System.Xml.XmlNodeList" /> 类使用的所有资源。</summary>
    </member>
    <member name="P:System.Xml.XmlNodeList.Count">
      <summary>获取 <see langword="XmlNodeList" /> 中的节点数。</summary>
      <returns>
        <see langword="XmlNodeList" /> 中的节点数。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeList.ItemOf(System.Int32)">
      <summary>获取给定索引处的节点。</summary>
      <param name="i">节点列表中从零开始的索引。</param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 与集合中的指定索引. 如果 index 大于或等于列表中的节点数，则这返回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeOrder">
      <summary>描述一个节点相对于另一个节点的文档顺序。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.After">
      <summary>此导航器的当前节点位于所提供的导航器的当前节点之后。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Before">
      <summary>此导航器的当前节点位于所提供的导航器的当前节点之前。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Same">
      <summary>两个导航器定位在同一个节点上。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Unknown">
      <summary>在文档顺序中无法确定节点彼此之间的相对位置。 如果两个节点驻留在不同的树中，则可能发生这种情况。</summary>
    </member>
    <member name="T:System.Xml.XmlNodeReader">
      <summary>表示提供对 <see cref="T:System.Xml.XmlNode" /> 中的 XML 数据进行快速、非缓存的只进访问的读取器。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlNode" /> 创建 <see langword="XmlNodeReader" /> 类的实例。</summary>
      <param name="node">要读取的 <see langword="XmlNode" />。</param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Close">
      <summary>将 <see cref="P:System.Xml.XmlNodeReader.ReadState" /> 改为 <see langword="Closed" />。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)">
      <summary>获取具有指定索引的属性的值。</summary>
      <param name="attributeIndex">属性的索引。 索引是从零开始的。 （第一个属性的索引为 0。）</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 参数小于 0 或大于等于 <see cref="P:System.Xml.XmlNodeReader.AttributeCount" />。</exception>
      <returns>指定的属性的值。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String)">
      <summary>获取具有指定名称的属性的值。</summary>
      <param name="name">属性的限定名称。</param>
      <returns>指定的属性的值。 如果未找到该属性，则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)">
      <summary>获取具有指定本地名称和命名空间 URI 的属性的值。</summary>
      <param name="name">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <returns>指定的属性的值。 如果未找到该属性，则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.LookupNamespace(System.String)">
      <summary>解析当前元素的范围内的命名空间前缀。</summary>
      <param name="prefix">要解析其命名空间 URI 的前缀。 若要匹配默认命名空间，请传递一个空字符串。 不必原子化该字符串。</param>
      <returns>前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)">
      <summary>移动到具有指定索引的属性。</summary>
      <param name="attributeIndex">属性的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 参数小于 0 或大于等于 <see cref="P:System.Xml.XmlReader.AttributeCount" />。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)">
      <summary>移动到具有指定名称的属性。</summary>
      <param name="name">属性的限定名称。</param>
      <returns>如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则读取器的位置未改变。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)">
      <summary>移动到具有指定本地名称和命名空间 URI 的属性。</summary>
      <param name="name">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <returns>如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则读取器的位置未改变。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToElement">
      <summary>移动到包含当前属性节点的元素。</summary>
      <returns>如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToFirstAttribute">
      <summary>移动到第一个属性。</summary>
      <returns>如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />；否则为 <see langword="false" />（读取器的位置不更改）。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToNextAttribute">
      <summary>移动到下一个属性。</summary>
      <returns>如果存在下一个属性，则为 <see langword="true" />；如果没有其他属性，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Read">
      <summary>从流中读取下一个节点。</summary>
      <returns>如果成功读取了下一个节点，则为 <see langword="true" />；如果没有其他节点可读取，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadAttributeValue">
      <summary>将属性值分析为一个或多个 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 节点。</summary>
      <returns>如果有可返回的节点，则为 <see langword="true" />。  
  
 如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />。  
  
如果是空属性，如 <c>misc=""</c>，则返回 <see langword="true" />，同时返回值为 String.Empty 的单个节点。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>读取内容并返回 Base64 解码的二进制字节。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不支持 <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>读取内容并返回 BinHex 解码的二进制字节。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不支持 <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>读取元素并对 Base64 内容进行解码。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不是元素节点。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.Xml.XmlException">该元素包含混合内容。</exception>
      <exception cref="T:System.FormatException">无法将内容转换成请求的类型。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>读取元素并对 BinHex 内容进行解码。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不是元素节点。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.Xml.XmlException">该元素包含混合内容。</exception>
      <exception cref="T:System.FormatException">无法将内容转换成请求的类型。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadString">
      <summary>将元素或文本节点的内容读取为一个字符串。</summary>
      <returns>元素或类似文本节点（这可以包括 CDATA、Text 节点等）的内容。 如果读取器定位在元素或文本节点以外的位置，或者当前上下文中没有其他文本内容可返回，则这可以是空字符串。  
  
 <see langword="Note:" />文本节点可以是元素或属性文本节点。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ResolveEntity">
      <summary>解析 <see langword="EntityReference" /> 节点的实体引用。</summary>
      <exception cref="T:System.InvalidOperationException">读取器不是定位在 <see langword="EntityReference" /> 节点上。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Skip">
      <summary>跳过当前节点的子级。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。</summary>
      <param name="scope">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 对象。</param>
      <returns>包含范围内命名空间的 <see cref="T:System.Collections.IDictionary" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。</summary>
      <param name="prefix">包含命名空间前缀的 <see cref="T:System.String" />。</param>
      <returns>包含命名空间名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。</summary>
      <param name="namespaceName">标识命名空间的 <see cref="T:System.String" /> 对象。</param>
      <returns>包含命名空间前缀的 <see cref="T:System.String" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.AttributeCount">
      <summary>获取当前节点上的属性数目。</summary>
      <returns>当前节点上的属性数目。 该数目包括默认属性。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.BaseURI">
      <summary>获取当前节点的基 URI。</summary>
      <returns>当前节点的基 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanReadBinaryContent">
      <summary>获取一个值，该值指示 <see cref="T:System.Xml.XmlNodeReader" /> 是否实现二进制内容读取方法。</summary>
      <returns>如果实现了二进制内容读取方法，则为 <see langword="true" />；否则为 <see langword="false" />。 <see cref="T:System.Xml.XmlNodeReader" /> 类始终返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanResolveEntity">
      <summary>获取一个值，该值指示此读取器是否可以分析和解析实体。</summary>
      <returns>如果此读取器可以分析和解析实体，则为 <see langword="true" />；否则为 <see langword="false" />。 <see langword="XmlNodeReader" /> 始终返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Depth">
      <summary>获取 XML 文档中当前节点的深度。</summary>
      <returns>XML 文档中当前节点的深度。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.EOF">
      <summary>获取一个值，该值指示读取器是否定位在流结尾。</summary>
      <returns>如果此读取器定位在流的结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasAttributes">
      <summary>获取一个值，该值指示当前节点是否有任何属性。</summary>
      <returns>如果当前节点具有属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasValue">
      <summary>获取一个值，该值指示当前节点是否可以具有 <see cref="P:System.Xml.XmlNodeReader.Value" />。</summary>
      <returns>如果读取器当前定位在的节点可以具有 <see langword="Value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsDefault">
      <summary>获取一个值，该值指示当前节点是否是从文档类型定义 (DTD) 或架构中定义的默认值生成的属性。</summary>
      <returns>如果当前节点是其值从 DTD 或架构中定义的默认值生成的属性，则为 <see langword="true" />；如果属性值为显式设置的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsEmptyElement">
      <summary>获取一个值，该值指示当前节点是否为空元素（例如 <c>&lt;MyElement/&gt;</c>）。</summary>
      <returns>
        <see langword="true" /> 如果当前节点是一个元素 (<see cref="P:System.Xml.XmlNodeReader.NodeType" /> 等于 <see langword="XmlNodeType.Element" />) 并且它以结尾 <c>/&gt;</c> ，则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.LocalName">
      <summary>获取当前节点的本地名称。</summary>
      <returns>移除了前缀的当前节点的名称。 例如， <see langword="LocalName" /><see langword="book" /> 对于元素<c> &lt; bk： &gt; book</c>。  
  
对于没有名称的节点类型（如 <see langword="Text" />、<see langword="Comment" /> 等），该属性返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Name">
      <summary>获取当前节点的限定名称。</summary>
      <returns>当前节点的限定名称。 例如， <see langword="Name" /><see langword="bk:book" /> 对于元素<c> &lt; bk： &gt; book</c>。  
  
返回的名称取决于节点的 <see cref="P:System.Xml.XmlNodeReader.NodeType" />。 下列节点类型返回所列的值。 所有其他节点类型返回空字符串。  
  
 <list type="table"><listheader><term> 节点类型</term><description> name</description></listheader><item><term><see langword="Attribute" /></term><description> 属性名。</description></item><item><term><see langword="DocumentType" /></term><description> 文档类型名称。</description></item><item><term><see langword="Element" /></term><description> 标记名称。</description></item><item><term><see langword="EntityReference" /></term><description> 引用的实体的名称。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 处理指令的目标。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 字符串 <see langword="xml" />。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NamespaceURI">
      <summary>获取读取器定位在的节点的命名空间 URI（采用 W3C 命名空间规范中定义）。</summary>
      <returns>当前节点的命名空间 URI；否则为空字符串。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NameTable">
      <summary>获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see langword="XmlNameTable" />，它使你能够获取该节点内字符串的原子化版本。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，表示当前节点的类型。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Prefix">
      <summary>获取与当前节点关联的命名空间前缀。</summary>
      <returns>与当前节点关联的命名空间前缀。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.ReadState">
      <summary>获取读取器的状态。</summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 值之一。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.SchemaInfo">
      <summary>获取已分配给当前节点的架构信息。</summary>
      <returns>一个包含当前节点的架构信息的 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Value">
      <summary>获取当前节点的文本值。</summary>
      <returns>返回的值取决于节点的 <see cref="P:System.Xml.XmlNodeReader.NodeType" />。 下表列出具有要返回的值的节点类型。 所有其他节点类型返回 String.Empty。  
  
 <list type="table"><listheader><term> 节点类型</term><description> “值”</description></listheader><item><term><see langword="Attribute" /></term><description> 属性的值。</description></item><item><term><see langword="CDATA" /></term><description> CDATA 节的内容。</description></item><item><term><see langword="Comment" /></term><description> 注释的内容。</description></item><item><term><see langword="DocumentType" /></term><description> 内部子集。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 全部内容（不包括指令目标）。</description></item><item><term><see langword="SignificantWhitespace" /></term><description> 混合内容模型中标记之间的空白。</description></item><item><term><see langword="Text" /></term><description> 文本节点的内容。</description></item><item><term><see langword="Whitespace" /></term><description> 标记之间的空白。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 声明的内容。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlLang">
      <summary>获取当前 <see langword="xml:lang" /> 范围。</summary>
      <returns>当前 <see langword="xml:lang" /> 范围。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlSpace">
      <summary>获取当前 <see langword="xml:space" /> 范围。</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 值之一。 如果不存在任何 <see langword="xml:space" /> 范围，则该属性默认值为 <see langword="XmlSpace.None" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary>指定节点的类型。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary>特性（例如，<c>id='123'</c>）。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary>CDATA 部分（例如，<c>&lt;![CDATA[my escaped text]]&gt;</c>）。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary>注释（例如，<c>&lt;!-- my comment --&gt;</c>）。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary>作为文档树的根的文档对象提供对整个 XML 文档的访问。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary>文档片段。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary>由以下标记指示的文档类型声明（例如，<c>&lt;!DOCTYPE...&gt;</c>）。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary>元素（例如，<c>&lt;item&gt;</c>）。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary>末尾元素标记（例如，<c>&lt;/item&gt;</c>）。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary>由于调用 <see cref="M:System.Xml.XmlReader.ResolveEntity" /> 而使 <see langword="XmlReader" /> 到达实体替换的末尾时返回。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary>实体声明（例如，<c>&lt;!ENTITY...&gt;</c>）。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary>实体引用（例如，<c>&amp;num;</c>）。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary>如果未调用 <see langword="Read" /> 方法，则由 <see cref="T:System.Xml.XmlReader" /> 返回。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary>文档类型声明中的表示法（例如，<c>&lt;!NOTATION...&gt;</c>）。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary>处理指令（例如，<c>&lt;?pi test?&gt;</c>）。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary>混合内容模型中标记间的空格或 <c>xml:space="preserve"</c> 范围内的空格。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary>节点的文本内容。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary>标记间的空白。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary>XML 声明（例如，<c>&lt;?xml version='1.0'?&gt;</c>）。</summary>
    </member>
    <member name="T:System.Xml.XmlNotation">
      <summary>表示符号声明，如 &lt;!NOTATION... &gt;。</summary>
    </member>
    <member name="M:System.Xml.XmlNotation.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。 表示法节点无法克隆。 对 <see cref="T:System.Xml.XmlNotation" /> 对象调用此方法将引发异常。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">表示法节点无法克隆。 对 <see cref="T:System.Xml.XmlNotation" /> 对象调用此方法将引发异常。</exception>
      <returns>从中调用方法的节点的 <see cref="T:System.Xml.XmlNode" /> 副本。</returns>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将节点的子级保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。 此方法对 <see langword="XmlNotation" /> 节点没有效果。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。 此方法对 <see langword="XmlNotation" /> 节点没有效果。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlNotation.InnerXml">
      <summary>获取表示此节点子级的标记。</summary>
      <exception cref="T:System.InvalidOperationException">尝试设置此属性。</exception>
      <returns>对于 <see langword="XmlNotation" /> 节点，返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.IsReadOnly">
      <summary>获取指示节点是否只读的值。</summary>
      <returns>
        <see langword="true" /> 如果节点是只读的，则为;否则为 <see langword="false" /> 。  
  
由于 <see langword="XmlNotation" /> 节点为只读，该属性总是返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.LocalName">
      <summary>获取当前节点的名称（不带命名空间前缀）。</summary>
      <returns>对于 <see langword="XmlNotation" /> 节点，该属性返回表示法的名称。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.Name">
      <summary>获取当前节点的名称。</summary>
      <returns>批注的名称。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>节点类型。 对于 <see langword="XmlNotation" /> 节点，该值是 XmlNodeType.Notation。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.OuterXml">
      <summary>获取表示此节点及其所有子级的标记。</summary>
      <returns>对于 <see langword="XmlNotation" /> 节点，返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.PublicId">
      <summary>获取表示法声明中的公共标识符的值。</summary>
      <returns>此表示法中的公共标识符。 如果没有公共标识符，则返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.SystemId">
      <summary>获取此表示法声明中的系统标识符的值。</summary>
      <returns>此表示法中的系统标识符。 如果没有系统标识符，则返回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlOutputMethod">
      <summary>指定用于序列化 <see cref="T:System.Xml.XmlWriter" /> 输出的方法。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.AutoDetect">
      <summary>运行时使用 XSLT 规则在 <see cref="F:System.Xml.XmlOutputMethod.Xml" /> 和 <see cref="F:System.Xml.XmlOutputMethod.Html" /> 两种输出方法之间进行选择。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Html">
      <summary>根据 XSLT 指定的 HTML 规则进行序列化。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Text">
      <summary>只序列化文本块。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Xml">
      <summary>根据 XML 1.0 规则进行序列化。</summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary>提供 <see cref="T:System.Xml.XmlReader" /> 分析 XML 片段所需的所有上下文信息。</summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary>用指定的 <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、基 URI、<see langword="xml:lang" />、<see langword="xml:space" /> 和文档类型值初始化 <see langword="XmlParserContext" /> 类的新实例。</summary>
      <param name="nt">用于原子化字符串的 <see cref="T:System.Xml.XmlNameTable" />。 如果这为 <see langword="null" />，则改用用于构造 <paramref name="nsMgr" /> 的名称表。 有关原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <param name="nsMgr">要用于查找命名空间信息的 <see cref="T:System.Xml.XmlNamespaceManager" />，或 <see langword="null" />。</param>
      <param name="docTypeName">文档类型声明的名称。</param>
      <param name="pubId">公共标识符。</param>
      <param name="sysId">系统标识符。</param>
      <param name="internalSubset">内部 DTD 子集。 DTD 子集用于实体解析，而不能用于文档验证。</param>
      <param name="baseURI">XML 片段的基 URI（从其加载片段的位置）。</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 范围。</param>
      <param name="xmlSpace">一个 <see cref="T:System.Xml.XmlSpace" /> 值，指示 <see langword="xml:space" /> 范围。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> 与用来构造 <paramref name="nsMgr" /> 的 <see langword="XmlNameTable" /> 不同。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>用指定的 <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、基 URI、<see langword="xml:lang" />、<see langword="xml:space" />、编码和文档类型值初始化 <see langword="XmlParserContext" /> 类的新实例。</summary>
      <param name="nt">用于原子化字符串的 <see cref="T:System.Xml.XmlNameTable" />。 如果这为 <see langword="null" />，则改用用于构造 <paramref name="nsMgr" /> 的名称表。 有关原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <param name="nsMgr">要用于查找命名空间信息的 <see cref="T:System.Xml.XmlNamespaceManager" />，或 <see langword="null" />。</param>
      <param name="docTypeName">文档类型声明的名称。</param>
      <param name="pubId">公共标识符。</param>
      <param name="sysId">系统标识符。</param>
      <param name="internalSubset">内部 DTD 子集。 DTD 用于实体解析，而不能用于文档验证。</param>
      <param name="baseURI">XML 片段的基 URI（从其加载片段的位置）。</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 范围。</param>
      <param name="xmlSpace">一个 <see cref="T:System.Xml.XmlSpace" /> 值，指示 <see langword="xml:space" /> 范围。</param>
      <param name="enc">一个 <see cref="T:System.Text.Encoding" /> 对象，指示编码方式设置。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> 与用来构造 <paramref name="nsMgr" /> 的 <see langword="XmlNameTable" /> 不同。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary>用指定的 <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、<see langword="xml:lang" /> 和 <see langword="xml:space" /> 值初始化 <see langword="XmlParserContext" /> 类的新实例。</summary>
      <param name="nt">用于原子化字符串的 <see cref="T:System.Xml.XmlNameTable" />。 如果这为 <see langword="null" />，则改用用于构造 <paramref name="nsMgr" /> 的名称表。 有关原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <param name="nsMgr">要用于查找命名空间信息的 <see cref="T:System.Xml.XmlNamespaceManager" />，或 <see langword="null" />。</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 范围。</param>
      <param name="xmlSpace">一个 <see cref="T:System.Xml.XmlSpace" /> 值，指示 <see langword="xml:space" /> 范围。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> 与用来构造 <paramref name="nsMgr" /> 的 <see langword="XmlNameTable" /> 不同。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>用指定的 <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、<see langword="xml:lang" />、<see langword="xml:space" /> 和编码初始化 <see langword="XmlParserContext" /> 类的新实例。</summary>
      <param name="nt">用于原子化字符串的 <see cref="T:System.Xml.XmlNameTable" />。 如果这为 <see langword="null" />，则改用用于构造 <paramref name="nsMgr" /> 的名称表。 有关原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <param name="nsMgr">要用于查找命名空间信息的 <see cref="T:System.Xml.XmlNamespaceManager" />，或 <see langword="null" />。</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 范围。</param>
      <param name="xmlSpace">一个 <see cref="T:System.Xml.XmlSpace" /> 值，指示 <see langword="xml:space" /> 范围。</param>
      <param name="enc">一个 <see cref="T:System.Text.Encoding" /> 对象，指示编码方式设置。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> 与用来构造 <paramref name="nsMgr" /> 的 <see langword="XmlNameTable" /> 不同。</exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary>获取或设置基 URI。</summary>
      <returns>用于解析 DTD 文件的基 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary>获取或设置文档类型声明的名称。</summary>
      <returns>文档类型声明的名称。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary>获取或设置编码类型。</summary>
      <returns>一个 <see cref="T:System.Text.Encoding" /> 对象，指示编码类型。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary>获取或设置内部 DTD 子集。</summary>
      <returns>内部 DTD 子集。 例如，此属性返回方括号之间的所有内容<c> &lt; ！DOCTYPE 文档 [...] &gt; </c>。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary>获取或设置 <see cref="T:System.Xml.XmlNamespaceManager" />。</summary>
      <returns>
        <see langword="XmlNamespaceManager" />
      </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary>获取用于原子化字符串的 <see cref="T:System.Xml.XmlNameTable" />。 有关原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see langword="XmlNameTable" />
      </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary>获取或设置公共标识符。</summary>
      <returns>公共标识符。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary>获取或设置系统标识符。</summary>
      <returns>系统标识符。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary>获取或设置当前 <see langword="xml:lang" /> 范围。</summary>
      <returns>当前 <see langword="xml:lang" /> 范围。 如果范围中没有 <see langword="xml:lang" />，则返回 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary>获取或设置当前 <see langword="xml:space" /> 范围。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlSpace" /> 值，指示 <see langword="xml:space" /> 范围。</returns>
    </member>
    <member name="T:System.Xml.XmlProcessingInstruction">
      <summary>表示一条处理指令，XML 定义该处理指令以将处理器特定的信息保存在文档的文本中。</summary>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.#ctor(System.String,System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlProcessingInstruction" /> 类的新实例。</summary>
      <param name="target">处理指令的目标，请参见 <see cref="P:System.Xml.XmlProcessingInstruction.Target" /> 属性。</param>
      <param name="data">指令的内容，请参见 <see cref="P:System.Xml.XmlProcessingInstruction.Data" /> 属性。</param>
      <param name="doc">父 XML 文档。</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。</param>
      <returns>重复节点。</returns>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。 因为 ProcessingInstruction 节点不具有子级，所以此方法无效。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Data">
      <summary>获取或设置处理指令的内容（目标除外）。</summary>
      <returns>处理指令的内容（目标除外）。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.InnerText">
      <summary>获取或设置节点及其所有子级的串连值。</summary>
      <returns>节点及其所有子级的串连值。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.LocalName">
      <summary>获取节点的本地名称。</summary>
      <returns>对于处理指令节点，此属性返回处理指令的目标。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Name">
      <summary>获取节点的限定名称。</summary>
      <returns>对于处理指令节点，此属性返回处理指令的目标。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>对于 <see langword="XmlProcessingInstruction" /> 节点，该值是 XmlNodeType.ProcessingInstruction。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Target">
      <summary>获取处理指令的目标。</summary>
      <returns>处理指令的目标。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Value">
      <summary>获取或设置节点的值。</summary>
      <exception cref="T:System.ArgumentException">节点是只读的。</exception>
      <returns>处理指令的全部内容（目标除外）。</returns>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary>表示 XML 限定名称。</summary>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary>提供空 <see cref="T:System.Xml.XmlQualifiedName" />。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlQualifiedName" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.Xml.XmlQualifiedName" /> 类的新实例。</summary>
      <param name="name">要用作 <see cref="T:System.Xml.XmlQualifiedName" /> 对象的名称的本地名称。</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary>用指定的名称和命名空间初始化 <see cref="T:System.Xml.XmlQualifiedName" /> 类的新实例。</summary>
      <param name="name">要用作 <see cref="T:System.Xml.XmlQualifiedName" /> 对象的名称的本地名称。</param>
      <param name="ns">
        <see cref="T:System.Xml.XmlQualifiedName" /> 对象的命名空间。</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Xml.XmlQualifiedName" /> 对象是否等同于当前的 <see cref="T:System.Xml.XmlQualifiedName" />。</summary>
      <param name="other">要比较的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>如果它们两个是相同的实例对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary>返回 <see cref="T:System.Xml.XmlQualifiedName" /> 的哈希代码。</summary>
      <returns>该对象的哈希代码。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>比较两个 <see cref="T:System.Xml.XmlQualifiedName" /> 对象。</summary>
      <param name="a">一个要比较的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <param name="b">一个要比较的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>如果两个对象具有相同的名称和命名空间值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>比较两个 <see cref="T:System.Xml.XmlQualifiedName" /> 对象。</summary>
      <param name="a">一个要比较的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <param name="b">一个要比较的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>如果两个对象的名称和命名空间值不同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary>返回 <see cref="T:System.Xml.XmlQualifiedName" /> 的字符串值。</summary>
      <returns>采用 <see langword="namespace:localname" /> 格式的 <see cref="T:System.Xml.XmlQualifiedName" /> 的字符串值。 如果对象没有已定义的命名空间，则此方法只返回本地名称。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary>返回 <see cref="T:System.Xml.XmlQualifiedName" /> 的字符串值。</summary>
      <param name="name">对象的名称。</param>
      <param name="ns">对象的命名空间。</param>
      <returns>采用 <see langword="namespace:localname" /> 格式的 <see cref="T:System.Xml.XmlQualifiedName" /> 的字符串值。 如果对象没有已定义的命名空间，则此方法只返回本地名称。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary>获取一个值，该值指示 <see cref="T:System.Xml.XmlQualifiedName" /> 是否为空。</summary>
      <returns>如果名称和命名空间为空字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary>获取 <see cref="T:System.Xml.XmlQualifiedName" /> 的限定名的字符串表示形式。</summary>
      <returns>限定名的字符串表示形式，或者如果没有为对象定义名称，则为 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary>获取 <see cref="T:System.Xml.XmlQualifiedName" /> 的命名空间的字符串表示形式。</summary>
      <returns>命名空间的字符串表示形式，或者如果没有为对象定义命名空间，则为 String.Empty。</returns>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary>表示提供对 XML 数据进行快速、非缓存、只进访问的读取器。</summary>
    </member>
    <member name="M:System.Xml.XmlReader.#ctor">
      <summary>初始化 <see langword="XmlReader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary>当在派生类中被重写时，将 <see cref="P:System.Xml.XmlReader.ReadState" /> 更改为 <see cref="F:System.Xml.ReadState.Closed" />。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
      <summary>使用带默认设置的指定流创建新的 <see cref="T:System.Xml.XmlReader" /> 实例。</summary>
      <param name="input">包含 XML 数据的流。  
  
<see cref="T:System.Xml.XmlReader" /> 对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。 在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> 没有足够的权限访问 XML 数据的位置。</exception>
      <returns>一个用于读取数据流中所含数据的对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary>使用指定的流和设置创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。</summary>
      <param name="input">包含 XML 数据的流。  
  
<see cref="T:System.Xml.XmlReader" /> 对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。 在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。 此值可为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。</exception>
      <returns>一个用于读取数据流中所含数据的对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
      <summary>使用指定的流、基 URI 和设置创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。</summary>
      <param name="input">包含 XML 数据的流。  
  
<see cref="T:System.Xml.XmlReader" /> 对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。 在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。 此值可为 <see langword="null" />。</param>
      <param name="baseUri">正在读取的实体或文档的基 URI。 此值可为 <see langword="null" />。  
  
 安全说明 基 URI 用于解析 XML 文档的相对 URI。 不要使用来自非信任源的基 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。</exception>
      <returns>一个用于读取数据流中所含数据的对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>使用指定的流、设置和用于分析的上下文信息创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。</summary>
      <param name="input">包含 XML 数据的流。  
  
<see cref="T:System.Xml.XmlReader" /> 对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。 在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。 此值可为 <see langword="null" />。</param>
      <param name="inputContext">分析 XML 片段所需的上下文信息. 上下文信息可以包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码、命名空间范围、当前的 <c>xml:lang</c> 和 <c>xml:space</c> 范围、基 URI 和文档类型定义。  
  
此值可为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。</exception>
      <returns>一个用于读取数据流中所含数据的对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
      <summary>使用指定的文本读取器创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。</summary>
      <param name="input">从其中读取 XML 数据的文本读取器。 由于文本读取器返回的是 Unicode 字符流，因此，XML 读取器未使用 XML 声明中指定的编码对数据流进行解码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。</exception>
      <returns>一个用于读取数据流中所含数据的对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
      <summary>使用指定的文本读取器和设置创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。</summary>
      <param name="input">从其中读取 XML 数据的文本读取器。 由于文本读取器返回的是 Unicode 字符流，因此，XML 读取器未使用 XML 声明中指定的编码对数据流进行解码。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 的设置。 此值可为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。</exception>
      <returns>一个用于读取数据流中所含数据的对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
      <summary>使用指定的文本读取器、设置和基 URI 创建一个新的 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input">从其中读取 XML 数据的文本读取器。 由于文本读取器返回的是 Unicode 字符流，因此，<see cref="T:System.Xml.XmlReader" /> 未使用 XML 声明中指定的编码对数据流进行解码。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。 此值可为 <see langword="null" />。</param>
      <param name="baseUri">正在读取的实体或文档的基 URI。 此值可为 <see langword="null" />。  
  
 安全说明 基 URI 用于解析 XML 文档的相对 URI。 不要使用来自非信任源的基 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。</exception>
      <returns>一个用于读取数据流中所含数据的对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>使用指定的文本读取器、设置和要用于分析的上下文信息创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。</summary>
      <param name="input">从其中读取 XML 数据的文本读取器。 由于文本读取器返回的是 Unicode 字符流，因此，XML 读取器未使用 XML 声明中指定的编码对数据流进行解码。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。 此值可为 <see langword="null" />。</param>
      <param name="inputContext">分析 XML 片段所需的上下文信息. 上下文信息可以包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码、命名空间范围、当前的 <c>xml:lang</c> 和 <c>xml:space</c> 范围、基 URI 和文档类型定义。  
  
此值可为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> 和 <see cref="P:System.Xml.XmlParserContext.NameTable" /> 属性都包含值。 （只能设置并使用这些 <see langword="NameTable" /> 属性之中的一个）。</exception>
      <returns>一个用于读取数据流中所含数据的对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String)">
      <summary>用指定的 URI 创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。</summary>
      <param name="inputUri">包含 XML 数据的文件的 URI。 <see cref="T:System.Xml.XmlUrlResolver" /> 类用于将路径转换为规范化数据表示形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> 没有足够的权限访问 XML 数据的位置。</exception>
      <exception cref="T:System.IO.FileNotFoundException">由 URI 标识的文件不存在。</exception>
      <exception cref="T:System.UriFormatException">
        <block subset="none" type="note">
          <para>  
 在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。</para>
        </block>  
  
 URI 格式不正确。</exception>
      <returns>一个用于读取数据流中所含数据的对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
      <summary>使用指定的 URI 和设置创建新的 <see cref="T:System.Xml.XmlReader" /> 实例。</summary>
      <param name="inputUri">包含 XML 数据的文件的 URI。 <see cref="T:System.Xml.XmlReaderSettings" /> 对象上的 <see cref="T:System.Xml.XmlResolver" /> 对象用于将路径转换为规范化数据表示形式。 如果 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> 为 <see langword="null" />，则使用新的 <see cref="T:System.Xml.XmlUrlResolver" /> 对象。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。 此值可为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 URI 指定的文件。</exception>
      <exception cref="T:System.UriFormatException">
        <block subset="none" type="note">
          <para>  
 在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。</para>
        </block>  
  
 URI 格式不正确。</exception>
      <returns>一个用于读取数据流中所含数据的对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>使用指定的 URI、设置和进行分析的上下文信息创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。</summary>
      <param name="inputUri">包含 XML 数据的文件的 URI。 <see cref="T:System.Xml.XmlReaderSettings" /> 对象上的 <see cref="T:System.Xml.XmlResolver" /> 对象用于将路径转换为规范化数据表示形式。 如果 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> 为 <see langword="null" />，则使用新的 <see cref="T:System.Xml.XmlUrlResolver" /> 对象。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。 此值可为 <see langword="null" />。</param>
      <param name="inputContext">分析 XML 片段所需的上下文信息. 上下文信息可以包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码、命名空间范围、当前的 <c>xml:lang</c> 和 <c>xml:space</c> 范围、基 URI 和文档类型定义。  
  
此值可为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see langword="inputUri" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> 没有足够的权限访问 XML 数据的位置。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> 和 <see cref="P:System.Xml.XmlParserContext.NameTable" /> 属性都包含值。 （只能设置并使用这些 <see langword="NameTable" /> 属性之中的一个）。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 URI 指定的文件。</exception>
      <exception cref="T:System.UriFormatException">URI 格式不正确。</exception>
      <returns>一个用于读取数据流中所含数据的对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
      <summary>使用指定的 XML 读取器和设置创建一个新的 <see cref="T:System.Xml.XmlReader" /> 实例。</summary>
      <param name="reader">要用作基础 XML 读取器的对象。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 实例的设置。  
  
<see cref="T:System.Xml.XmlReaderSettings" /> 对象的一致性级别要么必须与基础读取器的一致性级别匹配，要么必须设置为 <see cref="F:System.Xml.ConformanceLevel.Auto" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReaderSettings" /> 对象指定的一致性级别与基础读取器的一致性级别不一致。  
  
- 或 - 
基础 <see cref="T:System.Xml.XmlReader" /> 处于 <see cref="F:System.Xml.ReadState.Error" /> 或 <see cref="F:System.Xml.ReadState.Closed" /> 状态。</exception>
      <returns>在指定的 <see cref="T:System.Xml.XmlReader" /> 对象周围包装的对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose">
      <summary>释放 <see cref="T:System.Xml.XmlReader" /> 类的当前实例所使用的所有资源。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Xml.XmlReader" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary>当在派生类中被重写时，获取具有指定索引的属性的值。</summary>
      <param name="i">属性的索引。 索引是从零开始的。 （第一个属性的索引为 0。）</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 超出范围。 它必须是非负数且小于特性集合的大小。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>指定的属性的值。 此方法不移动读取器。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary>当在派生类中被重写时，获取具有指定 <see cref="P:System.Xml.XmlReader.Name" /> 的属性的值。</summary>
      <param name="name">属性的限定名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>指定的属性的值。 如果找不到该属性，或者值为 <see langword="String.Empty" />，则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary>当在派生类中被重写时，获取具有指定 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 的属性的值。</summary>
      <param name="name">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>指定的属性的值。 如果找不到该属性，或者值为 <see langword="String.Empty" />，则返回 <see langword="null" />。 此方法不移动读取器。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetValueAsync">
      <summary>异步获取当前节点的值。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在这种情况下，将通过消息“异步操作已在进行中”引发 <see cref="T:System.InvalidOperationException" />。

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>当前节点的值。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary>返回一个值，该值指示字符串自变量是否是有效的 XML 名称。</summary>
      <param name="str">要验证的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 值为 <see langword="null" />。</exception>
      <returns>如果该名称有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary>返回一个值，该值指示该字符串自变量是否是有效的 XML 名称标记。</summary>
      <param name="str">要验证的名称标记。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 值为 <see langword="null" />。</exception>
      <returns>如果它是有效的名称标记，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary>调用 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 并测试当前内容节点是否是开始标记或空元素标记。</summary>
      <exception cref="T:System.Xml.XmlException">在输入流中遇到不正确的 XML。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 找到开始标记或空元素标记，则为 <see langword="true" />；如果找到不同于 <see langword="false" /> 的节点类型，则为 <see langword="XmlNodeType.Element" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary>调用 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 并测试当前内容节点是否是开始标记或空元素标记，以及所找到元素的 <see cref="P:System.Xml.XmlReader.Name" /> 属性是否与给定的参数匹配。</summary>
      <param name="name">与找到的元素的 <see langword="Name" /> 属性匹配的字符串。</param>
      <exception cref="T:System.Xml.XmlException">在输入流中遇到不正确的 XML。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果生成的节点是一个元素，且 <see langword="true" /> 属性与指定的字符串匹配，则为 <see langword="Name" />。 如果找到 <see langword="false" /> 之外的节点类型，或者元素的 <see langword="XmlNodeType.Element" /> 属性与指定的字符串不匹配，则为 <see langword="Name" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary>调用 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 并测试当前内容节点是否是开始标记或空元素标记，以及所找到元素的 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 属性是否与给定的字符串匹配。</summary>
      <param name="localname">与找到的元素的 <see langword="LocalName" /> 属性匹配的字符串。</param>
      <param name="ns">与找到的元素的 <see langword="NamespaceURI" /> 属性匹配的字符串。</param>
      <exception cref="T:System.Xml.XmlException">在输入流中遇到不正确的 XML。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果生成的节点是一个元素，则为 <see langword="true" />。 如果找到 <see langword="false" /> 之外的节点类型，或者元素的 <see langword="XmlNodeType.Element" /> 和 <see langword="LocalName" /> 属性与指定的字符串不匹配，则为 <see langword="NamespaceURI" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary>当在派生类中被重写时，在当前元素的范围内解析命名空间前缀。</summary>
      <param name="prefix">要解析其命名空间 URI 的前缀。 若要匹配默认命名空间，请传递一个空字符串。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary>当在派生类中被重写时，移动到具有指定索引的属性。</summary>
      <param name="i">属性的索引。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">参数为负值。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary>当在派生类中被重写时，移动到具有指定 <see cref="P:System.Xml.XmlReader.Name" /> 的属性。</summary>
      <param name="name">属性的限定名称。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentException">参数是空字符串。</exception>
      <returns>如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则读取器的位置未改变。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary>当在派生类中被重写时，移动到具有指定的 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 的属性。</summary>
      <param name="name">属性的本地名称。</param>
      <param name="ns">属性的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentNullException">两个参数值均为 <see langword="null" />。</exception>
      <returns>如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则读取器的位置未改变。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary>检查当前节点是否是内容（非空白文本、<see langword="CDATA" />、<see langword="Element" />、<see langword="EndElement" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" />）节点。 如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。 它跳过以下类型的节点：<see langword="ProcessingInstruction" />、<see langword="DocumentType" />、<see langword="Comment" />、<see langword="Whitespace" /> 或 <see langword="SignificantWhitespace" />。</summary>
      <exception cref="T:System.Xml.XmlException">在输入流中遇到不正确的 XML。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>此方法找到的当前节点的 <see cref="P:System.Xml.XmlReader.NodeType" />；如果读取器已到达输入流的末尾，则为 <see langword="XmlNodeType.None" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContentAsync">
      <summary>异步检查当前节点是否为内容节点。 如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>此方法找到的当前节点的 <see cref="P:System.Xml.XmlReader.NodeType" />；如果读取器已到达输入流的末尾，则为 <see langword="XmlNodeType.None" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary>当在派生类中被重写时，移动到包含当前属性节点的元素。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary>当在派生类中被重写时，移动到第一个属性。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />；否则为 <see langword="false" />（读取器的位置不更改）。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary>当在派生类中被重写时，移动到下一个属性。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果存在下一个属性，则为 <see langword="true" />；如果没有其他属性，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary>当在派生类中被重写时，从流中读取下一个节点。</summary>
      <exception cref="T:System.Xml.XmlException">分析 XML 时出错。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果已成功读取下一节点，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAsync">
      <summary>异步读取该流的下一个节点。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>如果成功读取了下一个节点，则为 <see langword="true" />；如果没有其他节点可读取，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary>当在派生类中被重写时，将属性值解析为一个或多个 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 节点。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果有可返回的节点，则为 <see langword="true" />。  
  
 如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />。  
  
如果是空属性（如 <c>misc=""</c>），则返回 <see langword="true" />，同时返回值为 <see langword="String.Empty" /> 的单个节点。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>将内容作为指定类型的对象读取。</summary>
      <param name="returnType">要返回的值的类型。  
  
 注意：随着 .NET Framework 3.5 的发布，<paramref name="returnType" /> 参数的值现在可以为 <see cref="T:System.DateTimeOffset" /> 类型。</param>
      <param name="namespaceResolver">一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析与类型转换有关的任何命名空间前缀。 例如，将 <see cref="T:System.Xml.XmlQualifiedName" /> 对象转换为 <c>xs:string</c> 时可以使用此对象。  
  
此值可为 <see langword="null" />。</param>
      <exception cref="T:System.FormatException">内容格式不是目标类型的正确格式。</exception>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不是所支持的节点类型。 有关详细信息，请参见下表。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.OverflowException">读取 <see langword="Decimal.MaxValue" />。</exception>
      <returns>已转换为请求类型的串联文本内容或属性值。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>将内容作为指定类型的对象异步读取。</summary>
      <param name="returnType">要返回的值的类型。</param>
      <param name="namespaceResolver">一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析与类型转换有关的任何命名空间前缀。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>已转换为请求类型的串联文本内容或属性值。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>读取内容并返回 Base64 解码的二进制字节。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不支持 <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>异步读取内容并返回 Base64 解码的二进制字节。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>读取内容并返回 <see langword="BinHex" /> 解码的二进制字节。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不支持 <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>异步读取内容并返回 <see langword="BinHex" /> 解码的二进制字节。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
      <summary>将当前位置的文本内容作为 <see langword="Boolean" /> 读取。</summary>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.FormatException">该字符串格式无效。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>作为 <see cref="T:System.Boolean" /> 对象的文本内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
      <summary>将当前位置的文本内容作为 <see cref="T:System.DateTime" /> 对象读取。</summary>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.FormatException">该字符串格式无效。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>作为 <see cref="T:System.DateTime" /> 对象的文本内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTimeOffset">
      <summary>将当前位置的文本内容作为 <see cref="T:System.DateTimeOffset" /> 对象读取。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>作为 <see cref="T:System.DateTimeOffset" /> 对象的文本内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
      <summary>将当前位置的文本内容作为 <see cref="T:System.Decimal" /> 对象读取。</summary>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.FormatException">该字符串格式无效。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>作为 <see cref="T:System.Decimal" /> 对象的当前位置的文本内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDouble">
      <summary>将当前位置的文本内容作为双精度浮点数读取。</summary>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.FormatException">该字符串格式无效。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>作为双精度浮点数的文本内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsFloat">
      <summary>将当前位置的文本内容作为单精度浮点数读取。</summary>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.FormatException">该字符串格式无效。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>作为单精度浮点数的当前位置的文本内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsInt">
      <summary>将当前位置的文本内容作为 32 位有符号整数读取。</summary>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.FormatException">该字符串格式无效。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>作为 32 位有符号整数的文本内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsLong">
      <summary>将当前位置的文本内容作为 64 位有符号整数读取。</summary>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.FormatException">该字符串格式无效。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>作为 64 位有符号整数的文本内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObject">
      <summary>将当前位置的文本内容作为 <see cref="T:System.Object" /> 读取。</summary>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.FormatException">该字符串格式无效。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>作为最适当的公共语言运行时 (CLR) 对象的文本内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObjectAsync">
      <summary>将当前位置的文本内容作为 <see cref="T:System.Object" /> 对象异步读取。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>作为最适当的公共语言运行时 (CLR) 对象的文本内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsString">
      <summary>将当前位置的文本内容作为 <see cref="T:System.String" /> 对象读取。</summary>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.FormatException">该字符串格式无效。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>作为 <see cref="T:System.String" /> 对象的文本内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsStringAsync">
      <summary>将当前位置的文本内容作为 <see cref="T:System.String" /> 对象异步读取。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>作为 <see cref="T:System.String" /> 对象的文本内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>将元素内容作为请求类型读取。</summary>
      <param name="returnType">要返回的值的类型。  
  
 注意：随着 .NET Framework 3.5 的发布，<paramref name="returnType" /> 参数的值现在可以为 <see cref="T:System.DateTimeOffset" /> 类型。</param>
      <param name="namespaceResolver">一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析与类型转换有关的任何命名空间前缀。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 无法将元素内容转换成请求的类型。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <exception cref="T:System.OverflowException">读取 <see langword="Decimal.MaxValue" />。</exception>
      <returns>转换为请求类型的对象的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
      <summary>检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后将元素内容作为请求类型读取。</summary>
      <param name="returnType">要返回的值的类型。  
  
 注意：随着 .NET Framework 3.5 的发布，<paramref name="returnType" /> 参数的值现在可以为 <see cref="T:System.DateTimeOffset" /> 类型。</param>
      <param name="namespaceResolver">一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析与类型转换有关的任何命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 无法将元素内容转换成请求的类型。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <exception cref="T:System.ArgumentException">指定的本地名称和命名空间 URI 与所读取的当前元素的本地名称和命名空间 URI 不匹配。</exception>
      <exception cref="T:System.OverflowException">读取 <see langword="Decimal.MaxValue" />。</exception>
      <returns>转换为请求类型的对象的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>将元素内容作为请求类型异步读取。</summary>
      <param name="returnType">要返回的值的类型。</param>
      <param name="namespaceResolver">一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析与类型转换有关的任何命名空间前缀。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”
- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>转换为请求类型的对象的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>读取元素并对 <see langword="Base64" /> 内容进行解码。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不是元素节点。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。</exception>
      <exception cref="T:System.Xml.XmlException">该元素包含混合内容。</exception>
      <exception cref="T:System.FormatException">无法将内容转换成请求的类型。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>异步读取元素并对 <see langword="Base64" /> 内容进行解码。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>读取元素并对 <see langword="BinHex" /> 内容进行解码。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不是元素节点。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。</exception>
      <exception cref="T:System.Xml.XmlException">该元素包含混合内容。</exception>
      <exception cref="T:System.FormatException">无法将内容转换成请求的类型。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>异步读取元素并对 <see langword="BinHex" /> 内容进行解码。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
      <summary>读取当前元素并将内容作为 <see cref="T:System.Boolean" /> 对象返回。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
- 或 - 
无法将元素内容转换为 <see cref="T:System.Boolean" /> 对象。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <returns>作为 <see cref="T:System.Boolean" /> 对象的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
      <summary>检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 <see cref="T:System.Boolean" /> 对象返回。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 无法将元素内容转换成请求的类型。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <exception cref="T:System.ArgumentException">指定的本地名称和命名空间 URI 与所读取的当前元素的本地名称和命名空间 URI 不匹配。</exception>
      <returns>作为 <see cref="T:System.Boolean" /> 对象的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
      <summary>读取当前元素并将内容作为 <see cref="T:System.DateTime" /> 对象返回。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
- 或 - 
无法将元素内容转换为 <see cref="T:System.DateTime" /> 对象。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <returns>作为 <see cref="T:System.DateTime" /> 对象的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
      <summary>检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 <see cref="T:System.DateTime" /> 对象返回。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 无法将元素内容转换成请求的类型。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <exception cref="T:System.ArgumentException">指定的本地名称和命名空间 URI 与所读取的当前元素的本地名称和命名空间 URI 不匹配。</exception>
      <returns>作为 <see cref="T:System.DateTime" /> 对象的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
      <summary>读取当前元素并将内容作为 <see cref="T:System.Decimal" /> 对象返回。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
- 或 - 
无法将元素内容转换为 <see cref="T:System.Decimal" />。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <returns>作为 <see cref="T:System.Decimal" /> 对象的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
      <summary>检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 <see cref="T:System.Decimal" /> 对象返回。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
- 或 - 
无法将元素内容转换为 <see cref="T:System.Decimal" />。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <exception cref="T:System.ArgumentException">指定的本地名称和命名空间 URI 与所读取的当前元素的本地名称和命名空间 URI 不匹配。</exception>
      <returns>作为 <see cref="T:System.Decimal" /> 对象的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
      <summary>读取当前元素并将内容作为双精度浮点数返回。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 无法将元素内容转换为双精度浮点数。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <returns>作为双精度浮点数的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
      <summary>检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为双精度浮点数返回。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 无法将元素内容转换成请求的类型。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <exception cref="T:System.ArgumentException">指定的本地名称和命名空间 URI 与所读取的当前元素的本地名称和命名空间 URI 不匹配。</exception>
      <returns>作为双精度浮点数的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
      <summary>读取当前元素并将内容作为单精度浮点数返回。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 元素内容不能转换为单精度浮点数。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <returns>作为单精度浮点数的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
      <summary>检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为单精度浮点数返回。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 - 
在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 元素内容不能转换为单精度浮点数。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <exception cref="T:System.ArgumentException">指定的本地名称和命名空间 URI 与所读取的当前元素的本地名称和命名空间 URI 不匹配。</exception>
      <returns>作为单精度浮点数的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
      <summary>读取当前元素并将内容作为 32 位有符号整数返回。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 - 
在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 无法将元素内容转换为 32 位有符号整数。</exception>
      <returns>作为 32 位有符号整数的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
      <summary>检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 32 位有符号整数返回。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 - 
在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 无法将元素内容转换为 32 位有符号整数。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <exception cref="T:System.ArgumentException">指定的本地名称和命名空间 URI 与所读取的当前元素的本地名称和命名空间 URI 不匹配。</exception>
      <returns>作为 32 位有符号整数的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
      <summary>读取当前元素并将内容作为 64 位有符号整数返回。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 - 
在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 无法将元素内容转换为 64 位有符号整数。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <returns>作为 64 位有符号整数的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
      <summary>检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 64 位有符号整数返回。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 - 
在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 无法将元素内容转换为 64 位有符号整数。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <exception cref="T:System.ArgumentException">指定的本地名称和命名空间 URI 与所读取的当前元素的本地名称和命名空间 URI 不匹配。</exception>
      <returns>作为 64 位有符号整数的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
      <summary>读取当前元素并将内容作为 <see cref="T:System.Object" /> 返回。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 - 
在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 无法将元素内容转换成请求的类型</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <returns>一个最适当类型的装箱的公共语言运行时 (CLR) 对象。 <see cref="P:System.Xml.XmlReader.ValueType" /> 属性确定了适当的 CLR 类型。 如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
      <summary>检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 <see cref="T:System.Object" /> 返回。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 - 
在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
 - 或 -  
  
 无法将元素内容转换成请求的类型。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <exception cref="T:System.ArgumentException">指定的本地名称和命名空间 URI 与所读取的当前元素的本地名称和命名空间 URI 不匹配。</exception>
      <returns>一个最适当类型的装箱的公共语言运行时 (CLR) 对象。 <see cref="P:System.Xml.XmlReader.ValueType" /> 属性确定了适当的 CLR 类型。 如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObjectAsync">
      <summary>异步读取当前元素并将内容作为 <see cref="T:System.Object" /> 返回。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>一个最适当类型的装箱的公共语言运行时 (CLR) 对象。 <see cref="P:System.Xml.XmlReader.ValueType" /> 属性确定了适当的 CLR 类型。 如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString">
      <summary>读取当前元素并将内容作为 <see cref="T:System.String" /> 对象返回。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
- 或 - 
无法将元素内容转换为 <see cref="T:System.String" /> 对象。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <returns>作为 <see cref="T:System.String" /> 对象的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
      <summary>检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 <see cref="T:System.String" /> 对象返回。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 未定位在元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Xml.XmlException">当前元素包含子元素。  
  
- 或 - 
无法将元素内容转换为 <see cref="T:System.String" /> 对象。</exception>
      <exception cref="T:System.ArgumentNullException">使用 <see langword="null" /> 参数调用此方法。</exception>
      <exception cref="T:System.ArgumentException">指定的本地名称和命名空间 URI 与所读取的当前元素的本地名称和命名空间 URI 不匹配。</exception>
      <returns>作为 <see cref="T:System.String" /> 对象的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsStringAsync">
      <summary>异步读取当前元素并将内容作为 <see cref="T:System.String" /> 对象返回。</summary>
      <exception cref="T:System.InvalidOperationException">调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>作为 <see cref="T:System.String" /> 对象的元素内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString">
      <summary>读取纯文本元素。 但是，建议改用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" /> 方法，因为该方法可以更直接地处理此操作。</summary>
      <exception cref="T:System.Xml.XmlException">下一个内容节点不是开始标记；或者找到的元素不包含简单文本值。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>所读取的元素中包含的文本。 如果元素为空，则返回一个空字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String)">
      <summary>在读取纯文本元素之前，检查所找到元素的 <see cref="P:System.Xml.XmlReader.Name" /> 属性是否与给定的字符串匹配。 但是，建议改用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" /> 方法，因为该方法可以更直接地处理此操作。</summary>
      <param name="name">要检查的名称。</param>
      <exception cref="T:System.Xml.XmlException">如果下一个内容节点不是一个开始标记；如果元素 <see langword="Name" /> 与给定的参数不匹配；或者如果找到的元素不包含简单的文本值。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>所读取的元素中包含的文本。 如果元素为空，则返回一个空字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)">
      <summary>在读取纯文本元素之前，检查所找到元素的 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 属性是否与给定的字符串匹配。 但是，建议改用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" /> 方法，因为该方法可以更直接地处理此操作。</summary>
      <param name="localname">要检查的本地名称。</param>
      <param name="ns">要检查的命名空间 URI。</param>
      <exception cref="T:System.Xml.XmlException">如果下一个内容节点不是一个开始标记；如果元素 <see langword="LocalName" /> 或 <see langword="NamespaceURI" /> 与给定的参数不匹配；或者如果找到的元素不包含简单的文本值。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>所读取的元素中包含的文本。 如果元素为空，则返回一个空字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary>检查当前内容节点是否为结束标记并将读取器推进到下一个节点。</summary>
      <exception cref="T:System.Xml.XmlException">当前节点不是一个结束标记，或者如果在输入流中遇到不正确的 XML。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary>当在派生类中被重写时，将所有内容（包括标记）当做字符串读取。</summary>
      <exception cref="T:System.Xml.XmlException">XML 的格式不良，或分析 XML 时出错。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>当前节点中的所有 XML 内容（包括标记）。 如果当前节点没有任何子级，则返回空字符串。  
  
 如果当前节点既非元素，也非属性，则返回空字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXmlAsync">
      <summary>异步读取所有内容，包括作为字符串的标记。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>当前节点中的所有 XML 内容（包括标记）。 如果当前节点没有任何子级，则返回空字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary>当在派生类中被重写时，读取表示该节点和所有它的子级的内容（包括标记）。</summary>
      <exception cref="T:System.Xml.XmlException">XML 的格式不良，或分析 XML 时出错。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXmlAsync">
      <summary>异步读取包含该节点和所有它的子级的内容（包括标记）。</summary>
      <exception cref="T:System.InvalidOperationException">调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary>检查当前节点是否为元素并将读取器推进到下一个节点。</summary>
      <exception cref="T:System.Xml.XmlException">在输入流中遇到不正确的 XML。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary>检查当前内容节点是否为具有给定 <see cref="P:System.Xml.XmlReader.Name" /> 的元素并将读取器推进到下一个节点。</summary>
      <param name="name">元素的限定名。</param>
      <exception cref="T:System.Xml.XmlException">在输入流中遇到不正确的 XML。  
  
- 或 - 
元素的 <see cref="P:System.Xml.XmlReader.Name" /> 不匹配给定的 <paramref name="name" />。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary>检查当前内容节点是否为具有给定 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 的元素并将读取器推进到下一个节点。</summary>
      <param name="localname">元素的本地名称。</param>
      <param name="ns">元素的命名空间 URI。</param>
      <exception cref="T:System.Xml.XmlException">在输入流中遇到不正确的 XML。  
  
- 或 - 
所找到元素的 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 属性与给定的参数不匹配。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadString">
      <summary>当在派生类中被重写时，将元素或文本节点的内容当做字符串读取。 但是，建议改用 <see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" /> 方法，因为该方法可以更直接地处理此操作。</summary>
      <exception cref="T:System.Xml.XmlException">分析 XML 时出错。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>元素的内容或空字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadSubtree">
      <summary>返回新的 <see langword="XmlReader" /> 实例，此实例可用于读取当前节点及其所有子节点。</summary>
      <exception cref="T:System.InvalidOperationException">调用此方法时 XML 读取器没有定位在某个元素上。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>设置为 <see cref="F:System.Xml.ReadState.Initial" /> 的新 XML 实例。 调用 <see cref="M:System.Xml.XmlReader.Read" /> 方法时，会将新的读取器定位在调用 <see cref="M:System.Xml.XmlReader.ReadSubtree" /> 方法之前的当前节点上。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
      <summary>让 <see cref="T:System.Xml.XmlReader" /> 前进到下一个具有指定限定名的子代元素。</summary>
      <param name="name">要移动到的元素的限定名。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentException">参数是空字符串。</exception>
      <returns>如果找到匹配的子代元素，则为 <see langword="true" />；否则为 <see langword="false" />。 如果未找到匹配的子元素，<see cref="T:System.Xml.XmlReader" /> 将定位在元素的结束标记（<see cref="P:System.Xml.XmlReader.NodeType" /> 为 <see langword="XmlNodeType.EndElement" />）上。  
  
如果调用 <see cref="T:System.Xml.XmlReader" /> 时没有将 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" /> 定位在某个元素上，则此方法返回 <see langword="false" /> 且 <see cref="T:System.Xml.XmlReader" /> 的位置保持不变。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
      <summary>让 <see cref="T:System.Xml.XmlReader" /> 前进到下一个具有指定的本地名称和命名空间 URI 的子代元素。</summary>
      <param name="localName">要移动到的元素的本地名称。</param>
      <param name="namespaceURI">要移动到的元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentNullException">两个参数值均为 <see langword="null" />。</exception>
      <returns>如果找到匹配的子代元素，则为 <see langword="true" />；否则为 <see langword="false" />。 如果未找到匹配的子元素，<see cref="T:System.Xml.XmlReader" /> 将定位在元素的结束标记（<see cref="P:System.Xml.XmlReader.NodeType" /> 为 <see langword="XmlNodeType.EndElement" />）上。  
  
如果调用 <see cref="T:System.Xml.XmlReader" /> 时没有将 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" /> 定位在某个元素上，则此方法返回 <see langword="false" /> 且 <see cref="T:System.Xml.XmlReader" /> 的位置保持不变。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
      <summary>一直读取，直到找到具有指定限定名的元素。</summary>
      <param name="name">元素的限定名。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentException">参数是空字符串。</exception>
      <returns>如果找到匹配的元素，则为 <see langword="true" />；否则为 <see langword="false" /> 且 <see cref="T:System.Xml.XmlReader" /> 位于文件的末尾。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
      <summary>一直读取，直到找到具有指定的本地名称和命名空间 URI 的元素。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentNullException">两个参数值均为 <see langword="null" />。</exception>
      <returns>如果找到匹配的元素，则为 <see langword="true" />；否则为 <see langword="false" /> 且 <see cref="T:System.Xml.XmlReader" /> 位于文件的末尾。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
      <summary>让 <see langword="XmlReader" /> 前进到下一个具有指定限定名的同级元素。</summary>
      <param name="name">要移动到的同级元素的限定名。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentException">参数是空字符串。</exception>
      <returns>如果找到匹配的同级元素，则为 <see langword="true" />；否则为 <see langword="false" />。 如果没有找到匹配的同级元素，<see langword="XmlReader" /> 会定位在父元素的结束标记（<see cref="P:System.Xml.XmlReader.NodeType" /> 为 <see langword="XmlNodeType.EndElement" />）上。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
      <summary>将 <see langword="XmlReader" /> 推进到具有指定的本地名称和命名空间 URI 的下一个同级元素。</summary>
      <param name="localName">要移动到的同级元素的本地名称。</param>
      <param name="namespaceURI">你希望移动到的同级元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentNullException">两个参数值均为 <see langword="null" />。</exception>
      <returns>如果找到匹配的同级元素，则为 <see langword="true" />；否则为 <see langword="false" />。 如果没有找到匹配的同级元素，<see langword="XmlReader" /> 会定位在父元素的结束标记（<see cref="P:System.Xml.XmlReader.NodeType" /> 为 <see langword="XmlNodeType.EndElement" />）上。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>读取嵌入在 XML 文档中的大量文本流。</summary>
      <param name="buffer">作为文本内容写入到的缓冲区的字符数组。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移量，<see cref="T:System.Xml.XmlReader" /> 可以从这个位置开始复制结果。</param>
      <param name="count">要复制到缓冲区中的最大字符数。 此方法返回复制的实际字符数。</param>
      <exception cref="T:System.InvalidOperationException">当前节点没有值（<see cref="P:System.Xml.XmlReader.HasValue" /> 为 <see langword="false" />）。

- 或 - 
在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。</exception>
      <exception cref="T:System.Xml.XmlException">XML 数据不是格式良好的。</exception>
      <returns>读取到缓冲区中的字符数。 如果不再有文本内容，则返回值零。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)">
      <summary>异步读取嵌入在 XML 文档中的大量文本流。</summary>
      <param name="buffer">作为文本内容写入到的缓冲区的字符数组。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移量，<see cref="T:System.Xml.XmlReader" /> 可以从这个位置开始复制结果。</param>
      <param name="count">要复制到缓冲区中的最大字符数。 此方法返回复制的实际字符数。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”
- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>读取到缓冲区中的字符数。 如果不再有文本内容，则返回值零。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary>当在派生类中被重写时，解析 <see langword="EntityReference" /> 节点的实体引用。</summary>
      <exception cref="T:System.InvalidOperationException">读取器未定位在 <see langword="EntityReference" /> 节点上；该读取器的实现不能解析实体（<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> 返回 <see langword="false" />）。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary>跳过当前节点的子级。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlReader.SkipAsync">
      <summary>异步跳过当前节点的子级。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlReader" /> 异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 标志设置为 <see langword="true" />。 在此情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True。”</exception>
      <returns>当前节点。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary>当在派生类中被重写时，获取当前节点上的属性数。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>当前节点上的属性数目。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary>当在派生类中被重写时，获取当前节点的基 URI。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>当前节点的基 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadBinaryContent">
      <summary>获取一个值，该值指示 <see cref="T:System.Xml.XmlReader" /> 是否实现二进制内容读取方法。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果实现了二进制内容读取方法，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadValueChunk">
      <summary>获取一个值，该值指示 <see cref="T:System.Xml.XmlReader" /> 是否实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果 <see cref="T:System.Xml.XmlReader" /> 实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary>获取一个值，该值指示此读取器是否可以分析和解析实体。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果此读取器可以分析和解析实体，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary>当在派生类中被重写时，获取 XML 文档中当前节点的深度。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>XML 文档中当前节点的深度。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary>当在派生类中被重写时，获取一个值，该值指示此读取器是否定位在流的结尾。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果此读取器定位在流的结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary>获取一个值，该值指示当前节点是否有任何属性。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果当前节点具有属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary>当在派生类中被重写时，获取一个值，该值指示当前节点是否可以具有 <see cref="P:System.Xml.XmlReader.Value" />。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果读取器当前定位在的节点可以具有 <see langword="Value" />，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则节点值为 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary>当在派生类中被重写时，获取一个值，该值指示当前节点是否是从 DTD 或架构中定义的默认值生成的特性。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>如果当前节点是其值从 DTD 或架构中定义的默认值生成的属性，则为 <see langword="true" />；如果属性值为显式设置的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary>当在派生类中被重写时，获取一个值，该值指示当前节点是否为空元素（例如 <c>&lt;MyElement/&gt;</c>）。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>
        <see langword="true" /> 如果当前节点是一个元素 (<see cref="P:System.Xml.XmlReader.NodeType" /> 等于 <see langword="XmlNodeType.Element" /> 末尾) ， <c>/&gt;</c> 则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary>当在派生类中被重写时，获取具有指定索引的属性的值。</summary>
      <param name="i">属性的索引。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>指定的属性的值。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary>当在派生类中被重写时，获取具有指定 <see cref="P:System.Xml.XmlReader.Name" /> 的属性的值。</summary>
      <param name="name">属性的限定名称。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>指定的属性的值。 如果未找到该属性，则返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary>当在派生类中被重写时，获取具有指定 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 的属性的值。</summary>
      <param name="name">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>指定的属性的值。 如果未找到该属性，则返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary>当在派生类中被重写时，获取当前节点的本地名称。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>移除了前缀的当前节点的名称。 例如， <see langword="LocalName" /><see langword="book" /> 对于元素<c> &lt; bk： &gt; book</c>。  
  
对于没有名称的节点类型（如 <see langword="Text" />、<see langword="Comment" /> 等），该属性返回 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary>当在派生类中被重写时，获取当前节点的限定名。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>当前节点的限定名称。 例如， <see langword="Name" /><see langword="bk:book" /> 对于元素<c> &lt; bk： &gt; book</c>。  
  
返回的名称取决于节点的 <see cref="P:System.Xml.XmlReader.NodeType" />。 下列节点类型返回所列的值。 所有其他节点类型返回空字符串。  
  
 <list type="table"><listheader><term> 节点类型</term><description> “属性”</description></listheader><item><term><see langword="Attribute" /></term><description> 属性名。</description></item><item><term><see langword="DocumentType" /></term><description> 文档类型名称。</description></item><item><term><see langword="Element" /></term><description> 标记名称。</description></item><item><term><see langword="EntityReference" /></term><description> 引用的实体的名称。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 处理指令的目标。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 字符串 <see langword="xml" />。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary>当在派生类中被重写时，获取读取器定位在其上的节点的命名空间 URI（采用 W3C 命名空间规范中定义的形式）。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>当前节点的命名空间 URI；否则为空字符串。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary>当在派生类中被重写时，获取与该实现关联的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>
        <see langword="XmlNameTable" />，它使你能够获取该节点内字符串的原子化版本。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary>当在派生类中被重写时，获取当前节点的类型。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>指定当前节点的类型的枚举值之一。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary>当在派生类中被重写时，获取与当前节点关联的命名空间前缀。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>与当前节点关联的命名空间前缀。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.QuoteChar">
      <summary>当在派生类中被重写时，获取用于括住特性节点值的引号字符。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>用于括起属性节点的值的引号字符（" 或 '）。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary>当在派生类中被重写时，获取读取器的状态。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>指定读取器的状态的枚举值之一。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.SchemaInfo">
      <summary>获取作为架构验证结果分配给当前节点的架构信息。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>一个包含当前节点的架构信息的 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 对象。 架构信息可以在元素、特性或具有非空 <see cref="P:System.Xml.XmlReader.ValueType" />（类型化值）的文本节点上设置。  
  
如果当前节点不属于上述节点类型，或者如果 <see langword="XmlReader" /> 实例未报告架构信息，则此属性返回 <see langword="null" />。  
  
如果从 <see cref="T:System.Xml.XmlTextReader" /> 或 <see cref="T:System.Xml.XmlValidatingReader" /> 对象调用此属性，则此属性总是返回 <see langword="null" />。 这些 <see langword="XmlReader" /> 实现不会通过 <see langword="SchemaInfo" /> 属性公开架构信息。  
  
 <block subset="none" type="note"><para>  
 如果必须为某个元素获取架构验证后信息集 (PSVI)，请在此元素的结束标记处（而不是在开始标记处）放置读取器。 您可以通过读取器的 <see langword="SchemaInfo" /> 属性获取 PSVI。 通过 <see cref="Overload:System.Xml.XmlReader.Create" /> 并使用设置为 <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> 的 <see cref="F:System.Xml.ValidationType.Schema" /> 属性创建的验证读取器具有完整的 PSVI，仅在将读取器放置在元素的结束标记处时，此 PSVI 才对元素可用。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlReader.Settings">
      <summary>获取用于创建此 <see cref="T:System.Xml.XmlReader" /> 实例的 <see cref="T:System.Xml.XmlReaderSettings" /> 对象。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>用于创建此读取器实例的 <see cref="T:System.Xml.XmlReaderSettings" /> 对象。 如果此读取器不是使用 <see cref="Overload:System.Xml.XmlReader.Create" /> 方法创建的，则此属性返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary>当在派生类中被重写时，获取当前节点的文本值。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>返回的值取决于节点的 <see cref="P:System.Xml.XmlReader.NodeType" />。 下表列出具有要返回的值的节点类型。 所有其他节点类型返回 <see langword="String.Empty" />。  
  
 <list type="table"><listheader><term> 节点类型</term><description> “值”</description></listheader><item><term><see langword="Attribute" /></term><description> 属性的值。</description></item><item><term><see langword="CDATA" /></term><description> CDATA 节的内容。</description></item><item><term><see langword="Comment" /></term><description> 注释的内容。</description></item><item><term><see langword="DocumentType" /></term><description> 内部子集。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 全部内容（不包括指令目标）。</description></item><item><term><see langword="SignificantWhitespace" /></term><description> 混合内容模型中标记之间的空白。</description></item><item><term><see langword="Text" /></term><description> 文本节点的内容。</description></item><item><term><see langword="Whitespace" /></term><description> 标记之间的空白。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 声明的内容。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlReader.ValueType">
      <summary>获取当前节点的公共语言运行时 (CLR) 类型。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>与节点的类型化值对应的 CLR 类型。 默认值为 <see langword="System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary>当在派生类中被重写时，获取当前的 <see langword="xml:lang" /> 范围。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>当前 <see langword="xml:lang" /> 范围。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary>当在派生类中被重写时，获取当前的 <see langword="xml:space" /> 范围。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 值之一。 如果不存在任何 <see langword="xml:space" /> 范围，则该属性默认值为 <see langword="XmlSpace.None" />。</returns>
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
      <summary>指定在由 <see cref="T:System.Xml.XmlReader" /> 方法创建的 <see cref="Overload:System.Xml.XmlReader.Create" /> 对象上支持的一组功能。</summary>
    </member>
    <member name="E:System.Xml.XmlReaderSettings.ValidationEventHandler">
      <summary>在读取器遇到验证错误时发生。</summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlReaderSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Clone">
      <summary>创建 <see cref="T:System.Xml.XmlReaderSettings" /> 实例的副本。</summary>
      <returns>克隆的 <see cref="T:System.Xml.XmlReaderSettings" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Reset">
      <summary>将设置类的成员重置为各自的默认值。</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Async">
      <summary>获取或设置是否可对特定 <see cref="T:System.Xml.XmlReader" /> 实例使用异步 <see cref="T:System.Xml.XmlReader" /> 方法。</summary>
      <returns>则可以使用异步方法，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
      <summary>获取或设置一个值，该值指示是否进行字符检查。</summary>
      <returns>如果进行字符检查，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。  
  
 <block subset="none" type="note"><para>  
 如果 <see cref="T:System.Xml.XmlReader" /> 处理文本数据，则无论属性如何设置，读取器将总是检查 XML 名称和文本内容是否有效。 将 <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> 设置为 <see langword="false" /> 会禁用对字符实体引用的字符检查。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CloseInput">
      <summary>获取或设置一个值，该值指示当读取器关闭时，是否应关闭基础流或 <see cref="T:System.IO.TextReader" />。</summary>
      <returns>如果当读取器关闭时基础流或 <see cref="T:System.IO.TextReader" /> 也应关闭，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
      <summary>获取或设置 <see cref="T:System.Xml.XmlReader" /> 将遵循的一致性级别。</summary>
      <returns>指定一致性级别（XML 读取器将强制该级别）的枚举值之一。 默认值为 <see cref="F:System.Xml.ConformanceLevel.Document" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdProcessing">
      <summary>获取或设置确定 DTD 的处理的值。</summary>
      <returns>确定 DTD 的处理的枚举值之一。 默认值为 <see cref="F:System.Xml.DtdProcessing.Prohibit" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
      <summary>获取或设置一个值，该值指示是否忽略注释。</summary>
      <returns>如果忽略注释，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
      <summary>获取或设置一个值，该值指示是否忽略处理指令。</summary>
      <returns>如果忽略处理指令，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
      <summary>获取或设置一个值，该值指示是否忽略无关紧要的空白区域。</summary>
      <returns>如果忽略空白，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
      <summary>获取或设置 <see cref="T:System.Xml.XmlReader" /> 对象的行号偏移量。</summary>
      <returns>行号偏移量。 默认值为 0。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
      <summary>获取或设置 <see cref="T:System.Xml.XmlReader" /> 对象的行位置偏移量。</summary>
      <returns>行位置偏移量。 默认值为 0。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities">
      <summary>获取或设置一个值，该值指示文档中允许扩展实体产生的最大字符数。</summary>
      <returns>扩展实体中允许的最大字符数。 默认值为 0。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument">
      <summary>获取或设置一个值，该值指明 XML 文档中所允许的最大字符数。 零 (0) 值表示对 XML 文档的大小没有限制。 非零值指定最大大小（以字符数计）。</summary>
      <returns>XML 文档中所允许的最大字符数。 默认值为 0。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.NameTable">
      <summary>获取或设置用于原子化字符串比较的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNameTable" />，它存储使用此 <see cref="T:System.Xml.XmlReader" /> 对象创建的所有 <see cref="T:System.Xml.XmlReaderSettings" /> 实例使用的所有原子化字符串。  
  
默认值为 <see langword="null" />。 如果该值为<see langword="null" />，创建的 <see cref="T:System.Xml.XmlReader" /> 实例将使用新的空 <see cref="T:System.Xml.NameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ProhibitDtd">
      <summary>获取或设置一个值，该值指示是否禁用文档类型定义 (DTD) 处理。 此属性已过时。 请改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />。</summary>
      <returns>如果禁用 DTD 处理，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Schemas">
      <summary>获取或设置在执行架构验证时使用的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <returns>当执行架构验证时使用的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 默认为空的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationFlags">
      <summary>获取或设置一个指示架构验证设置的值。 此设置应用于验证架构的 <see cref="T:System.Xml.XmlReader" /> 对象（<see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> 属性设置为 <see langword="ValidationType.Schema" />）。</summary>
      <returns>指定验证选项的枚举值的按位组合。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> 和 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> 默认情况下启用。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />、<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" /> 和 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> 默认情况下禁用。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationType">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.XmlReader" /> 在读取时是否执行验证或类型分配。</summary>
      <returns>
        <see cref="T:System.Xml.ValidationType" /> 的一个值指示 XmlReader 是否将呈现有效或当读取的时执行验证或类型分配。 默认值为 <see langword="ValidationType.None" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XmlResolver">
      <summary>设置用来访问外部文档的 <see cref="T:System.Xml.XmlResolver" />。</summary>
      <returns>用来访问外部文档的 <see cref="T:System.Xml.XmlResolver" />。 如果设置为 <see langword="null" />，当 <see cref="T:System.Xml.XmlException" /> 试图访问外部资源时，将引发 <see cref="T:System.Xml.XmlReader" />。 默认值为没有凭据的新 <see cref="T:System.Xml.XmlUrlResolver" />。  从 .NET Framework 4.5.2 开始，此设置的默认值为 <see langword="null" /> 。</returns>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary>解析由统一资源标识符 (URI) 命名的外部 XML 资源。</summary>
    </member>
    <member name="M:System.Xml.XmlResolver.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>当在派生类中被重写时，将 URI 映射到包含实际资源的对象。</summary>
      <param name="absoluteUri">从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。</param>
      <param name="role">当前未使用。</param>
      <param name="ofObjectToReturn">要返回的对象的类型。 当前版本只返回 System.IO.Stream 对象。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> 不是 <see langword="Stream" /> 类型。</exception>
      <exception cref="T:System.UriFormatException">指定的 URI 不是一个绝对 URI。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Exception">存在运行时错误（例如中断的服务器连接）。</exception>
      <returns>流对象；如果指定了流以外的类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>将 URI 异步映射到包含实际资源的对象。</summary>
      <param name="absoluteUri">从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。</param>
      <param name="role">当前未使用。</param>
      <param name="ofObjectToReturn">要返回的对象的类型。 当前版本只返回 <see cref="T:System.IO.Stream" /> 对象。</param>
      <returns>流对象；如果指定了流以外的类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary>当在派生类中被重写时，从基 URI 和相对 URI 解析绝对 URI。</summary>
      <param name="baseUri">用于解析相对 URI 的基 URI。</param>
      <param name="relativeUri">要解析的 URI。 URI 可以是绝对的或相对的。 如果是绝对的，此值有效地替换 <paramref name="baseUri" /> 值。 如果是相对的，它与 <paramref name="baseUri" /> 组合以构成绝对 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> 为 <see langword="null" />。</exception>
      <returns>绝对 URI；如果不能解析相对 URI，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)">
      <summary>使解决程序能够返回 <see cref="T:System.IO.Stream" /> 以外的类型。</summary>
      <param name="absoluteUri">URI。</param>
      <param name="type">要返回的类型。</param>
      <returns>如果 <paramref name="type" /> 受支持，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlResolver.Credentials">
      <summary>当在派生类中被重写时，设置用于对 Web 请求进行身份验证的凭据。</summary>
      <returns>用于对 Web 请求进行身份验证的凭据。 如果未设置该属性，则该值默认为 <see langword="null" />；即 <see langword="XmlResolver" /> 没有用户凭据。</returns>
    </member>
    <member name="T:System.Xml.XmlSecureResolver">
      <summary>通过包装 <see cref="T:System.Xml.XmlResolver" /> 对象和限制基础 <see cref="T:System.Xml.XmlResolver" /> 有权访问的资源，帮助保护 <see cref="T:System.Xml.XmlResolver" /> 的另一个实现。</summary>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)">
      <summary>使用提供的 <see cref="T:System.Xml.XmlResolver" /> 和 URL 初始化 <see cref="T:System.Xml.XmlSecureResolver" /> 类的一个新实例。</summary>
      <param name="resolver">由 <see cref="T:System.Xml.XmlSecureResolver" /> 包装的 XML 解析程序。</param>
      <param name="securityUrl">用于创建将应用于基础 <see cref="T:System.Xml.XmlResolver" /> 的<see cref="T:System.Security.PermissionSet" /> 的 URL。 <see cref="T:System.Xml.XmlSecureResolver" /> 在对基础 <see cref="T:System.Xml.XmlResolver" /> 调用 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> 之前，先对创建的 <see cref="T:System.Security.PermissionSet" /> 调用 <see cref="M:System.Security.PermissionSet.PermitOnly" />。</param>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>将 URI 映射到包含实际资源的对象。 此方法在对基础 <see cref="T:System.Xml.XmlResolver" /> 调用<see langword="GetEntity" /> 之前，先调用 <see cref="M:System.Security.PermissionSet.PermitOnly" />，以临时设置构造函数中创建的 <see cref="T:System.Security.PermissionSet" />，从而打开该资源。</summary>
      <param name="absoluteUri">从 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。</param>
      <param name="role">当前未使用。</param>
      <param name="ofObjectToReturn">要返回的对象的类型。 当前版本只返回 <see cref="T:System.IO.Stream" /> 对象。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> 既不是 <see langword="null" /> 也不是 <see cref="T:System.IO.Stream" /> 类型。</exception>
      <exception cref="T:System.UriFormatException">指定的 URI 不是一个绝对 URI。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="absoluteUri" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Exception">存在运行时错误（例如中断的服务器连接）。</exception>
      <returns>通过对基础 <see cref="T:System.Xml.XmlResolver" /> 调用 <see langword="GetEntity" /> 而返回的流。 如果指定除 <see cref="T:System.IO.Stream" /> 以外的类型，方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>将 URI 异步映射到包含实际资源的对象。</summary>
      <param name="absoluteUri">从 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。</param>
      <param name="role">当前未使用。</param>
      <param name="ofObjectToReturn">要返回的对象的类型。 当前版本只返回 <see cref="T:System.IO.Stream" /> 对象。</param>
      <returns>通过对基础 <see cref="T:System.Xml.XmlResolver" /> 调用 <see langword="GetEntity" /> 而返回的流。 如果指定除 <see cref="T:System.IO.Stream" /> 以外的类型，方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)">
      <summary>通过在基础 <see cref="T:System.Xml.XmlResolver" /> 上调用 <see langword="ResolveUri" />，从基 URI 和相对 URI 中解析绝对 URI。</summary>
      <param name="baseUri">用于解析相对 URI 的基 URI。</param>
      <param name="relativeUri">要解析的 URI。 URI 可以是绝对的或相对的。 如果是绝对的，此值有效地替换 <paramref name="baseUri" /> 值。 如果是相对的，它与 <paramref name="baseUri" /> 组合以构成绝对 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> 为 <see langword="null" />。</exception>
      <returns>绝对 URI；如果不能解析相对 URI，则为 <see langword="null" />（通过对基础 <see cref="T:System.Xml.XmlResolver" /> 调用 <see langword="ResolveUri" /> 来返回）。</returns>
    </member>
    <member name="P:System.Xml.XmlSecureResolver.Credentials">
      <summary>设置用于对 Web 请求进行身份验证的凭据。</summary>
      <returns>用于对 Web 请求进行身份验证的凭据。 <see cref="T:System.Xml.XmlSecureResolver" /> 在基础 <see cref="T:System.Xml.XmlResolver" /> 上设置给定的凭据。 如果未设置该属性，则该值默认为 <see langword="null" />；即 <see cref="T:System.Xml.XmlSecureResolver" /> 没有用户凭据。</returns>
    </member>
    <member name="T:System.Xml.XmlSignificantWhitespace">
      <summary>表示在混合内容节点中标记之间的空白或 xml:space= 'preserve' 范围内的空白。 这也称为有效空白。</summary>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlSignificantWhitespace" /> 类的新实例。</summary>
      <param name="strData">节点中的空白字符。</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 对象。</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。 对于重要的空白节点，克隆的节点将始终包含数据值，而不管参数的设置如何。</param>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.LocalName">
      <summary>获取节点的本地名称。</summary>
      <returns>对于 <see langword="XmlSignificantWhitespace" /> 节点，此属性返回 <see langword="#significant-whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Name">
      <summary>获取节点的限定名称。</summary>
      <returns>对于 <see langword="XmlSignificantWhitespace" /> 节点，此属性返回 <see langword="#significant-whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>对于 <see langword="XmlSignificantWhitespace" /> 节点，该值是 XmlNodeType.SignificantWhitespace。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.ParentNode">
      <summary>获取当前节点的父节点。</summary>
      <returns>当前节点的 <see cref="T:System.Xml.XmlNode" /> 父节点。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.PreviousText">
      <summary>获取紧接在该节点之前的文本节点。</summary>
      <returns>返回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Value">
      <summary>获取或设置节点的值。</summary>
      <exception cref="T:System.ArgumentException">将 <see langword="Value" /> 设置为无效空白字符。</exception>
      <returns>在节点中找到空白字符。</returns>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary>指定当前 <see langword="xml:space" /> 范围。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary>
        <see langword="xml:space" /> 范围等于 <see langword="default" />。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary>没有 <see langword="xml:space" /> 范围。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary>
        <see langword="xml:space" /> 范围等于 <see langword="preserve" />。</summary>
    </member>
    <member name="T:System.Xml.XmlText">
      <summary>表示元素或属性的文本内容。</summary>
    </member>
    <member name="M:System.Xml.XmlText.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlText" /> 类的新实例。</summary>
      <param name="strData">节点的内容，请参见 <see cref="P:System.Xml.XmlText.Value" /> 属性。</param>
      <param name="doc">父 XML 文档。</param>
    </member>
    <member name="M:System.Xml.XmlText.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。</param>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlText.SplitText(System.Int32)">
      <summary>在指定的偏移点将该节点拆分为两个节点，并使树中的这两个节点成为同级。</summary>
      <param name="offset">拆分节点的偏移点。</param>
      <returns>新的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。 由于 <see langword="XmlText" /> 节点没有子级，因此该方法无效。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlText.LocalName">
      <summary>获取节点的本地名称。</summary>
      <returns>对于文本节点，此属性返回 <see langword="#text" />。</returns>
    </member>
    <member name="P:System.Xml.XmlText.Name">
      <summary>获取节点的限定名称。</summary>
      <returns>对于文本节点，此属性返回 <see langword="#text" />。</returns>
    </member>
    <member name="P:System.Xml.XmlText.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>对于文本节点，该值是 XmlNodeType.Text。</returns>
    </member>
    <member name="P:System.Xml.XmlText.ParentNode">
      <summary>获取该节点的父级（针对可以拥有父级的节点）。</summary>
      <returns>作为当前节点父级的 <see langword="XmlNode" />。 如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />。 对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />。 下表描述了 <see langword="ParentNode" /> 属性可能的返回值。</returns>
    </member>
    <member name="P:System.Xml.XmlText.PreviousText">
      <summary>获取紧接在该节点之前的文本节点。</summary>
      <returns>返回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlText.Value">
      <summary>获取或设置节点的值。</summary>
      <returns>文本节点的内容。</returns>
    </member>
    <member name="T:System.Xml.XmlTextReader">
      <summary>表示提供对 XML 数据进行快速、非缓存、只进访问的读取器。  
  
从 .NET Framework 2.0 开始，建议改用 <see cref="T:System.Xml.XmlReader" /> 类。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor">
      <summary>初始化 <see langword="XmlTextReader" /> 的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
      <summary>使用指定的流初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</summary>
      <param name="input">包含要读取的 XML 数据的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>用指定的流和 <see cref="T:System.Xml.XmlNameTable" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</summary>
      <param name="input">包含要读取的 XML 数据的流。</param>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 或 <paramref name="nt" /> 值为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>用指定的流、<see cref="T:System.Xml.XmlNodeType" /> 和 <see cref="T:System.Xml.XmlParserContext" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</summary>
      <param name="xmlFragment">包含要分析的 XML 片段的流。</param>
      <param name="fragType">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。 这也确定了片段可以包含的内容。 （请参见下表。）</param>
      <param name="context">分析 <paramref name="xmlFragment" /> 所用的 <see cref="T:System.Xml.XmlParserContext" />。 这包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码、命名空间范围、当前 <c>xml:lang</c> 和 <c>xml:space</c> 范围。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> 不是 Element、Attribute 或 Document <see langword="XmlNodeType" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 初始化 <see cref="T:System.IO.TextReader" /> 类的新实例。</summary>
      <param name="input">包含要读取的 XML 数据的 <see langword="TextReader" />。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 和 <see cref="T:System.IO.TextReader" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。</summary>
      <param name="input">包含要读取的 XML 数据的 <see langword="TextReader" />。</param>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nt" /> 值为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String)">
      <summary>用指定的文件初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</summary>
      <param name="url">包含 XML 数据的文件的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。</param>
      <exception cref="T:System.IO.FileNotFoundException">无法找到指定的文件。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">无法找到部分文件名或目录。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" /> 是一个空字符串。</exception>
      <exception cref="T:System.Net.WebException">无法解析远程文件名。  
  
 - 或 -  
  
 处理请求时出错。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
      <summary>使用指定的 URL 和流初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</summary>
      <param name="url">用于解析外部资源的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。</param>
      <param name="input">包含要读取的 XML 数据的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>使用指定的 URL、流和 <see cref="T:System.Xml.XmlNameTable" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</summary>
      <param name="url">用于解析外部资源的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。 如果 <paramref name="url" /> 为 <see langword="null" />，则 <see langword="BaseURI" /> 设置为 <see langword="String.Empty" />。</param>
      <param name="input">包含要读取的 XML 数据的流。</param>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 或 <paramref name="nt" /> 值为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
      <summary>使用指定的 URL 和 <see cref="T:System.IO.TextReader" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</summary>
      <param name="url">用于解析外部资源的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。</param>
      <param name="input">包含要读取的 XML 数据的 <see langword="TextReader" />。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>使用指定的 URL、<see cref="T:System.IO.TextReader" /> 和 <see cref="T:System.Xml.XmlNameTable" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</summary>
      <param name="url">用于解析外部资源的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。 如果 <paramref name="url" /> 为 <see langword="null" />，则 <see langword="BaseURI" /> 设置为 <see langword="String.Empty" />。</param>
      <param name="input">包含要读取的 XML 数据的 <see langword="TextReader" />。</param>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nt" /> 值为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
      <summary>使用指定的文件和 <see cref="T:System.Xml.XmlNameTable" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</summary>
      <param name="url">包含要读取的 XML 数据的文件的 URL。</param>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nt" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到指定的文件。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">无法找到部分文件名或目录。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" /> 是一个空字符串。</exception>
      <exception cref="T:System.Net.WebException">无法解析远程文件名。  
  
 - 或 -  
  
 处理请求时出错。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>使用指定的字符串、<see cref="T:System.Xml.XmlNodeType" /> 和 <see cref="T:System.Xml.XmlParserContext" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</summary>
      <param name="xmlFragment">包含要分析的 XML 片段的字符串。</param>
      <param name="fragType">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。 这也确定了片段字符串可以包含的内容。 （请参见下表。）</param>
      <param name="context">分析 <paramref name="xmlFragment" /> 所用的 <see cref="T:System.Xml.XmlParserContext" />。 这包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码、命名空间范围、当前 <c>xml:lang</c> 和 <c>xml:space</c> 范围。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> 不是 <see langword="Element" /><see langword="Attribute" />或 <see langword="Document" /><see langword="XmlNodeType" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。</summary>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.Close">
      <summary>将 <see cref="P:System.Xml.XmlReader.ReadState" /> 改为 <see langword="Closed" />。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
      <summary>获取具有指定索引的属性的值。</summary>
      <param name="i">属性的索引。 索引是从零开始的。 （第一个属性的索引为 0。）</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 参数小于 0 或大于等于 <see cref="P:System.Xml.XmlTextReader.AttributeCount" />。</exception>
      <returns>指定的属性的值。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
      <summary>获取具有指定名称的属性的值。</summary>
      <param name="name">属性的限定名称。</param>
      <returns>指定的属性的值。 如果未找到该属性，则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
      <summary>获取具有指定本地名称和命名空间 URI 的属性的值。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <returns>指定的属性的值。 如果未找到该属性，则返回 <see langword="null" />。 此方法不移动读取器。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>获取一个集合，该集合包含当前在范围内的所有命名空间。</summary>
      <param name="scope">一个 <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要返回的命名空间节点的类型。</param>
      <returns>一个包含当前在范围内的所有命名空间的 <see cref="T:System.Collections.IDictionary" /> 对象。 如果读取器未定位在某元素上，则返回空字典（无命名空间）。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetRemainder">
      <summary>获取已缓冲的 XML 的剩余部分。</summary>
      <returns>包含已缓冲的 XML 的剩余部分的 <see cref="T:System.IO.TextReader" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.HasLineInfo">
      <summary>获取一个值，该值指示该类是否可返回行信息。</summary>
      <returns>如果该类可以返回行信息，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
      <summary>解析当前元素的范围内的命名空间前缀。</summary>
      <param name="prefix">要解析其命名空间 URI 的前缀。 若要匹配默认命名空间，请传递一个空字符串。 不必原子化该字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Xml.XmlTextReader.Namespaces" /> 属性设置为 <see langword="true" />，而 <paramref name="prefix" /> 值为 <see langword="null" />。</exception>
      <returns>前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
      <summary>移动到具有指定索引的属性。</summary>
      <param name="i">属性的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 参数小于 0 或大于等于 <see cref="P:System.Xml.XmlReader.AttributeCount" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
      <summary>移动到具有指定名称的属性。</summary>
      <param name="name">属性的限定名称。</param>
      <returns>如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则读取器的位置未改变。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
      <summary>移动到具有指定本地名称和命名空间 URI 的属性。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <returns>如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则读取器的位置未改变。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToElement">
      <summary>移动到包含当前属性节点的元素。</summary>
      <returns>如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
      <summary>移动到第一个属性。</summary>
      <returns>如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />；否则为 <see langword="false" />（读取器的位置不更改）。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToNextAttribute">
      <summary>移动到下一个属性。</summary>
      <returns>如果存在下一个属性，则为 <see langword="true" />；如果没有其他属性，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Read">
      <summary>从流中读取下一个节点。</summary>
      <exception cref="T:System.Xml.XmlException">分析 XML 时出错。</exception>
      <returns>如果成功读取了下一个节点，则为 <see langword="true" />；如果没有其他节点可读取，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadAttributeValue">
      <summary>将属性值分析为一个或多个 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 节点。</summary>
      <returns>如果有可返回的节点，则为 <see langword="true" />。  
  
 如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />。  
  
如果是空属性（如 <c>misc=""</c>），则返回 <see langword="true" />，同时返回值为 <see langword="String.Empty" /> 的单个节点。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>对 Base64 进行解码并返回解码的二进制字节。</summary>
      <param name="array">作为文本内容写入到的缓冲区的字符数组。</param>
      <param name="offset">数组中从零开始的索引，指定此方法可以开始写入缓冲区的位置。</param>
      <param name="len">要写入缓冲区的字节数。</param>
      <exception cref="T:System.Xml.XmlException">Base64 序列无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 的值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0、<paramref name="len" /> &lt; 0 或 <paramref name="len" /> &gt; <paramref name="array" /> Length- <paramref name="offset" />。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>对 <see langword="BinHex" /> 进行解码并返回解码后的二进制字节。</summary>
      <param name="array">作为解码的二进制字节写入到的缓冲区的字节数组。</param>
      <param name="offset">数组中从零开始的索引，指定此方法可以开始写入缓冲区的位置。</param>
      <param name="len">要写入缓冲区的字节数。</param>
      <exception cref="T:System.Xml.XmlException">
        <see langword="BinHex" /> 序列无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 的值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0、<paramref name="len" /> &lt; 0 或 <paramref name="len" /> &gt; <paramref name="array" /> Length- <paramref name="offset" />。</exception>
      <returns>写入你的缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
      <summary>将元素的文本内容读入字符缓冲区。 通过连续调用此方法，可以读取大的嵌入文本的流。</summary>
      <param name="buffer">作为文本内容写入到的缓冲区的字符数组。</param>
      <param name="index">
        <paramref name="buffer" /> 中的位置，此方法可以从该位置开始写入文本内容。</param>
      <param name="count">要写入 <paramref name="buffer" /> 的字符数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 大于 <paramref name="buffer" /> 中指定的空间（缓冲区大小 - <paramref name="index" />）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />
        <see langword="&lt; 0" /> 或 <paramref name="count" /><see langword="&lt; 0" />。</exception>
      <returns>读取的字符数。 如果读取器未定位在元素上，或如果当前上下文中没有要返回的其他文本内容，则这可以是 <see langword="0" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>读取内容并返回 <see langword="Base64" /> 解码的二进制字节。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不支持 <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>读取内容并返回 <see langword="BinHex" /> 解码的二进制字节。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不支持 <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlTextReader" /> 实现不支持此方法。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>读取元素并对 Base64 内容进行解码。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不是元素节点。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlTextReader" /> 实现不支持此方法。</exception>
      <exception cref="T:System.Xml.XmlException">该元素包含混合内容。</exception>
      <exception cref="T:System.FormatException">无法将内容转换成请求的类型。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>读取元素并对 <see langword="BinHex" /> 内容进行解码。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不是元素节点。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。</exception>
      <exception cref="T:System.Xml.XmlException">该元素包含混合内容。</exception>
      <exception cref="T:System.FormatException">无法将内容转换成请求的类型。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadString">
      <summary>将元素或文本节点的内容读取为一个字符串。</summary>
      <exception cref="T:System.Xml.XmlException">分析 XML 时出错。</exception>
      <exception cref="T:System.InvalidOperationException">尝试进行无效操作。</exception>
      <returns>该元素或文本节点的内容。 如果读取器定位在元素或文本节点以外的位置，或者当前上下文中没有其他文本内容可返回，则这可以是空字符串。  
  
 <see langword="Note:" />文本节点可以是元素或属性文本节点。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResetState">
      <summary>将读取器的状态重置为 ReadState.Initial。</summary>
      <exception cref="T:System.InvalidOperationException">如果读取器是使用 <see cref="T:System.Xml.XmlParserContext" /> 构造的，则调用 <see langword="ResetState" />。</exception>
      <exception cref="T:System.Xml.XmlException">单个流中的文档不共享同一编码。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResolveEntity">
      <summary>解析 <see langword="EntityReference" /> 节点的实体引用。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.Skip">
      <summary>跳过当前节点的子级。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。</summary>
      <param name="scope">一个 <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要返回的命名空间节点的类型。</param>
      <returns>一个包含当前在范围内的命名空间的 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。</summary>
      <param name="prefix">要查找其命名空间 URI 的前缀。</param>
      <returns>映射到前缀的命名空间 URI；如果前缀未映射到命名空间 URI，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。</summary>
      <param name="namespaceName">要查找其前缀的命名空间 URI。</param>
      <returns>映射到命名空间 URI 的前缀；如果命名空间 URI 未映射到前缀，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.AttributeCount">
      <summary>获取当前节点上的属性数目。</summary>
      <returns>当前节点上的属性数目。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.BaseURI">
      <summary>获取当前节点的基 URI。</summary>
      <returns>当前节点的基 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadBinaryContent">
      <summary>获取一个值，该值指示 <see cref="T:System.Xml.XmlTextReader" /> 是否实现二进制内容读取方法。</summary>
      <returns>如果实现了二进制内容读取方法，则为 <see langword="true" />；否则为 <see langword="false" />。 <see cref="T:System.Xml.XmlTextReader" /> 类始终返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadValueChunk">
      <summary>获取一个值，该值指示 <see cref="T:System.Xml.XmlTextReader" /> 是否实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法。</summary>
      <returns>如果 <see cref="T:System.Xml.XmlTextReader" /> 实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。 <see cref="T:System.Xml.XmlTextReader" /> 类始终返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanResolveEntity">
      <summary>获取一个值，该值指示此读取器是否可以分析和解析实体。</summary>
      <returns>如果此读取器可以分析和解析实体，则为 <see langword="true" />；否则为 <see langword="false" />。 <see langword="XmlTextReader" /> 类始终返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Depth">
      <summary>获取 XML 文档中当前节点的深度。</summary>
      <returns>XML 文档中当前节点的深度。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.DtdProcessing">
      <summary>获取或设置 <see cref="T:System.Xml.DtdProcessing" /> 枚举。</summary>
      <returns>
        <see cref="T:System.Xml.DtdProcessing" /> 枚举。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Encoding">
      <summary>获取文档的编码。</summary>
      <returns>编码值。 如果不存在任何编码属性且不存在字节顺序标记，则这将默认为 UTF-8。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EntityHandling">
      <summary>获取或设置一个值，该值指定读取器处理实体的方式。</summary>
      <returns>
        <see cref="T:System.Xml.EntityHandling" /> 值之一。 如果未指定 <see langword="EntityHandling" />，它将默认为 <see langword="EntityHandling.ExpandCharEntities" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EOF">
      <summary>获取一个值，该值指示读取器是否定位在流结尾。</summary>
      <returns>如果此读取器定位在流的结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.HasValue">
      <summary>获取一个值，该值指示当前节点是否可以具有 <see langword="String.Empty" /> 以外的 <see cref="P:System.Xml.XmlTextReader.Value" />。</summary>
      <returns>如果读取器当前定位在的节点可以具有 <see langword="Value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsDefault">
      <summary>获取一个值，该值指示当前节点是否是从 DTD 或架构中定义的默认值生成的属性。</summary>
      <returns>此属性始终返回 <see langword="false" />。 （<see cref="T:System.Xml.XmlTextReader" /> 不展开默认属性。）</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsEmptyElement">
      <summary>获取一个值，该值指示当前节点是否为空元素（例如 <c>&lt;MyElement/&gt;</c>）。</summary>
      <returns>
        <see langword="true" /> 如果当前节点是一个元素 (<see cref="P:System.Xml.XmlTextReader.NodeType" /> 等于 <see langword="XmlNodeType.Element" /> 末尾) ， <c>/&gt;</c> 则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LineNumber">
      <summary>获取当前行号。</summary>
      <returns>当前行号。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LinePosition">
      <summary>获取当前行位置。</summary>
      <returns>当前行位置。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LocalName">
      <summary>获取当前节点的本地名称。</summary>
      <returns>移除了前缀的当前节点的名称。 例如， <see langword="LocalName" /><see langword="book" /> 对于元素<c> &lt; bk： &gt; book</c>。  
  
对于没有名称的节点类型（如 <see langword="Text" />、<see langword="Comment" /> 等），该属性返回 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Name">
      <summary>获取当前节点的限定名称。</summary>
      <returns>当前节点的限定名称。 例如， <see langword="Name" /><see langword="bk:book" /> 对于元素<c> &lt; bk： &gt; book</c>。  
  
返回的名称取决于节点的 <see cref="P:System.Xml.XmlTextReader.NodeType" />。 下列节点类型返回所列的值。 所有其他节点类型返回空字符串。  
  
 <list type="table"><listheader><term> 节点类型</term><description> name</description></listheader><item><term><see langword="Attribute" /></term><description> 属性名。</description></item><item><term><see langword="DocumentType" /></term><description> 文档类型名称。</description></item><item><term><see langword="Element" /></term><description> 标记名称。</description></item><item><term><see langword="EntityReference" /></term><description> 引用的实体的名称。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 处理指令的目标。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 字符串 <see langword="xml" />。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Namespaces">
      <summary>获取或设置一个值，该值指示是否进行命名空间支持。</summary>
      <exception cref="T:System.InvalidOperationException">发生读操作（<see cref="P:System.Xml.XmlTextReader.ReadState" /> 并非 <see langword="ReadState.Initial" />）后，设置该属性。</exception>
      <returns>要进行命名空间支持，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NamespaceURI">
      <summary>获取读取器定位在的节点的命名空间 URI（采用 W3C 命名空间规范中定义）。</summary>
      <returns>当前节点的命名空间 URI；否则为空字符串。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NameTable">
      <summary>获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see langword="XmlNameTable" />，它使你能够获取该节点内字符串的原子化版本。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，表示当前节点的类型。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Normalization">
      <summary>获取或设置一个值，该值指示是否规范化空白区域和属性值。</summary>
      <exception cref="T:System.InvalidOperationException">当读取器关闭（<see cref="P:System.Xml.XmlTextReader.ReadState" /> 为 <see langword="ReadState.Closed" />）时，设置此属性。</exception>
      <returns>如果要进行规范化，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Prefix">
      <summary>获取与当前节点关联的命名空间前缀。</summary>
      <returns>与当前节点关联的命名空间前缀。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.ProhibitDtd">
      <summary>获取或设置一个值，该值指示是否允许 DTD 处理。 此属性已过时。 请改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />。</summary>
      <returns>如果不允许 DTD 处理，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.QuoteChar">
      <summary>获取用于括起属性节点的值的引号字符。</summary>
      <returns>用于括起属性节点的值的引号字符（" 或 '）。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.ReadState">
      <summary>获取读取器的状态。</summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 值之一。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Value">
      <summary>获取当前节点的文本值。</summary>
      <returns>返回的值取决于节点的 <see cref="P:System.Xml.XmlTextReader.NodeType" />。 下表列出具有要返回的值的节点类型。 所有其他节点类型返回 <see langword="String.Empty" />。  
  
 <list type="table"><listheader><term> 节点类型</term><description> “值”</description></listheader><item><term><see langword="Attribute" /></term><description> 属性的值。</description></item><item><term><see langword="CDATA" /></term><description> CDATA 节的内容。</description></item><item><term><see langword="Comment" /></term><description> 注释的内容。</description></item><item><term><see langword="DocumentType" /></term><description> 内部子集。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 全部内容（不包括指令目标）。</description></item><item><term><see langword="SignificantWhitespace" /></term><description><see langword="xml:space" />= 'preserve' 范围中的空白。</description></item><item><term><see langword="Text" /></term><description> 文本节点的内容。</description></item><item><term><see langword="Whitespace" /></term><description> 标记之间的空白。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 声明的内容。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.WhitespaceHandling">
      <summary>获取或设置一个值，该值指定如何处理空白区域。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">指定了无效的值。</exception>
      <exception cref="T:System.InvalidOperationException">当读取器关闭（<see cref="P:System.Xml.XmlTextReader.ReadState" /> 为 <see langword="ReadState.Closed" />）时，设置此属性。</exception>
      <returns>
        <see cref="T:System.Xml.WhitespaceHandling" /> 值之一。 默认值为 <see langword="WhitespaceHandling.All" />（返回 <see langword="Whitespace" /> 和 <see langword="SignificantWhitespace" /> 节点）。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlLang">
      <summary>获取当前 <see langword="xml:lang" /> 范围。</summary>
      <returns>当前 <see langword="xml:lang" /> 范围。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlResolver">
      <summary>设置用于解析 DTD 引用的 <see cref="T:System.Xml.XmlResolver" />。</summary>
      <returns>要使用的 <see langword="XmlResolver" />。 如果设置为 <see langword="null" />，则不解析外部资源。  
  
在 .NET Framework 的 1.1 版中，调用方必须完全受到信任，才能指定 <see langword="XmlResolver" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlSpace">
      <summary>获取当前 <see langword="xml:space" /> 范围。</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 值之一。 如果不存在任何 <see langword="xml:space" /> 范围，则该属性默认值为 <see langword="XmlSpace.None" />。</returns>
    </member>
    <member name="T:System.Xml.XmlTextWriter">
      <summary>表示提供快速、非缓存、只进方法的写入器，该方法生成包含 XML 数据（这些数据符合 W3C 可扩展标记语言 (XML) 1.0 和“XML 命名空间”建议）的流或文件。  
  
从 .NET Framework 2.0 开始，建议改用 <see cref="T:System.Xml.XmlWriter" /> 类。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>使用指定的流和编码方式创建 <see langword="XmlTextWriter" /> 类的实例。</summary>
      <param name="w">要对其写入的流。</param>
      <param name="encoding">要生成的编码。 如果编码方式为 <see langword="null" />，则它以 UTF-8 的形式写出流并忽略 <see langword="ProcessingInstruction" /> 中的编码特性。</param>
      <exception cref="T:System.ArgumentException">该编码方式不受支持或无法写入流。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="w" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 创建 <see langword="XmlTextWriter" /> 类的实例。</summary>
      <param name="w">要向其中进行写入的 <see langword="TextWriter" />。 假定 <see langword="TextWriter" /> 已设置为正确的编码方式。</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
      <summary>使用指定的文件创建 <see cref="T:System.Xml.XmlTextWriter" /> 类的实例。</summary>
      <param name="filename">要写入的文件名。 如果该文件存在，它将截断该文件并用新内容将其覆盖。</param>
      <param name="encoding">要生成的编码。 如果编码方式为 <see langword="null" />，它将以 UTF-8 的形式写出该文件，并忽略 <see langword="ProcessingInstruction" /> 中的编码特性。</param>
      <exception cref="T:System.ArgumentException">编码方式不受支持；文件名为空；仅包含空格，或者包含一个或多个无效字符。</exception>
      <exception cref="T:System.UnauthorizedAccessException">访问被拒绝。</exception>
      <exception cref="T:System.ArgumentNullException">文件名为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">未找到要写入的目录。</exception>
      <exception cref="T:System.IO.IOException">文件名中包含不正确或无效的文件名、目录名或卷标语法。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Close">
      <summary>关闭此流和基础流。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Flush">
      <summary>将缓冲区中的所有内容刷新到基础流，并同时刷新基础流。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
      <summary>返回在当前命名空间范围中为该命名空间 URI 定义的最近的前缀。</summary>
      <param name="ns">要查找其前缀的命名空间 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <returns>匹配的前缀。 如果当前范围内未找到匹配的命名空间 URI，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>将指定的二进制字节编码为 Base64 并写出结果文本。</summary>
      <param name="buffer">要进行编码的字节数组。</param>
      <param name="index">缓冲区中的位置，指示要写入的字节的起始位置。</param>
      <param name="count">要写入的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 <see langword="Closed" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>将指定的二进制字节编码为 BinHex 并写出结果文本。</summary>
      <param name="buffer">要进行编码的字节数组。</param>
      <param name="index">缓冲区中指示要写入字节的起始位置的位置。</param>
      <param name="count">要写入的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 Closed。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
      <summary>写出包含指定文本的 &lt;![CDATA[...]]&gt; 块。</summary>
      <param name="text">要放置在 CDATA 块中的文本。</param>
      <exception cref="T:System.ArgumentException">该文本将导致格式不正确的 XML 文档。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 <see langword="Closed" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
      <summary>为指定的 Unicode 字符值强制生成字符实体。</summary>
      <param name="ch">为其生成字符实体的 Unicode 字符。</param>
      <exception cref="T:System.ArgumentException">该字符应处于代理项对字符范围 <see langword="0xd800" /> - <see langword="0xdfff" /> 内；否则该文本将导致格式不正确的 XML 文档。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 <see langword="Closed" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>以每次一个缓冲区的方式写入文本。</summary>
      <param name="buffer">包含要写入的文本的字符数组。</param>
      <param name="index">缓冲区中指示要写入文本的起始位置的位置。</param>
      <param name="count">要写入的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
- 或 - 
缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />；此调用导致代理项对字符被拆分或写入无效的代理项对。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 Closed。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
      <summary>写出包含指定文本的注释 &lt;!--...--&gt;。</summary>
      <param name="text">要放在注释内的文本。</param>
      <exception cref="T:System.ArgumentException">该文本将导致格式不正确的 XML 文档。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 <see langword="Closed" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>写出具有指定名称和可选属性的 DOCTYPE 声明。</summary>
      <param name="name">DOCTYPE 的名称。 它必须是非空的。</param>
      <param name="pubid">如果非 null，则它还编写 PUBLIC "pubid" "sysid"，这里的 <paramref name="pubid" /> 和 <paramref name="sysid" /> 用给定参数的值替换。</param>
      <param name="sysid">如果 <paramref name="pubid" /> 为 null 而 <paramref name="sysid" /> 非 null，则它编写 SYSTEM "sysid"，这里的 <paramref name="sysid" /> 用此参数的值替换。</param>
      <param name="subset">如果非 null，则它写入 [subset]，其中 subset 替换为此参数的值。</param>
      <exception cref="T:System.InvalidOperationException">在序言码外部（根元素之后）调用了此方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />  
  
- 或 - 
<paramref name="name" /> 的值将导致无效的 XML。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndAttribute">
      <summary>关闭上一个 <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> 调用。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndDocument">
      <summary>关闭任何打开的元素或特性并将写入器重新设置为起始状态。</summary>
      <exception cref="T:System.ArgumentException">XML 文档无效。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndElement">
      <summary>关闭一个元素并弹出相应的命名空间范围。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
      <summary>按 <see langword="&amp;name;" /> 写出实体引用。</summary>
      <param name="name">实体引用的名称。</param>
      <exception cref="T:System.ArgumentException">该文本将导致格式不正确的 XML 文档；或者 <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteFullEndElement">
      <summary>关闭一个元素并弹出相应的命名空间范围。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteName(System.String)">
      <summary>写出指定的名称，确保它是符合 W3C XML 1.0 建议的有效名称。</summary>
      <param name="name">要写出的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的 XML 名称，或者 <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
      <summary>写出指定的名称，确保它是符合 W3C XML 1.0 建议的有效 <see langword="NmToken" />。</summary>
      <param name="name">要写出的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的 <see langword="NmToken" />；或者 <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>写出在名称和文本之间有空格的处理指令，如下所示：&lt;?name text?&gt;。</summary>
      <param name="name">处理指令的名称。</param>
      <param name="text">要包括在处理指令中的文本。</param>
      <exception cref="T:System.ArgumentException">该文本将导致格式不正确的 XML 文档。  
  
 <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。  
  
调用了 <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> 后，使用此方法创建 XML 声明。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
      <summary>写出命名空间限定的名称。 此方法查找位于给定命名空间范围内的前缀。</summary>
      <param name="localName">要写入的本地名称。</param>
      <param name="ns">与该名称关联的命名空间 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。  
  
 根据 W3C 命名空间规范，<paramref name="localName" /> 不是有效的名称。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>从字符缓冲区手动写入原始标记。</summary>
      <param name="buffer">包含要写入的文本的字符数组。</param>
      <param name="index">缓冲区中的位置，指示要写入文本的起始位置。</param>
      <param name="count">要写入的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
- 或 - 
缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
      <summary>从字符串手动写入原始标记。</summary>
      <param name="data">包含要写入的文本的字符串。</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>写入属性的开头。</summary>
      <param name="prefix">特性的 <see langword="Namespace" /> 前缀。</param>
      <param name="localName">特性的 <see langword="LocalName" />。</param>
      <param name="ns">特性的 <see langword="NamespaceURI" /></param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument">
      <summary>写入版本为“1.0”的 XML 声明。</summary>
      <exception cref="T:System.InvalidOperationException">这不是在构造函数后调用的第一个写方法。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
      <summary>写入版本为“1.0”的 XML 声明和独立的属性。</summary>
      <param name="standalone">如果为 <see langword="true" />，则它将写入"standalone=yes"；如果为 <see langword="false" />，则它将写入"standalone=no"。</param>
      <exception cref="T:System.InvalidOperationException">这不是在构造函数后调用的第一个写方法。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>写入指定的开始标记并将其与给定的命名空间和前缀关联起来。</summary>
      <param name="prefix">元素的命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="ns">与元素关联的命名空间 URI。 如果此命名空间已在范围中并具有关联的前缀，则写入器还自动写入该前缀。</param>
      <exception cref="T:System.InvalidOperationException">编写器已关闭。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteString(System.String)">
      <summary>写入给定的文本内容。</summary>
      <param name="text">要写入的文本。</param>
      <exception cref="T:System.ArgumentException">文本字符串包含无效的代理项对。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>为代理项字符对生成并写入代理项字符实体。</summary>
      <param name="lowChar">低代理项。 它必须是介于 <see langword="0xDC00" /> 和 <see langword="0xDFFF" /> 之间的值。</param>
      <param name="highChar">高代理项。 它必须是介于 <see langword="0xD800" /> 和 <see langword="0xDBFF" /> 之间的值。</param>
      <exception cref="T:System.Exception">传递了无效的代理项字符对。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
      <summary>写出给定的空白区域。</summary>
      <param name="ws">空格字符的字符串。</param>
      <exception cref="T:System.ArgumentException">字符串包含非空白字符。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.BaseStream">
      <summary>获取基础流对象。</summary>
      <returns>
        <see langword="XmlTextWriter" /> 正在向其写入的流；如果 <see langword="null" /> 是使用不从 <see cref="T:System.IO.TextWriter" /> 类继承的 <see cref="T:System.IO.StreamWriter" /> 构造的，则为 <see langword="XmlTextWriter" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Formatting">
      <summary>指示如何对输出进行格式设置。</summary>
      <returns>
        <see cref="T:System.Xml.Formatting" /> 值之一。 默认值为 <see langword="Formatting.None" />（无特殊格式）。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Indentation">
      <summary>获取或设置当 <see cref="P:System.Xml.XmlTextWriter.Formatting" /> 设置为 <see langword="Formatting.Indented" /> 时将为层次结构中的每个级别编写多少 IndentChar。</summary>
      <exception cref="T:System.ArgumentException">将该属性设置为负值。</exception>
      <returns>每个级别的 <see langword="IndentChars" /> 的数目。 默认值为 2。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.IndentChar">
      <summary>获取或设置当 <see cref="P:System.Xml.XmlTextWriter.Formatting" /> 设置为 <see langword="Formatting.Indented" /> 时哪个字符用于缩进。</summary>
      <returns>用于缩进的字符。 默认为空格。  
  
 <block subset="none" type="note"><para><see langword="XmlTextWriter" /> 允许您将该属性设置为任意字符。 为了确保 XML 有效，你必须指定有效的空格字符 0x9、0x10、0x13 或 0x20。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Namespaces">
      <summary>获取或设置一个值，该值指示是否进行命名空间支持。</summary>
      <exception cref="T:System.InvalidOperationException">只能在处于 <see langword="WriteState.Start" /> 状态时更改此属性。</exception>
      <returns>如果支持命名空间，则为 <see langword="true" />；否则为 <see langword="false" />。  
  
默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.QuoteChar">
      <summary>获取或设置要用于引用属性值的字符。</summary>
      <exception cref="T:System.ArgumentException">将该属性设置为非单引号，也非双引号。</exception>
      <returns>用于引用属性值的字符。 这必须是单引号 (&amp; #39; ) 或双引号 (&amp; #34; ) 。 默认为双引号。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.WriteState">
      <summary>获取写入器的状态。</summary>
      <returns>
        <see cref="T:System.Xml.WriteState" /> 值之一。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlLang">
      <summary>获取当前 <see langword="xml:lang" /> 范围。</summary>
      <returns>当前 <see langword="xml:lang" />；或者如果当前范围中没有 <see langword="null" />，则为 <see langword="xml:lang" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlSpace">
      <summary>获取表示当前 <see langword="xml:space" /> 范围的 <see cref="T:System.Xml.XmlSpace" />。</summary>
      <returns>一个表示当前 <see langword="XmlSpace" /> 范围的 <see langword="xml:space" />。  
  
 <list type="table"><listheader><term> 值</term><description> 含义</description></listheader><item><term> 无</term><description> 如果不存在 <see langword="xml:space" /> 范围，则此为默认值。</description></item><item><term> 默认</term><description> 当前范围为 <see langword="xml:space" />="default"。</description></item><item><term> 保留</term><description> 当前范围为 <see langword="xml:space" />="preserve"。</description></item></list></returns>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary>表示字符串的 XML 类型。 这允许以特定 XML 类型（例如 CDATA 节类型）的形式读取字符串。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary>CDATA 类型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary>ENTITIES 类型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary>ENTITY 类型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary>ENUMERATION 类型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary>ID 类型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary>IDREF 类型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary>IDREFS 类型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary>NCName 类型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary>NMTOKEN 类型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary>NMTOKENS 类型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary>无类型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary>NOTATION 类型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary>QName 类型。</summary>
    </member>
    <member name="T:System.Xml.XmlUrlResolver">
      <summary>解析由统一资源标识符 (URI) 命名的外部 XML 资源。</summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlUrlResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>将 URI 映射到包含实际资源的对象。</summary>
      <param name="absoluteUri">从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。</param>
      <param name="role">当前未使用。</param>
      <param name="ofObjectToReturn">要返回的对象的类型。 当前实现只返回 <see cref="T:System.IO.Stream" /> 对象。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> 既不是 <see langword="null" /> 也不是 <see langword="Stream" /> 类型。</exception>
      <exception cref="T:System.UriFormatException">指定的 URI 不是一个绝对 URI。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Exception">存在运行时错误（例如中断的服务器连接）。</exception>
      <returns>流对象；如果指定了流以外的类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>将 URI 异步映射到包含实际资源的对象。</summary>
      <param name="absoluteUri">从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。</param>
      <param name="role">当前未使用。</param>
      <param name="ofObjectToReturn">要返回的对象的类型。 当前实现只返回 <see cref="T:System.IO.Stream" /> 对象。</param>
      <returns>流对象；如果指定了流以外的类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)">
      <summary>从基 URI 和相对 URI 解析绝对 URI。</summary>
      <param name="baseUri">用于解析相对 URI 的基 URI。</param>
      <param name="relativeUri">要解析的 URI。 URI 可以是绝对的或相对的。 如果是绝对的，此值有效地替换 <paramref name="baseUri" /> 值。 如果是相对的，它与 <paramref name="baseUri" /> 组合以构成绝对 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 <see langword="null" /> 或 <paramref name="relativeUri" /> 为 <see langword="null" />。</exception>
      <returns>绝对 URI；如果不能解析相对 URI，则为 <see langword="null" /></returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.CachePolicy">
      <summary>获取或设置基础 <see cref="T:System.Net.WebRequest" /> 对象的缓存策略。</summary>
      <returns>基础 Web 请求的缓存策略。</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Credentials">
      <summary>设置用于对 Web 请求进行身份验证的凭据。</summary>
      <returns>用于对 Web 请求进行身份验证的凭据。 如果未设置该属性，则该值默认为 <see langword="null" />；即 <see langword="XmlUrlResolver" /> 没有用户凭据。</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Proxy">
      <summary>获取或设置基础 <see cref="T:System.Net.WebRequest" /> 对象的网络代理。</summary>
      <returns>用于访问 Internet 资源的 <see cref="T:System.Net.IWebProxy" />。</returns>
    </member>
    <member name="T:System.Xml.XmlValidatingReader">
      <summary>表示提供文档类型定义 (DTD)、XML 数据简化 (XDR) 架构和 XML 架构定义语言 (XSD) 验证的读取器。  
  
此类已过时。 从 .NET Framework 2.0 开始，建议你使用 <see cref="T:System.Xml.XmlReaderSettings" /> 类和 <see cref="Overload:System.Xml.XmlReader.Create" /> 方法创建一个验证的 XML 读取器。</summary>
    </member>
    <member name="E:System.Xml.XmlValidatingReader.ValidationEventHandler">
      <summary>设置事件处理程序以接收有关文档类型定义 (DTD)、XML 数据简化 (XDR) 架构和 XML 架构定义语言 (XSD) 架构验证错误的信息。</summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>用指定的值初始化 <see langword="XmlValidatingReader" /> 类的新实例。</summary>
      <param name="xmlFragment">包含要分析的 XML 片段的流。</param>
      <param name="fragType">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。 这确定片段可以包含的内容（请参见下表）。</param>
      <param name="context">要在其中分析 XML 片段的 <see cref="T:System.Xml.XmlParserContext" />。 这包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码、命名空间范围、当前的 <see langword="xml:lang" /> 和 <see langword="xml:space" /> 范围。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> 不是下表列出的节点类型之一。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>用指定的值初始化 <see langword="XmlValidatingReader" /> 类的新实例。</summary>
      <param name="xmlFragment">包含要分析的 XML 片段的字符串。</param>
      <param name="fragType">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。 这还确定了片段字符串可以包含的内容（请参见下表）。</param>
      <param name="context">要在其中分析 XML 片段的 <see cref="T:System.Xml.XmlParserContext" />。 这包括要使用的 <see cref="T:System.Xml.NameTable" />、编码、命名空间范围、当前 xml:lang 和 xml:space 范围。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> 不是下表列出的节点类型之一。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)">
      <summary>初始化 <see langword="XmlValidatingReader" /> 类的新实例，该类验证从给定的 <see cref="T:System.Xml.XmlReader" /> 返回的内容。</summary>
      <param name="reader">验证时要从中读取的 <see langword="XmlReader" />。 当前实现仅支持 <see cref="T:System.Xml.XmlTextReader" />。</param>
      <exception cref="T:System.ArgumentException">指定的读取器不是 <see langword="XmlTextReader" />。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Close">
      <summary>将 <see cref="P:System.Xml.XmlReader.ReadState" /> 更改为“已关闭”。</summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)">
      <summary>获取具有指定索引的属性的值。</summary>
      <param name="i">属性的索引。 索引是从零开始的。 （第一个属性的索引为 0。）</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 参数小于 0 或大于等于 <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />。</exception>
      <returns>指定的属性的值。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)">
      <summary>获取具有指定名称的属性的值。</summary>
      <param name="name">属性的限定名称。</param>
      <returns>指定的属性的值。 如果未找到该属性，则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)">
      <summary>获取具有指定的本地名称和命名空间统一资源标识符 (URI) 的属性的值。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <returns>指定的属性的值。 如果未找到该属性，则返回 <see langword="null" />。 此方法不移动读取器。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.HasLineInfo">
      <summary>获取一个值，该值指示该类是否可返回行信息。</summary>
      <returns>如果该类可以返回行信息，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)">
      <summary>解析当前元素的范围内的命名空间前缀。</summary>
      <param name="prefix">要解析其命名空间统一资源标识符 (URI) 的前缀。 若要匹配默认命名空间，请传递一个空字符串。</param>
      <returns>前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)">
      <summary>移动到具有指定索引的属性。</summary>
      <param name="i">属性的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 参数小于 0 或大于等于 <see cref="P:System.Xml.XmlReader.AttributeCount" />。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)">
      <summary>移动到具有指定名称的属性。</summary>
      <param name="name">属性的限定名称。</param>
      <returns>如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则读取器的位置未改变。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)">
      <summary>移动到具有指定的本地名称和命名空间统一资源标识符 (URI) 的属性。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <returns>如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则读取器的位置未改变。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToElement">
      <summary>移动到包含当前属性节点的元素。</summary>
      <returns>如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute">
      <summary>移动到第一个属性。</summary>
      <returns>如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />；否则为 <see langword="false" />（读取器的位置不更改）。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToNextAttribute">
      <summary>移动到下一个属性。</summary>
      <returns>如果存在下一个属性，则为 <see langword="true" />；如果没有其他属性，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Read">
      <summary>从流中读取下一个节点。</summary>
      <returns>如果成功读取了下一个节点，则为 <see langword="true" />；如果没有其他节点可读取，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadAttributeValue">
      <summary>将属性值分析为一个或多个 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 节点。</summary>
      <returns>如果有可返回的节点，则为 <see langword="true" />。  
  
 如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />。  
  
如果是空属性，如 <c>misc=""</c>，则返回 <see langword="true" />，同时返回值为 String.Empty 的单个节点。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>读取内容并返回 Base64 解码的二进制字节。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不支持 <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>读取内容并返回 BinHex 解码的二进制字节。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不支持 <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlValidatingReader" /> 实现不支持此方法。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>读取元素并对 Base64 内容进行解码。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不是元素节点。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlValidatingReader" /> 实现不支持此方法。</exception>
      <exception cref="T:System.Xml.XmlException">该元素包含混合内容。</exception>
      <exception cref="T:System.FormatException">无法将内容转换成请求的类型。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>读取元素并对 BinHex 内容进行解码。</summary>
      <param name="buffer">结果文本复制到的缓冲区。 此值不能为 <see langword="null" />。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。 此方法返回复制的实际字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前节点不是元素节点。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlValidatingReader" /> 实现不支持此方法。</exception>
      <exception cref="T:System.Xml.XmlException">该元素包含混合内容。</exception>
      <exception cref="T:System.FormatException">无法将内容转换成请求的类型。</exception>
      <returns>写入缓冲区的字节数。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadString">
      <summary>将元素或文本节点的内容读取为一个字符串。</summary>
      <returns>该元素或文本节点的内容。 如果读取器定位在元素或文本节点以外的位置，或者当前上下文中没有其他文本内容可返回，则这可以是空字符串。  
  
 <block subset="none" type="note"><para>  
 文本节点可以是元素或属性文本节点。</para></block></returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadTypedValue">
      <summary>获取指定 XML 架构定义语言 (XSD) 类型的公共语言运行时类型。</summary>
      <returns>指定 XML 架构类型的公共语言运行时类型。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ResolveEntity">
      <summary>解析 <see langword="EntityReference" /> 节点的实体引用。</summary>
      <exception cref="T:System.InvalidOperationException">读取器不是定位在 <see langword="EntityReference" /> 节点上。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。</summary>
      <param name="scope">一个标识读取器范围的 <see cref="T:System.Xml.XmlNamespaceScope" /> 对象。</param>
      <returns>一个 <see cref="T:System.Collections.IDictionary" /> 对象，它用于标识范围中命名空间。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。</summary>
      <param name="prefix">命名空间前缀。</param>
      <returns>一个字符串值，它包含与前缀关联的命名空间 URI。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。</summary>
      <param name="namespaceName">与前缀关联的命名空间。</param>
      <returns>一个字符串值，它包含与 <paramref name="namespaceName" /> 关联的命名空间前缀。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.AttributeCount">
      <summary>获取当前节点上的属性数目。</summary>
      <returns>当前节点上的属性数目。 该数目包括默认属性。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.BaseURI">
      <summary>获取当前节点的基 URI。</summary>
      <returns>当前节点的基 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanReadBinaryContent">
      <summary>获取一个值，该值指示 <see cref="T:System.Xml.XmlValidatingReader" /> 是否实现二进制内容读取方法。</summary>
      <returns>如果实现了二进制内容读取方法，则为 <see langword="true" />；否则为 <see langword="false" />。 <see cref="T:System.Xml.XmlValidatingReader" /> 类返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanResolveEntity">
      <summary>获取一个值，该值指示此读取器是否可以分析和解析实体。</summary>
      <returns>如果此读取器可以分析和解析实体，则为 <see langword="true" />；否则为 <see langword="false" />。 <see langword="XmlValidatingReader" /> 始终返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Depth">
      <summary>获取 XML 文档中当前节点的深度。</summary>
      <returns>XML 文档中当前节点的深度。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Encoding">
      <summary>获取文档的编码属性。</summary>
      <returns>编码值。 如果不存在任何编码属性且不存在字节顺序标记，则这将默认为 UTF-8。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EntityHandling">
      <summary>获取或设置一个值，该值指定读取器处理实体的方式。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">指定了无效值。</exception>
      <returns>
        <see cref="T:System.Xml.EntityHandling" /> 值之一。 如果未指定 <see langword="EntityHandling" />，则它将默认为 EntityHandling.ExpandEntities。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EOF">
      <summary>获取一个值，该值指示读取器是否定位在流结尾。</summary>
      <returns>如果此读取器定位在流的结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.HasValue">
      <summary>获取一个值，该值指示当前节点是否可以具有 String.Empty 以外的 <see cref="P:System.Xml.XmlValidatingReader.Value" />。</summary>
      <returns>如果读取器当前定位在的节点可以具有 <see langword="Value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsDefault">
      <summary>获取一个值，该值指示当前节点是否是从文档类型定义 (DTD) 或架构中定义的默认值生成的属性。</summary>
      <returns>如果当前节点是其值从 DTD 或架构中定义的默认值生成的属性，则为 <see langword="true" />；如果属性值为显式设置的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsEmptyElement">
      <summary>获取一个值，该值指示当前节点是否为空元素（例如 <c>&lt;MyElement/&gt;</c>）。</summary>
      <returns>
        <see langword="true" /> 如果当前节点是一个元素 (<see cref="P:System.Xml.XmlValidatingReader.NodeType" /> 等于 <see langword="XmlNodeType.Element" /> 末尾) ， <c>/&gt;</c> 则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LineNumber">
      <summary>获取当前行号。</summary>
      <returns>当前行号。 此属性的起始值为 1。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LinePosition">
      <summary>获取当前行位置。</summary>
      <returns>当前行位置。 此属性的起始值为 1。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LocalName">
      <summary>获取当前节点的本地名称。</summary>
      <returns>移除了前缀的当前节点的名称。 例如， <see langword="LocalName" /><see langword="book" /> 对于元素<c> &lt; bk： &gt; book</c>。  
  
对于没有名称的节点类型（如 <see langword="Text" />、<see langword="Comment" /> 等），该属性返回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Name">
      <summary>获取当前节点的限定名称。</summary>
      <returns>当前节点的限定名称。 例如， <see langword="Name" /><see langword="bk:book" /> 对于元素<c> &lt; bk： &gt; book</c>。  
  
返回的名称取决于节点的 <see cref="P:System.Xml.XmlValidatingReader.NodeType" />。 下列节点类型返回所列的值。 所有其他节点类型返回空字符串。  
  
 <list type="table"><listheader><term> 节点类型</term><description> name</description></listheader><item><term><see langword="Attribute" /></term><description> 属性名。</description></item><item><term><see langword="DocumentType" /></term><description> 文档类型名称。</description></item><item><term><see langword="Element" /></term><description> 标记名称。</description></item><item><term><see langword="EntityReference" /></term><description> 引用的实体的名称。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 处理指令的目标。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 字符串 <see langword="xml" />。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Namespaces">
      <summary>获取或设置一个值，该值指示是否进行命名空间支持。</summary>
      <returns>要进行命名空间支持，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NamespaceURI">
      <summary>对于读取器定位到的节点，按照万维网联合会 (W3C) 命名空间规范的定义，获取该节点的命名空间统一资源标识符 (URI)。</summary>
      <returns>当前节点的命名空间 URI；否则为空字符串。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NameTable">
      <summary>获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see langword="XmlNameTable" />，它使你能够获取节点内字符串的原子化版本。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，表示当前节点的类型。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Prefix">
      <summary>获取与当前节点关联的命名空间前缀。</summary>
      <returns>与当前节点关联的命名空间前缀。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.QuoteChar">
      <summary>获取用于括起属性节点的值的引号字符。</summary>
      <returns>用于括起属性节点的值的引号字符（" 或 '）。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Reader">
      <summary>获取用于构造此 <see langword="XmlValidatingReader" /> 的 <see cref="T:System.Xml.XmlReader" />。</summary>
      <returns>构造函数中指定的 <see langword="XmlReader" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ReadState">
      <summary>获取读取器的状态。</summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 值之一。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Schemas">
      <summary>获取一个用于验证的 <see cref="T:System.Xml.Schema.XmlSchemaCollection" />。</summary>
      <returns>用于验证的 <see langword="XmlSchemaCollection" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.SchemaType">
      <summary>获取架构类型对象。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，这取决于节点值是内置 XML 架构定义语言 (XSD) 类型还是用户定义的 simpleType 或 complexType；如果当前节点没有架构类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ValidationType">
      <summary>获取或设置一个值，该值指示要执行的验证的类型。</summary>
      <exception cref="T:System.InvalidOperationException">在调用了 Read 之后设置该属性。</exception>
      <returns>
        <see cref="T:System.Xml.ValidationType" /> 值之一。 如果未设置此属性，则它默认为 ValidationType.Auto。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Value">
      <summary>获取当前节点的文本值。</summary>
      <returns>返回的值取决于节点的 <see cref="P:System.Xml.XmlValidatingReader.NodeType" />。 下表列出具有要返回的值的节点类型。 所有其他节点类型返回 String.Empty。  
  
 <list type="table"><listheader><term> 节点类型</term><description> “值”</description></listheader><item><term><see langword="Attribute" /></term><description> 属性的值。</description></item><item><term><see langword="CDATA" /></term><description> CDATA 节的内容。</description></item><item><term><see langword="Comment" /></term><description> 注释的内容。</description></item><item><term><see langword="DocumentType" /></term><description> 内部子集。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 全部内容（不包括指令目标）。</description></item><item><term><see langword="SignificantWhitespace" /></term><description> 混合内容模型中标记之间的空白。</description></item><item><term><see langword="Text" /></term><description> 文本节点的内容。</description></item><item><term><see langword="Whitespace" /></term><description> 标记之间的空白。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 声明的内容。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlLang">
      <summary>获取当前 <see langword="xml:lang" /> 范围。</summary>
      <returns>当前 <see langword="xml:lang" /> 范围。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlResolver">
      <summary>设置用于解析外部文档类型定义 (DTD) 和架构位置引用的 <see cref="T:System.Xml.XmlResolver" />。 <see langword="XmlResolver" /> 用于处理 XML 架构定义语言 (XSD) 架构中找到的任何 import 或 include 元素。</summary>
      <returns>要使用的 <see langword="XmlResolver" />。 如果设置为 <see langword="null" />，则不解析外部资源。  
  
在 .NET Framework 的 1.1 版本中，调用方必须受到完全信任才能指定 <see langword="XmlResolver" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlSpace">
      <summary>获取当前 <see langword="xml:space" /> 范围。</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 值之一。 如果不存在任何 <see langword="xml:space" /> 范围，则该属性默认值为 <see langword="XmlSpace.None" />。</returns>
    </member>
    <member name="T:System.Xml.XmlWhitespace">
      <summary>表示元素内容中的空白。</summary>
    </member>
    <member name="M:System.Xml.XmlWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlWhitespace" /> 类的新实例。</summary>
      <param name="strData">节点中的空白字符。</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 对象。</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)">
      <summary>创建此节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。 对于空白节点，克隆的节点将始终包含数据值，而不管参数的设置如何。</param>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" /> 中。</summary>
      <param name="w">要保存到其中的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>将节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要保存到其中的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlWhitespace.LocalName">
      <summary>获取节点的本地名称。</summary>
      <returns>对于 <see langword="XmlWhitespace" /> 节点，此属性返回 <see langword="#whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Name">
      <summary>获取节点的限定名称。</summary>
      <returns>对于 <see langword="XmlWhitespace" /> 节点，此属性返回 <see langword="#whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.NodeType">
      <summary>获取节点的类型。</summary>
      <returns>对于 <see langword="XmlWhitespace" /> 节点，该值为 <see cref="F:System.Xml.XmlNodeType.Whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.ParentNode">
      <summary>获取当前节点的父节点。</summary>
      <returns>当前节点的 <see cref="T:System.Xml.XmlNode" /> 父节点。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.PreviousText">
      <summary>获取紧接在该节点之前的文本节点。</summary>
      <returns>返回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Value">
      <summary>获取或设置节点的值。</summary>
      <exception cref="T:System.ArgumentException">将 <see cref="P:System.Xml.XmlWhitespace.Value" /> 设置为无效空白字符。</exception>
      <returns>在节点中找到空白字符。</returns>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary>表示一个写入器，该写入器提供一种快速、非缓存和只进方式以生成包含 XML 数据的流或文件。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlWriter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary>当在派生类中被重写时，将关闭此流和基础流。</summary>
      <exception cref="T:System.InvalidOperationException">在调用 <see langword="Close" /> 之后执行要编写其他输出的调用，或者此调用的结果是无效的 XML 文档。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
      <summary>使用指定的流创建一个新的 <see cref="T:System.Xml.XmlWriter" /> 实例。</summary>
      <param name="output">要对其写入的流。 <see cref="T:System.Xml.XmlWriter" /> 编写 XML 1.0 文本语法并将其追加到指定的流中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 值为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
      <summary>使用流和 <see cref="T:System.Xml.XmlWriter" /> 对象创建一个新的 <see cref="T:System.Xml.XmlWriterSettings" /> 实例。</summary>
      <param name="output">要对其写入的流。 <see cref="T:System.Xml.XmlWriter" /> 编写 XML 1.0 文本语法并将其追加到指定的流中。</param>
      <param name="settings">用于配置新 <see cref="T:System.Xml.XmlWriterSettings" /> 实例的 <see cref="T:System.Xml.XmlWriter" /> 对象。 如果这是 <see langword="null" />，则使用具有默认设置的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
如果将 <see cref="T:System.Xml.XmlWriter" /> 用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性获取具有正确设置的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。 这样可以确保所创建的 <see cref="T:System.Xml.XmlWriter" /> 对象的输出设置是正确的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 值为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 创建一个新的 <see cref="T:System.IO.TextWriter" /> 实例。</summary>
      <param name="output">要写入的 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.XmlWriter" /> 编写 XML 1.0 文本语法，并将该语法追加到指定 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 值为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.IO.TextWriter" /> 对象创建一个新的 <see cref="T:System.Xml.XmlWriterSettings" /> 实例。</summary>
      <param name="output">要写入的 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.XmlWriter" /> 编写 XML 1.0 文本语法，并将该语法追加到指定 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="settings">用于配置新 <see cref="T:System.Xml.XmlWriterSettings" /> 实例的 <see cref="T:System.Xml.XmlWriter" /> 对象。 如果这是 <see langword="null" />，则使用具有默认设置的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
如果将 <see cref="T:System.Xml.XmlWriter" /> 用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性获取具有正确设置的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。 这样可以确保所创建的 <see cref="T:System.Xml.XmlWriter" /> 对象的输出设置是正确的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 值为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String)">
      <summary>使用指定的文件名创建一个新的 <see cref="T:System.Xml.XmlWriter" /> 实例。</summary>
      <param name="outputFileName">要对其写入的文件。 <see cref="T:System.Xml.XmlWriter" /> 在指定路径上创建一个文件，并采用 XML 1.0 文本语法写入该文件。 <paramref name="outputFileName" /> 必须为文件系统路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 值为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)">
      <summary>使用文件名和 <see cref="T:System.Xml.XmlWriter" /> 对象创建一个新的 <see cref="T:System.Xml.XmlWriterSettings" /> 实例。</summary>
      <param name="outputFileName">要对其写入的文件。 <see cref="T:System.Xml.XmlWriter" /> 在指定路径上创建一个文件，并采用 XML 1.0 文本语法写入该文件。 <paramref name="outputFileName" /> 必须为文件系统路径。</param>
      <param name="settings">用于配置新 <see cref="T:System.Xml.XmlWriterSettings" /> 实例的 <see cref="T:System.Xml.XmlWriter" /> 对象。 如果这是 <see langword="null" />，则使用具有默认设置的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
如果将 <see cref="T:System.Xml.XmlWriter" /> 用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性获取具有正确设置的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。 这样可以确保所创建的 <see cref="T:System.Xml.XmlWriter" /> 对象的输出设置是正确的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 值为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 创建一个新的 <see cref="T:System.Text.StringBuilder" /> 实例。</summary>
      <param name="output">要写入的 <see cref="T:System.Text.StringBuilder" />。 由 <see cref="T:System.Xml.XmlWriter" /> 写入的内容被追加到 <see cref="T:System.Text.StringBuilder" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> 值为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Text.StringBuilder" /> 对象创建一个新的 <see cref="T:System.Xml.XmlWriterSettings" /> 实例。</summary>
      <param name="output">要写入的 <see cref="T:System.Text.StringBuilder" />。 由 <see cref="T:System.Xml.XmlWriter" /> 写入的内容被追加到 <see cref="T:System.Text.StringBuilder" />。</param>
      <param name="settings">用于配置新 <see cref="T:System.Xml.XmlWriterSettings" /> 实例的 <see cref="T:System.Xml.XmlWriter" /> 对象。 如果这是 <see langword="null" />，则使用具有默认设置的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
如果将 <see cref="T:System.Xml.XmlWriter" /> 用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性获取具有正确设置的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。 这样可以确保所创建的 <see cref="T:System.Xml.XmlWriter" /> 对象的输出设置是正确的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> 值为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 对象创建一个新的 <see cref="T:System.Xml.XmlWriter" /> 实例。</summary>
      <param name="output">要用作基础编写器的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 值为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象，是指定的 <see cref="T:System.Xml.XmlWriter" /> 对象周围的包装。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Xml.XmlWriter" /> 对象创建一个新的 <see cref="T:System.Xml.XmlWriterSettings" /> 实例。</summary>
      <param name="output">要用作基础编写器的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="settings">用于配置新 <see cref="T:System.Xml.XmlWriterSettings" /> 实例的 <see cref="T:System.Xml.XmlWriter" /> 对象。 如果这是 <see langword="null" />，则使用具有默认设置的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
如果将 <see cref="T:System.Xml.XmlWriter" /> 用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性获取具有正确设置的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。 这样可以确保所创建的 <see cref="T:System.Xml.XmlWriter" /> 对象的输出设置是正确的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 值为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象，是指定的 <see cref="T:System.Xml.XmlWriter" /> 对象周围的包装。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose">
      <summary>释放 <see cref="T:System.Xml.XmlWriter" /> 类的当前实例所使用的所有资源。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Xml.XmlWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.DisposeAsync">
      <summary>以异步方式执行与释放或重置非托管资源相关的应用程序定义的任务。</summary>
      <returns>一个表示异步释放操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.DisposeAsyncCore">
      <summary>以异步方式执行与释放或重置托管资源相关的应用程序定义的任务。</summary>
      <returns>一个表示异步释放操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary>当在派生类中被重写时，将缓冲区中的所有内容刷新到基础流，并同时刷新基础流。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.FlushAsync">
      <summary>将缓冲区中的所有内容异步刷新到基础流，并同时刷新基础流。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="Flush" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary>当在派生类中被重写时，返回在当前命名空间范围中为该命名空间 URI 定义的最近的前缀。</summary>
      <param name="ns">要查找其前缀的命名空间 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>匹配的前缀；如果当前范围内未找到匹配的命名空间 URI，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary>当在派生类中被重写时，写出在 <see cref="T:System.Xml.XmlReader" /> 中当前位置找到的所有属性。</summary>
      <param name="reader">从其中复制属性的 <see langword="XmlReader" />。</param>
      <param name="defattr">如果为 <see langword="true" />，则从 <see langword="XmlReader" /> 中复制默认属性；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.XmlException">读取器不是定位在 <see langword="element" />、<see langword="attribute" /> 或 <see langword="XmlDeclaration" /> 节点上。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)">
      <summary>在 <see cref="T:System.Xml.XmlReader" /> 中的当前位置异步写出找到的所有属性。</summary>
      <param name="reader">从其中复制属性的 <see langword="XmlReader" />。</param>
      <param name="defattr">如果为 <see langword="true" />，则从 <see langword="XmlReader" /> 中复制默认属性；否则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteAttributes" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary>当在派生类中被重写时，写出具有指定的本地名称和值的属性。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="value">属性的值。</param>
      <exception cref="T:System.InvalidOperationException">编写器的状态不是 <see langword="WriteState.Element" /> 或者编写器已关闭。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 或 <see langword="xml:lang" /> 属性值无效。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary>当在派生类中被重写时，写入具有指定的本地名称、命名空间 URI 和值的属性。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="ns">与属性关联的命名空间 URI。</param>
      <param name="value">属性的值。</param>
      <exception cref="T:System.InvalidOperationException">编写器的状态不是 <see langword="WriteState.Element" /> 或者编写器已关闭。

- 或 - 
在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 或 <see langword="xml:lang" /> 属性值无效。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary>当在派生类中被重写时，写出具有指定的前缀、本地名称、命名空间 URI 和值的属性。</summary>
      <param name="prefix">属性的命名空间前缀。</param>
      <param name="localName">属性的本地名称。</param>
      <param name="ns">属性的命名空间 URI。</param>
      <param name="value">属性的值。</param>
      <exception cref="T:System.InvalidOperationException">编写器的状态不是 <see langword="WriteState.Element" /> 或者编写器已关闭。

- 或 - 
在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 或 <see langword="xml:lang" /> 属性值无效。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="localName" /> 或 <paramref name="ns" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)">
      <summary>异步写出具有指定前缀、本地名称、命名空间 URI 和值的属性。</summary>
      <param name="prefix">属性的命名空间前缀。</param>
      <param name="localName">属性的本地名称。</param>
      <param name="ns">属性的命名空间 URI。</param>
      <param name="value">属性的值。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 - 
调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteAttributeString" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>当在派生类中被重写时，将指定的二进制字节编码为 Base64 并写出结果文本。</summary>
      <param name="buffer">要进行编码的字节数组。</param>
      <param name="index">缓冲区中指示要写入字节的起始位置的位置。</param>
      <param name="count">要写入的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
- 或 - 
缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>将指定的二进制字节异步编码为 Base64 并写出结果文本。</summary>
      <param name="buffer">要进行编码的字节数组。</param>
      <param name="index">缓冲区中指示要写入字节的起始位置的位置。</param>
      <param name="count">要写入的字节数。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteBase64" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>当在派生类中被重写时，将指定的二进制字节编码为 <see langword="BinHex" /> 并写出结果文本。</summary>
      <param name="buffer">要进行编码的字节数组。</param>
      <param name="index">缓冲区中指示要写入字节的起始位置的位置。</param>
      <param name="count">要写入的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">编写器已关闭或处于错误状态。
- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
- 或 - 
缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>将指定的二进制字节异步编码为 <see langword="BinHex" /> 并写出结果文本。</summary>
      <param name="buffer">要进行编码的字节数组。</param>
      <param name="index">缓冲区中指示要写入字节的起始位置的位置。</param>
      <param name="count">要写入的字节数。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteBinHex" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary>当在派生类中被重写时，写出包含指定文本的 &lt;![CDATA[...]]&gt; 块。</summary>
      <param name="text">要放置在 CDATA 块中的文本。</param>
      <exception cref="T:System.ArgumentException">该文本将导致格式不正确的 XML 文档。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)">
      <summary>异步写出一个包含指定文本的 &lt;![CDATA[...]]&gt; 块。</summary>
      <param name="text">要放置在 CDATA 块中的文本。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteCData" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary>当在派生类中被重写时，为指定的 Unicode 字符值强制生成字符实体。</summary>
      <param name="ch">为其生成字符实体的 Unicode 字符。</param>
      <exception cref="T:System.ArgumentException">该字符在代理项对字符范围 <see langword="0xd800" /> - <see langword="0xdfff" /> 内。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)">
      <summary>为指定的 Unicode 字符值异步强制生成字符实体。</summary>
      <param name="ch">为其生成字符实体的 Unicode 字符。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteCharEntity" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>当在派生类中被重写时，以每次一个缓冲区的方式写入文本。</summary>
      <param name="buffer">包含要写入的文本的字符数组。</param>
      <param name="index">缓冲区中指示要写入文本的起始位置的位置。</param>
      <param name="count">要写入的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
- 或 - 
缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />；此调用导致代理项对字符被拆分或写入无效的代理项对。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 参数值无效。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以每次一个缓冲区的方式异步写入文本。</summary>
      <param name="buffer">包含要写入的文本的字符数组。</param>
      <param name="index">缓冲区中指示要写入文本的起始位置的位置。</param>
      <param name="count">要写入的字符数。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteChars" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary>当在派生类中被重写时，写出包含指定文本的注释 &lt;!--...--&gt;。</summary>
      <param name="text">要放在注释内的文本。</param>
      <exception cref="T:System.ArgumentException">该文本将导致格式不正确的 XML 文档。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)">
      <summary>异步写出一个包含指定文本的注释 &lt;!--...--&gt;。</summary>
      <param name="text">要放在注释内的文本。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteComment" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>当在派生类中被重写时，写出具有指定名称和可选属性的 DOCTYPE 声明。</summary>
      <param name="name">DOCTYPE 的名称。 它必须是非空的。</param>
      <param name="pubid">如果非 null，则它还编写 PUBLIC "pubid" "sysid"，这里的 <paramref name="pubid" /> 和 <paramref name="sysid" /> 用给定参数的值替换。</param>
      <param name="sysid">如果 <paramref name="pubid" /> 为 <see langword="null" /> 而 <paramref name="sysid" /> 非 null，则它编写 SYSTEM "sysid"，这里的 <paramref name="sysid" /> 用此参数的值替换。</param>
      <param name="subset">如果非 null，则它写入 [subset]，其中 subset 替换为此自变量的值。</param>
      <exception cref="T:System.InvalidOperationException">在序言码外部（根元素之后）调用了此方法。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的值将导致无效的 XML。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)">
      <summary>异步写入具有指定名称和可选属性的 DOCTYPE 声明。</summary>
      <param name="name">DOCTYPE 的名称。 它必须是非空的。</param>
      <param name="pubid">如果非 null，则它还编写 PUBLIC "pubid" "sysid"，这里的 <paramref name="pubid" /> 和 <paramref name="sysid" /> 用给定参数的值替换。</param>
      <param name="sysid">如果 <paramref name="pubid" /> 为 <see langword="null" /> 而 <paramref name="sysid" /> 非 null，则它编写 SYSTEM "sysid"，这里的 <paramref name="sysid" /> 用此参数的值替换。</param>
      <param name="subset">如果非 null，则它写入 [subset]，其中 subset 替换为此参数的值。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteDocType" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary>写入具有指定的本地名称和值的元素。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="value">元素的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 值是 <see langword="null" /> 或空字符串。  
  
- 或 - 
参数值无效。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">缓冲区中有一个字符是有效的 XML 字符，但对于输出编码是无效的。 例如，如果输出编码为 ASCII，应该仅对元素和特性名使用从 0 到 127 范围内的字符。 无效的字符可能位于此方法的参数中，或者位于以前要写入缓冲区的方法的参数中。 如果可能，此类字符将使用字符实体引用进行转义（例如，在文本节点或特性值中）。 但是，不允许在元素名、特性名、注释、处理指令和 CDATA 节中使用字符实体引用。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>写入具有指定的本地名称、命名空间 URI 和值的元素。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="ns">与元素关联的命名空间 URI。</param>
      <param name="value">元素的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 值是 <see langword="null" /> 或空字符串。  
  
- 或 - 
参数值无效。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">缓冲区中有一个字符是有效的 XML 字符，但对于输出编码是无效的。 例如，如果输出编码为 ASCII，应该仅对元素和特性名使用从 0 到 127 范围内的字符。 无效的字符可能位于此方法的参数中，或者位于以前要写入缓冲区的方法的参数中。 如果可能，此类字符将使用字符实体引用进行转义（例如，在文本节点或特性值中）。 但是，不允许在元素名、特性名、注释、处理指令和 CDATA 节中使用字符实体引用。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
      <summary>写入具有指定的前缀、本地名称、命名空间 URI 和值的元素。</summary>
      <param name="prefix">元素的前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="ns">元素的命名空间 URI。</param>
      <param name="value">元素的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 值是 <see langword="null" /> 或空字符串。  
  
- 或 - 
参数值无效。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">缓冲区中有一个字符是有效的 XML 字符，但对于输出编码是无效的。 例如，如果输出编码为 ASCII，应该仅对元素和特性名使用从 0 到 127 范围内的字符。 无效的字符可能位于此方法的参数中，或者位于以前要写入缓冲区的方法的参数中。 如果可能，此类字符将使用字符实体引用进行转义（例如，在文本节点或特性值中）。 但是，不允许在元素名、特性名、注释、处理指令和 CDATA 节中使用字符实体引用。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)">
      <summary>异步写入具有指定的前缀、本地名称、命名空间 URI 和值的元素。</summary>
      <param name="prefix">元素的前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="ns">元素的命名空间 URI。</param>
      <param name="value">元素的值。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteElementString" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary>当在派生类中被重写时，关闭上一个 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 调用。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttributeAsync">
      <summary>异步关闭前一个 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 调用。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteEndAttribute" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary>当在派生类中被重写时，关闭任何打开的元素或属性并将写入器重新设置为起始状态。</summary>
      <exception cref="T:System.ArgumentException">XML 文档无效。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocumentAsync">
      <summary>异步关闭任何打开的元素或属性并将写入器重新设置为起始状态。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteEndDocument" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary>当在派生类中被重写时，关闭一个元素并弹出相应的命名空间范围。</summary>
      <exception cref="T:System.InvalidOperationException">这导致无效的 XML 文档。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElementAsync">
      <summary>异步关闭一个元素并弹出相应的命名空间范围。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteEndElement" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary>当在派生类中被重写时，按 <see langword="&amp;name;" /> 写出实体引用。</summary>
      <param name="name">实体引用的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)">
      <summary>按 <see langword="&amp;name;" /> 异步写出实体引用。</summary>
      <param name="name">实体引用的名称。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteEntityRef" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary>当在派生类中被重写时，关闭一个元素并弹出相应的命名空间范围。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElementAsync">
      <summary>异步关闭一个元素并弹出相应的命名空间范围。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteFullEndElement" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary>当在派生类中被重写时，写出指定的名称，确保它是符合 W3C XML 1.0 建议 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) 的有效名称。</summary>
      <param name="name">要写入的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的 XML 名称，或者 <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNameAsync(System.String)">
      <summary>异步写出指定的名称，确保它是符合 W3C XML 1.0 建议 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) 的有效名称。</summary>
      <param name="name">要写入的名称。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteName" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary>当在派生类中被重写时，写出指定的名称，确保它是符合 W3C XML 1.0 建议 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) 的有效 NmToken。</summary>
      <param name="name">要写入的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的 NmToken；或者 <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)">
      <summary>异步写出指定的名称，确保它是符合 W3C XML 1.0 建议 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) 的有效 NmToken。</summary>
      <param name="name">要写入的名称。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteNmToken" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>当在派生类中被重写时，将全部内容从读取器复制到写入器并将读取器移动到下一个同级的开始位置。</summary>
      <param name="reader">要从其中进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr">如果为 <see langword="true" />，则从 <see langword="XmlReader" /> 中复制默认属性；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> 包含无效字符。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary>将所有内容从 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象复制到编写器。 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置保持不变。</summary>
      <param name="navigator">要复制其内容的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="defattr">如果复制默认特性，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)">
      <summary>将所有内容从读取器异步复制到写入器并将读取器移动到下一个同级的开头。</summary>
      <param name="reader">要从其中进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr">如果为 <see langword="true" />，则从 <see langword="XmlReader" /> 中复制默认属性；否则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteNode" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary>从编写器的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象中异步复制所有内容。 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置保持不变。</summary>
      <param name="navigator">要复制其内容的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="defattr">如果复制默认特性，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteNode" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>当在派生类中被重写时，写出在名称和文本之间带有空格的处理指令，如下所示：&lt;?name text?&gt;。</summary>
      <param name="name">处理指令的名称。</param>
      <param name="text">要包括在处理指令中的文本。</param>
      <exception cref="T:System.ArgumentException">该文本将导致格式不正确的 XML 文档。  
  
 <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。  
  
调用了 <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> 后，使用此方法创建 XML 声明。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)">
      <summary>异步写出在名称和文本之间有空格的处理指令，如下所示：&lt;?name text?&gt;。</summary>
      <param name="name">处理指令的名称。</param>
      <param name="text">要包括在处理指令中的文本。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteProcessingInstruction" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary>当在派生类中被重写时，写出命名空间限定的名称。 此方法查找位于给定命名空间范围内的前缀。</summary>
      <param name="localName">要写入的本地名称。</param>
      <param name="ns">名称的命名空间 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。  
  
 <paramref name="localName" /> 不是有效的名称。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)">
      <summary>异步写出命名空间限定的名称。 此方法查找位于给定命名空间范围内的前缀。</summary>
      <param name="localName">要写入的本地名称。</param>
      <param name="ns">名称的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteQualifiedName" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>当在派生类中被重写时，从字符缓冲区手动写入原始标记。</summary>
      <param name="buffer">包含要写入的文本的字符数组。</param>
      <param name="index">缓冲区中的位置，指示要写入文本的起始位置。</param>
      <param name="count">要写入的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
- 或 - 
缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary>当在派生类中被重写时，从字符串手动写入原始标记。</summary>
      <param name="data">包含要写入的文本的字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)">
      <summary>从字符缓冲区手动异步写入原始标记。</summary>
      <param name="buffer">包含要写入的文本的字符数组。</param>
      <param name="index">缓冲区中的位置，指示要写入文本的起始位置。</param>
      <param name="count">要写入的字符数。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteRaw" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.String)">
      <summary>从字符串手动异步写入原始标记。</summary>
      <param name="data">包含要写入的文本的字符串。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteRaw" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
      <summary>写入具有指定本地名称的属性的开头。</summary>
      <param name="localName">属性的本地名称。</param>
      <exception cref="T:System.InvalidOperationException">编写器已关闭。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Text.EncoderFallbackException">缓冲区中有一个字符是有效的 XML 字符，但对于输出编码是无效的。 例如，如果输出编码为 ASCII，应该仅对元素和特性名使用从 0 到 127 范围内的字符。 无效的字符可能位于此方法的参数中，或者位于以前要写入缓冲区的方法的参数中。 如果可能，此类字符将使用字符实体引用进行转义（例如，在文本节点或特性值中）。 但是，不允许在元素名、特性名、注释、处理指令和 CDATA 节中使用字符实体引用。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary>写入具有指定本地名称和命名空间 URI 的属性的开头。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="ns">属性的命名空间 URI。</param>
      <exception cref="T:System.Text.EncoderFallbackException">缓冲区中有一个字符是有效的 XML 字符，但对于输出编码是无效的。 例如，如果输出编码为 ASCII，应该仅对元素和特性名使用从 0 到 127 范围内的字符。 无效的字符可能位于此方法的参数中，或者位于以前要写入缓冲区的方法的参数中。 如果可能，此类字符将使用字符实体引用进行转义（例如，在文本节点或特性值中）。 但是，不允许在元素名、特性名、注释、处理指令和 CDATA 节中使用字符实体引用。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>当在派生类中被重写时，写入具有指定的前缀、本地名称和命名空间 URI 的属性的开头。</summary>
      <param name="prefix">属性的命名空间前缀。</param>
      <param name="localName">属性的本地名称。</param>
      <param name="ns">属性的命名空间 URI。</param>
      <exception cref="T:System.Text.EncoderFallbackException">缓冲区中有一个字符是有效的 XML 字符，但对于输出编码是无效的。 例如，如果输出编码为 ASCII，应该仅对元素和特性名使用从 0 到 127 范围内的字符。 无效的字符可能位于此方法的参数中，或者位于以前要写入缓冲区的方法的参数中。 如果可能，此类字符将使用字符实体引用进行转义（例如，在文本节点或特性值中）。 但是，不允许在元素名、特性名、注释、处理指令和 CDATA 节中使用字符实体引用。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)">
      <summary>异步写入具有指定前缀、本地名称和命名空间 URI 的属性的开头。</summary>
      <param name="prefix">属性的命名空间前缀。</param>
      <param name="localName">属性的本地名称。</param>
      <param name="ns">属性的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteStartAttribute" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary>当在派生类中被重写时，写入版本为“1.0”的 XML 声明。</summary>
      <exception cref="T:System.InvalidOperationException">这不是在构造函数后调用的第一个写方法。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary>当在派生类中被重写时，写入版本为“1.0”的 XML 声明和独立的属性。</summary>
      <param name="standalone">如果为 <see langword="true" />，则它将写入"standalone=yes"；如果为 <see langword="false" />，则它将写入"standalone=no"。</param>
      <exception cref="T:System.InvalidOperationException">这不是在构造函数后调用的第一个写方法。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync">
      <summary>异步写入版本为“1.0”的 XML 声明。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteStartDocument" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)">
      <summary>异步写入版本为“1.0”的 XML 声明和独立的属性。</summary>
      <param name="standalone">如果为 <see langword="true" />，则它将写入"standalone=yes"；如果为 <see langword="false" />，则它将写入"standalone=no"。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteStartDocument" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary>当在派生类中被重写时，写出具有指定的本地名称的开始标记。</summary>
      <param name="localName">元素的本地名称。</param>
      <exception cref="T:System.InvalidOperationException">编写器已关闭。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Text.EncoderFallbackException">缓冲区中有一个字符是有效的 XML 字符，但对于输出编码是无效的。 例如，如果输出编码为 ASCII，应该仅对元素和特性名使用从 0 到 127 范围内的字符。 无效的字符可能位于此方法的参数中，或者位于以前要写入缓冲区的方法的参数中。 如果可能，此类字符将使用字符实体引用进行转义（例如，在文本节点或特性值中）。 但是，不允许在元素名、特性名、注释、处理指令和 CDATA 节中使用字符实体引用。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary>当在派生类中被重写时，写入指定的开始标记并将其与给定的命名空间关联起来。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="ns">与元素关联的命名空间 URI。 如果此命名空间已在范围中并具有关联的前缀，则写入器也将自动写入该前缀。</param>
      <exception cref="T:System.InvalidOperationException">编写器已关闭。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Text.EncoderFallbackException">缓冲区中有一个字符是有效的 XML 字符，但对于输出编码是无效的。 例如，如果输出编码为 ASCII，应该仅对元素和特性名使用从 0 到 127 范围内的字符。 无效的字符可能位于此方法的参数中，或者位于以前要写入缓冲区的方法的参数中。 如果可能，此类字符将使用字符实体引用进行转义（例如，在文本节点或特性值中）。 但是，不允许在元素名、特性名、注释、处理指令和 CDATA 节中使用字符实体引用。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>当在派生类中被重写时，写入指定的开始标记并将其与给定的命名空间和前缀关联起来。</summary>
      <param name="prefix">元素的命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="ns">与元素关联的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">编写器已关闭。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <exception cref="T:System.Text.EncoderFallbackException">缓冲区中有一个字符是有效的 XML 字符，但对于输出编码是无效的。 例如，如果输出编码为 ASCII，应该仅对元素和特性名使用从 0 到 127 范围内的字符。 无效的字符可能位于此方法的参数中，或者位于以前要写入缓冲区的方法的参数中。 如果可能，此类字符将使用字符实体引用进行转义（例如，在文本节点或特性值中）。 但是，不允许在元素名、特性名、注释、处理指令和 CDATA 节中使用字符实体引用。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)">
      <summary>异步写入指定的开始标记并将其与给定的命名空间和前缀关联起来。</summary>
      <param name="prefix">元素的命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="ns">与元素关联的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteStartElement" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary>当在派生类中被重写时，写入给定的文本内容。</summary>
      <param name="text">要写入的文本。</param>
      <exception cref="T:System.ArgumentException">文本字符串包含无效的代理项对。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStringAsync(System.String)">
      <summary>异步写入给定的文本内容。</summary>
      <param name="text">要写入的文本。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteString" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>当在派生类中被重写时，为代理项字符对生成并写入代理项字符实体。</summary>
      <param name="lowChar">低代理项。 它必须是介于 0xDC00 和 0xDFFF 之间的值。</param>
      <param name="highChar">高代理项。 它必须是介于 0xD800 和 0xDBFF 之间的值。</param>
      <exception cref="T:System.ArgumentException">传递了无效的代理项字符对。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)">
      <summary>为代理项字符对异步生成并写入代理项字符实体。</summary>
      <param name="lowChar">低代理项。 它必须是介于 0xDC00 和 0xDFFF 之间的值。</param>
      <param name="highChar">高代理项。 它必须是介于 0xD800 和 0xDBFF 之间的值。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteSurrogateCharEntity" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
      <summary>写入 <see cref="T:System.Boolean" /> 值。</summary>
      <param name="value">要写入的 <see cref="T:System.Boolean" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了无效值。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
      <summary>写入 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="value">要写入的 <see cref="T:System.DateTime" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了无效值。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)">
      <summary>写入 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <param name="value">要写入的 <see cref="T:System.DateTimeOffset" /> 值。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
      <summary>写入 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="value">要写入的 <see cref="T:System.Decimal" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了无效值。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
      <summary>写入 <see cref="T:System.Double" /> 值。</summary>
      <param name="value">要写入的 <see cref="T:System.Double" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了无效值。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
      <summary>写入 <see cref="T:System.Int32" /> 值。</summary>
      <param name="value">要写入的 <see cref="T:System.Int32" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了无效值。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
      <summary>写入 <see cref="T:System.Int64" /> 值。</summary>
      <param name="value">要写入的 <see cref="T:System.Int64" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了无效值。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
      <summary>写入对象值。</summary>
      <param name="value">要写入的对象值。  
  
 注意：随着 .NET Framework 3.5 的发布，该方法接受将 <see cref="T:System.DateTimeOffset" /> 作为参数。</param>
      <exception cref="T:System.ArgumentException">指定了无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">编写器已关闭或处于错误状态。

- 或 -

在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
      <summary>写入一个单精度浮点数。</summary>
      <param name="value">要写入的单精度浮点数。</param>
      <exception cref="T:System.ArgumentException">指定了无效值。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
      <summary>写入 <see cref="T:System.String" /> 值。</summary>
      <param name="value">要写入的 <see cref="T:System.String" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了无效值。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary>当在派生类中被重写时，写出给定的空白区域。</summary>
      <param name="ws">空格字符的字符串。</param>
      <exception cref="T:System.ArgumentException">字符串包含非空白字符。</exception>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)">
      <summary>异步写出给定的空白区域。</summary>
      <param name="ws">空格字符的字符串。</param>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns>表示 <see langword="WriteWhitespace" /> 异步操作的任务。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.Settings">
      <summary>获取用于创建此 <see cref="T:System.Xml.XmlWriter" /> 实例的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>用于创建此编写器实例的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。 如果此编写器不是使用 <see cref="Overload:System.Xml.XmlWriter.Create" /> 方法创建的，则此属性返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary>当在派生类中被重写时，获取写入器的状态。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>
        <see cref="T:System.Xml.WriteState" /> 值之一。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary>当在派生类中被重写时，获取当前的 <see langword="xml:lang" /> 范围。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>当前 <see langword="xml:lang" /> 范围。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary>当在派生类中被重写时，获取表示当前 <see langword="xml:space" /> 范围的 <see cref="T:System.Xml.XmlSpace" />。</summary>
      <exception cref="T:System.InvalidOperationException">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
      <returns>一个表示当前 <see langword="XmlSpace" /> 范围的 <see langword="xml:space" />。  
  
 <list type="table"><listheader><term> “值”</term><description> 含义</description></listheader><item><term><see langword="None" /></term><description> 如果不存在 <see langword="xml:space" /> 范围，则此为默认值。</description></item><item><term><see langword="Default" /></term><description> 当前范围为 <see langword="xml:space" />="default"。</description></item><item><term><see langword="Preserve" /></term><description> 当前范围为 <see langword="xml:space" />="preserve"。</description></item></list></returns>
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
      <summary>指定在由 <see cref="T:System.Xml.XmlWriter" /> 方法创建的 <see cref="Overload:System.Xml.XmlWriter.Create" /> 对象上支持的一组功能。</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlWriterSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
      <summary>创建 <see cref="T:System.Xml.XmlWriterSettings" /> 实例的副本。</summary>
      <returns>克隆的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
      <summary>将设置类的成员重置为各自的默认值。</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Async">
      <summary>获取或设置一个值，该值指示是否可对特定的 <see cref="T:System.Xml.XmlWriter" /> 实例使用异步 <see cref="T:System.Xml.XmlWriter" /> 方法。</summary>
      <returns>则可以使用异步方法，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
      <summary>获取或设置一个值，该值指示是否应检查 XML 编写器以确保文档中的所有字符都符合 W3C XML 1.0 建议中的“2.2 字符”部分。</summary>
      <returns>如果进行字符检查，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
      <summary>获取或设置一个值，该值指示调用 <see cref="M:System.Xml.XmlWriter.Close" /> 方法时 <see cref="T:System.Xml.XmlWriter" /> 是否也应关闭基础流或 <see cref="T:System.IO.TextWriter" />。</summary>
      <returns>如果还应该关闭该基础流或 <see cref="T:System.IO.TextWriter" />，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
      <summary>获取或设置的 XML 写入器检查 XML 输出的一致性级别。</summary>
      <returns>指定一致性级别（文档、片段或自动检测）的枚举值之一。 默认值为 <see cref="F:System.Xml.ConformanceLevel.Document" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.XmlWriter" /> 是否未转义 URI 属性。</summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Xml.XmlWriter" /> 未转义 URI 属性，则为; 否则为 <see langword="false" /> 。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
      <summary>获取或设置要使用的文本编码的类型。</summary>
      <returns>要使用的文本编码。 默认值为 <see langword="Encoding.UTF8" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
      <summary>获取或设置指示是否缩进元素的值。</summary>
      <returns>如果将各元素分别写入新行并将其缩进，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
      <summary>获取或设置缩进时要使用的字符串。 在 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 属性设置为 <see langword="true" /> 时使用此设置。</summary>
      <exception cref="T:System.ArgumentNullException">分配给 <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> 的值为 <see langword="null" />。</exception>
      <returns>缩进时要使用的字符串。 它可以设置为任何字符串值。 但是，为了确保 XML 有效，应该只指定有效的空格字符，例如空格、制表符、回车符或换行符。 默认值为两个空格。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NamespaceHandling">
      <summary>获取或设置一个值，该值指示在写入 XML 内容时 <see cref="T:System.Xml.XmlWriter" /> 是否应移除重复的命名空间声明。 写入器的默认行为是输出写入器的命名空间解析程序中存在的所有命名空间声明。</summary>
      <returns>用于指定是否在 <see cref="T:System.Xml.NamespaceHandling" /> 中移除重复的命名空间声明的 <see cref="T:System.Xml.XmlWriter" /> 枚举。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
      <summary>获取或设置要用于换行符的字符串。</summary>
      <exception cref="T:System.ArgumentNullException">分配给 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> 的值为 <see langword="null" />。</exception>
      <returns>要用于换行符的字符串。 它可以设置为任何字符串值。 但是，为了确保 XML 有效，应该只指定有效的空格字符，例如空格、制表符、回车符或换行符。 默认值为 <c>\r\n</c> (回车符、换行) 。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
      <summary>获取或设置一个值，该值指示是否将输出中的换行符规范化。</summary>
      <returns>
        <see cref="T:System.Xml.NewLineHandling" /> 值之一。 默认值为 <see cref="F:System.Xml.NewLineHandling.Replace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
      <summary>获取或设置一个值，该值指示是否在新行上写入属性。</summary>
      <returns>如果将特性写入单独的行，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。  
  
 <block subset="none" type="note"><para>  
 如果 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 属性值为 <see langword="false" />，则此设置无效。</para></block>  
  
 如果 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> 设置为 <see langword="true" />，则每个属性都会写入到一个新行并应用一个额外的缩进级别。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
      <summary>获取或设置一个值，该值指示是否省略 XML 声明。</summary>
      <returns>如果省略 XML 声明，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />，即编写 XML 声明。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OutputMethod">
      <summary>获取用于串行化 <see cref="T:System.Xml.XmlWriter" /> 输出的方法。</summary>
      <returns>
        <see cref="T:System.Xml.XmlOutputMethod" /> 值之一。 默认值为 <see cref="F:System.Xml.XmlOutputMethod.Xml" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose">
      <summary>获取或设置一个值，该值指示在调用 <see cref="M:System.Xml.XmlWriter.Close" /> 方法时 <see cref="T:System.Xml.XmlWriter" /> 是否会向所有未关闭的元素标记添加结束标记。</summary>
      <returns>如果将抛售所有未关闭元素标记，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值是 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Xml.XPath.IXPathNavigable">
      <summary>向 <see cref="T:System.Xml.XPath.XPathNavigator" /> 类提供访问器。</summary>
    </member>
    <member name="M:System.Xml.XPath.IXPathNavigable.CreateNavigator">
      <summary>返回新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</returns>
    </member>
    <member name="T:System.Xml.XPath.XmlCaseOrder">
      <summary>指定大写和小写字母的排序顺序。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.LowerFirst">
      <summary>小写字母排在大写字母之前。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.None">
      <summary>忽略大小写。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.UpperFirst">
      <summary>大写字母排在小写字母之前。</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlDataType">
      <summary>指定用于确定排序顺序的数据类型。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Number">
      <summary>值按数值顺序排序。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Text">
      <summary>值按字母顺序排序。</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlSortOrder">
      <summary>指定排序顺序。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Ascending">
      <summary>节点按升序顺序排序。 例如，如果数字 1、2、3、4 按升序排序，则它们将显示为 1、2、3、4。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Descending">
      <summary>节点按降序顺序排序。 例如，如果数字 1、2、3、4 按降序排序，则它们将显示为 4、3、2、1。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathExpression">
      <summary>提供一个类型化的类，表示已编译的 XPath 表达式。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)">
      <summary>当在派生类中重写时，按指定的 <see cref="T:System.Collections.IComparer" /> 对象对 XPath 表达式选择的节点排序。</summary>
      <param name="expr">一个表示排序关键字的对象。 这可以是节点的 <see langword="string" /> 值，还可以是具有已编译 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 对象，为比较两个对象的等效性提供特定的数据类型比较。</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 或排序关键字包括前缀，并且未提供 <see cref="T:System.Xml.XmlNamespaceManager" /> 或未在所提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 中找到该前缀。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
      <summary>当在派生类中被重写时，根据所提供的参数对 XPath 表达式所选的节点进行排序。</summary>
      <param name="expr">一个表示排序关键字的对象。 这可以是节点的 <see langword="string" /> 值，还可以是具有已编译 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</param>
      <param name="order">一个 <see cref="T:System.Xml.XPath.XmlSortOrder" /> 值，它指示排序顺序。</param>
      <param name="caseOrder">一个 <see cref="T:System.Xml.XPath.XmlCaseOrder" /> 值，它指示大写字母和小写字母的排序方式。</param>
      <param name="lang">要用于比较的语言。 使用 <see cref="T:System.Globalization.CultureInfo" /> 类，该类可传递到适用于语言类型（例如，“us-en”表示美国英语）的 <see cref="Overload:System.String.Compare" /> 方法。 如果指定了空的字符串，则使用系统环境来确定 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="dataType">一个 <see cref="T:System.Xml.XPath.XmlDataType" /> 值，它指示数据类型的排序顺序。</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 或排序关键字包括前缀，并且未提供 <see cref="T:System.Xml.XmlNamespaceManager" /> 或未在所提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 中找到该前缀。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Clone">
      <summary>当在派生类中重写时，获取此 <see cref="T:System.Xml.XPath.XPathExpression" /> 的复本。</summary>
      <returns>一个新 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String)">
      <summary>编译指定的 XPath 表达式并返回表示 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</summary>
      <param name="xpath">XPath 表达式。</param>
      <exception cref="T:System.ArgumentException">XPath 表达式参数不是有效的 XPath 表达式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
      <returns>一个 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>使用用于命名空间解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象编译指定的 XPath 表达式，并且返回表示 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</summary>
      <param name="xpath">XPath 表达式。</param>
      <param name="nsResolver">实现用于命名空间解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 接口的对象。</param>
      <exception cref="T:System.ArgumentException">XPath 表达式参数不是有效的 XPath 表达式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
      <returns>一个 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)">
      <summary>在派生类中被重写时，指定要用于命名空间解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。</summary>
      <param name="nsResolver">实现 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 接口以用于命名空间解析的对象。</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象参数不派生自 <see cref="T:System.Xml.IXmlNamespaceResolver" />。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)">
      <summary>在派生类中被重写时，指定要用于命名空间解析的 <see cref="T:System.Xml.XmlNamespaceManager" /> 对象。</summary>
      <param name="nsManager">要用于命名空间解析的 <see cref="T:System.Xml.XmlNamespaceManager" /> 对象。</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 对象参数不是从 <see cref="T:System.Xml.XmlNamespaceManager" /> 类派生的。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.Expression">
      <summary>当在派生类中重写时，获取 <see cref="T:System.Xml.XPath.XPathExpression" /> 的 <see langword="string" /> 表示形式。</summary>
      <returns>
        <see langword="string" /> 的 <see cref="T:System.Xml.XPath.XPathExpression" /> 表示形式。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.ReturnType">
      <summary>当在派生类中重写时，获取 XPath 表达式的结果类型。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathResultType" /> 值，该值表示 XPath 表达式的结果类型。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathItem">
      <summary>表示 XQuery 1.0 和 XPath 2.0 数据模型中的项。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XPath.XPathItem" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type)">
      <summary>按照指定的类型返回该项的值。</summary>
      <param name="returnType">返回的项值的类型。</param>
      <exception cref="T:System.FormatException">项值的目标类型的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.OverflowException">尝试进行的强制转换导致溢出。</exception>
      <returns>以所请求类型表示的项值。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>当在派生类中重写时，以指定用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象所指定的类型返回项值。</summary>
      <param name="returnType">返回的项值的类型。</param>
      <param name="nsResolver">用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。</param>
      <exception cref="T:System.FormatException">项值的目标类型的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <exception cref="T:System.OverflowException">尝试进行的强制转换导致溢出。</exception>
      <returns>以所请求类型表示的项值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.IsNode">
      <summary>当在派生类中重写时，获取一个值，该值指示项是否表示 XPath 节点或者原子值。</summary>
      <returns>如果项表示 XPath 节点，则为 <see langword="true" />；如果项表示原子值，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.TypedValue">
      <summary>当在派生类中重写时，根据当前项的架构类型以最合适的 .NET Framework 2.0类型的装箱对象的形式获取当前项。</summary>
      <returns>以最合适的 .NET Framework 类型的装箱对象形式表示的当前项。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.Value">
      <summary>当在派生类中重写时，获取项的 <see langword="string" /> 值。</summary>
      <returns>项的 <see langword="string" /> 值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsBoolean">
      <summary>当在派生类中重写时，获取该项的 <see cref="T:System.Boolean" /> 数据类型的值。</summary>
      <exception cref="T:System.FormatException">该项值的 <see cref="T:System.Boolean" /> 类型的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.Boolean" /> 的强制转换无效。</exception>
      <returns>该项的 <see cref="T:System.Boolean" /> 数据类型的值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDateTime">
      <summary>当在派生类中重写时，获取该项的 <see cref="T:System.DateTime" /> 数据类型的值。</summary>
      <exception cref="T:System.FormatException">该项值的 <see cref="T:System.DateTime" /> 类型的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.DateTime" /> 的强制转换无效。</exception>
      <returns>该项的 <see cref="T:System.DateTime" /> 数据类型的值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDouble">
      <summary>当在派生类中重写时，获取该项的 <see cref="T:System.Double" /> 数据类型的值。</summary>
      <exception cref="T:System.FormatException">该项值的 <see cref="T:System.Double" /> 类型的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.Double" /> 的强制转换无效。</exception>
      <exception cref="T:System.OverflowException">尝试进行的强制转换导致溢出。</exception>
      <returns>该项的 <see cref="T:System.Double" /> 数据类型的值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsInt">
      <summary>当在派生类中重写时，获取该项的 <see cref="T:System.Int32" /> 数据类型的值。</summary>
      <exception cref="T:System.FormatException">该项值的 <see cref="T:System.Int32" /> 类型的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.Int32" /> 的强制转换无效。</exception>
      <exception cref="T:System.OverflowException">尝试进行的强制转换导致溢出。</exception>
      <returns>该项的 <see cref="T:System.Int32" /> 数据类型的值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsLong">
      <summary>当在派生类中重写时，获取该项的 <see cref="T:System.Int64" /> 数据类型的值。</summary>
      <exception cref="T:System.FormatException">该项值的 <see cref="T:System.Int64" /> 类型的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.Int64" /> 的强制转换无效。</exception>
      <exception cref="T:System.OverflowException">尝试进行的强制转换导致溢出。</exception>
      <returns>该项的 <see cref="T:System.Int64" /> 数据类型的值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueType">
      <summary>当在派生类中重写时，获取该项的 .NET Framework 2.0类型。</summary>
      <returns>该项的 .NET Framework 类型。 默认值是 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.XmlType">
      <summary>当在派生类中重写时，将获取项的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</summary>
      <returns>项的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNamespaceScope">
      <summary>定义命名空间范围。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.All">
      <summary>返回在当前节点范围内定义的所有命名空间。 这包括总是隐式声明的 <c>xmlns:xml</c> 命名空间。 未定义返回的命名空间的顺序。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.ExcludeXml">
      <summary>返回在当前节点范围内定义的所有命名空间，<c>xmlns:xml</c> 命名空间除外。 <c>xmlns:xml</c> 命名空间总是隐式声明的。 未定义返回的命名空间的顺序。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.Local">
      <summary>返回在当前节点本地定义的所有命名空间。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNavigator">
      <summary>为定位和编辑 XML 数据提供游标模型。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XPath.XPathNavigator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild">
      <summary>返回一个 <see cref="T:System.Xml.XmlWriter" /> 对象，该对象用于在当前节点的子节点列表的末尾创建一个或多个新的子节点。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所定位至的当前节点不是根节点或不是一个元素节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象，该对象用于在当前节点的子节点列表的末尾创建新的子节点。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.String)">
      <summary>使用指定的 XML 数据字符串在当前节点的子节点列表的末尾创建一个新的子节点。</summary>
      <param name="newChild">新的子节点的 XML 数据字符串。</param>
      <exception cref="T:System.ArgumentNullException">XML 数据字符串参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所定位至的当前节点不是根节点或不是一个元素节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.Xml.XmlException">XML 数据字符串参数的格式不正确。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 对象的 XML 内容在当前节点的子节点列表的末尾创建一个新的子节点。</summary>
      <param name="newChild">一个 <see cref="T:System.Xml.XmlReader" /> 对象，该对象定位在新的子节点的 XML 数据上。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 对象处于错误状态或已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所定位至的当前节点不是根节点或不是一个元素节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数的 XML 内容格式不正确。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)">
      <summary>使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的节点在当前节点的子节点列表的末尾创建一个新的子节点。</summary>
      <param name="newChild">一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，该对象定位在将作为新的子节点添加的节点上。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所定位至的当前节点不是根节点或不是一个元素节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)">
      <summary>使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点的子节点列表的末尾创建一个新的子元素节点。</summary>
      <param name="prefix">新的子元素节点（如果有）的命名空间前缀。</param>
      <param name="localName">新的子元素节点（如果有）的本地名称。</param>
      <param name="namespaceURI">新的子元素节点（如果有）的命名空间 URI。 <see cref="F:System.String.Empty" /> 和 <see langword="null" /> 是等效的。</param>
      <param name="value">新的子元素节点的值。 如果传递 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，将创建一个空元素。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所定位至的当前节点不是根节点或不是一个元素节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>验证 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据是否符合所提供的 XML 架构定义语言 (XSD) 架构。</summary>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />，包含用于验证 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XML 数据的架构。</param>
      <param name="validationEventHandler">接收有关架构验证警告和错误消息的 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">出现架构验证错误，并且未指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 处理验证错误。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 定位在不是元素、特性或根节点的节点上，或者不存在用于执行验证的类型信息。</exception>
      <exception cref="T:System.ArgumentException">当 <see cref="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" /> 定位在 XML 数据的根节点上时，使用 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 参数调用 <see cref="T:System.Xml.XPath.XPathNavigator" /> 方法。</exception>
      <returns>如果未出现架构验证错误，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Clone">
      <summary>当在派生类中被重写时，创建一个新的 <see cref="T:System.Xml.XPath.XPathNavigator" />，它定位到的节点与此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 定位到的节点相同。</summary>
      <returns>一个新的 <see cref="T:System.Xml.XPath.XPathNavigator" />，它定位到的节点与此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 定位到的节点相同。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)">
      <summary>将当前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置与指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置进行比较。</summary>
      <param name="nav">要针对其进行比较的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeOrder" /> 值，表示两个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象的相对位置。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Compile(System.String)">
      <summary>编译一个表示 XPath 表达式的字符串，并返回 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</summary>
      <param name="xpath">表示 XPath 表达式的字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="xpath" /> 参数包含一个无效的 XPath 表达式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
      <returns>表示 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)">
      <summary>使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前元素节点上创建一个属性节点。</summary>
      <param name="prefix">新的属性节点（如果有）的命名空间前缀。</param>
      <param name="localName">新的属性节点的本地名称，该名称不能是 <see cref="F:System.String.Empty" /> 或 <see langword="null" />。</param>
      <param name="namespaceURI">新的属性节点（如果有）的命名空间 URI。</param>
      <param name="value">新的属性节点的值。 如果传递了 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，则将创建一个空属性节点。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 未定位在元素节点上。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttributes">
      <summary>返回 <see cref="T:System.Xml.XmlWriter" /> 对象，用于在当前元素上创建新属性。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 未定位在元素节点上。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 对象，用于在当前元素上创建新属性。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateNavigator">
      <summary>返回 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的一个副本。</summary>
      <returns>此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 副本。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)">
      <summary>删除从当前节点到指定节点之间的一组同级节点。</summary>
      <param name="lastSiblingToDelete">一个 <see cref="T:System.Xml.XPath.XPathNavigator" />，它定位在要删除的范围内的最后一个同级节点上。</param>
      <exception cref="T:System.ArgumentNullException">指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.InvalidOperationException">指定的要删除的最后一个节点不是当前节点的有效同级节点。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteSelf">
      <summary>删除当前节点及其子节点。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 定位在不能删除的节点上，例如根节点或命名空间节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)">
      <summary>计算指定的 XPath 表达式并返回类型化结果。</summary>
      <param name="xpath">表示可以计算的 XPath 表达式的字符串。</param>
      <exception cref="T:System.ArgumentException">XPath 表达式的返回类型是节点集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
      <returns>表达式结果（布尔值、数字、字符串或节点集）。 这分别映射到 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>计算指定的 XPath 表达式并返回类型化结果，以使用指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象解析 XPath 表达式中的命名空间前缀。</summary>
      <param name="xpath">表示可以计算的 XPath 表达式的字符串。</param>
      <param name="resolver">用来解析 XPath 表达式中的命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。</param>
      <exception cref="T:System.ArgumentException">XPath 表达式的返回类型是节点集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
      <returns>表达式结果（布尔值、数字、字符串或节点集）。 这分别映射到 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)">
      <summary>计算 <see cref="T:System.Xml.XPath.XPathExpression" /> 并返回类型化结果。</summary>
      <param name="expr">可计算的 <see cref="T:System.Xml.XPath.XPathExpression" />。</param>
      <exception cref="T:System.ArgumentException">XPath 表达式的返回类型是节点集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
      <returns>表达式结果（布尔值、数字、字符串或节点集）。 这分别映射到 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)">
      <summary>使用提供的上下文计算 <see cref="T:System.Xml.XPath.XPathExpression" />，并返回类型化结果。</summary>
      <param name="expr">可计算的 <see cref="T:System.Xml.XPath.XPathExpression" />。</param>
      <param name="context">
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，指向要在其上执行计算的选定节点集。</param>
      <exception cref="T:System.ArgumentException">XPath 表达式的返回类型是节点集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
      <returns>表达式结果（布尔值、数字、字符串或节点集）。 这分别映射到 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)">
      <summary>获取具有指定本地名称和命名空间 URI 的属性的值。</summary>
      <param name="localName">属性的本地名称。 <paramref name="localName" /> 区分大小写。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
      <returns>一个 <see cref="T:System.String" />，它包含指定属性的值；否则，如果没有找到匹配的属性或者 <see cref="F:System.String.Empty" /> 没有定位在元素节点上，则为 <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)">
      <summary>返回与所指定本地名称对应的命名空间节点的值。</summary>
      <param name="name">命名空间节点的本地名称。</param>
      <returns>一个 <see cref="T:System.String" />，包含命名空间节点的值；否则，如果没有找到匹配的命名空间节点，或者 <see cref="F:System.String.Empty" /> 没有定位在元素节点上，则为 <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>返回当前节点的范围内命名空间。</summary>
      <param name="scope">一个 <see cref="T:System.Xml.XmlNamespaceScope" /> 值，该值指定要返回的命名空间。</param>
      <returns>以前缀作为关键字的命名空间名称的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 集合。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter">
      <summary>返回一个 <see cref="T:System.Xml.XmlWriter" /> 对象，该对象用于在当前所选节点的后面创建一个新的同级节点。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的后面插入新的同级节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象，它用于在当前所选节点的后面创建一个新的同级节点。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.String)">
      <summary>使用指定的 XML 字符串在当前选定的节点之后创建一个新的同级节点。</summary>
      <param name="newSibling">新的同级节点的 XML 数据字符串。</param>
      <exception cref="T:System.ArgumentNullException">XML 字符串参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的后面插入新的同级节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.Xml.XmlException">XML 字符串参数的格式不正确。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 对象的 XML 内容，在当前所选节点之后创建一个新的同级节点。</summary>
      <param name="newSibling">一个 <see cref="T:System.Xml.XmlReader" /> 对象，它置于新同级节点的 XML 数据上。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 对象处于错误状态或已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的后面插入新的同级节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数的 XML 内容格式不正确。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)">
      <summary>使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象中的节点在当前选定的节点之后创建一个新的同级节点。</summary>
      <param name="newSibling">一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，该对象定位在将作为新的同级节点添加的节点上。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的后面插入新的同级节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore">
      <summary>返回 <see cref="T:System.Xml.XmlWriter" /> 对象，它用于在当前所选节点的前面创建一个新的同级节点。</summary>
      <exception cref="T:System.InvalidOperationException">位置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不允许在当前节点之前插入一个新的同级节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象，它用于在当前所选节点的前面创建一个新的同级节点。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.String)">
      <summary>使用指定的 XML 字符串在当前选定的节点之前创建一个新的同级节点。</summary>
      <param name="newSibling">新的同级节点的 XML 数据字符串。</param>
      <exception cref="T:System.ArgumentNullException">XML 字符串参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">位置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不允许在当前节点之前插入一个新的同级节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.Xml.XmlException">XML 字符串参数的格式不正确。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 对象指定的 XML 内容在当前选定的节点之前创建一个新的同级节点。</summary>
      <param name="newSibling">一个 <see cref="T:System.Xml.XmlReader" /> 对象，它置于新同级节点的 XML 数据上。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 对象处于错误状态或已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">位置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不允许在当前节点之前插入一个新的同级节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数的 XML 内容格式不正确。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)">
      <summary>使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的节点在当前选定的节点之前创建一个新的同级节点。</summary>
      <param name="newSibling">一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，该对象定位在将作为新的同级节点添加的节点上。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">位置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不允许在当前节点之前插入一个新的同级节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)">
      <summary>使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点之后创建一个新的同级元素。</summary>
      <param name="prefix">新的子元素（如果有）的命名空间前缀。</param>
      <param name="localName">新的子元素（如果有）的本地名称。</param>
      <param name="namespaceURI">新的子元素（如果有）的命名空间 URI。 <see cref="F:System.String.Empty" /> 和 <see langword="null" /> 是等效的。</param>
      <param name="value">新的子元素的值。 如果传递 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，将创建一个空元素。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允许在当前节点的后面插入新的同级节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)">
      <summary>使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点之前创建一个新的同级元素。</summary>
      <param name="prefix">新的子元素（如果有）的命名空间前缀。</param>
      <param name="localName">新的子元素（如果有）的本地名称。</param>
      <param name="namespaceURI">新的子元素（如果有）的命名空间 URI。 <see cref="F:System.String.Empty" /> 和 <see langword="null" /> 是等效的。</param>
      <param name="value">新的子元素的值。 如果传递 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，将创建一个空元素。</param>
      <exception cref="T:System.InvalidOperationException">位置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不允许在当前节点之前插入一个新的同级节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)">
      <summary>确定指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是否是当前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的子代。</summary>
      <param name="nav">要与此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 进行比较的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns>如果指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是当前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的子代，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
      <summary>当在派生类中被重写时，确定当前的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是否位于与指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 相同的位置。</summary>
      <param name="other">要与此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 进行比较的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns>如果这两个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象具有相同的位置，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)">
      <summary>获取指定前缀的命名空间 URI。</summary>
      <param name="prefix">要解析其命名空间 URI 的前缀。 若要匹配默认命名空间，请传递 <see cref="F:System.String.Empty" />。</param>
      <returns>一个 <see cref="T:System.String" />，它含有分配给指定的命名空间前缀的命名空间 URI；如果没有为指定的前缀分配任何命名空间 URI，则为 <see langword="null" />。 返回的 <see cref="T:System.String" /> 是原子化的。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)">
      <summary>获取为指定的命名空间 URI 声明的前缀。</summary>
      <param name="namespaceURI">要为前缀解析的命名空间 URI。</param>
      <returns>一个 <see cref="T:System.String" />，它包含分配给指定的命名空间 URI 的命名空间前缀；如果没有向指定的命名空间 URI 分配任何前缀，则为 <see cref="F:System.String.Empty" />。 返回的 <see cref="T:System.String" /> 是原子化的。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.String)">
      <summary>确定当前节点是否与指定的 XPath 表达式匹配。</summary>
      <param name="xpath">XPath 表达式。</param>
      <exception cref="T:System.ArgumentException">无法计算 XPath 表达式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
      <returns>如果当前节点与指定的 XPath 表达式匹配，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)">
      <summary>确定当前节点是否匹配所指定的 <see cref="T:System.Xml.XPath.XPathExpression" />。</summary>
      <param name="expr">一个 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象，它包含已编译的 XPath 表达式。</param>
      <exception cref="T:System.ArgumentException">无法计算 XPath 表达式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
      <returns>如果当前节点匹配 <see cref="T:System.Xml.XPath.XPathExpression" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
      <summary>当在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到与指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 相同的位置。</summary>
      <param name="other">在要移动到其上的节点上定位的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到与指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 相同的位置，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)">
      <summary>将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到具有匹配的本地名称和命名空间 URI 的属性上。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI；对于空命名空间，为 <see langword="null" />。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到此属性，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)">
      <summary>将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到具有指定的本地名称和命名空间 URI 的子节点。</summary>
      <param name="localName">要移动到的子节点的本地名称。</param>
      <param name="namespaceURI">要移动到的子节点的命名空间 URI。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到此子节点，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)">
      <summary>将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到指定的 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的子节点。</summary>
      <param name="type">要移动到的子节点的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到此子节点，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirst">
      <summary>将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至当前节点的第一个同级节点。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到当前节点的第一个同级节点，则为 <see langword="true" />；如果没有第一个同级节点，或者 <see cref="T:System.Xml.XPath.XPathNavigator" /> 当前定位在属性节点上，则为 <see langword="false" />。 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 已定位在第一个同级节点上，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 将返回 <see langword="true" />，且不移动其位置。  
  
如果 <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirst" /> 因没有第一个同级节点而返回 <see langword="false" />，或者 <see cref="T:System.Xml.XPath.XPathNavigator" /> 当前定位在属性节点上，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置保持不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute">
      <summary>在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到当前节点的第一个属性。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到当前节点的第一个属性，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild">
      <summary>当在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到当前节点的第一个子节点。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到当前节点的第一个子节点，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace">
      <summary>将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到当前节点的第一个命名空间节点。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到第一个命名空间节点，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>当在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到与指定的 <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 匹配的第一个命名空间节点。</summary>
      <param name="namespaceScope">描述命名空间范围的 <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 值。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到第一个命名空间节点，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)">
      <summary>将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到按文档顺序指定了其本地名称或命名空间 URI 的元素。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移动，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)">
      <summary>按文档顺序将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到指定的边界内具有指定的本地名称和命名空间 URI 的元素。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceURI">元素的命名空间 URI。</param>
      <param name="end">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，该对象定位在搜索下一个元素时当前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不会越过的元素边界上。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移动，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)">
      <summary>将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到按文档顺序指定的 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的以下元素。</summary>
      <param name="type">元素的 <see cref="T:System.Xml.XPath.XPathNodeType" />。 <see cref="T:System.Xml.XPath.XPathNodeType" /> 不能是 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> 或 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移动，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)">
      <summary>按文档顺序将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到指定边界内的指定 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的下一个元素。</summary>
      <param name="type">元素的 <see cref="T:System.Xml.XPath.XPathNodeType" />。 <see cref="T:System.Xml.XPath.XPathNodeType" /> 不能是 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> 或 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />。</param>
      <param name="end">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，该对象定位在搜索下一个元素时当前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不会越过的元素边界上。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移动，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)">
      <summary>当在派生类中重写时，移动到具有 <c>ID</c> 类型的属性并且属性值与指定的 <see cref="T:System.String" /> 匹配的节点。</summary>
      <param name="id">一个 <see cref="T:System.String" />，表示要移动到的节点的 <c>ID</c> 值。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移动，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则导航器的位置未更改。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)">
      <summary>将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到具有指定的命名空间前缀的命名空间节点。</summary>
      <param name="name">命名空间节点的命名空间前缀。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移动到指定的命名空间，则为 <see langword="true" />；如果没有找到匹配的命名空间节点，或者 <see cref="T:System.Xml.XPath.XPathNavigator" /> 没有定位在元素节点上，则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext">
      <summary>当在派生类中重写时，会将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动至当前节点的下一个同级节点。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到下一个同级节点，则为 <see langword="true" />；如果没有更多同级节点或如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 当前位于属性节点上，则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)">
      <summary>将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到下一个具有指定的本地名称和命名空间 URI 的同级节点。</summary>
      <param name="localName">要移动到的下一个同级节点的本地名称。</param>
      <param name="namespaceURI">要移动到的下一个同级节点的命名空间 URI。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到下一个同级节点，则为 <see langword="true" />；如果没有其他同级节点，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 当前定位在属性节点上，则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)">
      <summary>将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到当前节点中与指定的 <see cref="T:System.Xml.XPath.XPathNodeType" /> 匹配的下一个同级节点。</summary>
      <param name="type">要移动到的同级节点的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到下一个同级节点，则为 <see langword="true" />；如果没有更多同级节点或如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 当前位于属性节点上，则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute">
      <summary>当在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到下一个属性。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到下一个属性，则为 <see langword="true" />；如果没有其他属性，则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace">
      <summary>将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到下一个命名空间节点。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到下一个命名空间节点，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>当在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到与指定的 <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 匹配的下一个命名空间节点。</summary>
      <param name="namespaceScope">描述命名空间范围的 <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 值。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到下一个命名空间节点，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToParent">
      <summary>当在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到当前节点的父节点。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到当前节点的父节点，则为 <see langword="true" />；否则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToPrevious">
      <summary>当在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到当前节点的上一个同级节点。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功地移动到上一个同级节点，则为 <see langword="true" />；如果没有上一个同级节点，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 当前定位在某个属性节点上，则为 <see langword="false" />。 如果为 <see langword="false" />，则 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不变。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToRoot">
      <summary>将 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移动到当前节点所属的根节点。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild">
      <summary>返回一个 <see cref="T:System.Xml.XmlWriter" /> 对象，该对象用于在当前节点的子节点列表的开始处创建一个新的子节点。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的当前节点不允许预置新的子节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象，该对象用于在当前节点的子节点列表的开始处创建一个新的子节点。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.String)">
      <summary>使用指定的 XML 字符串在当前节点的子节点列表的开始处创建一个新的子节点。</summary>
      <param name="newChild">新的子节点的 XML 数据字符串。</param>
      <exception cref="T:System.ArgumentNullException">XML 字符串参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的当前节点不允许预置新的子节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.Xml.XmlException">XML 字符串参数的格式不正确。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 对象的 XML 内容，在当前节点的子节点列表的开始处创建一个新的子节点。</summary>
      <param name="newChild">一个 <see cref="T:System.Xml.XmlReader" /> 对象，该对象定位在新的子节点的 XML 数据上。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 对象处于错误状态或已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的当前节点不允许预置新的子节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数的 XML 内容格式不正确。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)">
      <summary>使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象中的节点在当前节点的子节点列表的开始处创建一个新的子节点。</summary>
      <param name="newChild">一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，该对象定位在将作为新的子节点添加的节点上。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的当前节点不允许预置新的子节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)">
      <summary>使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点的子节点列表的开始处创建一个新的子元素。</summary>
      <param name="prefix">新的子元素（如果有）的命名空间前缀。</param>
      <param name="localName">新的子元素（如果有）的本地名称。</param>
      <param name="namespaceURI">新的子元素（如果有）的命名空间 URI。 <see cref="F:System.String.Empty" /> 和 <see langword="null" /> 是等效的。</param>
      <param name="value">新的子元素的值。 如果传递 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，将创建一个空元素。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的当前节点不允许预置新的子节点。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReadSubtree">
      <summary>返回 <see cref="T:System.Xml.XmlReader" /> 对象，该对象包含当前节点及其子节点。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不会在元素节点或根节点上进行定位。</exception>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> 对象，该对象包含当前节点及其子节点。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)">
      <summary>替换从当前节点到指定节点之间的一组同级节点。</summary>
      <param name="lastSiblingToReplace">一个 <see cref="T:System.Xml.XPath.XPathNavigator" />，它定位在要替换的范围内的最后一个同级节点上。</param>
      <exception cref="T:System.ArgumentNullException">指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.InvalidOperationException">指定的要替换的最后一个节点不是当前节点的有效同级节点。</exception>
      <returns>一个 <see cref="T:System.Xml.XmlWriter" /> 对象，该对象用于指定替换范围。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)">
      <summary>将当前节点替换为指定的字符串内容。</summary>
      <param name="newNode">新节点的 XML 数据字符串。</param>
      <exception cref="T:System.ArgumentNullException">XML 字符串参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不位于元素、文本、处理指令或注释节点上。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.Xml.XmlException">XML 字符串参数的格式不正确。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)">
      <summary>将当前节点替换为指定的 <see cref="T:System.Xml.XmlReader" /> 对象的内容。</summary>
      <param name="newNode">位于新节点的 XML 数据上的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 对象处于错误状态或已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不位于元素、文本、处理指令或注释节点上。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 对象参数的 XML 内容格式不正确。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)">
      <summary>将当前节点替换为指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象的内容。</summary>
      <param name="newNode">在新节点上定位的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不位于元素、文本、处理指令或注释节点上。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象参数的 XML 内容格式不正确。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String)">
      <summary>使用指定的 XPath 表达式选择节点集。</summary>
      <param name="xpath">表示 XPath 表达式的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentException">XPath 表达式包含错误或其返回类型不是节点集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
      <returns>指向所选节点集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>使用指定的 XPath 表达式与指定用来解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象选择节点集。</summary>
      <param name="xpath">表示 XPath 表达式的 <see cref="T:System.String" />。</param>
      <param name="resolver">用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。</param>
      <exception cref="T:System.ArgumentException">XPath 表达式包含错误或其返回类型不是节点集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
      <returns>指向所选节点集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)">
      <summary>使用指定的 <see cref="T:System.Xml.XPath.XPathExpression" /> 来选择节点集。</summary>
      <param name="expr">包含已编译的 XPath 查询的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</param>
      <exception cref="T:System.ArgumentException">XPath 表达式包含错误或其返回类型不是节点集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 表达式无效。</exception>
      <returns>指向所选节点集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)">
      <summary>选择当前节点中具有指定的本地名称和命名空间 URI 的所有祖先节点。</summary>
      <param name="name">祖先节点的本地名称。</param>
      <param name="namespaceURI">祖先节点的命名空间 URI。</param>
      <param name="matchSelf">若要在所选内容上包含上下文节点，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">无法将 <see langword="null" /> 作为一个参数进行传递。</exception>
      <returns>一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。 返回的节点的顺序与文档顺序相反。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>选择当前节点中具有匹配的 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的所有上级节点。</summary>
      <param name="type">上级节点的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <param name="matchSelf">若要在所选内容上包含上下文节点，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。 返回的节点的顺序与文档顺序相反。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)">
      <summary>选择当前节点中具有指定的本地名称和命名空间 URI 的所有子节点。</summary>
      <param name="name">子节点的本地名称。</param>
      <param name="namespaceURI">子节点的命名空间 URI。</param>
      <exception cref="T:System.ArgumentNullException">无法将 <see langword="null" /> 作为一个参数进行传递。</exception>
      <returns>一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
      <summary>选择当前节点中具有匹配的 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的所有子节点。</summary>
      <param name="type">子节点的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns>一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)">
      <summary>选择当前节点中具有指定的本地名称和命名空间 URI 的所有子代节点。</summary>
      <param name="name">子代节点的本地名称。</param>
      <param name="namespaceURI">子代节点的命名空间 URI。</param>
      <param name="matchSelf">如果要在所选内容中包括上下文节点，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">无法将 <see langword="null" /> 作为一个参数进行传递。</exception>
      <returns>一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>选择当前节点中具有匹配的 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的所有子代节点。</summary>
      <param name="type">子代节点的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <param name="matchSelf">如果要在所选内容中包括上下文节点，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)">
      <summary>使用指定的 XPath 查询在 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中选择单个节点。</summary>
      <param name="xpath">表示 XPath 表达式的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentException">在 XPath 查询中遇到了错误或 XPath 表达式的返回类型不是一个节点。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 查询无效。</exception>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，其中包含指定的 XPath 查询的第一个匹配节点；如果没有查询结果，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>通过指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象使用指定的 XPath 查询在 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中选择单个节点，以解析命名空间前缀。</summary>
      <param name="xpath">表示 XPath 表达式的 <see cref="T:System.String" />。</param>
      <param name="resolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象用于解析 XPath 查询中的命名空间前缀。</param>
      <exception cref="T:System.ArgumentException">在 XPath 查询中遇到了错误或 XPath 表达式的返回类型不是一个节点。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 查询无效。</exception>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，其中包含指定的 XPath 查询的第一个匹配节点；如果没有查询结果，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)">
      <summary>使用指定的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象在 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中选择单个节点。</summary>
      <param name="expression">包含已编译的 XPath 查询的 <see cref="T:System.Xml.XPath.XPathExpression" /> 对象。</param>
      <exception cref="T:System.ArgumentException">在 XPath 查询中遇到了错误或 XPath 表达式的返回类型不是一个节点。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 查询无效。</exception>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，其中包含指定的 XPath 查询的第一个匹配节点；如果没有查询结果，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)">
      <summary>设置当前节点的类型化值。</summary>
      <param name="typedValue">节点的新类型化值。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持指定的对象类型。</exception>
      <exception cref="T:System.ArgumentNullException">指定的值不能为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 未定位在元素或属性节点上。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetValue(System.String)">
      <summary>设置当前节点的值。</summary>
      <param name="value">节点的新值。</param>
      <exception cref="T:System.ArgumentNullException">值参数为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 位于根节点（即命名空间节点）上，或指定的值无效。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支持编辑。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.System#ICloneable#Clone">
      <summary>创建 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象的新副本。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象的新副本。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ToString">
      <summary>获取当前节点的文本值。</summary>
      <returns>包含当前节点文本值的 <see langword="string" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>获取当前节点的指定 <see cref="T:System.Type" /> 形式的值，以使用指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象解析命名空间前缀。</summary>
      <param name="returnType">返回当前节点值时所采用的 <see cref="T:System.Type" />。</param>
      <param name="nsResolver">用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象。</param>
      <exception cref="T:System.FormatException">当前节点值的目标类型的格式不正确。</exception>
      <exception cref="T:System.InvalidCastException">试图进行的强制转换无效。</exception>
      <returns>以要求的 <see cref="T:System.Type" /> 形式表示的当前节点值。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)">
      <summary>将当前节点及其子节点流式传输到指定的 <see cref="T:System.Xml.XmlWriter" /> 对象。</summary>
      <param name="writer">要流式传输至的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.BaseURI">
      <summary>当在派生类中被重写时，获取当前节点的基 URI。</summary>
      <returns>从中加载节点的位置；如果没有值，则为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.CanEdit">
      <summary>获取一个值，该值指示 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是否可以编辑基础 XML 数据。</summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 可以编辑基础 XML 数据，则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasAttributes">
      <summary>获取一个值，该值指示当前节点是否有任何属性。</summary>
      <returns>
        <see langword="true" /> 如果当前节点具有属性，则为; <see langword="false" /> 如果当前节点没有属性，或者没有 <see cref="T:System.Xml.XPath.XPathNavigator" /> 定位在元素节点上，则返回。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasChildren">
      <summary>获取一个值，该值指示当前节点是否有任何子节点。</summary>
      <returns>如果当前节点具有任何子节点，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.InnerXml">
      <summary>获取或设置表示当前节点的子节点标记。</summary>
      <exception cref="T:System.InvalidOperationException">无法设置 <see cref="P:System.Xml.XPath.XPathNavigator.InnerXml" /> 属性。</exception>
      <returns>一个 <see cref="T:System.String" />，包含当前节点的子节点的标记。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsEmptyElement">
      <summary>当在派生类中被重写时，获取一个值，该值指示当前节点是否是一个没有结束元素标记的空元素。</summary>
      <returns>如果当前节点为一个空元素，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsNode">
      <summary>获取一个值，该值指示当前节点是否表示一个 XPath 节点。</summary>
      <returns>始终返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.LocalName">
      <summary>在派生类中被重写时，获取当前节点的 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />（不带任何命名空间前缀）。</summary>
      <returns>包含当前节点本地名称的 <see cref="T:System.String" />；如果当前节点没有名称（例如，文本或注释节点），则为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Name">
      <summary>当在派生类中被重写时，获取当前节点的限定名。</summary>
      <returns>一个 <see cref="T:System.String" />，包含当前节点的限定 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />；如果当前节点没有名称（例如，文本或注释节点），则为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NamespaceURI">
      <summary>当在派生类中被重写时，获取当前节点的命名空间 URI。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含当前节点的命名空间 URI；如果当前节点没有命名空间 URI，则为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NameTable">
      <summary>当在派生类中被重写时，获取 <see cref="T:System.Xml.XmlNameTable" /> 的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlNameTable" /> 对象，它使您能够获取 XML 文档中 <see cref="T:System.String" /> 的原子化版本。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NavigatorComparer">
      <summary>获取 <see cref="T:System.Collections.IEqualityComparer" />，它用于 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象的相等比较。</summary>
      <returns>一个 <see cref="T:System.Collections.IEqualityComparer" />，它用于 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象的相等比较。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NodeType">
      <summary>当在派生类中重写时，获取当前节点的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</summary>
      <returns>表示当前节点其中一个 <see cref="T:System.Xml.XPath.XPathNodeType" /> 值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.OuterXml">
      <summary>获取或设置表示当前节点及其子节点的开始标记及结束标记的标记。</summary>
      <returns>一个 <see cref="T:System.String" />，包含表示当前节点及其子节点的开始标记及结束标记的标记。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Prefix">
      <summary>当在派生类中被重写时，获取与当前节点关联的命名空间前缀。</summary>
      <returns>一个 <see cref="T:System.String" />它包含与当前节点关联的命名空间前缀。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.SchemaInfo">
      <summary>获取作为架构验证结果分配给当前节点的架构信息。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 对象，包含当前节点的架构信息。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.TypedValue">
      <summary>获取作为最合适的 .NET Framework 类型的已装箱对象的当前节点。</summary>
      <returns>作为最合适的 .NET Framework 类型的已装箱对象的当前节点。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.UnderlyingObject">
      <summary>由在存储区上提供“虚拟化”XML 视图的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 实现使用，以提供对基础对象的访问。</summary>
      <returns>默认值为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsBoolean">
      <summary>获取当前节点的 <see cref="T:System.Boolean" /> 类型的值。</summary>
      <exception cref="T:System.FormatException">当前节点的字符串值不能转换为 <see cref="T:System.Boolean" />。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.Boolean" /> 的强制转换无效。</exception>
      <returns>当前节点的 <see cref="T:System.Boolean" /> 类型的值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDateTime">
      <summary>获取当前节点的 <see cref="T:System.DateTime" /> 类型的值。</summary>
      <exception cref="T:System.FormatException">当前节点的字符串值不能转换为 <see cref="T:System.DateTime" />。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.DateTime" /> 的强制转换无效。</exception>
      <returns>当前节点的 <see cref="T:System.DateTime" /> 类型的值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDouble">
      <summary>获取当前节点的 <see cref="T:System.Double" /> 类型的值。</summary>
      <exception cref="T:System.FormatException">当前节点的字符串值不能转换为 <see cref="T:System.Double" />。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.Double" /> 的强制转换无效。</exception>
      <returns>当前节点的 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsInt">
      <summary>获取当前节点的 <see cref="T:System.Int32" /> 类型的值。</summary>
      <exception cref="T:System.FormatException">当前节点的字符串值不能转换为 <see cref="T:System.Int32" />。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.Int32" /> 的强制转换无效。</exception>
      <returns>当前节点的 <see cref="T:System.Int32" /> 类型的值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsLong">
      <summary>获取当前节点的 <see cref="T:System.Int64" /> 类型的值。</summary>
      <exception cref="T:System.FormatException">当前节点的字符串值不能转换为 <see cref="T:System.Int64" />。</exception>
      <exception cref="T:System.InvalidCastException">尝试到 <see cref="T:System.Int64" /> 的强制转换无效。</exception>
      <returns>当前节点的 <see cref="T:System.Int64" /> 类型的值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueType">
      <summary>获取当前节点的 .NET Framework <see cref="T:System.Type" />。</summary>
      <returns>当前节点的 .NET Framework <see cref="T:System.Type" />。 默认值是 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlLang">
      <summary>获取当前节点的 <c>xml:lang</c> 范围。</summary>
      <returns>
        <see cref="T:System.String" />包含<c>xml： lang</c>范围的值的; <see cref="F:System.String.Empty" /> 如果当前节点没有要返回的<c>xml： lang</c>范围值，则为。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlType">
      <summary>获取当前节点的 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 信息。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 对象；默认值为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeIterator">
      <summary>在选定节点集上提供一个迭代器。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.Clone">
      <summary>当在派生类中重写时，返回此 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象的复本。</summary>
      <returns>此 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象的新 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 对象复本。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" /> 对象以循环访问所选的节点集。</summary>
      <returns>循环访问所选节点集的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.MoveNext">
      <summary>在派生类中重写时，将 <see cref="P:System.Xml.XPath.XPathNodeIterator.Current" /> 属性返回的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象移至选定节点集中的下一个节点。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象已移至下一个节点，则为 <see langword="true" />；如果没有其他选定节点，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>作为此实例副本的新对象。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Count">
      <summary>获取所选节点集中最后一个节点的索引。</summary>
      <returns>所选节点集中最后一个节点的索引或者 0 （如果没有选择节点）。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Current">
      <summary>在派生类中重写时，获取此 <see cref="T:System.Xml.XPath.XPathNodeIterator" />的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，它定位在当前上下文节点上。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象，定位在从中选择节点集的上下文节点上。 必须调用 <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext" /> 方法将 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 移至所选集中的第一个节点。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition">
      <summary>当在派生的类中重写时，获取所选节点集中当前位置的索引。</summary>
      <returns>当前位置的索引。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeType">
      <summary>指定可以从 <see cref="T:System.Xml.XPath.XPathNavigator" /> 类返回的 XPath 节点类型。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.All">
      <summary>任何一种 <see cref="T:System.Xml.XPath.XPathNodeType" /> 节点类型。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Attribute">
      <summary>属性，如 <c>id='123'</c>。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Comment">
      <summary>注释，如 <c>&lt;!-- my comment --&gt;</c></summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Element">
      <summary>元素，如 <c>&lt;element&gt;</c>。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Namespace">
      <summary>命名空间，如 <c>xmlns="namespace"</c>。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.ProcessingInstruction">
      <summary>处理指令，如 <c>&lt;?pi test?&gt;</c>。 这不包括 <see cref="T:System.Xml.XPath.XPathNavigator" /> 类中无法看到的 XML 声明。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Root">
      <summary>XML 文档的根节点或节点树。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.SignificantWhitespace">
      <summary>带有空白字符且 <c>xml:space</c> 设置为 <c>preserve</c> 的节点。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Text">
      <summary>节点的文本内容。 等效于文档对象模型 (DOM) 文本和 CDATA 节点类型。 至少包含一个字符。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Whitespace">
      <summary>只有空白字符而没有显著空白的节点。 空白字符为 <c>#x20</c>、<c>#x9</c>、<c>#xD</c> 或 <c>#xA</c>。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathResultType">
      <summary>指定 XPath 表达式的返回类型。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Any">
      <summary>任何一种 XPath 节点类型。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Boolean">
      <summary>
        <see cref="T:System.Boolean" />
        <see langword="true" /> 或 <see langword="false" /> 值。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Error">
      <summary>该表达式的计算结果不是正确的 XPath 类型。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Navigator">
      <summary>一个树片段。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.NodeSet">
      <summary>一个节点集合。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Number">
      <summary>一个数值。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.String">
      <summary>一个 <see cref="T:System.String" /> 值。</summary>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextFunction">
      <summary>为在运行时执行期间在可扩展样式表转换语言 (XSLT) 样式表中定义的给定函数提供一个接口。</summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
      <summary>提供调用带有给定上下文中给定参数的函数的方法。</summary>
      <param name="xsltContext">函数调用的 XSLT 上下文。</param>
      <param name="args">函数调用的参数。 每个参数都是数组中的一个元素。</param>
      <param name="docContext">函数调用的上下文节点。</param>
      <returns>一个 <see cref="T:System.Object" />，它表示函数的返回值。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ArgTypes">
      <summary>获取为函数的参数列表提供的 XML 路径语言 (XPath) 类型。 该信息可用于发现函数的签名，该签名使您能够区分重载函数。</summary>
      <returns>一个 <see cref="T:System.Xml.XPath.XPathResultType" /> 数组，它表示函数的参数列表的类型。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Maxargs">
      <summary>获取函数的参数的最大数目。 这使用户能够区分重载函数。</summary>
      <returns>函数的参数的最大数目。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Minargs">
      <summary>获取函数的参数的最小数目。 这使用户能够区分重载函数。</summary>
      <returns>函数的参数的最小数目。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ReturnType">
      <summary>获取 <see cref="T:System.Xml.XPath.XPathResultType" />，它表示函数返回的 XPath 类型。</summary>
      <returns>一个 <see cref="T:System.Xml.XPath.XPathResultType" />，它表示函数返回的 XPath 类型</returns>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextVariable">
      <summary>为在运行时执行期间在样式表中定义的给定变量提供一个接口。</summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)">
      <summary>在运行时计算变量并返回表示变量值的对象。</summary>
      <param name="xsltContext">一个 <see cref="T:System.Xml.Xsl.XsltContext" />，它表示变量的执行上下文。</param>
      <returns>一个 <see cref="T:System.Object" />，它表示变量的值。 可能的返回类型包括数字、字符串、布尔值、文档片段或节点集。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsLocal">
      <summary>获取一个值，该值指示变量是否为局部变量。</summary>
      <returns>如果变量是当前上下文中的局部变量，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsParam">
      <summary>获取一个值，该值指示变量是否为可扩展样式表转换语言 (XSLT) 参数。 它可以是样式表或模板的参数。</summary>
      <returns>如果变量是 XSLT 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.VariableType">
      <summary>获取 <see cref="T:System.Xml.XPath.XPathResultType" />，它表示变量的 XML 路径语言 (XPath) 类型。</summary>
      <returns>表示变量的 XPath 类型的 <see cref="T:System.Xml.XPath.XPathResultType" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XslCompiledTransform">
      <summary>使用 XSLT 样式表转换 XML 数据。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)">
      <summary>使用指定的调试设置初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 类的新实例。</summary>
      <param name="enableDebug">生成调试信息时为 <see langword="true" />；否则为 <see langword="false" />。 如果将其设置为 <see langword="true" />，您就可以使用 Microsoft Visual Studio 调试器对样式表进行调试。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])">
      <summary>从使用 <see langword="XSLTC.exe" /> 实用程序编译的样式表中加载一个方法。</summary>
      <param name="executeMethod">一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，表示已编译样式表中由编译器生成的 <c>execute</c> 方法。</param>
      <param name="queryData">已编译样式表的 <c>staticData</c> 字段中的一个序列化数据结构字节数组，该已编译样式表由 <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> 方法生成。</param>
      <param name="earlyBoundTypes">一个类型数组，该数组存储在已编译样式表中由编译器生成的 <c>ebTypes</c> 字段中。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)">
      <summary>加载和编译位于指定 URI 的样式表。</summary>
      <param name="stylesheetUri">样式表的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheetUri" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">样式表中有错。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到该样式表。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="stylesheetUri" /> 值包含无法找到的文件名或目录。</exception>
      <exception cref="T:System.Net.WebException">无法解析 <paramref name="stylesheetUri" /> 值。  
  
- 或 - 
处理该请求时出错。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">加载样式表时出现分析错误。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>加载和编译 URI 指定的 XSLT 样式表。 <see cref="T:System.Xml.XmlResolver" /> 可以解析任何 XSLT <c>import</c> 或 <c>include</c> 元素，而 XSLT 设置决定了样式表的权限。</summary>
      <param name="stylesheetUri">样式表的 URI。</param>
      <param name="settings">应用于样式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果是 <see langword="null" />，则应用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 设置。</param>
      <param name="stylesheetResolver">用于解析样式表 URI 的 <see cref="T:System.Xml.XmlResolver" /> 以及在 XSLT <c>import</c> 和 <c>include</c> 元素中引用的任何样式表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheetUri" /> 或 <paramref name="stylesheetResolver" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">样式表中有错。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到该样式表。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="stylesheetUri" /> 值包含无法找到的文件名或目录。</exception>
      <exception cref="T:System.Net.WebException">无法解析 <paramref name="stylesheetUri" /> 值。  
  
- 或 - 
处理该请求时出错。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">加载样式表时出现分析错误。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)">
      <summary>加载使用 XSLT 编译器 (xsltc.exe) 创建的已编译样式表。</summary>
      <param name="compiledStylesheet">包含已编译样式表的类的名称。  
  
 该名称通常是样式表的名称。 除非另外指定，否则，xsltc.exe 工具将样式表名称用作类和程序集的名称。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)">
      <summary>编译 <see cref="T:System.Xml.XmlReader" /> 中包含的样式表。</summary>
      <param name="stylesheet">包含此样式表的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">样式表中有错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>编译 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 样式表。 <see cref="T:System.Xml.XmlResolver" /> 可以解析任何 XSLT <c>import</c> 或 <c>include</c> 元素，而 XSLT 设置决定了样式表的权限。</summary>
      <param name="stylesheet">包含该样式表的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="settings">应用于样式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果是 <see langword="null" />，则应用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 设置。</param>
      <param name="stylesheetResolver">
        <see cref="T:System.Xml.XmlResolver" />，用于解析 XSLT <c>import</c> 和 <c>include</c> 元素中引用的所有样式表。 如果这为 <see langword="null" />，则不解析外部资源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">样式表中有错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>编译 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象中包含的样式表。</summary>
      <param name="stylesheet">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 Microsoft .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含该样式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">样式表中有错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>编译 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 样式表。 <see cref="T:System.Xml.XmlResolver" /> 可以解析任何 XSLT <c>import</c> 或 <c>include</c> 元素，而 XSLT 设置决定了样式表的权限。</summary>
      <param name="stylesheet">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 Microsoft .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含该样式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="settings">应用于样式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果是 <see langword="null" />，则应用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 设置。</param>
      <param name="stylesheetResolver">
        <see cref="T:System.Xml.XmlResolver" />，用于解析 XSLT <c>import</c> 和 <c>include</c> 元素中引用的所有样式表。 如果这为 <see langword="null" />，则不解析外部资源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">样式表中有错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)">
      <summary>使用 URI 指定的输入文档执行转换，然后将结果输出到文件。</summary>
      <param name="inputUri">输入文档的 URI。</param>
      <param name="resultsFile">输出文件的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到输入文档。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值包含无法找到的文件名或目录。</exception>
      <exception cref="T:System.Net.WebException">无法解析 <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值。  
  
- 或 - 
处理请求时发生错误</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 不是有效 URI。</exception>
      <exception cref="T:System.Xml.XmlException">加载输入文档时出现分析错误。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)">
      <summary>使用 URI 指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="inputUri">输入文档的 URI。</param>
      <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 值包含无法找到的文件名或目录。</exception>
      <exception cref="T:System.Net.WebException">无法解析 <paramref name="inputUri" /> 值。  
  
- 或 - 
处理该请求时出错。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">加载输入文档时出现分析错误。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>使用 URI 指定的输入文档执行转换，然后将结果输出到流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
      <param name="inputUri">输入文档的 URI。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
      <param name="results">要输出到的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 值包含无法找到的文件名或目录。</exception>
      <exception cref="T:System.Net.WebException">无法解析 <paramref name="inputUri" /> 值。  
  
- 或 - 
处理请求时发生错误</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">加载输入文档时出现分析错误。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>使用 URI 指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="inputUri">输入文档的 URI。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
      <param name="results">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 值包含无法找到的文件名或目录。</exception>
      <exception cref="T:System.Net.WebException">无法解析 <paramref name="inputUri" /> 值。  
  
- 或 - 
处理请求时发生错误</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">加载输入文档时出现分析错误。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>使用 URI 指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
      <param name="inputUri">输入文档的 URI。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
      <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputtUri" /> 值包含无法找到的文件名或目录。</exception>
      <exception cref="T:System.Net.WebException">无法解析 <paramref name="inputUri" /> 值。  
  
- 或 - 
处理该请求时出错。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">加载输入文档时出现分析错误。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input">包含输入文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 对象指定的输入文档执行转换，然后将结果输出到流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
      <param name="input">包含输入文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
      <param name="results">要输出到的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
      <param name="input">包含输入文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
      <param name="results">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
      <param name="input">包含输入文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
      <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数，而 XmlResolver 解析 XSLT <c>document()</c> 函数。</summary>
      <param name="input">包含输入文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
      <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
      <param name="documentResolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 Microsoft .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的输入文档执行转换，然后将结果输出到流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
      <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 Microsoft .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
      <param name="results">要输出到的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
      <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 Microsoft .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
      <param name="results">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
      <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 Microsoft .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
      <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数，而 <see cref="T:System.Xml.XmlResolver" /> 解析 XSLT <see langword="document()" /> 函数。</summary>
      <param name="input">由 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的要转换的文档。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 形式的参数列表。</param>
      <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <see langword="xsl:output" /> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
      <param name="documentResolver">用于解析 XSLT <see langword="document()" /> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <see langword="document()" /> 函数。</param>
    </member>
    <member name="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings">
      <summary>获取一个 <see cref="T:System.Xml.XmlWriterSettings" /> 对象，该对象包含从样式表的 <c>xsl:output</c> 元素派生的输出信息。</summary>
      <returns>一个只读 <see cref="T:System.Xml.XmlWriterSettings" /> 对象，其中包含从样式表的 <c>xsl： output</c> 元素派生的输出信息。 此值可为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltArgumentList">
      <summary>包含数目可变的参数（这些参数是 XSLT 参数，或者是扩展对象）。</summary>
    </member>
    <member name="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered">
      <summary>
        <c>xsl:message</c> 元素在样式表中指定了一则消息时将发生此事件。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.#ctor">
      <summary>实施 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 的新实例。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)">
      <summary>将新对象添至 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 并将其与命名空间 URI 关联。</summary>
      <param name="namespaceUri">要与对象关联的命名空间 URI。 若要使用默认命名空间，请指定空字符串。</param>
      <param name="extension">要添加到列表中的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceUri" /> 为 <see langword="null" /> 或 http://www.w3.org/1999/XSL/Transform 
<paramref name="namespaceUri" /> 已经具有与其关联的扩展对象。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有足够的权限调用此方法。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)">
      <summary>将参数添至 <see cref="T:System.Xml.Xsl.XsltArgumentList" />，并将其与命名空间限定名关联。</summary>
      <param name="name">要与参数关联的名称。</param>
      <param name="namespaceUri">与参数关联的命名空间 URI。 若要使用默认命名空间，请指定空字符串。</param>
      <param name="parameter">要添至列表的参数值或对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceUri" /> 为 <see langword="null" /> 或 http://www.w3.org/1999/XSL/Transform。  
  
根据 W3C XML 规范，<paramref name="name" /> 不是有效名称。  
  
<paramref name="namespaceUri" /> 已经具有与其关联的参数。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.Clear">
      <summary>从 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 移除所有参数和扩展对象。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)">
      <summary>获取与给定命名空间关联的对象。</summary>
      <param name="namespaceUri">对象的命名空间 URI。</param>
      <returns>命名空间 URI 对象，如果未找到命名空间 URI 对象，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)">
      <summary>获取与命名空间限定名关联的参数。</summary>
      <param name="name">参数的名称。 虽然 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 并不检查以确保所传递名称为有效本地名称，但名称不能是 <see langword="null" />。</param>
      <param name="namespaceUri">与参数关联的命名空间 URI。</param>
      <returns>参数对象，如果未找到参数对象则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)">
      <summary>从 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 移除带有命名空间 URI 的对象。</summary>
      <param name="namespaceUri">与要移除对象关联的命名空间 URI。</param>
      <returns>带有命名空间 URI 的对象，如果未找到带有命名空间 URI 的对象，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)">
      <summary>从 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 移除参数。</summary>
      <param name="name">要移除的参数的名称。 虽然 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 并不检查以确保所传递名称为有效本地名称，但名称不能是 <see langword="null" />。</param>
      <param name="namespaceUri">要移除参数的命名空间 URI。</param>
      <returns>参数对象，如果未找到参数对象则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltCompileException">
      <summary>在 XSLT 样式表中发现错误时由 Load 方法引发的异常****。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)">
      <summary>初始化 <see langword="XsltCompileException" /> 类的新实例。</summary>
      <param name="inner">引发 <see langword="XsltCompileException" /> 的 <see cref="T:System.Exception" />。</param>
      <param name="sourceUri">样式表的位置路径。</param>
      <param name="lineNumber">行号，指示样式表中发生错误的位置。</param>
      <param name="linePosition">行位置，指示样式表中发生错误的位置。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象中的信息初始化 <see langword="XsltCompileException" /> 类的新实例。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象，包含 <see langword="XsltCompileException" /> 的所有属性。</param>
      <param name="context">
        <see langword="StreamingContext" /> 对象，包含上下文信息。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">作为当前异常原因的异常，如果没有指定内部异常，则为 <see langword="null" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>对于给定的 <see langword="XsltCompileException" />，将所有的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 属性流式写入 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象。</param>
      <param name="context">
        <see langword="StreamingContext" /> 对象。</param>
    </member>
    <member name="T:System.Xml.Xsl.XsltContext">
      <summary>封装可扩展样式表转换语言 (XSLT) 处理器的当前执行上下文，使 XML 路径语言 (XPath) 在 XPath 表达式中解析函数、参数和命名空间。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Xsl.XsltContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor(System.Xml.NameTable)">
      <summary>使用指定的 <see cref="T:System.Xml.Xsl.XsltContext" /> 初始化 <see cref="T:System.Xml.NameTable" /> 类的新实例。</summary>
      <param name="table">要使用的 <see cref="T:System.Xml.NameTable" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)">
      <summary>当在派生类中重写时，根据 XSLT 处理器加载文档的顺序对两个文档的基统一资源标识符 (URI) 进行比较（为 <see cref="T:System.Xml.Xsl.XslTransform" /> 类）。</summary>
      <param name="baseUri">要比较的第一个文档的基 URI。</param>
      <param name="nextbaseUri">要比较的第二个文档的基 URI。</param>
      <returns>说明两个基 URI 的相对顺序的整数值。如果 <paramref name="baseUri" /> 在 <paramref name="nextbaseUri" /> 之前发生，则为 1；如果两个基 URI 同时发生，则为 0；如果 <paramref name="baseUri" /> 在 <paramref name="nextbaseUri" /> 之后发生，则为 1。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary>在派生类中重写时，计算是要保留空白节点还是针对给定上下文将它们抽出。</summary>
      <param name="node">在当前上下文中要保留或抽出的空白节点。</param>
      <returns>如果要保留空白，则为 <see langword="true" />；如果要抽出空白，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary>在派生类中重写时，解析函数引用并返回表示该函数的 <see cref="T:System.Xml.Xsl.IXsltContextFunction" />。 在执行时使用 <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> 来获取该函数的返回值。</summary>
      <param name="prefix">在 XPath 表达式中显示的函数的前缀。</param>
      <param name="name">函数的名称。</param>
      <param name="ArgTypes">正在被解析的函数的自变量类型的数组。 这样您就可以在同名称的方法（例如，重载方法）中进行选择。</param>
      <returns>一个 <see cref="T:System.Xml.Xsl.IXsltContextFunction" />，它表示该函数。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)">
      <summary>当在派生类中重写时，解析变量引用并返回一个表示该变量的 <see cref="T:System.Xml.Xsl.IXsltContextVariable" />。</summary>
      <param name="prefix">在 XPath 表达式中显示的变量的前缀。</param>
      <param name="name">变量名。</param>
      <returns>一个 <see cref="T:System.Xml.Xsl.IXsltContextVariable" />，它在运行时表示该变量。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltContext.Whitespace">
      <summary>当重写派生类时，获取一个值，用于指示输出中是否包含空白节点。</summary>
      <returns>如果为 <see langword="true" />，则在源文档中检查空白节点以便包含在输出中；如果为 <see langword="false" />，则不计算空白节点。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltException">
      <summary>处理 XSLT 转换而发生错误时引发的异常。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Xsl.XsltException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象中的信息初始化 <see langword="XsltException" /> 类的新实例。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象，包含 <see langword="XsltException" /> 的所有属性。</param>
      <param name="context">
        <see langword="StreamingContext" /> 对象。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Xml.Xsl.XsltException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see langword="XsltException" /> 类的新实例。</summary>
      <param name="message">错误条件的说明。</param>
      <param name="innerException">引发 <see langword="XsltException" /> 的 <see cref="T:System.Exception" />（如果存在）。 此值可为 <see langword="null" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>对于给定的 <see langword="XsltException" />，将所有的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 属性流式写入 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象。</param>
      <param name="context">
        <see langword="StreamingContext" /> 对象。</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LineNumber">
      <summary>获取指示样式表中发生错误的位置的行号。</summary>
      <returns>行号，指示样式表中发生错误的位置。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LinePosition">
      <summary>获取指示样式表中发生错误的位置的行位置。</summary>
      <returns>行位置，指示样式表中发生错误的位置。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.Message">
      <summary>获取描述当前异常的带有格式的错误信息。</summary>
      <returns>描述当前异常的带有格式的错误信息。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.SourceUri">
      <summary>获取样式表的位置路径。</summary>
      <returns>样式表的位置路径。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs">
      <summary>为 <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message">
      <summary>获取 <c>xsl:message</c> 元素的内容。</summary>
      <returns>
        <c>Xsl： message</c>元素的内容。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventHandler">
      <summary>表示用来处理 <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />。</param>
    </member>
    <member name="T:System.Xml.Xsl.XslTransform">
      <summary>使用可扩展样式表转换语言 (XSLT) 转换 XML 数据。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Xsl.XslTransform" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String)">
      <summary>加载由一个 URL 指定的 XSLT 样式表。</summary>
      <param name="url">指定要加载的 XSLT 样式表的 URL。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
      <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)">
      <summary>加载由一个 URL 指定的 XSLT 样式表。</summary>
      <param name="url">指定要加载的 XSLT 样式表的 URL。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用于加载该样式表以及 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。  
  
如果这是 <see langword="null" />，将使用不具有用户凭据的默认 <see cref="T:System.Xml.XmlUrlResolver" /> 来打开样式表。 不使用默认的 <see cref="T:System.Xml.XmlUrlResolver" /> 来解析样式表中的任何外部资源，因此将不解析 <c>xsl:import</c> 和 <c>xsl:include</c> 元素。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
      <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">
      <summary>加载 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 样式表。</summary>
      <param name="stylesheet">包含 XSLT 样式表的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
      <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>加载 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 样式表。</summary>
      <param name="stylesheet">包含 XSLT 样式表的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
      <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>加载 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 样式表。</summary>
      <param name="stylesheet">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
      <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
      <summary>加载 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 样式表。</summary>
      <param name="stylesheet">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
      <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)">
      <summary>加载 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 样式表。</summary>
      <param name="stylesheet">包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
      <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)">
      <summary>加载 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 样式表。</summary>
      <param name="stylesheet">包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
      <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)">
      <summary>转换输入文件中的 XML 数据并将结果输出到输出文件。</summary>
      <param name="inputfile">要转换的源文档的 URL。</param>
      <param name="outputfile">输出文件的 URL。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)">
      <summary>转换输入文件中的 XML 数据并将结果输出到输出文件。</summary>
      <param name="inputfile">要转换的源文档的 URL。</param>
      <param name="outputfile">输出文件的 URL。</param>
      <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <returns>包含转换结果的 <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.Stream" />。</summary>
      <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="output">要输出到的流。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.Stream" />。</summary>
      <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="output">要输出到的流。</param>
      <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="output">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="output">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />。</param>
      <returns>包含转换结果的 <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="output">要输出到的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="output">要输出到的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
      <returns>包含转换结果的 <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.Stream" />。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="output">要输出到的流。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.Stream" />。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="output">要输出到的流。</param>
      <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="output">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="output">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
      <returns>包含转换结果的 <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>使用指定的参数转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="output">要输出到的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>使用指定的参数转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
      <param name="output">要输出到的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />。</param>
      <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslTransform.XmlResolver">
      <summary>设置调用 <see cref="T:System.Xml.XmlResolver" /> 方法时用于解析外部资源的 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />。</summary>
      <returns>要在转换期间使用的 <see cref="T:System.Xml.XmlResolver" />。 如果设置为 <see langword="null" /> ，则不解析 XSLT <c>文档 ( # B1 </c> 函数。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltSettings">
      <summary>指定执行 XSLT 样式表时要支持的 XSLT 功能。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor">
      <summary>使用默认设置初始化 <see cref="T:System.Xml.Xsl.XsltSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor(System.Boolean,System.Boolean)">
      <summary>使用指定的设置初始化 <see cref="T:System.Xml.Xsl.XsltSettings" /> 类的新实例。</summary>
      <param name="enableDocumentFunction">启用对 XSLT <c>document()</c> 函数的支持，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="enableScript">启用对嵌入式脚本块的支持，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.Default">
      <summary>获取一个带有默认设置的 <see cref="T:System.Xml.Xsl.XsltSettings" /> 对象。 禁用对 XSLT <c>document()</c> 函数和嵌入脚本块的支持。</summary>
      <returns>
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 对象，其 <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> 和 <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> 属性设置为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction">
      <summary>获取或设置一个值，指示是否启用对 XSLT <c>document()</c> 函数的支持。</summary>
      <returns>
        <see langword="true" /> 若要支持 XSLT <c>文档 ( # B1 </c> 函数;否则为 <see langword="false" /> 。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableScript">
      <summary>获取或设置一个值，指示是否启用对嵌入式脚本块的支持。</summary>
      <returns>支持 XSLT 样式表中的脚本块，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.TrustedXslt">
      <summary>获取一个 <see cref="T:System.Xml.Xsl.XsltSettings" /> 对象，该对象启用对 XSLT <c>document()</c> 函数和嵌入式脚本块的支持。</summary>
      <returns>
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 对象，其 <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> 和 <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> 属性设置为 <see langword="true" />。</returns>
    </member>
  </members>
</doc>