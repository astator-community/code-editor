<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.RegularExpressions</name>
  </assembly>
  <members>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>表示来自单个成功子表达式捕获的结果。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>通过调用 <see cref="P:System.Text.RegularExpressions.Capture.Value" /> 属性，从输入的字符串中检索捕获的子字符串。</summary>
      <returns>通过匹配捕获的子字符串。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>原始字符串中发现捕获的子字符串的第一个字符的位置。</summary>
      <returns>原始字符串中发现捕获的子字符串的从零开始的起始位置。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>获取捕获的子字符串的长度。</summary>
      <returns>捕获的子字符串的长度。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>获取输入的字符串中的捕获的子字符串。</summary>
      <returns>通过匹配捕获的子字符串。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>表示单个捕获组执行的捕获集。 该集合是不可变的（只读），没有公共构造函数。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>将集合的所有元素复制到给定数组中（从给定索引处开始）。</summary>
      <param name="array">要将集合复制到其中的数组。</param>
      <param name="arrayIndex">目标数组中开始复制的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 在 <paramref name="array" /> 的界限外。  
  
- 或 - 
 <paramref name="arrayIndex" /> 以及 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> 在 <paramref name="array" /> 的界限外。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Text.RegularExpressions.Capture[],System.Int32)">
      <summary>将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从集合复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">源集合中的元素数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 的末尾的可用空间。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>提供一个循环访问集合的枚举器。</summary>
      <returns>包含 <see cref="T:System.Text.RegularExpressions.Capture" /> 中所有 <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 对象的对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Add(System.Text.RegularExpressions.Capture)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要添加到集合中的对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Clear">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Contains(System.Text.RegularExpressions.Capture)">
      <summary>确定集合中是否包含特定值。</summary>
      <param name="item">要在集合中定位的对象。</param>
      <returns>如果在集合中找到了 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Remove(System.Text.RegularExpressions.Capture)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要从集合中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <returns>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Capture}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#IndexOf(System.Text.RegularExpressions.Capture)">
      <summary>确定集合中特定项的索引。</summary>
      <param name="item">要在集合中定位的对象。</param>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Insert(System.Int32,System.Text.RegularExpressions.Capture)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item">要插入到集合中的对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#RemoveAt(System.Int32)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Add(System.Object)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要添加到集合中的对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <returns>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Clear">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定集合中是否包含特定值。</summary>
      <param name="value">要在集合中定位的对象。</param>
      <returns>如果在集合中找到 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集合中特定项的索引。</summary>
      <param name="value">要在集合中定位的对象。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到集合中的对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Remove(System.Object)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要从集合中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>获取由该组捕获的子字符串数。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 中的项数。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>获取一个值，指示集合是否为只读集合。</summary>
      <returns>在所有情况下均为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否同步（线程安全）。</summary>
      <returns>在所有情况下均为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>获取该集合的单个成员。</summary>
      <param name="i">捕获集合中的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小于 0 或大于 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />。</exception>
      <returns>位于集合中 <paramref name="i" /> 位置的捕获子字符串。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Item(System.Int32)">
      <summary>获取指定索引处的元素。</summary>
      <param name="index">要获取的元素的索引(索引从零开始)。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>
        <see langword="true" />，因为集合具有固定大小。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取指定索引处的元素。</summary>
      <param name="index">要获取的元素的索引(索引从零开始)。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>表示来自单个捕获组的结果。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
      <summary>返回一个与提供的对象等效的 <see langword="Group" /> 对象，在多个线程间共享该对象是安全的。</summary>
      <param name="inner">输入 <see cref="T:System.Text.RegularExpressions.Group" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> 为 <see langword="null" />。</exception>
      <returns>一个正则表达式 <see langword="Group" /> 对象。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>按从里到外、从左到右的顺序获取由捕获组匹配的所有捕获的集合（如果正则表达式用 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 选项修改了，则顺序为按从里到外、从右到左）。 该集合可以有零个或更多的项。</summary>
      <returns>由该组匹配的子字符串的集合。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Name">
      <summary>返回由当前实例表示的捕获组的名称。</summary>
      <returns>由当前实例表示的捕获组的名称。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>获取一个值，该值指示匹配是否成功。</summary>
      <returns>如果匹配成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>返回一次匹配中捕获的组的集。 该集合是不可变的（只读），没有公共构造函数。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.ContainsKey(System.String)">
      <summary>确定组集合是否包含由指定名称标识的捕获组。</summary>
      <param name="key">一个字符串，其中包含要查找的捕获组的名称。</param>
      <returns>如果组集合包含由 <paramref name="key" /> 标识的捕获组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>将集合的所有元素复制到给定数组中（从给定索引处开始）。</summary>
      <param name="array">要将集合复制到其中的数组。</param>
      <param name="arrayIndex">目标数组中开始复制的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 在 <paramref name="array" /> 的界限外。

- 或 -

<paramref name="arrayIndex" /> 以及 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> 在 <paramref name="array" /> 的界限外。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)">
      <summary>从特定的数组索引开始，将组集合的元素复制到 <see cref="T:System.Text.RegularExpressions.Group" /> 数组中。</summary>
      <param name="array">作为组集合中元素的复制目标位置的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。

- 或 -

<paramref name="arrayIndex" /> 大于 <paramref name="array" /> 的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> - <paramref name="arrayIndex" /> 的长度小于组集合计数。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>提供一个循环访问集合的枚举器。</summary>
      <returns>一个枚举器，其中包含 <see cref="T:System.Text.RegularExpressions.Group" /> 中的所有 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要添加到集合中的组。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。 这是一个只读集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">不支持此方法。 这是一个只读集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)">
      <summary>确定组集合中是否包含特定的组项。</summary>
      <param name="item">要在组集合中查找的组。</param>
      <returns>如果在组集合中找到该项组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要删除的组。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。 这是一个只读集合。</exception>
      <returns>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Text#RegularExpressions#Group}}#GetEnumerator">
      <summary>提供一个循环访问组集合的枚举器。</summary>
      <returns>一个包含 <see cref="T:System.Text.RegularExpressions.Group" /> 集合中的所有名称和对象的枚举器。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator">
      <summary>提供一个循环访问组集合的枚举器。</summary>
      <returns>一个包含组集合中的所有 <see cref="T:System.Text.RegularExpressions.Group" /> 对象的枚举器。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)">
      <summary>确定组集合中特定组的索引。</summary>
      <param name="item">要在组集合中查找的组。</param>
      <returns>
        <paramref name="item" /> 的索引（如果找到）；否则为 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要插入组的位置。</param>
      <param name="item">要插入的组。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。 这是一个只读集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要删除的组的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。 这是一个只读集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要添加到组集合中的对象。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。 这是一个只读集合。</exception>
      <returns>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">不支持此方法。 这是一个只读集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定组集合中是否包含特定的组项。</summary>
      <param name="value">要在组集合中查找的组。</param>
      <returns>如果在组集合中找到该项组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定组集合中特定组的索引。</summary>
      <param name="value">要在组集合中查找的组。</param>
      <returns>
        <paramref name="item" /> 的索引（如果找到）；否则为 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要插入组的位置。</param>
      <param name="value">要插入的组。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。 这是一个只读集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要删除的组。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。 这是一个只读集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要删除的组的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。 这是一个只读集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String,System.Text.RegularExpressions.Group@)">
      <summary>尝试检索由提供的名称键标识的组（如果它存在于组集合中）。</summary>
      <param name="key">一个字符串，其中包含要查找的组名称键。</param>
      <param name="value">当方法返回时，如果找到名称为 <paramref name="key" /> 的组，则返回该组；否则，如果未找到，则返回 <see langword="null" />。</param>
      <returns>如果由提供的名称键标识的组存在，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>返回集合中的组数。</summary>
      <returns>集合中的组数。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>获取一个值，指示集合是否为只读集合。</summary>
      <returns>在所有情况下均为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的访问（线程安全）。</summary>
      <returns>在所有情况下均为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>允许通过整数索引访问集合成员。</summary>
      <param name="groupnum">要检索的集合成员的索引（从零开始）。</param>
      <returns>由 <paramref name="groupnum" /> 指定的集合的成员。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>允许通过字符串索引访问集合成员。</summary>
      <param name="groupname">捕获组的名称。</param>
      <returns>由 <paramref name="groupname" /> 指定的集合的成员。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Keys">
      <summary>获取一个字符串枚举，其中包含组集合的名称键。</summary>
      <returns>组集合的名称键。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的访问的对象。</summary>
      <returns>要同步的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的副本。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)">
      <summary>获取集合中指定位置的组。</summary>
      <param name="index">组集合中组的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">无法设置项。 这是一个只读集合。</exception>
      <returns>所需位置中的组。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示组集合是否具有固定大小。</summary>
      <returns>始终为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取所需位置中的组。</summary>
      <param name="index">组集合中组的零索引位置。</param>
      <exception cref="T:System.NotSupportedException">无法设置项。 这是一个只读集合。</exception>
      <returns>所需位置中的组。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Values">
      <summary>获取包含组集合中的所有组的组枚举。</summary>
      <returns>组枚举。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>表示单个正则表达式匹配的结果。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>从上一个匹配结束的位置（即在上一个匹配字符之后的字符）开始返回一个包含下一个匹配结果的新 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。</summary>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
      <returns>下一个正则表达式匹配。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>返回对指定替换模式的扩展。</summary>
      <param name="replacement">要使用的替换模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">不允许对此模式进行扩展。</exception>
      <returns>
        <paramref name="replacement" /> 参数的扩展版本。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
      <summary>返回一个与提供的实例等效的 <see cref="T:System.Text.RegularExpressions.Match" /> 实例，该实例适合在多个线程间共享。</summary>
      <param name="inner">与预期匹配等效的正则表达式匹配。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> 为 <see langword="null" />。</exception>
      <returns>适合在多个线程间共享的正则表达式匹配。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>获取空组。 所有失败的匹配都返回此空匹配。</summary>
      <returns>空匹配。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>获取由正则表达式匹配的组的集合。</summary>
      <returns>由模式匹配的字符组。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>表示通过以迭代方式将正则表达式模式应用于输入字符串所找到的成功匹配的集合。  该集合是不可变的（只读），没有公共构造函数。 <see cref="T:System.Text.RegularExpressions.Regex.Matches(System.String)" /> 方法将返回 <see cref="T:System.Text.RegularExpressions.MatchCollection" /> 对象。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>从给定索引处开始将集合的所有元素复制到给定数组。</summary>
      <param name="array">要将集合复制到其中的数组。</param>
      <param name="arrayIndex">数组中开始复制的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是一个多维数组。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 在 <paramref name="array" /> 的界限外。  
  
- 或 - 
 <paramref name="arrayIndex" /> 以及 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /> 在 <paramref name="array" /> 的界限外。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Text.RegularExpressions.Match[],System.Int32)">
      <summary>将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从集合复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>提供一个循环访问集合的枚举器。</summary>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
      <returns>包含 <see cref="T:System.Text.RegularExpressions.Match" /> 中所有 <see cref="T:System.Text.RegularExpressions.MatchCollection" /> 对象的对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add(System.Text.RegularExpressions.Match)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要添加到集合中的对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains(System.Text.RegularExpressions.Match)">
      <summary>确定集合中是否包含特定值。</summary>
      <param name="item">要在集合中定位的对象。</param>
      <returns>如果在集合中找到了 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove(System.Text.RegularExpressions.Match)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要从集合中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <returns>如果从集合中成功移除了 <see langword="true" />，则为 <paramref name="item" />；否则为 <see langword="false" />。 如果未在原始集合中找到 <paramref name="item" />，此方法也会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf(System.Text.RegularExpressions.Match)">
      <summary>确定集合中特定项的索引。</summary>
      <param name="item">要在集合中定位的对象。</param>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert(System.Int32,System.Text.RegularExpressions.Match)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item">要插入到集合中的对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt(System.Int32)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add(System.Object)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要添加到集合中的对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <returns>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定集合中是否包含特定值。</summary>
      <param name="value">要在集合中定位的对象。</param>
      <returns>如果在集合中找到 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集合中特定项的索引。</summary>
      <param name="value">要在集合中定位的对象。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到集合中的对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove(System.Object)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要从集合中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>获取匹配项的数目。</summary>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
      <returns>匹配项的数目。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>获取一个值，指示集合是否为只读集合。</summary>
      <returns>在所有情况下均为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否已同步（线程安全）。</summary>
      <returns>在所有情况下均为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>获取该集合的单个成员。</summary>
      <param name="i">
        <see cref="T:System.Text.RegularExpressions.Match" /> 集合中的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小于 0，或者大于或等于 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
      <returns>位于集合中 <paramref name="i" /> 位置的捕获子字符串。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。 此属性始终返回对象本身。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item(System.Int32)">
      <summary>获取指定索引处的元素。</summary>
      <param name="index">要获取的元素的索引(索引从零开始)。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>
        <see langword="true" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取指定索引处的元素。</summary>
      <param name="index">要获取的元素的索引(索引从零开始)。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>表示此方法，此方法于每次在 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法操作期间找到单一正则表达式匹配时调用。</summary>
      <param name="match">
        <see cref="T:System.Text.RegularExpressions.Match" /> 对象表示 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法操作期间的单个正则表达式匹配。</param>
      <returns>由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托表示的方法返回的字符串。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>表示不可变的正则表达式。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capnames">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.caps">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.factory">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>指定模式匹配操作不应超时。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.internalMatchTimeout">
      <summary>操作超时之前在一个模式匹配操作中可以经过的最长时间。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化数据初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。</summary>
      <param name="info">包含串行化模式和 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 信息的对象。</param>
      <param name="context">此序列化的目标。 （未使用此参数；指定 <see langword="null" />。）</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 包含的模式为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="info" /> 包含无效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 标志。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>为指定的正则表达式初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。</summary>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>使用修改模式的选项为指定的正则表达式初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。</summary>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">修改正则表达式的枚举值的按位组合。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 包含无效标志。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>使用修改模式的选项和指定在超时前多久模式匹配方法应进行匹配尝试的值为指定正则表达式初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。</summary>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">修改正则表达式的枚举值的按位组合。</param>
      <param name="matchTimeout">超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。  
  
- 或 - 
 <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)">
      <summary>将一个或多个指定的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象编译为命名程序集。</summary>
      <param name="regexinfos">描述要编译的正则表达式的数组。</param>
      <param name="assemblyname">程序集的文件名。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> 参数的 <see cref="P:System.Reflection.AssemblyName.Name" /> 属性值是一个空字符串或 null。  
  
- 或 - 
<paramref name="regexinfos" /> 中的一个或多个对象的正则表达式模式包含无效语法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 或 <paramref name="regexinfos" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">仅 .NET Core：不支持创建已编译的正则表达式的程序集。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])">
      <summary>将一个或多个指定的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象编译为具有指定特性的命名程序集。</summary>
      <param name="regexinfos">描述要编译的正则表达式的数组。</param>
      <param name="assemblyname">程序集的文件名。</param>
      <param name="attributes">定义要应用于程序集的特性的数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> 参数的 <see cref="P:System.Reflection.AssemblyName.Name" /> 属性值是一个空字符串或 null。  
  
- 或 - 
<paramref name="regexinfos" /> 中的一个或多个对象的正则表达式模式包含无效语法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 或 <paramref name="regexinfos" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">仅 .NET Core：不支持创建已编译的正则表达式的程序集。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)">
      <summary>将一个或多个指定的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象和一个指定的资源文件编译为具有指定特性的命名程序集。</summary>
      <param name="regexinfos">描述要编译的正则表达式的数组。</param>
      <param name="assemblyname">程序集的文件名。</param>
      <param name="attributes">定义要应用于程序集的特性的数组。</param>
      <param name="resourceFile">要包含在程序集中的 Win32 资源文件的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> 参数的 <see cref="P:System.Reflection.AssemblyName.Name" /> 属性值是一个空字符串或 null。  
  
- 或 - 
<paramref name="regexinfos" /> 中的一个或多个对象的正则表达式模式包含无效语法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 或 <paramref name="regexinfos" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="resourceFile" /> 参数指定了无效的 Win32 资源文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="resourceFile" /> 参数指定的文件。</exception>
      <exception cref="T:System.PlatformNotSupportedException">仅 .NET Core：不支持创建已编译的正则表达式的程序集。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>通过替换为转义码来转义最小的字符集（\、*、+、?、|、{、[、(、)、^、$、.、# 和空白）。 这将指示正则表达式引擎按原义解释这些字符而不是解释为元字符。</summary>
      <param name="str">包含要转换的文本的输入字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。</exception>
      <returns>由转换为转义形式的元字符组成的字符串。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>返回正则表达式的捕获组名数组。</summary>
      <returns>组名的字符串数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>返回与数组中的组名相对应的捕获组号的数组。</summary>
      <returns>组号的整数数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>获取与指定组号相对应的组名。</summary>
      <param name="i">要转换为相应组名的组号。</param>
      <returns>包含与指定组号关联的组名的字符串。 如果没有与 <paramref name="i" /> 对应的组名，此方法会返回 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>返回与指定组名相对应的组号。</summary>
      <param name="name">要转换为相应组号的组名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <returns>与指定组名相对应的组号，如果 <paramref name="name" /> 不是有效组名，则为 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.InitializeReferences">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <exception cref="T:System.NotSupportedException">引用已初始化。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>指示 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式在指定的输入字符串中是否找到了匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>如果正则表达式找到匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>指示 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式在指定的输入字符串中，从该字符串中的指定起始位置开始是否找到了匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="startat">开始搜索的字符位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>如果正则表达式找到匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>指示所指定的正则表达式在指定的输入字符串中是否找到了匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>如果正则表达式找到匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>指示所指定的正则表达式是否使用指定的匹配选项在指定的输入字符串中找到了匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>如果正则表达式找到匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指示所指定的正则表达式是否使用指定的匹配选项和超时间隔在指定的输入字符串中找到了匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <param name="matchTimeout">超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。  
  
- 或 - 
 <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
      <returns>如果正则表达式找到匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>在指定的输入字符串中搜索 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式的第一个匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个包含有关匹配的信息的对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>从输入字符串中的指定起始位置开始，在该字符串中搜索正则表达式的第一个匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="startat">开始搜索的字符位置（从零开始）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个包含有关匹配的信息的对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>从指定的起始位置开始，在输入字符串中搜索正则表达式的第一个匹配项，并且仅搜索指定数量的字符。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="beginning">输入字符串中从零开始的字符位置，它定义要搜索的最左侧的位置。</param>
      <param name="length">子字符串中包含在搜索中的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> 小于零或大于 <paramref name="input" /> 的长度。  
  
- 或 - 
 <paramref name="length" /> 小于零或大于 <paramref name="input" /> 的长度。  
  
- 或 - 
 <paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="-1" /> 表示 <paramref name="input" /> 范围外的某个位置。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个包含有关匹配的信息的对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>在指定的输入字符串中搜索指定的正则表达式的第一个匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个包含有关匹配的信息的对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>使用指定的匹配选项在输入字符串中搜索指定的正则表达式的第一个匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个包含有关匹配的信息的对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>使用指定的匹配选项和超时间隔在输入字符串中搜索指定的正则表达式的第一个匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <param name="matchTimeout">超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。  
  
- 或 - 
 <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个包含有关匹配的信息的对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>在指定的输入字符串中搜索正则表达式的所有匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的集合。 如果未找到匹配项，则此方法将返回一个空集合对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>从字符串中的指定起始位置开始，在指定的输入字符串中搜索正则表达式的所有匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="startat">在输入字符串中开始搜索的字符位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。</exception>
      <returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的集合。 如果未找到匹配项，则此方法将返回一个空集合对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>在指定的输入字符串中搜索指定的正则表达式的所有匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的集合。 如果未找到匹配项，则此方法将返回一个空集合对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>使用指定的匹配选项在指定的输入字符串中搜索指定的正则表达式的所有匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的按位组合，这些枚举值指定用于匹配的选项。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的集合。 如果未找到匹配项，则此方法将返回一个空集合对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>使用指定的匹配选项和超时间隔在指定的输入字符串中搜索指定的正则表达式的所有匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的按位组合，这些枚举值指定用于匹配的选项。</param>
      <param name="matchTimeout">超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。  
  
- 或 - 
 <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
      <returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的集合。 如果未找到匹配项，则此方法将返回一个空集合对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>在指定的输入字符串内，使用指定的替换字符串替换与某个正则表达式模式匹配的所有的字符串。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="replacement">替换字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>在指定输入字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="replacement">替换字符串。</param>
      <param name="count">可进行替换的最大次数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>在指定输入子字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="replacement">替换字符串。</param>
      <param name="count">可进行替换的最大次数。</param>
      <param name="startat">输入字符串中开始执行搜索的字符位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="replacement">替换字符串。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。 指定的选项将修改匹配操作。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="replacement">替换字符串。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。 如果未找到匹配项，则其他参数指定修改匹配操作的选项和超时间隔。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="replacement">替换字符串。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <param name="matchTimeout">超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。  
  
- 或 - 
 <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>在指定的输入字符串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定的正则表达式匹配的所有字符串。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="evaluator">一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。 如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>在指定的输入字符串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定的正则表达式匹配的所有字符串。 指定的选项将修改匹配操作。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="evaluator">一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。 如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>在指定的输入字符串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定的正则表达式匹配的所有子字符串。 如果未找到匹配项，则其他参数指定修改匹配操作的选项和超时间隔。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="evaluator">一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <param name="matchTimeout">超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。  
  
- 或 - 
 <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>在指定的输入字符串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定的正则表达式匹配的所有字符串。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="evaluator">一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。 如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="evaluator">一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。</param>
      <param name="count">进行替换的最大次数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。 如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>在指定的输入子字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="evaluator">一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。</param>
      <param name="count">进行替换的最大次数。</param>
      <param name="startat">输入字符串中开始执行搜索的字符位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。 如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>在由 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数指定的正则表达式模式所定义的位置，将输入字符串拆分为子字符串数组。</summary>
      <param name="input">要拆分的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>字符串数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>在由 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式定义的位置，将输入字符串拆分为子字符串数组指定的最大次数。</summary>
      <param name="input">要拆分的字符串。</param>
      <param name="count">可拆分的最大次数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>字符串数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>在由 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式定义的位置，将输入字符串拆分为子字符串数组指定的最大次数。 从输入字符串的指定字符位置开始搜索正则表达式模式。</summary>
      <param name="input">要拆分的字符串。</param>
      <param name="count">可拆分的最大次数。</param>
      <param name="startat">输入字符串中将开始搜索的字符位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>字符串数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>在由正则表达式模式定义的位置将输入字符串拆分为一个子字符串数组。</summary>
      <param name="input">要拆分的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>字符串数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>在由指定正则表达式模式定义的位置将输入字符串拆分为一个子字符串数组。 指定的选项将修改匹配操作。</summary>
      <param name="input">要拆分的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>字符串数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>在由指定正则表达式模式定义的位置将输入字符串拆分为一个子字符串数组。 如果未找到匹配项，则其他参数指定修改匹配操作的选项和超时间隔。</summary>
      <param name="input">要拆分的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <param name="matchTimeout">超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。  
  
- 或 - 
 <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
      <returns>字符串数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象来反序列化当前 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象。</summary>
      <param name="si">要用序列化信息填充的对象。</param>
      <param name="context">存储和检索序列化数据的位置。 此参数留待将来使用。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>返回传入 <see langword="Regex" /> 构造函数的正则表达式模式。</summary>
      <returns>传入 <see langword="Regex" /> 构造函数的 <paramref name="pattern" /> 参数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>转换输入字符串中的任何转义字符。</summary>
      <param name="str">包含要转换的文本的输入字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> 包括无法识别的转义序列。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。</exception>
      <returns>包含任何转换为非转义形式的转义字符的字符串。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionC">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <returns>如果 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 属性包含 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 选项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <returns>如果 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 属性包含 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 选项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)">
      <summary>检查超时间隔是否在可接受的范围内。</summary>
      <param name="matchTimeout">要检查的超时间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时不在有效范围内。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>获取或设置已编译的正则表达式的当前静态缓存中的最大项数。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">集运算中的值小于零。</exception>
      <returns>静态缓存中的最大项数。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CapNames">
      <summary>获取或设置将命名捕获组映射到其索引值的字典。</summary>
      <exception cref="T:System.ArgumentNullException">向设置操作中的 <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> 属性分配的值是 <see langword="null" />。</exception>
      <returns>将命名捕获组映射到其索引值的字典。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Caps">
      <summary>获取或设置将编号捕获组映射到其索引值的字典。</summary>
      <exception cref="T:System.ArgumentNullException">向设置操作中的 <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> 属性分配的值是 <see langword="null" />。</exception>
      <returns>将编号捕获组映射到其索引值的字典。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>获取当前实例的超时间隔。</summary>
      <returns>在 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 引发之前或如果时间超期被禁用 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> ，在样式匹配操作符中可以经过的最长时间间隔。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>获取传递给 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数的选项。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 枚举 的一个或多个成员表示传递至 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数的选项。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>获取一个值，该值指示正则表达式是否从右向左进行搜索。</summary>
      <returns>如果正则表达式从右向左进行搜索，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexCompilationInfo">
      <summary>提供有关使用正则表达式将正则表达式编译为独立程序集的信息。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 类的新实例，该类包含有关要在程序集内包括的正则表达式的信息。</summary>
      <param name="pattern">要编译的正则表达式。</param>
      <param name="options">编译正则表达式时使用的正则表达式选项。</param>
      <param name="name">表示已编译的正则表达式的类型名称。</param>
      <param name="fullnamespace">新类型所属的命名空间。</param>
      <param name="ispublic">若要使所编译的正则表达式对公共可见，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="name" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="fullnamespace" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 类的新实例，该类包含有关要在程序集内包括的指定的超时值的信息。</summary>
      <param name="pattern">要编译的正则表达式。</param>
      <param name="options">编译正则表达式时使用的正则表达式选项。</param>
      <param name="name">表示已编译的正则表达式的类型名称。</param>
      <param name="fullnamespace">新类型所属的命名空间。</param>
      <param name="ispublic">若要使所编译的正则表达式对公共可见，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
      <param name="matchTimeout">正则表达式的默认超时间隔。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="name" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="fullnamespace" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic">
      <summary>获取或设置一个值，该值指示已编译的正则表达式是否具有公共可见性。</summary>
      <returns>如果正则表达式具有公共可见性，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout">
      <summary>获取或设置正则表达式的默认超时间隔。</summary>
      <returns>在样式对的操作可经过的默认最长时间间隔时间，在 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 引发之前或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> ，如果挂起被禁用。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Name">
      <summary>获取或设置表示已编译的正则表达式的类型名称。</summary>
      <exception cref="T:System.ArgumentNullException">此属性的值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此属性的值为空字符串。</exception>
      <returns>新类型的名称。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace">
      <summary>获取或设置新类型所属的命名空间。</summary>
      <exception cref="T:System.ArgumentNullException">此属性的值为 <see langword="null" />。</exception>
      <returns>新类型的命名空间。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Options">
      <summary>获取或设置编译正则表达式时使用的选项。</summary>
      <returns>枚举值的按位组合。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern">
      <summary>获取或设置要编译的正则表达式。</summary>
      <exception cref="T:System.ArgumentNullException">此属性的值为 <see langword="null" />。</exception>
      <returns>要编译的正则表达式。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>正则表达式模式匹配方法的执行时间超出其超时时间间隔时引发的异常。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>使用由系统提供的消息初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类的新实例。</summary>
      <param name="info">包含序列化数据的对象。</param>
      <param name="context">包含序列化数据的流。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>使用指定的消息字符串初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类的新实例。</summary>
      <param name="message">描述异常的字符串。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类的新实例。</summary>
      <param name="message">描述异常的字符串。</param>
      <param name="inner">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>使用有关正则表达式模式、输入文本和超时间隔的信息初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类的新实例。</summary>
      <param name="regexInput">发生超时时由正则表达式引擎处理的输入文本。</param>
      <param name="regexPattern">发生超时时由正则表达式引擎使用的模式。</param>
      <param name="matchTimeout">超时间隔。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">使用数据填充的序列化信息对象。</param>
      <param name="context">此序列化的目标。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>获取超时发生时正则表达式引擎正在处理的输入文本。</summary>
      <returns>正则表达式输入文本。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>获取正则表达式匹配的超时间隔。</summary>
      <returns>超时间隔。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>获取超时发生时用于匹配操作的正则表达式模式。</summary>
      <returns>正则表达式模式。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>提供用于设置正则表达式选项的枚举值。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>指定将正则表达式编译为程序集。 这会产生更快的执行速度，但会增加启动时间。 在调用 <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> 方法时，不应将此值分配给 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 属性。 有关详细信息，请参阅 正则表达式选项 一文中的 "已编译的正则表达式" 一节。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>指定忽略语言中的区域性差异。 有关详细信息，请参阅 正则表达式选项 一文中的 "使用固定区域性进行比较" 一节。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>为表达式启用符合 ECMAScript 的行为。 该值只能与 <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" />、<see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" /> 和 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 值一起使用。 该值与其他任何值一起使用均将导致异常。  
  
有关选项的详细信息 <see cref="F:System.Text.RegularExpressions.RegexOptions.ECMAScript" /> ，请参阅 正则表达式选项 一文中的 "ECMAScript 匹配行为" 一节。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>指定唯一有效的捕获是显式命名或编号的窗体组 (？ &lt;name &gt; ... ) 。这允许未命名的括号充当非捕获组，而不会有表达式的句法笨拙 (？： ) 。有关详细信息，请参阅 正则表达式选项 一文中的 "仅显式捕获" 部分。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>指定不区分大小写的匹配。 有关详细信息，请参阅 正则表达式选项 一文中的 "不区分大小写匹配" 一节。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>消除模式中的非转义空白并启用由 # 标记的注释。 但是，此值不影响或消除标记单独的正则表达式语言元素的开头的字符类、数值量词或标记的空格。 有关详细信息，请参阅正则表达式选项一文中的“忽略空格”部分。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>多行模式。 更改 ^ 和 $ 的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。 有关详细信息，请参阅 正则表达式选项 一文中的 "多行模式" 部分。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>指定不设置任何选项。 有关正则表达式引擎的默认行为的详细信息，请参阅 正则表达式选项 一文中的 "默认选项" 一节。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>指定搜索从右向左而不是从左向右进行。 有关详细信息，请参阅 正则表达式选项 一文中的 "从右到左模式" 部分。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>指定单行模式。 更改点 (.) 的含义，以使它与每个字符（而不是除 \n 之外的所有字符）匹配。 有关详细信息，请参阅 正则表达式选项 一文中的 "单行模式" 部分。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexParseError">
      <summary>指定当正则表达式包含分析错误时引发 <see cref="T:System.Text.RegularExpressions.RegexParseException" /> 的详细基本原因。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasComment">
      <summary>正则表达式中的某个替换构造包含注释。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasMalformedCondition">
      <summary>正则表达式中的某个替换包含格式不正确的条件。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasMalformedReference">
      <summary>正则表达式中的某个替换构造包含格式不正确的引用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasNamedCapture">
      <summary>正则表达式中的某个替换构造使用已命名的捕获。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasTooManyConditions">
      <summary>正则表达式中的某个替换具有过多条件。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasUndefinedReference">
      <summary>正则表达式中的某个替换构造包含未定义的引用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.CaptureGroupNameInvalid">
      <summary>正则表达式中某个捕获的组的组名无效。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.CaptureGroupOfZero">
      <summary>正则表达式定义了一个名为零的带编号的子表达式。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.ExclusionGroupNotLast">
      <summary>某个字符类位于一个具有排除组的正则表达式中，该组不是该字符类的最后一部分。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InsufficientClosingParentheses">
      <summary>某个正则表达式有一个非转义的左括号，或缺少右括号。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InsufficientOpeningParentheses">
      <summary>某个正则表达式有一个非转义的右括号，或缺少左括号。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InsufficientOrInvalidHexDigits">
      <summary>正则表达式中的十六进制转义序列位数不足，或包含无效位。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InvalidGroupingConstruct">
      <summary>正则表达式中的分组构造无效或格式不正确。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InvalidUnicodePropertyEscape">
      <summary>正则表达式中的 Unicode 属性转义无效或未知。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.MalformedNamedReference">
      <summary>正则表达式中的命名引用的格式不正确。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.MalformedUnicodePropertyEscape">
      <summary>Unicode 属性转义格式不正确。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.MissingControlCharacter">
      <summary>正则表达式中缺少某个控制字符。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.NestedQuantifiersNotParenthesized">
      <summary>正则表达式中另一个限定符上的重复限定符未使用括号归组。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.QuantifierAfterNothing">
      <summary>正则表达式中的限定符位于某个无法量化任何内容的位置，例如，在正则表达式的开头或某个组中。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.QuantifierOrCaptureGroupOutOfRange">
      <summary>正则表达式中某个捕获的组或限定符不在范围内，即大于 <see cref="F:System.Int32.MaxValue" />。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.ReversedCharacterRange">
      <summary>正则表达式中的某个字符类包含逆向字符范围，如 z-a 而不是 a-z。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.ReversedQuantifierRange">
      <summary>正则表达式中的某个限定符范围是逆向的，如 <code>{10,1}</code> 而不是 <code>(1,10}</code>。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.ShorthandClassInCharacterRange">
      <summary>正则表达式中的某个字符类包含一个字符类中不允许的简略类。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UndefinedNamedReference">
      <summary>正则表达式中使用的某个命名引用未进行定义。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UndefinedNumberedReference">
      <summary>正则表达式中使用的某个带编号的引用未进行定义。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnescapedEndingBackslash">
      <summary>正则表达式以非转义结尾反斜杠结尾。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.Unknown">
      <summary>未知的正则表达式分析错误。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnrecognizedControlCharacter">
      <summary>正则表达式中的某个控制字符无法识别。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnrecognizedEscape">
      <summary>正则表达式中的某个转义字符或序列无效。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnrecognizedUnicodeProperty">
      <summary>正则表达式中的某个 unicode 属性无法识别或无效。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnterminatedBracket">
      <summary>正则表达式有一个非转义的左方括号，或缺少右方括号。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnterminatedComment">
      <summary>正则表达式中的某个注释未终止。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexParseException">
      <summary>正则表达式中的分析错误导致的异常，<see cref="P:System.Text.RegularExpressions.RegexParseException.Error" /> 和 <see cref="P:System.Text.RegularExpressions.RegexParseException.Offset" /> 属性中包含了详细信息。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>设置带有参数名和附加异常信息的 <paramref name="info" /> 对象。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 上声明的默认值为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexParseException.Error">
      <summary>获取分析过程中发生的错误。</summary>
      <returns>分析过程中发生的错误。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexParseException.Offset">
      <summary>获取正则表达式模式中出现分析错误的位置的从零开始的字符偏移量。</summary>
      <returns>发生分析错误的偏移量。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunner">
      <summary>
        <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 类是编译正则表达式的基类。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawl">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawlpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runmatch">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runregex">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstack">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstackpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtext">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextbeg">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextend">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextstart">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrack">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackcount">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <param name="capnum">捕获数。</param>
      <param name="start">捕获的起始位置。</param>
      <param name="end">捕获的结束位置。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 确定字符是否在字符类中。</summary>
      <param name="ch">要测试的字符。</param>
      <param name="charClass">字符类的内部名称。</param>
      <returns>如果 <paramref name="ch" /> 参数在由 <paramref name="charClass" /> 参数指定的字符类中，则为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <param name="ch">一个字符。</param>
      <param name="set">字符集。</param>
      <param name="category">字符类别。</param>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CheckTimeout">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <param name="i">要保存的数字。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawlpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleCrawl">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleStack">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleTrack">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.EnsureStorage">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.FindFirstChar">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Go">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.InitTrackCount">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <param name="index">可能的边界位置。</param>
      <param name="startpos">起始位置。</param>
      <param name="endpos">结束位置。</param>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <param name="index">可能的 ECMA 边界位置。</param>
      <param name="startpos">起始位置。</param>
      <param name="endpos">结束位置。</param>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <param name="cap">捕获数。</param>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <param name="cap">捕获数。</param>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <param name="cap">捕获数。</param>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Popcrawl">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <param name="regex">正则表达式引擎的实例。</param>
      <param name="text">要扫描模式匹配的文本。</param>
      <param name="textbeg">
        <paramref name="text" /> 中从零开始的起始位置（正则表达式引擎在此位置扫描匹配项）。</param>
      <param name="textend">
        <paramref name="text" /> 中从零开始的终点位置（正则表达式引擎在此位置扫描匹配项）。</param>
      <param name="textstart">此匹配项要扫描的从零开始的起始位置。</param>
      <param name="prevlen">上一个匹配项中的字符数。</param>
      <param name="quick">若要在快速模式下搜索匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>匹配项。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <param name="regex">正则表达式引擎的实例。</param>
      <param name="text">要扫描模式匹配的文本。</param>
      <param name="textbeg">
        <paramref name="text" /> 中从零开始的起始位置（正则表达式引擎在此位置扫描匹配项）。</param>
      <param name="textend">
        <paramref name="text" /> 中从零开始的终点位置（正则表达式引擎在此位置扫描匹配项）。</param>
      <param name="textstart">此匹配项要扫描的从零开始的起始位置。</param>
      <param name="prevlen">上一个匹配项中的字符数。</param>
      <param name="quick">若要在快速模式下搜索匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="timeout">超时时间间隔。</param>
      <returns>匹配项。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
      <param name="capnum">捕获数。</param>
      <param name="uncapnum">保存的捕获数。</param>
      <param name="start">起始位置。</param>
      <param name="end">结束位置。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Uncapture">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunnerFactory">
      <summary>为编译过的正则表达式创建 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 类。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexRunnerFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance">
      <summary>当在派生类中被重写时，为编译过的特定正则表达式创建 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 对象。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 对象旨在执行编译过的特定正则表达式。</returns>
    </member>
  </members>
</doc>