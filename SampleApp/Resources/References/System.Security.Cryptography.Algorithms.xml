<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Algorithms</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.Aes">
      <summary>表示高级加密标准 (AES) 的所有实现必须从中继承的抽象基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.Aes" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create">
      <summary>创建用于执行对称算法的加密对象。</summary>
      <returns>用于执行对称算法的加密对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create(System.String)">
      <summary>创建一个加密对象，它指定用于执行对称算法所用的 AES 的实现。</summary>
      <param name="algorithmName">要使用的 AES 的特定实现的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithmName" /> 参数为 <see langword="null" />。</exception>
      <returns>用于执行对称算法的加密对象。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesCcm">
      <summary>表示一个高级加密标准 (AES) 密钥，该密钥用于采用 CBC-MAC (CCM) 操作模式的计数器。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.Byte[])">
      <summary>使用所提供的密钥来初始化 <see cref="T:System.Security.Cryptography.AesCcm" /> 类的一个新实例。</summary>
      <param name="key">用于此实例的密钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> 参数长度不能是 16、24 或 32 字节（128、192 或 256 位）。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>使用所提供的密钥来初始化 <see cref="T:System.Security.Cryptography.AesCcm" /> 类的一个新实例。</summary>
      <param name="key">用于此实例的密钥。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> 参数长度不能是 16、24 或 32 字节（128、192 或 256 位）。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>如果可验证身份验证标记，则将已加密文本解密到提供的目标缓冲区中。</summary>
      <param name="nonce">与此消息关联的 nonce。它必须与加密过程中提供的值相匹配。</param>
      <param name="ciphertext">要解密的加密内容。</param>
      <param name="tag">加密过程中为此消息生成的身份验证标记。</param>
      <param name="plaintext">接收解密内容的字节数组。</param>
      <param name="associatedData">与此消息关联的额外数据。该数据必须与加密过程中提供的值相匹配。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 参数和 <paramref name="ciphertext" /> 的长度不同。

- 或 -

<paramref name="nonce" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" /> 所允许。

- 或 -

<paramref name="tag" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" /> 所允许。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />、<paramref name="ciphertext" />、<paramref name="tag" /> 或 <paramref name="plaintext" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">无法验证标记值，或者解密操作失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>如果可验证身份验证标记，则将已加密文本解密到提供的目标缓冲区中。</summary>
      <param name="nonce">与此消息关联的 nonce。它必须与加密过程中提供的值相匹配。</param>
      <param name="ciphertext">要解密的加密内容。</param>
      <param name="tag">加密过程中为此消息生成的身份验证标记。</param>
      <param name="plaintext">接收解密内容的字节范围。</param>
      <param name="associatedData">与此消息关联的额外数据。该数据必须与加密过程中提供的值相匹配。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 参数和 <paramref name="ciphertext" /> 的长度不同。

- 或 -

<paramref name="nonce" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" /> 所允许。

- 或 -

<paramref name="tag" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" /> 所允许。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">无法验证标记值，或者解密操作失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Dispose">
      <summary>释放 <see cref="T:System.Security.Cryptography.AesCcm" /> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>将纯文本加密到已加密文本目标缓冲区，并将身份验证标签生成到单独的缓冲区中。</summary>
      <param name="nonce">与此消息相关联的 nonce。对于具有相同密钥的每个操作，它应该是唯一值。</param>
      <param name="plaintext">要加密的内容。</param>
      <param name="ciphertext">接收加密内容的字节数组。</param>
      <param name="tag">接收生成的身份验证标记的字节数组。</param>
      <param name="associatedData">与此消息关联的额外数据。该数据还必须在解密过程中提供。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 参数和 <paramref name="ciphertext" /> 的长度不同。

- 或 -

<paramref name="nonce" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" /> 所允许。

- 或 -

<paramref name="tag" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" /> 所允许。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />、<paramref name="ciphertext" />、<paramref name="tag" /> 或 <paramref name="plaintext" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">加密操作失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>将纯文本加密到已加密文本目标缓冲区，并将身份验证标签生成到单独的缓冲区中。</summary>
      <param name="nonce">与此消息相关联的 nonce。对于具有相同密钥的每个操作，它应该是唯一值。</param>
      <param name="plaintext">要加密的内容。</param>
      <param name="ciphertext">接收加密内容的字节范围。</param>
      <param name="tag">接收生成的身份验证标记的字节范围。</param>
      <param name="associatedData">与此消息关联的额外数据。该数据还必须在解密过程中提供。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 参数和 <paramref name="ciphertext" /> 的长度不同。

- 或 -

<paramref name="nonce" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" /> 所允许。

- 或 -

<paramref name="tag" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" /> 所允许。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">加密操作失败。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.NonceByteSizes">
      <summary>获取此实例支持的 nonce 大小（以字节为单位）。</summary>
      <returns>此实例支持的 nonce 大小：7、8、9、10、11、12或13字节 (56、64、72、80、88、96或104位) 。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.TagByteSizes">
      <summary>获取此实例支持的标记大小（以字节为单位）。</summary>
      <returns>此实例支持的标记大小：4、6、8、10、12、14或16字节 (32、48、64、80、96、112或128位) 。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesGcm">
      <summary>表示一个高级加密标准 (AES) 密钥，该密钥用于 Galois/Counter Mode (GCM) 操作模式。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.Byte[])">
      <summary>使用所提供的密钥来初始化 <see cref="T:System.Security.Cryptography.AesGcm" /> 类的一个新实例。</summary>
      <param name="key">用于此实例的密钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> 参数长度不能是 16、24 或 32 字节（128、192 或 256 位）。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>使用所提供的密钥来初始化 <see cref="T:System.Security.Cryptography.AesGcm" /> 类的一个新实例。</summary>
      <param name="key">用于此实例的密钥。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> 参数长度不能是 16、24 或 32 字节（128、192 或 256 位）。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>如果可验证身份验证标记，则将已加密文本解密到提供的目标缓冲区中。</summary>
      <param name="nonce">与此消息关联的 nonce。它必须与加密过程中提供的值相匹配。</param>
      <param name="ciphertext">要解密的加密内容。</param>
      <param name="tag">加密过程中为此消息生成的身份验证标记。</param>
      <param name="plaintext">接收解密内容的字节数组。</param>
      <param name="associatedData">与此消息关联的额外数据。该数据必须与加密过程中提供的值相匹配。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 参数和 <paramref name="ciphertext" /> 的长度不同。

- 或 -

<paramref name="nonce" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" /> 所允许。

- 或 -

<paramref name="tag" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" /> 所允许。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />、<paramref name="ciphertext" />、<paramref name="tag" /> 或 <paramref name="plaintext" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">无法验证标记值，或者解密操作失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>如果可验证身份验证标记，则将已加密文本解密到提供的目标缓冲区中。</summary>
      <param name="nonce">与此消息关联的 nonce。它必须与加密过程中提供的值相匹配。</param>
      <param name="ciphertext">要解密的加密内容。</param>
      <param name="tag">加密过程中为此消息生成的身份验证标记。</param>
      <param name="plaintext">接收解密内容的字节范围。</param>
      <param name="associatedData">与此消息关联的额外数据。该数据必须与加密过程中提供的值相匹配。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 参数和 <paramref name="ciphertext" /> 的长度不同。

- 或 -

<paramref name="nonce" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" /> 所允许。

- 或 -

<paramref name="tag" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" /> 所允许。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">无法验证标记值，或者解密操作失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Dispose">
      <summary>释放 <see cref="T:System.Security.Cryptography.AesGcm" /> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>将纯文本加密到已加密文本目标缓冲区，并将身份验证标签生成到单独的缓冲区中。</summary>
      <param name="nonce">与此消息相关联的 nonce。对于具有相同密钥的每个操作，它应该是唯一值。</param>
      <param name="plaintext">要加密的内容。</param>
      <param name="ciphertext">接收加密内容的字节数组。</param>
      <param name="tag">接收生成的身份验证标记的字节数组。</param>
      <param name="associatedData">与此消息关联的额外数据。该数据还必须在解密过程中提供。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 参数和 <paramref name="ciphertext" /> 的长度不同。

- 或 -

<paramref name="nonce" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" /> 所允许。

- 或 -

<paramref name="tag" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" /> 所允许。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />、<paramref name="ciphertext" />、<paramref name="tag" /> 或 <paramref name="plaintext" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">加密操作失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>将纯文本加密到已加密文本目标缓冲区，并将身份验证标签生成到单独的缓冲区中。</summary>
      <param name="nonce">与此消息相关联的 nonce。对于具有相同密钥的每个操作，它应该是唯一值。</param>
      <param name="plaintext">要加密的内容。</param>
      <param name="ciphertext">接收加密内容的字节数组。</param>
      <param name="tag">接收生成的身份验证标记的字节数组。</param>
      <param name="associatedData">与此消息关联的额外数据。该数据还必须在解密过程中提供。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 参数和 <paramref name="ciphertext" /> 的长度不同。

- 或 -

<paramref name="nonce" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" /> 所允许。

- 或 -

<paramref name="tag" /> 参数长度不被 <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" /> 所允许。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">加密操作失败。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.NonceByteSizes">
      <summary>获取此实例支持的 nonce 大小（以字节为单位）。</summary>
      <returns>此实例支持的 nonce 大小：12个字节 (96 位) 。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.TagByteSizes">
      <summary>获取此实例支持的标记大小（以字节为单位）。</summary>
      <returns>此实例支持的标记大小：12、13、14、15或16字节 (96、104、112、120或128位) 。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>提供高级加密标准 (AES) 对称算法的托管实现。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AesManaged" /> 类的新实例。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">已启用 FIPS 的 Windows 安全策略设置。</exception>
      <exception cref="T:System.InvalidOperationException">此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>使用当前的密钥和初始化向量 (IV) 创建对称解密器对象。</summary>
      <returns>对称解密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的密钥和初始化向量 (IV) 创建对称解密器对象。</summary>
      <param name="rgbKey">用于对称算法的密钥。</param>
      <param name="rgbIV">用于对称算法的初始化向量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。</exception>
      <returns>对称解密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>使用当前的密钥和初始化向量 (IV) 创建对称加密器对象。</summary>
      <returns>对称加密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的密钥和初始化向量 (IV) 创建对称加密器对象。</summary>
      <param name="rgbKey">用于对称算法的密钥。</param>
      <param name="rgbIV">用于对称算法的初始化向量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。</exception>
      <returns>对称加密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>生成用于对称算法的随机初始化向量 (IV)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>生成用于对称算法的随机密钥。</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.BlockSize">
      <summary>获取或设置加密操作的块大小（以位为单位）。</summary>
      <returns>加密操作的块大小，以位为单位。 默认值为128位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>获取或设置用作反馈的位数。</summary>
      <returns>反馈大小（以位为单位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>获取或设置用于对称算法的初始化向量 (IV)。</summary>
      <returns>用于对称算法的初始化向量。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>获取或设置用于对称算法的密钥。</summary>
      <returns>用于对称算法的密钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>获取或设置用于对称算法的密钥大小（以位为单位）。</summary>
      <returns>用于对称算法的密钥大小（以位为单位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalBlockSizes">
      <summary>获取对称算法支持的块大小（以位为单位）。</summary>
      <returns>对称算法支持的块大小，以位为单位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalKeySizes">
      <summary>获取对称算法支持的密钥大小（以位为单位）。</summary>
      <returns>对称算法支持的密钥大小（位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>获取或设置对称算法的运算模式。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> 设置为 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 或 <see cref="F:System.Security.Cryptography.CipherMode.OFB" />。</exception>
      <returns>枚举值之一，指定用于加密的分组加密模式。 默认值为 <see cref="F:System.Security.Cryptography.CipherMode.CBC" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>获取或设置对称算法中使用的填充模式。</summary>
      <returns>枚举值之一，指定要应用的填充类型。 默认值为 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter">
      <summary>表示所有非对称密钥交换反格式化程序均从中派生的基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter" /> 的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>在派生类中重写时，从加密的密钥交换数据中提取机密信息。</summary>
      <param name="rgb">其中隐藏了机密信息的密钥交换数据。</param>
      <returns>从密钥交换数据派生的机密信息。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>在派生类中重写时，设置要用于解密机密信息的私钥。</summary>
      <param name="key">用于保存私钥的 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 实现的实例。</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.Parameters">
      <summary>在派生类中重写时，获取或设置非对称密钥交换的参数。</summary>
      <returns>一个 XML 格式的字符串，它包含非对称密钥交换操作的参数。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter">
      <summary>表示从中派生出所有非对称密钥交换格式化程序的基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter" /> 的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>当在派生类中重写时，请从指定的输入数据创建加密的密钥交换数据。</summary>
      <param name="data">要在密钥交换中传递的机密信息。</param>
      <returns>要发送到目标接收方的加密密钥交换数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>当在派生类中重写时，请从指定的输入数据创建加密的密钥交换数据。</summary>
      <param name="data">要在密钥交换中传递的机密信息。</param>
      <param name="symAlgType">当前版本未使用此参数。</param>
      <returns>要发送到目标接收方的加密密钥交换数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>当在派生类中重写时，设置要用于加密机密信息的公钥。</summary>
      <param name="key">包含公钥的 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 实现的实例。</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters">
      <summary>在派生类中重写时，获取非对称密钥交换的参数。</summary>
      <returns>一个 XML 格式的字符串，它包含非对称密钥交换操作的参数。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureDeformatter">
      <summary>表示从中派生非对称签名反格式化程序的所有实现的抽象基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>当在派生类中重写时，设置要用于验证签名的哈希算法。</summary>
      <param name="strName">用于验证签名的哈希算法的名称。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>当在派生类中重写时，设置要用于验证签名的公钥。</summary>
      <param name="key">包含公钥的 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 的实现的实例。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>在派生类中重写时，验证指定数据的签名。</summary>
      <param name="rgbHash">用 <paramref name="rgbSignature" /> 签名的数据。</param>
      <param name="rgbSignature">要为 <paramref name="rgbHash" /> 验证的签名。</param>
      <returns>如果 <paramref name="rgbSignature" /> 与使用指定的哈希算法和密钥在 <paramref name="rgbHash" /> 上计算出的签名匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>通过指定的哈希值验证签名。</summary>
      <param name="hash">用于验证签名的哈希算法。</param>
      <param name="rgbSignature">要验证的签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 参数为 <see langword="null" />。</exception>
      <returns>如果签名对哈希有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureFormatter">
      <summary>表示从中继承非对称算法的所有实现的基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])">
      <summary>在派生类中重写时，获取指定数据的签名。</summary>
      <param name="rgbHash">要签名的数据。</param>
      <returns>参数 <paramref name="rgbHash" /> 的数字签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)">
      <summary>使用指定哈希值创建签名。</summary>
      <param name="hash">要用于创建签名的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 参数为 <see langword="null" />。</exception>
      <returns>指定哈希值的签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>当在派生类中重写时，设置要用于创建签名的哈希算法。</summary>
      <param name="strName">用于创建签名的哈希算法的名称。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>当在派生类中重写时，设置要用于创建签名的非对称算法。</summary>
      <param name="key">要用于创建签名的 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 的实现的实例。</param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoConfig">
      <summary>访问加密配置信息。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CryptoConfig" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])">
      <summary>将一组名称添加到要用于当前应用程序域的算法映射。</summary>
      <param name="algorithm">要映射到的算法。</param>
      <param name="names">要映射到该算法的名称的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 或 <paramref name="names" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="algorithm" /> 不能从该程序集外部访问。  
  
- 或 - 
<paramref name="names" /> 参数中的一个条目是空的或为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])">
      <summary>将一组名称添加到要用于当前应用程序域的对象标识符 (OID) 映射。</summary>
      <param name="oid">要映射到的对象标识符 (OID)。</param>
      <param name="names">要映射到该 OID 的名称的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oid" /> 或 <paramref name="names" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> 参数中的一个条目是空的或为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)">
      <summary>创建指定的加密对象的新实例。</summary>
      <param name="name">将创建其实例的加密对象的简单名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">由 <paramref name="name" /> 参数描述的算法在使用中已启用联邦信息处理标准 (FIPS) 模式，但与 FIPS 不兼容。</exception>
      <returns>指定的加密对象的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])">
      <summary>用指定的参数创建指定的加密对象的新实例。</summary>
      <param name="name">将创建其实例的加密对象的简单名称。</param>
      <param name="args">用于创建指定的加密对象的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">由 <paramref name="name" /> 参数描述的算法在使用中已启用联邦信息处理标准 (FIPS) 模式，但与 FIPS 不兼容。</exception>
      <returns>指定的加密对象的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)">
      <summary>对指定的对象标识符 (OID) 进行编码。</summary>
      <param name="str">要进行编码的 OID。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">对 OID 进行编码时出现错误。</exception>
      <returns>包含编码 OID 的字节数组。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)">
      <summary>获取与指定的简单名称对应的算法的对象标识符 (OID)。</summary>
      <param name="name">获取其 OID 的算法的简单名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <returns>指定算法的 OID。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms">
      <summary>指示运行时是否应强制实施该策略，以便仅创建经美国联邦信息处理标准 (FIPS) 认证的算法。</summary>
      <returns>若强制实施该策略，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.DeriveBytes">
      <summary>表示抽象基类，导出指定长度字节序列的所有类都从该基类继承。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.DeriveBytes" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose">
      <summary>在派生类中重写时，释放由 <see cref="T:System.Security.Cryptography.DeriveBytes" /> 类的当前实例使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)">
      <summary>在派生类中重写时，释放由 <see cref="T:System.Security.Cryptography.DeriveBytes" /> 类占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
      <summary>当在派生类中被重写时，返回伪随机密钥字节。</summary>
      <param name="cb">要生成的伪随机密钥字节数。</param>
      <returns>由伪随机密钥字节组成的字节数组。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Reset">
      <summary>当在派生类中被重写时，重置操作的状态。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DES">
      <summary>表示数据加密标准 (DES) 算法的基类，所有 <see cref="T:System.Security.Cryptography.DES" /> 实现都必须从此基类派生。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.DES" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create">
      <summary>创建加密对象的实例以执行数据加密标准 (<see cref="T:System.Security.Cryptography.DES" />) 算法。</summary>
      <returns>一个加密对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create(System.String)">
      <summary>创建加密对象的实例以执行数据加密标准 (<see cref="T:System.Security.Cryptography.DES" />) 算法的指定实现。</summary>
      <param name="algName">要使用的 <see cref="T:System.Security.Cryptography.DES" /> 的特定实现的名称。</param>
      <returns>一个加密对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])">
      <summary>确定指定的密钥是否为半弱密钥。</summary>
      <param name="rgbKey">要进行半弱漏洞测试的密钥。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 参数的大小无效。</exception>
      <returns>如果密钥为半弱密钥，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])">
      <summary>确定指定的密钥是否为弱密钥。</summary>
      <param name="rgbKey">要进行漏洞测试的密钥。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 参数的大小无效。</exception>
      <returns>如果密钥为弱密钥，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.DES.Key">
      <summary>获取或设置数据加密标准 (<see cref="T:System.Security.Cryptography.DES" />) 算法的密钥。</summary>
      <exception cref="T:System.ArgumentNullException">尝试将密钥设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">试图设置长度不等于 <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue" /> 的密钥。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">试图设置弱密钥（请参阅 <see cref="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])" />）或半弱密钥（请参阅 <see cref="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])" />）。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.DES" /> 算法的密钥。</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSA">
      <summary>表示数字签名算法（<see cref="T:System.Security.Cryptography.DSA" />）的所有实现都必须从中继承的抽象基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.DSA" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create">
      <summary>创建用于执行不对称算法的默认加密对象。</summary>
      <returns>一个加密对象，用于执行不对称算法。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Int32)">
      <summary>创建具有指定密钥大小的新临时 DSA 密钥。</summary>
      <param name="keySizeInBits">密钥大小（以位为单位）。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes" /> 不允许 <paramref name="keySizeInBits" />。</exception>
      <returns>具有指定密钥大小的新临时 DSA 密钥。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)">
      <summary>创建具有指定 DSA 密钥参数的新临时 DSA 密钥。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.DSA" /> 算法的参数。</param>
      <returns>新的临时 DSA 密钥。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.String)">
      <summary>创建用于执行不对称算法的指定加密对象。</summary>
      <param name="algName">要使用的 <see cref="T:System.Security.Cryptography.DSA" /> 的特定实现的名称。</param>
      <returns>一个加密对象，用于执行不对称算法。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])">
      <summary>在派生类中重写时，为指定的哈希值创建 <see cref="T:System.Security.Cryptography.DSA" /> 签名。</summary>
      <param name="rgbHash">要签名的哈希值。</param>
      <returns>指定哈希值的数字签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>采用指定格式为指定的哈希值创建 DSA 签名。</summary>
      <param name="rgbHash">要签名的哈希值。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名时出错。</exception>
      <returns>指定数据的 DSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>采用指定格式为指定的哈希值创建 DSA 签名。</summary>
      <param name="hash">要签名的哈希值。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名时出错。</exception>
      <returns>指定数据的 DSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ExportParameters(System.Boolean)">
      <summary>当在派生类中重写时，导出 <see cref="T:System.Security.Cryptography.DSAParameters" />。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.DSA" /> 的参数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.FromXmlString(System.String)">
      <summary>通过 XML 字符串重新构造 <see cref="T:System.Security.Cryptography.DSA" /> 对象。</summary>
      <param name="xmlString">用于重新构造 <see cref="T:System.Security.Cryptography.DSA" /> 对象的 XML 字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlString" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="xmlString" /> 参数的格式无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)">
      <summary>获取此密钥按指定格式生成的签名的最大尺寸（以字节为单位）。</summary>
      <param name="signatureFormat">签名的编码格式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <returns>此密钥按指定格式生成的签名的最大尺寸（以字节为单位）。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在派生类中被重写时，使用指定的哈希算法计算字节数组指定部分的哈希值。</summary>
      <param name="data">要进行哈希处理的数据。</param>
      <param name="offset">
        <paramref name="data" /> 中要进行哈希处理的第一个字节的索引。</param>
      <param name="count">要进行哈希处理的字节数。</param>
      <param name="hashAlgorithm">要用于对数据进行哈希处理的算法。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <returns>经过哈希处理的数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在派生类中被重写时，使用指定的哈希算法计算指定的二进制流的哈希值。</summary>
      <param name="data">要进行哈希处理的二进制流。</param>
      <param name="hashAlgorithm">要用于对数据进行哈希处理的算法。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <returns>经过哈希处理的数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用基于字节的密码解密之后，从 PKCS#8 EncryptedPrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</summary>
      <param name="passwordBytes">解密密钥材料时用作密码的字节。</param>
      <param name="source">ASN.1-BER 编码中 PKCS#8 EncryptedPrivateKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

或

<paramref name="source" /> 的内容表示要应用的密钥派生功能 (KDF) 是旧的 PKCS#12 KDF，需要基于 <see cref="T:System.Char" /> 的密码。

或

<paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

或

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

或

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

或

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用基于字符的密码解密之后，从 PKCS#8 EncryptedPrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</summary>
      <param name="password">用于解密密钥材料的密码。</param>
      <param name="source">ASN.1-BER 编码中 PKCS#8 EncryptedPrivateKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

或

<paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

或

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

或

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

或

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>导入已加密的 RFC 7468 PEM 编码的私钥，替换此对象的密钥。</summary>
      <param name="input">要导入的加密密钥的 PEM 文本。</param>
      <param name="passwordBytes">解密密钥材料时用作密码的字节。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。

或

            <paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

或

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

或

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容指示密钥用于此实例表示的算法以外的算法。

或

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容表示密钥采用的格式不受支持。

或

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>导入已加密的 RFC 7468 PEM 编码的私钥，替换此对象的密钥。</summary>
      <param name="input">要导入的加密密钥的 PEM 文本。</param>
      <param name="password">用于解密密钥材料的密码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。

或

            <paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

或

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

或

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容指示密钥用于此实例表示的算法以外的算法。

或

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容表示密钥采用的格式不受支持。

或

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>导入 RFC 7468 PEM 编码的密钥，替换此对象的密钥。</summary>
      <param name="input">要导入的密钥的 PEM 文本。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。

或

            <paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。

或

            <paramref name="input" /> 包含已加密的 PEM 编码的密钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>当在派生类中重写时，导入指定的 <see cref="T:System.Security.Cryptography.DSAParameters" />。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.DSA" /> 的参数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 缺少必填字段。

或

<paramref name="parameters" /> 字段的有效密钥长度不一致。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> 不表示有效的 DSA 密钥参数集。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密后，从 PKCS#8 PrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</summary>
      <param name="source">ASN.1-BER 编码中 PKCS#8 PrivateKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 PrivateKeyInfo 结构。

或

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

或

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

或

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密后，从 X.509 SubjectPublicKeyInfo 结构中导入公钥，以替换此对象的密钥。</summary>
      <param name="source">ASN.1-DER 编码中的 X.509 SubjectPublicKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的内容不表示 ASN.1-DER 编码的 X.509 SubjectPublicKeyInfo 结构。

或

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

或

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

或

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的哈希算法计算指定字节数组的一个部分的哈希值，并对生成的哈希值进行签名。</summary>
      <param name="data">要为其计算哈希的输入数据。</param>
      <param name="offset">数组中自其开始使用数据的偏移量。</param>
      <param name="count">数组中用作数据的字节数。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。  
  
或 
 <paramref name="count" /> 小于零。  
  
或 
 <paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</exception>
      <returns>指定数据的 DSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</summary>
      <param name="data">要签名的数据。</param>
      <param name="offset">
        <paramref name="data" /> 中自其开始使用哈希处理的偏移量。</param>
      <param name="count">要从 <paramref name="data" /> 中读取的字节数。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。
 
-或- <paramref name="offset" /> 小于零。
 
-或- <paramref name="count" /> 小于零。
 
-或- <paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或签名时出错。</exception>
      <returns>指定数据的 DSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的哈希算法计算指定字节数组的哈希值，并对生成的哈希值进行签名。</summary>
      <param name="data">要为其计算哈希的输入数据。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>指定数据的 DSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</summary>
      <param name="data">要签名的数据。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或签名时出错。</exception>
      <returns>指定数据的 DSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的哈希算法计算指定流的哈希值，并对生成的哈希值进行签名。</summary>
      <param name="data">要为其计算哈希的输入流。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>指定数据的 DSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</summary>
      <param name="data">要签名的数据。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或签名时出错。</exception>
      <returns>指定数据的 DSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</summary>
      <param name="data">要签名的数据。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或签名时出错。</exception>
      <returns>指定数据的 DSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</summary>
      <param name="data">要签名的数据。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或签名时出错。</exception>
      <returns>指定数据的 DSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ToXmlString(System.Boolean)">
      <summary>创建并返回当前 <see cref="T:System.Security.Cryptography.DSA" /> 对象的 XML 字符串表示形式。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>当前 <see cref="T:System.Security.Cryptography.DSA" /> 对象的 XML 字符串编码。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>尝试将指定哈希的 DSA 签名创建到所提供的缓冲区中。</summary>
      <param name="hash">要签名的哈希值。</param>
      <param name="destination">接收签名的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">此实例仅表示一个公钥。

或

实现类型仅支持旧版 DSA (FIPS 186-2)，并且 <paramref name="hash" /> 不是 20 字节的值。

或

创建签名失败。</exception>
      <returns>如果 <paramref name="destination" /> 足够大可以接收结果，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>尝试采用指定格式为指定的哈希值创建 DSA 签名并将其置于提供的缓冲区中。</summary>
      <param name="hash">要签名的哈希值。</param>
      <param name="destination">要接收签名的缓冲区。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名时出错。</exception>
      <returns>如果 <paramref name="destination" /> 足够大可以接收签名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>尝试采用指定格式为指定的哈希值创建 DSA 签名并将其置于提供的缓冲区中。</summary>
      <param name="hash">要签名的哈希值。</param>
      <param name="destination">要接收签名的缓冲区。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名时出错。</exception>
      <returns>如果 <paramref name="destination" /> 足够大可以接收签名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用基于字节的密码以 PKCS#8 EncryptedPrivateKeyInfo 格式将当前密钥导出到所提供的缓冲区。</summary>
      <param name="passwordBytes">加密密钥材料时用作密码的字节。</param>
      <param name="pbeParameters">加密密钥材料时使用的基于密码加密 (PBE) 参数。</param>
      <param name="destination">接收 PKCS#8 EncryptedPrivateKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。

或

<paramref name="pbeParameters" /> 指示应使用需要基于 <see cref="T:System.Char" /> 密码的 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用基于字符的密码以 PKCS#8 EncryptedPrivateKeyInfo 格式将当前密钥导入所提供的缓冲区。</summary>
      <param name="password">加密密钥材料时使用的密码。</param>
      <param name="pbeParameters">加密密钥材料时使用的基于密码加密 (PBE) 参数。</param>
      <param name="destination">接收 PKCS#8 EncryptedPrivateKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>尝试以 PKCS#8 PrivateKeyInfo 格式将当前密钥导出到所提供的缓冲区。</summary>
      <param name="destination">接收 PKCS#8 PrivateKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>尝试以 X.509 SubjectPublicKeyInfo 格式将当前密钥导出到所提供的缓冲区。</summary>
      <param name="destination">接收 X.509 SubjectPublicKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>尝试将所提供数据的哈希值计算到所提供的缓冲区中。</summary>
      <param name="data">要进行哈希处理的数据。</param>
      <param name="destination">接收哈希值的字节范围。</param>
      <param name="hashAlgorithm">要使用的哈希算法的名称。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</param>
      <returns>如果 <paramref name="destination" /> 足够大可以接收结果，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>尝试将指定数据的 DSA 签名创建到所提供的缓冲区中。</summary>
      <param name="data">要进行哈希处理和签名的数据。</param>
      <param name="destination">接收签名的字节范围。</param>
      <param name="hashAlgorithm">要使用的哈希算法的名称。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。</param>
      <returns>如果 <paramref name="destination" /> 足够大可以接收结果，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>尝试采用指定格式为指定的数据创建 DSA 签名并将其置于提供的缓冲区中。</summary>
      <param name="data">要进行哈希处理和签名的数据。</param>
      <param name="destination">要接收签名的缓冲区。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名时出错。</exception>
      <returns>如果 <paramref name="destination" /> 的大小足以接收签名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>尝试采用指定格式为指定的数据创建 DSA 签名并将其置于提供的缓冲区中。</summary>
      <param name="data">要进行哈希处理和签名的数据。</param>
      <param name="destination">要接收签名的缓冲区。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名时出错。</exception>
      <returns>如果 <paramref name="destination" /> 的大小足以接收签名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>通过使用指定的哈希算法计算指定数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。  
  
或 
 <paramref name="signature" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">实现类型仅支持旧版 DSA (FIPS 186-2)，哈希算法不是 SHA-1。

或

验证签名失败。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>如果数字签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的数据是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">用于对验证过程的数据进行哈希处理的哈希算法。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>通过使用指定的哈希算法计算字节数组一个部分中数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="offset">开始计算哈希的起始索引。</param>
      <param name="count">要进行哈希处理的字节数。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。  
  
或 
 <paramref name="signature" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。  
  
或 
 <paramref name="count" /> 小于零。  
  
或 
 <paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">实现类型仅支持旧版 DSA (FIPS 186-2)，哈希算法不是 SHA-1。

或

验证签名失败。</exception>
      <returns>如果数字签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的数据是否有效。</summary>
      <param name="data">包含已签名数据的数组。</param>
      <param name="offset">
        <paramref name="data" /> 的已签名部分的起始索引。</param>
      <param name="count">已签名的 <paramref name="data" /> 的字节数。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">用于对验证过程的数据进行哈希处理的哈希算法。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。
 
-或- <paramref name="offset" /> 小于零。
 
-或- <paramref name="count" /> 小于零。
 
-或- <paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>通过使用指定的哈希算法计算指定流的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。  
  
或 
 <paramref name="signature" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">实现类型仅支持旧版 DSA (FIPS 186-2)，哈希算法不是 SHA-1。

或

验证签名失败。</exception>
      <returns>如果数字签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的数据是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">用于对验证过程的数据进行哈希处理的哈希算法。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>通过使用指定的哈希算法计算某字节范围内数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">实现类型仅支持旧版 DSA (FIPS 186-2)，哈希算法不是 SHA-1。

或

验证签名失败。</exception>
      <returns>如果数字签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的数据是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">用于对验证过程的数据进行哈希处理的哈希算法。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的数据是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">用于对验证过程的数据进行哈希处理的哈希算法。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的数据是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">用于对验证过程的数据进行哈希处理的哈希算法。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])">
      <summary>当在派生类中重写时，验证指定数据的 <see cref="T:System.Security.Cryptography.DSA" /> 签名。</summary>
      <param name="rgbHash">用 <paramref name="rgbSignature" /> 签名的数据的哈希值。</param>
      <param name="rgbSignature">要为 <c>rgbData</c> 验证的签名。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">实现类型仅支持旧版 DSA (FIPS 186-2)，并且哈希值的长度不是 20 字节。

或

验证签名失败。</exception>
      <returns>如果 <paramref name="rgbSignature" /> 与使用指定的哈希算法和密钥在 <paramref name="rgbHash" /> 上计算出的签名匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的哈希是否有效。</summary>
      <param name="rgbHash">已签名的哈希。</param>
      <param name="rgbSignature">要验证的签名。</param>
      <param name="signatureFormat">
        <paramref name="rgbSignature" /> 的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 或 <paramref name="rgbSignature" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>验证数字签名对于所提供的数据哈希是否有效。</summary>
      <param name="hash">要验证的数据哈希。</param>
      <param name="signature">要验证的签名。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">实现类型仅支持旧版 DSA (FIPS 186-2)，并且哈希值的长度不是 20 字节。

或

验证签名失败。</exception>
      <returns>如果数字签名对哈希值有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的哈希是否有效。</summary>
      <param name="hash">已签名的哈希。</param>
      <param name="signature">要验证的签名。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignatureCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的哈希是否有效。</summary>
      <param name="hash">已签名的哈希。</param>
      <param name="signature">要验证的签名。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSAParameters">
      <summary>包含 <see cref="T:System.Security.Cryptography.DSA" /> 算法的典型参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Counter">
      <summary>指定 <see cref="T:System.Security.Cryptography.DSA" /> 算法的计数器。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.G">
      <summary>指定 <see cref="T:System.Security.Cryptography.DSA" /> 算法的 <see langword="G" /> 参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.J">
      <summary>指定 <see cref="T:System.Security.Cryptography.DSA" /> 算法的 <see langword="J" /> 参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.P">
      <summary>指定 <see cref="T:System.Security.Cryptography.DSA" /> 算法的 <see langword="P" /> 参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Q">
      <summary>指定 <see cref="T:System.Security.Cryptography.DSA" /> 算法的 <see langword="Q" /> 参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Seed">
      <summary>指定 <see cref="T:System.Security.Cryptography.DSA" /> 算法的种子。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.X">
      <summary>指定 <see cref="T:System.Security.Cryptography.DSA" /> 算法的 <see langword="X" /> 参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Y">
      <summary>指定 <see cref="T:System.Security.Cryptography.DSA" /> 算法的 <see langword="Y" /> 参数。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureDeformatter">
      <summary>验证数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) PKCS#1 1.5 版签名。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> 类的新实例。</summary>
      <param name="key">包含密钥的数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) 的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>指定数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) 签名反格式化程序的哈希算法。</summary>
      <param name="strName">用于签名反格式化程序的哈希算法的名称。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <paramref name="strName" /> 参数不映射到 <see cref="T:System.Security.Cryptography.SHA1" /> 哈希算法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>指定用于数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) 签名反格式化程序的密钥。</summary>
      <param name="key">包含密钥的 <see cref="T:System.Security.Cryptography.DSA" /> 的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>在数据上验证数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) 签名。</summary>
      <param name="rgbHash">用 <paramref name="rgbSignature" /> 签名的数据。</param>
      <param name="rgbSignature">要为 <paramref name="rgbHash" /> 验证的签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="rgbSignature" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">缺少 DSA 密钥。</exception>
      <returns>如果签名对数据有效，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormat">
      <summary>指定带有 DSA 算法系列的签名的数据格式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSASignatureFormat.IeeeP1363FixedFieldConcatenation">
      <summary>IEEE P1363 中的签名格式，这会为给定密钥生成固定大小的签名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSASignatureFormat.Rfc3279DerSequence">
      <summary>IETF RFC 3279 中的签名格式，这会生成大小不定的签名。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormatter">
      <summary>创建数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) 签名。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> 类的新实例。</summary>
      <param name="key">包含密钥的数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) 的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])">
      <summary>为指定的数据创建数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) PKCS #1 签名。</summary>
      <param name="rgbHash">要签名的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">OID 为 <see langword="null" />。  
  
- 或 - 
DSA 密钥为 <see langword="null" />。</exception>
      <returns>指定数据的数字签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>指定数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) 签名格式化程序的哈希算法。</summary>
      <param name="strName">用于签名格式化程序的哈希算法的名称。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <paramref name="strName" /> 参数不映射到 <see cref="T:System.Security.Cryptography.SHA1" /> 哈希算法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>指定用于数字签名算法 (<see cref="T:System.Security.Cryptography.DSA" />) 签名格式化程序的密钥。</summary>
      <param name="key">包含密钥的 <see cref="T:System.Security.Cryptography.DSA" /> 的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve">
      <summary>表示椭圆曲线。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.A">
      <summary>显式曲线的第 1 个系数。 Weierstrass、Montgomery 和 Twisted Edwards 短曲线的 <c>A</c>。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.B">
      <summary>显式曲线的第 2 个系数。 对于 Weierstrass 短曲线，为 <c>B</c>；对于 Twisted Edwards 曲线，为 <c>d</c>。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Cofactor">
      <summary>曲线的余因子。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.CurveType">
      <summary>确定 <see cref="T:System.Security.Cryptography.ECCurve" /> 对象的组成。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.G">
      <summary>曲线上操作的生成器或基点。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Hash">
      <summary>哈希算法的名称，此算法用于根据 ANSI X9.62 生成算法从 <see cref="F:System.Security.Cryptography.ECCurve.Seed" /> 生成曲线系数（<see cref="F:System.Security.Cryptography.ECCurve.A" /> 和 <see cref="F:System.Security.Cryptography.ECCurve.B" />）。 仅适用于显式曲线。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Order">
      <summary>曲线的顺序。 仅适用于显式曲线。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Polynomial">
      <summary>多项式曲线。 仅适用于特征 2 曲线。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Prime">
      <summary>指定基本字段的素数。 仅适用于素数曲线。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Seed">
      <summary>ANSI X9.62 生成算法下系数生成的种子值。 仅适用于显式曲线。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)">
      <summary>使用标识符的指定友好名称创建命名的曲线。</summary>
      <param name="oidFriendlyName">标识符的友好名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidFriendlyName" /> 为 <see langword="null" />。</exception>
      <returns>表示已命名曲线的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.Oid" /> 对象创建已命名曲线。</summary>
      <param name="curveOid">要使用的对象标识符。</param>
      <returns>表示已命名曲线的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromValue(System.String)">
      <summary>使用指定的标识符点分十进制表示形式创建已命名曲线。</summary>
      <param name="oidValue">标识符的点分数字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> 为 <see langword="null" />。</exception>
      <returns>表示已命名曲线的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.Validate">
      <summary>验证当前曲线的完整性。 如果结构无效，将引发 <see cref="T:System.Security.Cryptography.CryptographicException" /> 异常。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">曲线参数对当前曲线类型无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsCharacteristic2">
      <summary>获取一个值，该值指示曲线类型是否指示显式特征 2 曲线。</summary>
      <returns>如果该曲线是显式特征 2 曲线，则为 <see langword="true" />；如果该曲线是已命名特征 2、素数或隐式曲线，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsExplicit">
      <summary>获取一个值，该值指示曲线类型是否指示显式曲线（素数曲线或特征 2 曲线）。</summary>
      <returns>如果曲线是显式曲线（素数曲线或特征 2 曲线），则为 <see langword="true" />；如果曲线是已命名或隐式曲线，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsNamed">
      <summary>获取一个值，该值指示曲线类型是否指示已命名曲线。</summary>
      <returns>
        <see langword="true" /> 如果曲线是一个命名曲线，则为; 否则为。 <see langword="false" /> 如果曲线为隐式或显式曲线 (质数或特征 2) 。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsPrime">
      <summary>获取一个值，该值指示曲线类型是否指示显式素数曲线。</summary>
      <returns>如果曲线是显式素数曲线，则为 <see langword="true" />；如果曲线是已命名素数、特征 2 或隐式曲线，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.Oid">
      <summary>获取已命名曲线的标识符。</summary>
      <returns>已命名曲线的标识符。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.ECCurveType">
      <summary>指示如何解释 <see cref="T:System.Security.Cryptography.ECCurve" /> 对象中包含的数据。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Characteristic2">
      <summary>曲线参数表示特征 2 曲线。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Implicit">
      <summary>没有解释曲线数据。 假定调用方了解曲线。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Named">
      <summary>曲线参数表示已命名曲线。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeMontgomery">
      <summary>曲线参数表示素数曲线，公式为 B*y^2 = x^3 + A*x^2 + x。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeShortWeierstrass">
      <summary>曲线参数表示素数曲线，素数字段 P 中的公式为 y^2 = x^3 + A*x + B。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeTwistedEdwards">
      <summary>曲线参数表示素数曲线，素数字段 P 中的公式为 A*x^2 + y^2 = 1 + B*x^2*y^2。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.NamedCurves">
      <summary>表示用于创建已命名曲线的工厂类。</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160r1">
      <summary>获取名为 brainpoolP160r1 的曲线。</summary>
      <returns>名为 brainpoolP160r1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160t1">
      <summary>获取名为 brainpoolP160t1 的曲线。</summary>
      <returns>名为 brainpoolP160t1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192r1">
      <summary>获取名为 brainpoolP192r1 的曲线。</summary>
      <returns>名为 brainpoolP192r1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192t1">
      <summary>获取名为 brainpoolP192t1 的曲线。</summary>
      <returns>名为 brainpoolP192t1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224r1">
      <summary>获取名为 brainpoolP224r1 的曲线。</summary>
      <returns>名为 brainpoolP224r1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224t1">
      <summary>获取名为 brainpoolP224t1 的曲线。</summary>
      <returns>名为 brainpoolP224t1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256r1">
      <summary>获取名为 brainpoolP256r1 的曲线。</summary>
      <returns>名为 brainpoolP256r1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256t1">
      <summary>获取名为 brainpoolP256t1 的曲线。</summary>
      <returns>名为 brainpoolP256t1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320r1">
      <summary>获取名为 brainpoolP320r1 的曲线。</summary>
      <returns>名为 brainpoolP320r1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320t1">
      <summary>获取名为 brainpoolP320t1 的曲线。</summary>
      <returns>名为 brainpoolP320t1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384r1">
      <summary>获取名为 brainpoolP384r1 的曲线。</summary>
      <returns>名为 brainpoolP384r1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384t1">
      <summary>获取名为 brainpoolP384t1 的曲线。</summary>
      <returns>名为 brainpoolP384t1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512r1">
      <summary>获取名为 brainpoolP512r1 的曲线。</summary>
      <returns>名为 brainpoolP512r1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512t1">
      <summary>获取名为 brainpoolP512t1 的曲线。</summary>
      <returns>名为 brainpoolP512t1 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP256">
      <summary>获取名为 nistP256 的曲线。</summary>
      <returns>名为 nistP256 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP384">
      <summary>获取名为 nistP384 的曲线。</summary>
      <returns>名为 nistP384 的曲线。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP521">
      <summary>获取名为 nistP521 的曲线。</summary>
      <returns>名为 nistP521 的曲线。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>提供一个抽象基类，可以从它派生椭圆曲线 Diffie-Hellman (ECDH) 算法实现。 此类提供一个所有 ECDH 实现都必须支持的基本操作集。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>创建椭圆曲线 Diffie-Hellman (ECDH) 算法的默认实现的一个新实例。</summary>
      <returns>此类的默认实现的一个新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)">
      <summary>使用通过指定曲线生成的新公钥/私钥对，创建椭圆曲线 Diffie-Hellman (ECDH) 算法的默认实现的新实例。</summary>
      <param name="curve">用于生成新公钥/私钥对的曲线。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> 不进行验证。</exception>
      <returns>椭圆曲线 Diffie-hellman (ECDH) 算法的默认实现的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)">
      <summary>创建椭圆曲线 Diffie-Hellman (ECDH) 算法的默认实现的新实例，密钥由指定的 <see cref="T:System.Security.Cryptography.ECParameters" /> 对象描述。</summary>
      <param name="parameters">椭圆曲线加密 (ECC) 算法的参数。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> 不进行验证。</exception>
      <returns>椭圆曲线 Diffie-hellman (ECDH) 算法的默认实现的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>创建椭圆曲线 Diffie-hellman (ECDH) 算法的特定实现的新实例。</summary>
      <param name="algorithm">ECDH 算法的实现的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 参数为 <see langword="null" />。</exception>
      <returns>此类的指定实现的新实例。 如果指定的算法名称未映射到 ECDH 实现，此方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的哈希算法执行密钥派生。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="hashAlgorithm">用于派生密钥材料的哈希算法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 使用的曲线的大小与此密钥使用的曲线不同。

- 或 -

<paramref name="hashAlgorithm" /> 参数未指定哈希值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" />使用的曲线与此密钥使用的曲线不同。

- 或 -

此实例仅表示一个公钥。</exception>
      <returns>共享机密的哈希。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>在派生类中实现时，使用指定的哈希算法对可选的添加数据或追加数据执行密钥派生。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="hashAlgorithm">用于派生密钥材料的哈希算法。</param>
      <param name="secretPrepend">在进行哈希算法之前，要预置到派生密钥前面的值。</param>
      <param name="secretAppend">在进行哈希算法之前，要追加到派生密钥的值。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 使用的曲线的大小与此密钥使用的曲线不同。

- 或 -

<paramref name="hashAlgorithm" /> 参数未指定哈希值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" />使用的曲线与此密钥使用的曲线不同。

- 或 -

此实例仅表示一个公钥。</exception>
      <returns>按需添加数据或追加数据之后的共享机密的哈希值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>使用指定的 HMAC（基于哈希的消息验证代码）算法执行密钥派生。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="hashAlgorithm">用于派生密钥材料的哈希算法。</param>
      <param name="hmacKey">HMAC 的密钥。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 使用的曲线的大小与此密钥使用的曲线不同。

- 或 -

<paramref name="hashAlgorithm" /> 参数未指定哈希值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" />使用的曲线与此密钥使用的曲线不同。

- 或 -

此实例仅表示一个公钥。</exception>
      <returns>共享机密的 HMAC。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>在派生类中实现时，使用指定的 HMAC（基于哈希的消息验证代码）算法对可选的添加数据或追加数据执行密钥派生。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="hashAlgorithm">用于派生密钥材料的哈希算法。</param>
      <param name="hmacKey">HMAC 的密钥。</param>
      <param name="secretPrepend">在进行哈希算法之前，要预置到派生密钥前面的值。</param>
      <param name="secretAppend">在进行哈希算法之前，要追加到派生密钥的值。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 使用的曲线的大小与此密钥使用的曲线不同。

- 或 -

<paramref name="hashAlgorithm" /> 参数未指定哈希值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" />使用的曲线与此密钥使用的曲线不同。

- 或 -

此实例仅表示一个公钥。</exception>
      <returns>按需添加数据或追加数据之后的共享机密的 HMAC。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>在派生类中实现时，对共享机密执行密钥派生。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 使用的曲线的大小与此密钥使用的曲线不同。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" />使用的曲线与此密钥使用的曲线不同。

- 或 -

此实例仅表示一个公钥。</exception>
      <returns>使用共享机密作为输入的密钥派生功能的结果。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>在派生类中实现时，使用 TLS（传输层安全性）1.1 PRF（伪随机函数）执行密钥派生。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="prfLabel">ASCII 编码的 PRF 标签。</param>
      <param name="prfSeed">64 字节的 PRF 种子。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 使用的曲线的大小与此密钥使用的曲线不同。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" />、<paramref name="prfLabel" /> 或 <paramref name="prfSeed" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="prfSeed" /> 的长度并不正好是 64 字节。

- 或 -

<paramref name="otherPartyPublicKey" />使用的曲线与此密钥使用的曲线不同。

- 或 -

此实例仅表示一个公钥。</exception>
      <returns>使用共享机密作为密钥的 TLS 1.1 PRF 中的前 48 个字节。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportECPrivateKey">
      <summary>以 ECPrivateKey 格式导出当前密钥。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>一个字节数组，它包含此密钥的 ECPrivateKey 表示形式。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)">
      <summary>在派生类中替换时，使用显式曲线形式，从正常运行的 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 密钥将公钥或公钥和私钥信息导出到 <see cref="T:System.Security.Cryptography.ECParameters" /> 结构，使其可传递到 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 方法。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <returns>表示此项在曲线上的点的对象（使用显式曲线格式）。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)">
      <summary>在派生类中替换时，从正常运行的 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 密钥将公钥或公钥和私钥信息导出到 <see cref="T:System.Security.Cryptography.ECParameters" /> 结构，使其可传递到 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 方法。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 <see langword="true" />；否则，若要仅包含公用参数，则为 <see langword="false" />。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <returns>表示此项在曲线上的点的对象。 可将其传递到 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 方法。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.FromXmlString(System.String)">
      <summary>在所有情况下均引发此方法。</summary>
      <param name="xmlString">用于重新构造 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象的 XML 字符串。</param>
      <exception cref="T:System.NotImplementedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>在派生类中替换时，为指定曲线生成新的临时公钥/私钥对。</summary>
      <param name="curve">用于生成临时公钥/私钥对的曲线。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> 不进行验证。</exception>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>从 ECPrivateKey 结构中导入公共/私有密钥对，替换此对象的密钥。</summary>
      <param name="source">ASN.1-BER 编码中 ECPrivateKey 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 ECPrivateKey 结构。

- 或 -

密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用基于字节的密码解密之后，从 PKCS#8 EncryptedPrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</summary>
      <param name="passwordBytes">解密密钥材料时用作密码的字节。</param>
      <param name="source">ASN.1-BER 编码中 PKCS#8 EncryptedPrivateKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

- 或 -

<paramref name="source" /> 的内容表示要应用的密钥派生功能 (KDF) 是旧的 PKCS#12 KDF，需要基于 <see cref="T:System.Char" /> 的密码。

- 或 -

<paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

- 或 -

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

- 或 -

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

- 或 -

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用基于字符的密码解密之后，从 PKCS#8 EncryptedPrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</summary>
      <param name="password">用于解密密钥材料的密码。</param>
      <param name="source">ASN.1-BER 编码中 PKCS#8 EncryptedPrivateKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

- 或 -

<paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

- 或 -

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

- 或 -

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

- 或 -

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>导入已加密的 RFC 7468 PEM 编码的私钥，替换此对象的密钥。</summary>
      <param name="input">要导入的加密密钥的 PEM 文本。</param>
      <param name="passwordBytes">解密密钥材料时用作密码的字节。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。

- 或 -

<paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

- 或 -

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

- 或 -

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容指示密钥用于此实例表示的算法以外的算法。

- 或 -

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容表示密钥采用的格式不受支持。

- 或 -

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>导入已加密的 RFC 7468 PEM 编码的私钥，替换此对象的密钥。</summary>
      <param name="input">要导入的加密密钥的 PEM 文本。</param>
      <param name="password">用于解密密钥材料的密码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。

- 或 -

<paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

- 或 -

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

- 或 -

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容指示密钥用于此实例表示的算法以外的算法。

- 或 -

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容表示密钥采用的格式不受支持。

- 或 -

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>导入 RFC 7468 PEM 编码的密钥，替换此对象的密钥。</summary>
      <param name="input">要导入的密钥的 PEM 文本。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。

- 或 -

<paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。

- 或 -

<paramref name="input" /> 包含已加密的 PEM 编码的密钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>在派生类中替代时，将 <see cref="T:System.Security.Cryptography.ECCurve" /> 的指定参数作为临时密钥导入到当前 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 对象。</summary>
      <param name="parameters">要导入的曲线参数。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> 不进行验证。</exception>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密后，从 PKCS#8 PrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</summary>
      <param name="source">ASN.1-BER 编码中 PKCS#8 PrivateKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 PrivateKeyInfo 结构。

- 或 -

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

- 或 -

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

- 或 -

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密后，从 X.509 SubjectPublicKeyInfo 结构中导入公钥，以替换此对象的密钥。</summary>
      <param name="source">ASN.1-DER 编码中的 X.509 SubjectPublicKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的内容不表示 ASN.1-DER 编码的 X.509 SubjectPublicKeyInfo 结构。

- 或 -

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

- 或 -

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

- 或 -

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ToXmlString(System.Boolean)">
      <summary>在所有情况下均引发此方法。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.NotImplementedException">在所有情况下。</exception>
      <returns>此方法不返回值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>尝试以 <see langword="ECPrivateKey" /> 格式将当前密钥导入所提供的缓冲区。</summary>
      <param name="destination">接收 <see langword="ECPrivateKey" /> 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用基于字节的密码以 PKCS#8 EncryptedPrivateKeyInfo 格式将当前密钥导出到所提供的缓冲区。</summary>
      <param name="passwordBytes">加密密钥材料时用作密码的字节。</param>
      <param name="pbeParameters">加密密钥材料时使用的基于密码加密 (PBE) 参数。</param>
      <param name="destination">接收 PKCS#8 EncryptedPrivateKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。

- 或 -

<paramref name="pbeParameters" /> 指示应使用需要基于 <see cref="T:System.Char" /> 密码的 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用基于字符的密码以 PKCS#8 EncryptedPrivateKeyInfo 格式将当前密钥导入所提供的缓冲区。</summary>
      <param name="password">加密密钥材料时使用的密码。</param>
      <param name="pbeParameters">加密密钥材料时使用的基于密码加密 (PBE) 参数。</param>
      <param name="destination">接收 PKCS#8 EncryptedPrivateKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>尝试以 PKCS#8 PrivateKeyInfo 格式将当前密钥导出到所提供的缓冲区。</summary>
      <param name="destination">接收 PKCS#8 PrivateKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>尝试以 X.509 SubjectPublicKeyInfo 格式将当前密钥导出到所提供的缓冲区。</summary>
      <param name="destination">接收 X.509 SubjectPublicKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>获取密钥交换算法的名称。</summary>
      <returns>密钥交换算法的名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>获取当前椭圆曲线 Diffie-Hellman (ECDH) 实例正在使用的公钥。</summary>
      <returns>此 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 实例正在使用的 ECDH 密钥对的公共部分。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>获取签名算法的名称。</summary>
      <returns>总是为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>提供所有 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 实现必须从中继承的抽象基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 类的新实例。</summary>
      <param name="keyBlob">表示 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 对象的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>释放 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 类使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportExplicitParameters">
      <summary>在派生类中替代时，导出 <see cref="T:System.Security.Cryptography.ECCurve" /> 对象的显式 <see cref="T:System.Security.Cryptography.ECParameters" />。</summary>
      <exception cref="T:System.NotSupportedException">派生方法必须重写此方法。</exception>
      <returns>表示此项在曲线上的点的对象（使用显式曲线格式）。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportParameters">
      <summary>在派生类中替代时，导出 <see cref="T:System.Security.Cryptography.ECCurve" /> 对象的已命名或显式 <see cref="T:System.Security.Cryptography.ECParameters" />。</summary>
      <exception cref="T:System.NotSupportedException">派生方法必须重写此方法。</exception>
      <returns>表示此项在曲线上的点的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 密钥 BLOB 序列化为字节数组。</summary>
      <returns>一个字节数组，包含已序列化的椭圆曲线 Diffie-Hellman (ECDH) 公钥。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 公钥序列化为 XML 字符串。</summary>
      <returns>一个 XML 字符串，该字符串包含已序列化的椭圆曲线 Diffie-Hellman (ECDH) 公钥。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>提供用于封装椭圆曲线数字签名算法 (ECDSA) 的抽象基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDsa" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>创建椭圆曲线数字签名算法 (ECDSA) 的默认实现的一个新实例。</summary>
      <returns>此类的默认实现 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) 的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
      <summary>使用通过指定曲线新生成的密钥，创建椭圆曲线数字签名算法 (ECDSA) 的默认实现的新实例。</summary>
      <param name="curve">要用于密钥生成的曲线。</param>
      <returns>此类的默认实现 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) 的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
      <summary>通过将指定参数用作密钥，创建椭圆曲线数字签名算法 (ECDSA) 的默认实现的新实例。</summary>
      <param name="parameters">表示要使用的密钥的参数。</param>
      <returns>此类的默认实现 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) 的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>创建椭圆曲线数字签名算法 (ECDSA) 的指定实现的一个新实例。</summary>
      <param name="algorithm">ECDSA 实现的名称。 以下字符串指的是同一个实现，它是当前 .NET Framework 中支持的唯一实现。 
- "ECDsa" 
- "ECDsaCng" 
- "System.Security.Cryptography.ECDsaCng" 
也可以提供自定义 ECDSA 实现的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 参数为 <see langword="null" />。</exception>
      <returns>此类的指定实现的新实例。 如果指定的算法名称没有映射到 ECDSA 实现，则此方法返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportECPrivateKey">
      <summary>以 ECPrivateKey 格式导出当前密钥。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>一个字节数组，它包含此密钥的 ECPrivateKey 表示形式。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
      <summary>在派生类中替代时，导出椭圆曲线的显式参数。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">派生方法必须重写此方法。</exception>
      <returns>表示此项在曲线上的点的参数（使用显式曲线格式）。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
      <summary>在派生类中替代时，导出椭圆曲线的已命名或显式参数。 如果曲线具有一个名称，则 <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> 字段包含已命名的曲线参数，否则将包含显式参数。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">派生方法必须重写此方法。</exception>
      <returns>表示此项在曲线上的点的参数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)">
      <summary>在所有情况下均引发此方法。</summary>
      <param name="xmlString">用于重新构造 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象的 XML 字符串。</param>
      <exception cref="T:System.NotImplementedException">在所有情况下。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>在派生类中替换时，为指定曲线生成新的临时公钥/私钥对，替换当前密钥。</summary>
      <param name="curve">用于生成密钥的曲线。</param>
      <exception cref="T:System.NotSupportedException">派生方法必须重写此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)">
      <summary>获取此密钥按指定格式生成的签名的最大尺寸（以字节为单位）。</summary>
      <param name="signatureFormat">签名的编码格式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <returns>此密钥按指定格式生成的签名的最大尺寸（以字节为单位）。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在派生类中进行重写后，通过使用指定的哈希算法计算字节数组指定部分的哈希值。</summary>
      <param name="data">要进行哈希处理的数据。</param>
      <param name="offset">
        <paramref name="data" /> 中要进行哈希处理的第一个字节的索引。</param>
      <param name="count">要进行哈希处理的字节数。</param>
      <param name="hashAlgorithm">要用于对数据进行哈希处理的算法。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <returns>经过哈希处理的数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在派生类中进行重写后，通过使用指定的哈希算法计算指定二进制流的哈希值。</summary>
      <param name="data">要进行哈希处理的二进制流。</param>
      <param name="hashAlgorithm">要用于对数据进行哈希处理的算法。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <returns>经过哈希处理的数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>从 ECPrivateKey 结构中导入公共/私有密钥对，替换此对象的密钥。</summary>
      <param name="source">ASN.1-BER 编码中 ECPrivateKey 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 ECPrivateKey 结构。

- 或 -

密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用基于字节的密码解密之后，从 PKCS#8 EncryptedPrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</summary>
      <param name="passwordBytes">解密密钥材料时用作密码的字节。</param>
      <param name="source">ASN.1-BER 编码中 PKCS#8 EncryptedPrivateKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

- 或 -

<paramref name="source" /> 的内容表示要应用的密钥派生功能 (KDF) 是旧的 PKCS#12 KDF，需要基于 <see cref="T:System.Char" /> 的密码。

- 或 -

<paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

- 或 -

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

- 或 -

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

- 或 -

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用基于字符的密码解密之后，从 PKCS#8 EncryptedPrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</summary>
      <param name="password">用于解密密钥材料的密码。</param>
      <param name="source">ASN.1-BER 编码中 PKCS#8 EncryptedPrivateKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

- 或 -

<paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

- 或 -

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

- 或 -

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

- 或 -

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>导入已加密的 RFC 7468 PEM 编码的私钥，替换此对象的密钥。</summary>
      <param name="input">要导入的加密密钥的 PEM 文本。</param>
      <param name="passwordBytes">解密密钥材料时用作密码的字节。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。

- 或 -

<paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

- 或 - 
<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

- 或 -

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容指示密钥用于此实例表示的算法以外的算法。

- 或 -

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容表示密钥采用的格式不受支持。

- 或 -

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>导入已加密的 RFC 7468 PEM 编码的私钥，替换此对象的密钥。</summary>
      <param name="input">要导入的加密密钥的 PEM 文本。</param>
      <param name="password">用于解密密钥材料的密码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。

- 或 -

<paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

- 或 -

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

- 或 -

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容指示密钥用于此实例表示的算法以外的算法。

- 或 -

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容表示密钥采用的格式不受支持。

- 或 -

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>导入 RFC 7468 PEM 编码的密钥，替换此对象的密钥。</summary>
      <param name="input">要导入的密钥的 PEM 文本。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。

- 或 -

<paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。

- 或 -

<paramref name="input" /> 包含已加密的 PEM 编码的密钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>当在派生类中重写时，导入指定的参数。</summary>
      <param name="parameters">曲线的参数。</param>
      <exception cref="T:System.NotSupportedException">派生方法必须重写此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密后，从 PKCS#8 PrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</summary>
      <param name="source">ASN.1-BER 编码中 PKCS#8 PrivateKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 PrivateKeyInfo 结构。

- 或 -

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

- 或 -

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

- 或 -

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密后，从 X.509 SubjectPublicKeyInfo 结构中导入公钥，以替换此对象的密钥。</summary>
      <param name="source">ASN.1-DER 编码中的 X.509 SubjectPublicKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的内容不表示 ASN.1-DER 编码的 X.509 SubjectPublicKeyInfo 结构。

- 或 -

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

- 或 -

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

- 或 -

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的哈希算法计算指定字节数组的一个部分的哈希值，并对生成的哈希值进行签名。</summary>
      <param name="data">要为其计算哈希的输入数据。</param>
      <param name="offset">数组中自其开始使用数据的偏移量。</param>
      <param name="count">数组中用作数据的字节数。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。  
  
- 或 - 
 <paramref name="count" /> 小于零。  
  
- 或 - 
 <paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</exception>
      <returns>指定数据的 ECDSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</summary>
      <param name="data">要签名的数据。</param>
      <param name="offset">
        <paramref name="data" /> 中自其开始使用哈希处理的偏移量。</param>
      <param name="count">要从 <paramref name="data" /> 中读取的字节数。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。
 
- 或 - 
 <paramref name="offset" /> 小于零。
 
- 或 - 
 <paramref name="count" /> 小于零。
 
- 或 - 
 <paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或签名时出错。</exception>
      <returns>指定数据的 ECDSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的哈希算法计算指定字节数组的哈希值，并对生成的哈希值进行签名。</summary>
      <param name="data">要为其计算哈希的输入数据。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>指定数据的 ECDSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</summary>
      <param name="data">要签名的数据。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或签名时出错。</exception>
      <returns>指定数据的 ECDSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的哈希算法计算指定流的哈希值，并对生成的哈希值进行签名。</summary>
      <param name="data">要为其计算哈希的输入流。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>指定数据的 ECDSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</summary>
      <param name="data">要签名的数据。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或签名时出错。</exception>
      <returns>指定数据的 ECDSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</summary>
      <param name="data">要签名的数据。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或签名时出错。</exception>
      <returns>指定数据的 ECDSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>计算指定数据的哈希值，并使用指定的签名格式对其进行签名。</summary>
      <param name="data">要签名的数据。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或签名时出错。</exception>
      <returns>指定数据的 ECDSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>为指定的哈希值生成数字签名。</summary>
      <param name="hash">待签名数据的哈希值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 参数为 <see langword="null" />。</exception>
      <returns>指定哈希值的数字签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>采用指定格式为指定的哈希值计算 ECDSA 签名。</summary>
      <param name="hash">要签名的哈希值。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名时出错。</exception>
      <returns>指定数据的 ECDSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHashCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>采用指定格式为指定的哈希值计算 ECDSA 签名。</summary>
      <param name="hash">要签名的哈希值。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名时出错。</exception>
      <returns>指定数据的 ECDSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)">
      <summary>在所有情况下均引发此方法。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.NotImplementedException">在所有情况下。</exception>
      <returns>此方法不返回值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>尝试以 ECPrivateKey 格式将当前密钥导入所提供的缓冲区。</summary>
      <param name="destination">用于接收 ECPrivateKey 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用基于字节的密码以 PKCS#8 EncryptedPrivateKeyInfo 格式将当前密钥导出到所提供的缓冲区。</summary>
      <param name="passwordBytes">加密密钥材料时用作密码的字节。</param>
      <param name="pbeParameters">加密密钥材料时使用的基于密码加密 (PBE) 参数。</param>
      <param name="destination">接收 PKCS#8 EncryptedPrivateKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。

- 或 -

<paramref name="pbeParameters" /> 指示应使用需要基于 <see cref="T:System.Char" /> 密码的 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用基于字符的密码以 PKCS#8 EncryptedPrivateKeyInfo 格式将当前密钥导入所提供的缓冲区。</summary>
      <param name="password">加密密钥材料时使用的密码。</param>
      <param name="pbeParameters">加密密钥材料时使用的基于密码加密 (PBE) 参数。</param>
      <param name="destination">接收 PKCS#8 EncryptedPrivateKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>尝试以 PKCS#8 PrivateKeyInfo 格式将当前密钥导出到所提供的缓冲区。</summary>
      <param name="destination">接收 PKCS#8 PrivateKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>尝试以 X.509 SubjectPublicKeyInfo 格式将当前密钥导出到所提供的缓冲区。</summary>
      <param name="destination">接收 X.509 SubjectPublicKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>尝试使用指定的哈希算法，将指定的只读字节范围的哈希值计算入提供的目标。</summary>
      <param name="data">要进行哈希处理的数据。</param>
      <param name="destination">要接收哈希值的缓冲区。</param>
      <param name="hashAlgorithm">要用于对数据进行哈希处理的算法。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <returns>如果 <paramref name="destination" /> 不够长，无法接收哈希值，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>尝试使用指定的哈希算法和当前密钥，将指定的只读字节范围的 ECDSA 数字签名计算入提供的目标。</summary>
      <param name="data">要签名的数据。</param>
      <param name="destination">要接收签名的缓冲区。</param>
      <param name="hashAlgorithm">用于对签名的数据进行哈希处理的算法。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <returns>如果 <paramref name="destination" /> 不够长，无法接收签名，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>尝试在提供的缓冲区中以指定的格式为指定的数据创建 ECDSA 签名。</summary>
      <param name="data">要进行哈希处理和签名的数据。</param>
      <param name="destination">要接收签名的缓冲区。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名时出错。</exception>
      <returns>如果 <paramref name="destination" /> 的大小足以接收签名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>尝试在提供的缓冲区中以指定的格式为指定的数据创建 ECDSA 签名。</summary>
      <param name="data">要进行哈希处理和签名的数据。</param>
      <param name="destination">要接收签名的缓冲区。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名时出错。</exception>
      <returns>如果 <paramref name="destination" /> 的大小足以接收签名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用当前密钥，将指定的表示数据哈希只读字节范围的 ECDSA 数字签名计算入提供的目标。</summary>
      <param name="hash">待签名数据的哈希值。</param>
      <param name="destination">要接收签名的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <returns>如果 <paramref name="destination" /> 不够长，无法接收签名，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>尝试在提供的缓冲区中以指定的格式为指定的哈希值创建 ECDSA 签名。</summary>
      <param name="hash">要签名的哈希值。</param>
      <param name="destination">要接收签名的缓冲区。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名时出错。</exception>
      <returns>如果 <paramref name="destination" /> 的大小足以接收签名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHashCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>尝试在提供的缓冲区中以指定的格式为指定的哈希值创建 ECDSA 签名。</summary>
      <param name="hash">要签名的哈希值。</param>
      <param name="destination">要接收签名的缓冲区。</param>
      <param name="signatureFormat">要用于签名的编码格式。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名时出错。</exception>
      <returns>如果 <paramref name="destination" /> 的大小足以接收签名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>验证数字签名是否适用于当前密钥和使用指定的哈希算法提供的数据。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="signature" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的数据是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">用于对验证过程的数据进行哈希处理的哈希算法。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的哈希算法验证数字签名是否适用于当前密钥和提供的数据部分。</summary>
      <param name="data">已签名的数据。</param>
      <param name="offset">开始计算哈希的起始索引。</param>
      <param name="count">要进行哈希处理的字节数。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="signature" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。  
  
- 或 - 
 <paramref name="count" /> 小于零。  
  
- 或 - 
 <paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</exception>
      <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的数据是否有效。</summary>
      <param name="data">包含已签名数据的数组。</param>
      <param name="offset">
        <paramref name="data" /> 的已签名部分的起始索引。</param>
      <param name="count">已签名的 <paramref name="data" /> 的字节数。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">用于对验证过程的数据进行哈希处理的哈希算法。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。
 
- 或 - 
 <paramref name="offset" /> 小于零。
 
- 或 - 
 <paramref name="count" /> 小于零。
 
- 或 - 
 <paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>验证数字签名是否适用于当前密钥和使用指定的哈希算法提供的数据。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="signature" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的数据是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">用于对验证过程的数据进行哈希处理的哈希算法。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>验证数字签名是否适用于当前密钥和使用指定的哈希算法提供的数据。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的数据是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">用于对验证过程的数据进行哈希处理的哈希算法。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的数据是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">用于对验证过程的数据进行哈希处理的哈希算法。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的数据是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <param name="hashAlgorithm">用于对验证过程的数据进行哈希处理的哈希算法。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希处理或验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>验证数字签名是否适用于当前密钥和提供的数据哈希。</summary>
      <param name="hash">待验证的数据的哈希值。</param>
      <param name="signature">要结合哈希值验证的数据的数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 或 <paramref name="signature" /> 为 <see langword="null" />。</exception>
      <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的哈希是否有效。</summary>
      <param name="hash">已签名的哈希。</param>
      <param name="signature">要验证的签名。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 或 <paramref name="signature" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>验证数字签名是否适用于当前密钥和提供的数据哈希。</summary>
      <param name="hash">待验证的数据的哈希值。</param>
      <param name="signature">要结合哈希值验证的数据的数字签名。</param>
      <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的哈希是否有效。</summary>
      <param name="hash">已签名的哈希。</param>
      <param name="signature">要验证的签名。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHashCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>验证数字签名对于所提供的哈希是否有效。</summary>
      <param name="hash">已签名的哈希。</param>
      <param name="signature">要验证的签名。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的编码格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">验证时出错。</exception>
      <returns>如果数字签名对所提供的数据有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>获取密钥交换算法的名称。</summary>
      <returns>总是为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>获取签名算法的名称。</summary>
      <returns>字符串“ECDsa”。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECParameters">
      <summary>表示椭圆曲线加密 (ECC) 算法的标准参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Curve">
      <summary>表示与公钥 (<see cref="F:System.Security.Cryptography.ECParameters.Q" />) 和可选私钥 (<see cref="F:System.Security.Cryptography.ECParameters.D" />) 相关联的曲线。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.D">
      <summary>表示椭圆曲线加密 (ECC) 算法的私钥 <see langword="D" />（保存为大端格式）。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Q">
      <summary>表示椭圆曲线加密 (ECC) 算法的公钥 <see langword="Q" />。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECParameters.Validate">
      <summary>验证当前对象。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密钥或曲线参数对当前曲线类型无效。</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECPoint">
      <summary>表示椭圆曲线加密 (ECC) 结构的 (X,Y) 坐标对。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.X">
      <summary>表示 X 坐标。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.Y">
      <summary>表示 Y 坐标。</summary>
    </member>
    <member name="T:System.Security.Cryptography.HKDF">
      <summary>RFC5869 基于 HMAC 的提取和扩展密钥派生 (HKDF)</summary>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.DeriveKey(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Int32,System.Byte[],System.Byte[])">
      <summary>执行密钥派生 HKDF 展开和提取功能。</summary>
      <param name="hashAlgorithmName">用于 HMAC 操作的哈希算法。</param>
      <param name="ikm">输入密钥内容。</param>
      <param name="outputLength">输出密钥内容的长度。</param>
      <param name="salt">可选的盐值（非机密随机值）。 如果没有提供，则默认为与指定的哈希算法输出长度相同的字节数组。</param>
      <param name="info">可选的上下文和应用程序具体信息。</param>
      <returns>输出密钥内容。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.DeriveKey(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>执行密钥派生 HKDF 展开和提取功能。</summary>
      <param name="hashAlgorithmName">用于 HMAC 操作的哈希算法。</param>
      <param name="ikm">输入密钥内容。</param>
      <param name="output">表示输出密钥内容的输出缓冲区。</param>
      <param name="salt">盐值（非机密随机值）。</param>
      <param name="info">上下文和应用程序具体信息（可以为空跨度）。</param>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Expand(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Int32,System.Byte[])">
      <summary>执行 HKDF 扩展功能，请参阅 RFC5869 的 2.3 节。</summary>
      <param name="hashAlgorithmName">用于 HMAC 操作的哈希算法。</param>
      <param name="prk">至少与指定哈希算法的输出字节数组（通常为展开步骤的输出）相同的伪随机密钥。</param>
      <param name="outputLength">输出密钥内容的长度。</param>
      <param name="info">可选的上下文和应用程序具体信息。</param>
      <returns>输出密钥内容。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Expand(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>执行 HKDF 扩展功能。 请参阅 RFC5869 的 2.3 节。</summary>
      <param name="hashAlgorithmName">用于 HMAC 操作的哈希算法。</param>
      <param name="prk">至少与指定哈希算法的输出字节数组（通常为展开步骤的输出）相同的伪随机密钥。</param>
      <param name="output">用于接收输出密钥内容的目标缓冲区。</param>
      <param name="info">上下文和应用程序具体信息（可以为空跨度）。</param>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Extract(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>执行 HKDF 提取功能。
请参阅 RFC5869 的 2.2 节。</summary>
      <param name="hashAlgorithmName">用于 HMAC 操作的哈希算法。</param>
      <param name="ikm">输入密钥内容。</param>
      <param name="salt">可选的盐值（非机密随机值）。 如果没有提供，则默认为与指定的哈希算法输出长度相同的字节数组。</param>
      <returns>伪随机密钥 (prk)。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Extract(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>执行 HKDF 提取功能。
请参阅 RFC5869 的 2.2 节。</summary>
      <param name="hashAlgorithmName">用于 HMAC 操作的哈希算法。</param>
      <param name="ikm">输入密钥内容。</param>
      <param name="salt">盐值（非机密随机值）。</param>
      <param name="prk">用于接收伪随机密钥 (prk) 的目标缓冲区。</param>
      <returns>写入 <paramref name="prk" /> 缓冲区的字节数。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACMD5">
      <summary>使用 <see cref="T:System.Security.Cryptography.MD5" /> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor">
      <summary>使用随机生成的密钥初始化 <see cref="T:System.Security.Cryptography.HMACMD5" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
      <summary>使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.HMACMD5" /> 类的新实例。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACMD5" /> 加密的机密密钥。 密钥的长度不限，但如果超过 64 个字节，就会对其进行哈希计算（使用 SHA-1），以派生一个 64 个字节的密钥。 因此，建议的密钥大小为 64 个字节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Security.Cryptography.HMACMD5" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>将写入对象的数据路由到 HMAC 算法以计算 HMAC 。</summary>
      <param name="rgb">要计算其 HMAC 的输入。</param>
      <param name="ib">字节数组中的偏移量，从该位置开始使用数据。</param>
      <param name="cb">字节数组中用作数据的字节数。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>将写入对象的数据路由到 HMAC 算法以计算 HMAC 。</summary>
      <param name="source">要计算其 HMAC 的输入。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashFinal">
      <summary>在算法处理最后一个数据后，结束 HMAC 计算。</summary>
      <returns>字节数组中计算得到的 HMAC 值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Initialize">
      <summary>将哈希算法重置为其初始状态。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>在 HMAC 算法处理最后一个数据后，尝试结束 HMAC 计算。</summary>
      <param name="destination">要接收 HMAC 值的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <returns>
        <paramref name="destination" /> 的长度不足以接收 HMAC 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACMD5.Key">
      <summary>获取或设置要在 HMAC 计算中使用的密钥。</summary>
      <returns>要在 HMAC 计算中使用的密钥。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA1">
      <summary>使用 <see cref="T:System.Security.Cryptography.SHA1" /> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
      <summary>使用随机生成的密钥初始化 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
      <summary>使用指定的密钥数据初始化 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 类的新实例。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 加密的机密密钥。 密钥的长度不限，但如果该密钥是 64 个字节，就会经过散列处理（使用 SHA-1）以派生一个 64 个字节的密钥。 因此，建议的密钥大小为 64 个字节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
      <summary>使用指定的密钥数据和一个指定是否使用 SHA1 算法托管版本的值，来初始化 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 类的新实例。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 加密的机密密钥。 密钥的长度不限，但如果该密钥超过 64 个字节，就会经过散列处理（使用 SHA-1）以派生一个 64 个字节的密钥。 因此，建议的密钥大小为 64 个字节。</param>
      <param name="useManagedSha1">如果使用 SHA1 算法的托管实现（<see cref="T:System.Security.Cryptography.SHA1Managed" /> 类），则为 <see langword="true" />；如果使用非托管实现（<see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> 类），则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)">
      <summary>此成员替代 <see cref="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)" /> 且该主题可能包括更完整的文档。

释放由 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">为 <see langword="true" /> 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>将写入对象的数据路由到 SHA1 哈希算法以计算基于哈希的消息验证代码 (HMAC)。</summary>
      <param name="rgb">输入数据。</param>
      <param name="ib">字节数组中的偏移量，从该位置开始使用数据。</param>
      <param name="cb">数组中用作数据的字节数。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>将写入对象的数据路由到 HMAC 算法以计算 HMAC 。</summary>
      <param name="source">要计算其 HMAC 的输入。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashFinal">
      <summary>在算法处理最后一个数据后，结束 HMAC 计算。</summary>
      <returns>字节数组中计算得到的 HMAC 值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Initialize">
      <summary>将哈希算法重置为其初始状态。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>在 HMAC 算法处理最后一个数据后，尝试结束 HMAC 计算。</summary>
      <param name="destination">要接收 HMAC 值的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <returns>
        <paramref name="destination" /> 的长度不足以接收 HMAC 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA1.Key">
      <summary>获取或设置用于哈希算法的密钥。</summary>
      <returns>用于哈希算法的密钥。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA256">
      <summary>使用 <see cref="T:System.Security.Cryptography.SHA256" /> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor">
      <summary>使用随机生成的密钥初始化 <see cref="T:System.Security.Cryptography.HMACSHA256" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
      <summary>使用指定的密钥数据初始化 <see cref="T:System.Security.Cryptography.HMACSHA256" /> 类的新实例。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA256" /> 加密的机密密钥。 该密钥可以是任意长度。 但是建议的大小为 64 个字节。 如果键的长度超过 64 个字节，将对其进行哈希运算（使用 SHA-256）以派生出一个 64 字节的密钥。 如果少于 64 个字节，就填充到 64 个字节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Security.Cryptography.HMACSHA256" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>将写入对象的数据路由到 HMAC 算法以计算 HMAC 。</summary>
      <param name="rgb">要计算其 HMAC 的输入。</param>
      <param name="ib">字节数组中的偏移量，从该位置开始使用数据。</param>
      <param name="cb">字节数组中用作数据的字节数。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>将写入对象的数据路由到 HMAC 算法以计算 HMAC 。</summary>
      <param name="source">要计算其 HMAC 的输入。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashFinal">
      <summary>在算法处理最后一个数据后，结束 HMAC 计算。</summary>
      <returns>字节数组中计算得到的 HMAC 值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Initialize">
      <summary>将哈希算法重置为其初始状态。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>在 HMAC 算法处理最后一个数据后，尝试结束 HMAC 计算。</summary>
      <param name="destination">要接收 HMAC 值的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <returns>
        <paramref name="destination" /> 的长度不足以接收 HMAC 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA256.Key">
      <summary>获取或设置要在 HMAC 计算中使用的密钥。</summary>
      <returns>要在 HMAC 计算中使用的密钥。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA384">
      <summary>使用 <see cref="T:System.Security.Cryptography.SHA384" /> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor">
      <summary>使用随机生成的密钥初始化 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
      <summary>使用指定的密钥数据初始化 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 类的新实例。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA384" /> 加密的机密密钥。 该密钥可以是任意长度。 但是建议的大小为 128 个字节。 如果密钥长度超过 128 个字节，将对其进行哈希运算（使用 SHA-384）以派生出一个 128 字节的密钥。 如果少于 128 个字节，就填充到 128 个字节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>将写入对象的数据路由到 HMAC 算法以计算 HMAC 。</summary>
      <param name="rgb">要计算其 HMAC 的输入。</param>
      <param name="ib">字节数组中的偏移量，从该位置开始使用数据。</param>
      <param name="cb">字节数组中用作数据的字节数。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>将写入对象的数据路由到 HMAC 算法以计算 HMAC 。</summary>
      <param name="source">要计算其 HMAC 的输入。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashFinal">
      <summary>在算法处理最后一个数据后，结束 HMAC 计算。</summary>
      <returns>字节数组中计算得到的 HMAC 值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Initialize">
      <summary>将哈希算法重置为其初始状态。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>在 HMAC 算法处理最后一个数据后，尝试结束 HMAC 计算。</summary>
      <param name="destination">要接收 HMAC 值的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <returns>
        <paramref name="destination" /> 的长度不足以接收 HMAC 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.Key">
      <summary>获取或设置要在 HMAC 计算中使用的密钥。</summary>
      <returns>要在 HMAC 计算中使用的密钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
      <summary>针对 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 算法的 .NET Framework 2.0 实现（与该算法的 .NET Framework 2.0 Service Pack 1 实现不一致），提供一种解决方法。</summary>
      <returns>如果支持 .NET Framework 2.0 Service Pack 1 应用程序与 .NET Framework 2.0 应用程序交互，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA512">
      <summary>使用 <see cref="T:System.Security.Cryptography.SHA512" /> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor">
      <summary>使用随机生成的密钥初始化 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
      <summary>使用指定的密钥数据初始化 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 类的新实例。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA512" /> 加密的机密密钥。 该密钥可以是任意长度。 但是建议的大小为 128 个字节。 如果密钥的长度超过 128 个字节，将对其进行哈希运算（使用 SHA-512）以派生出一个 128 字节的密钥。 如果少于 128 个字节，就填充到 128 个字节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>将写入对象的数据路由到 HMAC 算法以计算 HMAC 。</summary>
      <param name="rgb">要计算其 HMAC 的输入。</param>
      <param name="ib">字节数组中的偏移量，从该位置开始使用数据。</param>
      <param name="cb">字节数组中用作数据的字节数。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>将写入对象的数据路由到 HMAC 算法以计算 HMAC 。</summary>
      <param name="source">要计算其 HMAC 的输入。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashFinal">
      <summary>在算法处理最后一个数据后，结束 HMAC 计算。</summary>
      <returns>字节数组中计算得到的 HMAC 值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Initialize">
      <summary>将哈希算法重置为其初始状态。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>在 HMAC 算法处理最后一个数据后，尝试结束 HMAC 计算。</summary>
      <param name="destination">要接收 HMAC 值的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <returns>
        <paramref name="destination" /> 的长度不足以接收 HMAC 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.Key">
      <summary>获取或设置要在 HMAC 计算中使用的密钥。</summary>
      <returns>要在 HMAC 计算中使用的密钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
      <summary>针对与 .NET Framework 2.0 实现不一致的 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 算法的 .NET Framework 2.0 Service Pack 1实现，提供一种解决方法。</summary>
      <returns>如果支持 .NET Framework 2.0 Service Pack 1 应用程序与 .NET Framework 2.0 应用程序交互，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.IncrementalHash">
      <summary>支持跨多个段以增量方式计算哈希或基于哈希的消息验证代码 (HMAC) 值。</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])">
      <summary>将指定数据追加到已进行哈希或 HMAC 处理的数据。</summary>
      <param name="data">要处理的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 对象已被释放。</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)">
      <summary>从指定偏移量开始，向已经过哈希或基于哈希的消息验证代码 (HMAC) 处理的数据追加指定数据的指定字节数。</summary>
      <param name="data">要处理的数据。</param>
      <param name="offset">字节数组中的偏移量，从该位置开始使用数据。</param>
      <param name="count">要从 <paramref name="data" /> 中使用的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="offset" /> 为负数。  
  
- 或 - 
 <paramref name="count" /> 大于 <paramref name="data" /> 的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 与 <paramref name="count" /> 的总和大于数据长度。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 对象已被释放。</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})">
      <summary>将指定数据追加到已在哈希或基于哈希的消息验证代码 (HMAC) 中处理的数据。</summary>
      <param name="data">要处理的数据。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 对象已被释放。</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)">
      <summary>为指定算法创建 <see cref="T:System.Security.Cryptography.IncrementalHash" />。</summary>
      <param name="hashAlgorithm">要执行的哈希算法的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或空字符串。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> 不是已知的哈希算法。</exception>
      <returns>一个 <see cref="T:System.Security.Cryptography.IncrementalHash" /> 实例，该实例已准备好计算 <paramref name="hashAlgorithm" /> 指定的哈希算法。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>使用指定的哈希算法和密钥为基于哈希的消息验证代码 (HMAC) 算法创建 <see cref="T:System.Security.Cryptography.IncrementalHash" />。</summary>
      <param name="hashAlgorithm">要在 HMAC 内执行的哈希算法的名称。</param>
      <param name="key">HMAC 的密钥。 密钥可以为任何长度，但将对长度超过指定哈希算法的输出大小的密钥进行哈希处理，以便派生大小正确的密钥。 因此，建议的密钥大小为指定哈希算法的输出大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或空字符串。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> 不是已知的哈希算法。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 类的一个实例，该实例已准备好计算指定的哈希算法。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte})">
      <summary>使用 <paramref name="hashAlgorithm" /> 指定的哈希算法和 <paramref name="key" /> 指定的密钥为基于哈希的消息验证码 (HMAC) 算法创建 <see cref="T:System.Security.Cryptography.IncrementalHash" />。</summary>
      <param name="hashAlgorithm">要在 HMAC 内执行的哈希算法的名称。</param>
      <param name="key">HMAC 的密钥。 密钥可以为任何长度，但将对长度超过 <paramref name="hashAlgorithm" /> 指定的哈希算法的输出大小的密钥进行哈希处理（使用 <paramref name="hashAlgorithm" /> 指定的算法），以便派生大小正确的密钥。 因此，建议的密钥大小为 <paramref name="hashAlgorithm" /> 指定的哈希的输出大小。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或为空字符串。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> 不是已知的哈希算法。</exception>
      <returns>一个哈希实例，它用于计算 <paramref name="hashAlgorithm" /> 指定的哈希算法。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.Dispose">
      <summary>释放 <see cref="T:System.Security.Cryptography.IncrementalHash" /> 类的当前实例使用的资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetCurrentHash">
      <summary>在哈希或基于哈希的消息验证码 (HMAC) 中检索从之前对 <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> 方法的调用中累积的数据，并将对象重置为初始状态。</summary>
      <exception cref="T:System.ObjectDisposedException">对象已被释放。</exception>
      <returns>计算所得的哈希或 HMAC。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetCurrentHash(System.Span{System.Byte})">
      <summary>在哈希或基于哈希的消息验证码 (HMAC) 中检索从之前对 <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> 方法的调用中累积的数据，并将对象重置为初始状态。</summary>
      <param name="destination">用于接收哈希值或 HMAC 值的缓冲区。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 的 <see cref="P:System.Span`1.Length" /> 值小于 <see cref="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes" />。</exception>
      <exception cref="T:System.ObjectDisposedException">对象已被释放。</exception>
      <returns>写入到 <paramref name="destination" /> 的字节数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset">
      <summary>在哈希或基于哈希的消息验证代码 (HMAC) 中检索从之前对 <see cref="Overload:System.Security.Cryptography.IncrementalHash.AppendData" /> 方法的调用中累积的数据，并将对象重置为初始状态。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 对象已被释放。</exception>
      <returns>计算所得的哈希或 HMAC。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset(System.Span{System.Byte})">
      <summary>在哈希或基于哈希的消息验证码 (HMAC) 中检索从之前对 <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> 方法的调用中累积的数据，并将对象重置为初始状态。</summary>
      <param name="destination">用于接收哈希值或 HMAC 值的缓冲区。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 的 <see cref="P:System.Span`1.Length" /> 值小于 <see cref="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes" />。</exception>
      <exception cref="T:System.ObjectDisposedException">对象已被释放。</exception>
      <returns>写入到 <paramref name="destination" /> 的字节数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetCurrentHash(System.Span{System.Byte},System.Int32@)">
      <summary>尝试在哈希或基于哈希的消息验证码 (HMAC) 中检索从之前对 <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> 方法的调用中累积的数据，无需将对象重置为初始状态。</summary>
      <param name="destination">用于接收哈希值或 HMAC 值的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。
该参数未经初始化即被处理。</param>
      <exception cref="T:System.ObjectDisposedException">对象已被释放。</exception>
      <returns>
        <paramref name="destination" /> 的长度不足以接收哈希或 HMAC 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetHashAndReset(System.Span{System.Byte},System.Int32@)">
      <summary>在哈希算法处理最后一个数据后，尝试结束哈希计算。</summary>
      <param name="destination">要接收哈希或基于哈希的消息验证代码 (HMAC) 值的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> 对象已被释放。</exception>
      <returns>
        <paramref name="destination" /> 的长度不足以接收哈希或 HMAC 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.AlgorithmName">
      <summary>获取正在执行的算法的名称。 HMAC 算法前面附有“HMAC”，以区别于未经加密的摘要。</summary>
      <returns>正在执行的算法的名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes">
      <summary>获取此哈希或 HMAC 算法的输出大小（以字节为单位）。</summary>
      <returns>此哈希或 HMAC 算法的输出大小（以字节为单位）。</returns>
    </member>
    <member name="T:System.Security.Cryptography.MaskGenerationMethod">
      <summary>表示所有掩码生成器算法均必须从中派生的抽象类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.MaskGenerationMethod" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>当在派生类中重写时，使用指定的随机种子生成将具有指定长度的掩码。</summary>
      <param name="rgbSeed">用于计算掩码的随机种子。</param>
      <param name="cbReturn">生成的掩码长度（以字节为单位）。</param>
      <returns>长度等于 <paramref name="cbReturn" /> 参数的随机生成的掩码。</returns>
    </member>
    <member name="T:System.Security.Cryptography.MD5">
      <summary>表示 <see cref="T:System.Security.Cryptography.MD5" /> 哈希算法的所有实现均从中继承的抽象类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.MD5" /> 的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create">
      <summary>创建 <see cref="T:System.Security.Cryptography.MD5" /> 哈希算法的默认实现的实例。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">使用算法时启用了美国联邦信息处理标准 (FIPS) 模式，但该算法与 FIPS 不兼容。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.MD5" /> 哈希算法的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create(System.String)">
      <summary>创建 <see cref="T:System.Security.Cryptography.MD5" /> 哈希算法的指定实现的实例。</summary>
      <param name="algName">要使用的 <see cref="T:System.Security.Cryptography.MD5" /> 的特定实现的名称。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">由 <paramref name="algName" /> 参数描述的算法在使用中已启用联邦信息处理标准 (FIPS) 模式，但与 FIPS 不兼容。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.MD5" /> 的指定实现的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.Byte[])">
      <summary>使用 MD5 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 上声明的默认值为 <see langword="null" />。</exception>
      <returns>数据的哈希。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>使用 MD5 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <returns>数据的哈希。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>使用 MD5 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <param name="destination">要接收哈希值的缓冲区。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 中的缓冲区太小，无法容纳计算所得的哈希大小。 MD5 算法始终会生成 128 位的哈希或 16 个字节。</exception>
      <returns>写入 <paramref name="destination" /> 的总字节数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用 MD5 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <param name="destination">要接收哈希值的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。</param>
      <returns>如果 <paramref name="destination" /> 太小，无法容纳计算所得的哈希，则为 <see langword="false" />；否则为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.PKCS1MaskGenerationMethod">
      <summary>根据 PKCS #1 计算用于密钥交换算法的掩码。</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.PKCS1MaskGenerationMethod" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>用指定长度的指定随机种子生成并返回掩码。</summary>
      <param name="rgbSeed">用于计算掩码的随机种子。</param>
      <param name="cbReturn">生成的掩码长度（以字节为单位）。</param>
      <returns>长度等于 <paramref name="cbReturn" /> 参数的随机生成的掩码。</returns>
    </member>
    <member name="P:System.Security.Cryptography.PKCS1MaskGenerationMethod.HashName">
      <summary>获取或设置要用于生成掩码的哈希算法类型的名称。</summary>
      <returns>实现哈希算法以计算掩码的类型的名称。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RandomNumberGenerator">
      <summary>表示加密随机数生成器的所有实现从中派生的抽象类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> 的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create">
      <summary>创建可用于生成随机数据的加密随机数生成器默认实现的实例。</summary>
      <returns>加密随机数生成器的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
      <summary>创建加密随机数生成器指定实现的实例。</summary>
      <param name="rngName">要使用的随机数生成器实现的名称。</param>
      <returns>加密随机数生成器的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
      <summary>在派生类中重写时，释放由 <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> 类的当前实例使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
      <summary>在派生类中被重写时，释放由 <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> 使用的非托管资源，也可以根据需要释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Fill(System.Span{System.Byte})">
      <summary>使用加密型强随机字节填充范围。</summary>
      <param name="data">要用加密型强随机字节填充的范围。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
      <summary>当在派生类中重写时，用加密型强随机值序列填充字节数组。</summary>
      <param name="data">要用加密型强随机字节填充的数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>用加密型强随机值序列填充指定的字节数组。</summary>
      <param name="data">要用加密型强随机字节填充的数组。</param>
      <param name="offset">开始填充操作的数组的索引。</param>
      <param name="count">要填充的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于 0</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="count" /> 超过 <paramref name="data" /> 的长度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Span{System.Byte})">
      <summary>使用加密型强随机字节填充范围。</summary>
      <param name="data">要用加密型强随机字节填充的范围。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32)">
      <summary>使用加密型强随机数生成器生成介于 0（含）与指定上限（不含）之间的随机整数。</summary>
      <param name="toExclusive">随机范围的上限（不含）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 参数小于或等于 0。</exception>
      <returns>介于 0（含）与 <paramref name="toExclusive" />（不含）之间的随机整数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32,System.Int32)">
      <summary>使用加密型强随机数生成器生成介于指定下限（含）与指定上限（不含）之间的随机整数。</summary>
      <param name="fromInclusive">随机范围的下限（含）。</param>
      <param name="toExclusive">随机范围的上限（不含）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。</exception>
      <returns>介于 <paramref name="fromInclusive" />（含）与 <paramref name="toExclusive" />（不含）之间的随机整数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
      <summary>当在派生类中重写时，用加密型强随机非零值序列填充字节数组。</summary>
      <param name="data">用加密型强随机非零字节填充的数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Span{System.Byte})">
      <summary>使用加密型强随机非零值序列填充字节范围。</summary>
      <param name="data">要用加密型强随机非零字节填充的范围。</param>
    </member>
    <member name="T:System.Security.Cryptography.RC2">
      <summary>表示 <see cref="T:System.Security.Cryptography.RC2" /> 算法的所有实现均必须从中派生的基类。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RC2.EffectiveKeySizeValue">
      <summary>表示 <see cref="T:System.Security.Cryptography.RC2" /> 算法使用的机密密钥的有效大小（以位为单位）。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RC2" /> 的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create">
      <summary>创建加密对象的实例以执行 <see cref="T:System.Security.Cryptography.RC2" /> 算法。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">使用算法时启用了美国联邦信息处理标准 (FIPS) 模式，但该算法与 FIPS 不兼容。</exception>
      <returns>加密对象的实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create(System.String)">
      <summary>创建加密对象的实例以执行 <see cref="T:System.Security.Cryptography.RC2" /> 算法的指定实现。</summary>
      <param name="AlgName">要使用的 <see cref="T:System.Security.Cryptography.RC2" /> 的特定实现的名称。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">由 <paramref name="algName" /> 参数描述的算法在使用中已启用联邦信息处理标准 (FIPS) 模式，但与 FIPS 不兼容。</exception>
      <returns>加密对象的实例。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RC2.EffectiveKeySize">
      <summary>获取或设置 <see cref="T:System.Security.Cryptography.RC2" /> 算法所用密钥的有效大小（以位为单位）。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">有效密钥大小无效。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.RC2" /> 算法所使用的有效密钥大小。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RC2.KeySize">
      <summary>获取或设置 <see cref="T:System.Security.Cryptography.RC2" /> 算法所用密钥的大小（以位为单位）。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">RC2 密钥大小的值小于有效密钥大小值。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.RC2" /> 算法所用密钥的大小。</returns>
    </member>
    <member name="T:System.Security.Cryptography.Rfc2898DeriveBytes">
      <summary>通过使用基于 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 的伪随机数生成器，实现基于密码的密钥派生功能 (PBKDF2)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</summary>
      <param name="password">用于派生密钥的密码。</param>
      <param name="salt">用于派生密钥的密钥 salt。</param>
      <param name="iterations">操作的迭代数。</param>
      <exception cref="T:System.ArgumentException">指定的 salt 大小小于 8 字节或迭代次数小于 1。</exception>
      <exception cref="T:System.ArgumentNullException">密码或 salt 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例，该实例使用指定的密码、salt、迭代数和哈希算法名称来派生密钥。</summary>
      <param name="password">用以派生密钥的密码。</param>
      <param name="salt">用以导出密钥的密钥 salt。</param>
      <param name="iterations">操作的迭代数。</param>
      <param name="hashAlgorithm">用于派生密钥的哈希算法。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希算法名称无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
      <summary>通过使用密码和 salt 值派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</summary>
      <param name="password">用于派生密钥的密码。</param>
      <param name="salt">用于派生密钥的密钥 salt。</param>
      <exception cref="T:System.ArgumentException">指定的 salt 大小小于 8 字节或迭代次数小于 1。</exception>
      <exception cref="T:System.ArgumentNullException">密码或 salt 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</summary>
      <param name="password">用于派生密钥的密码。</param>
      <param name="salt">用于派生密钥的密钥 salt。</param>
      <param name="iterations">操作的迭代数。</param>
      <exception cref="T:System.ArgumentException">指定的 salt 大小小于 8 字节或迭代次数小于 1。</exception>
      <exception cref="T:System.ArgumentNullException">密码或 salt 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例，该实例使用指定的密码、salt、迭代数和哈希算法名称来派生密钥。</summary>
      <param name="password">用以派生密钥的密码。</param>
      <param name="salt">用以导出密钥的密钥 salt。</param>
      <param name="iterations">操作的迭代数。</param>
      <param name="hashAlgorithm">用于派生密钥的哈希算法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希算法名称无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
      <summary>通过使用密码和 salt 大小派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</summary>
      <param name="password">用于派生密钥的密码。</param>
      <param name="saltSize">你希望类生成的随机 salt 的大小。</param>
      <exception cref="T:System.ArgumentException">指定的 salt 大小小于 8 字节。</exception>
      <exception cref="T:System.ArgumentNullException">密码或 salt 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
      <summary>通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</summary>
      <param name="password">用于派生密钥的密码。</param>
      <param name="saltSize">你希望类生成的随机 salt 的大小。</param>
      <param name="iterations">操作的迭代数。</param>
      <exception cref="T:System.ArgumentException">指定的 salt 大小小于 8 字节或迭代次数小于 1。</exception>
      <exception cref="T:System.ArgumentNullException">密码或 salt 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterations" /> 超出范围。 此参数需要非负数。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例，该实例使用指定的密码、salt 大小、迭代数和哈希算法名称来派生密钥。</summary>
      <param name="password">用以派生密钥的密码。</param>
      <param name="saltSize">你希望类生成的随机 salt 的大小。</param>
      <param name="iterations">操作的迭代数。</param>
      <param name="hashAlgorithm">用于派生密钥的哈希算法。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">哈希算法名称无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
      <summary>从 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 对象导出加密密钥。</summary>
      <param name="algname">为其导出密钥的算法名称。</param>
      <param name="alghashname">用于导出密钥的哈希算法名称。</param>
      <param name="keySize">要导出的密钥的大小（以位为单位）。</param>
      <param name="rgbIV">用于导出密钥的初始化向量 (IV)。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> 参数不正确。  
  
- 或 - 
无法获取加密服务提供程序 (CSP)。  
  
- 或 - 
<paramref name="algname" /> 参数不是有效的算法名称。  
  
- 或 - 
<paramref name="alghashname" /> 参数不是有效的哈希算法名称。</exception>
      <returns>导出的密钥。</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
      <summary>返回此对象的伪随机密钥。</summary>
      <param name="cb">要生成的伪随机密钥字节数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cb" /> 超出范围。 此参数需要非负数。</exception>
      <returns>由伪随机密钥字节组成的字节数组。</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
      <summary>重置操作的状态。</summary>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
      <summary>获取或设置操作的迭代数。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">迭代次数小于 1。</exception>
      <returns>操作的迭代数。</returns>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
      <summary>获取或设置操作的密钥 salt 值。</summary>
      <exception cref="T:System.ArgumentException">指定的 salt 大小小于 8 字节。</exception>
      <exception cref="T:System.ArgumentNullException">salt 为 <see langword="null" />。</exception>
      <returns>操作的密钥 salt 值。</returns>
    </member>
    <member name="T:System.Security.Cryptography.Rijndael">
      <summary>表示 <see cref="T:System.Security.Cryptography.Rijndael" /> 对称加密算法的所有实现必须从其继承的基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.Rijndael" /> 的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create">
      <summary>创建加密对象以执行 <see cref="T:System.Security.Cryptography.Rijndael" /> 算法。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">使用算法时启用了美国联邦信息处理标准 (FIPS) 模式，但该算法与 FIPS 不兼容。</exception>
      <returns>一个加密对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create(System.String)">
      <summary>创建加密对象以执行 <see cref="T:System.Security.Cryptography.Rijndael" /> 算法的指定实现。</summary>
      <param name="algName">要创建的 <see cref="T:System.Security.Cryptography.Rijndael" /> 特定实现的名称。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">由 <paramref name="algName" /> 参数描述的算法在使用中已启用联邦信息处理标准 (FIPS) 模式，但与 FIPS 不兼容。</exception>
      <returns>一个加密对象。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RijndaelManaged">
      <summary>访问 <see cref="T:System.Security.Cryptography.Rijndael" /> 算法的托管版本。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RijndaelManaged" /> 类的新实例。</summary>
      <exception cref="T:System.InvalidOperationException">此类不符合 FIPS 算法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor">
      <summary>用当前的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 属性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 创建对称解密器对象。</summary>
      <returns>对称解密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.Rijndael" /> 和初始化向量（<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />）创建对称 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" /> 解密器对象。</summary>
      <param name="rgbKey">用于对称算法的机密密钥。 密钥大小必须为 128、192 或 256 位。</param>
      <param name="rgbIV">将用于对称算法的 IV。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 参数为 <see langword="null" />。  
  
- 或 - 
<paramref name="rgbIV" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 属性的值不是 <see cref="F:System.Security.Cryptography.CipherMode.ECB" />、<see cref="F:System.Security.Cryptography.CipherMode.CBC" /> 或 <see cref="F:System.Security.Cryptography.CipherMode.CFB" />。</exception>
      <returns>对称 <see cref="T:System.Security.Cryptography.Rijndael" /> 解密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor">
      <summary>用当前的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 属性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 创建对称加密器对象。</summary>
      <returns>对称加密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.Rijndael" /> 和初始化向量（<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />）创建对称 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" /> 加密器对象。</summary>
      <param name="rgbKey">用于对称算法的机密密钥。 密钥大小必须为 128、192 或 256 位。</param>
      <param name="rgbIV">将用于对称算法的 IV。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 参数为 <see langword="null" />。  
  
- 或 - 
<paramref name="rgbIV" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 属性的值不是 <see cref="F:System.Security.Cryptography.CipherMode.ECB" />、<see cref="F:System.Security.Cryptography.CipherMode.CBC" /> 或 <see cref="F:System.Security.Cryptography.CipherMode.CFB" />。</exception>
      <returns>对称 <see cref="T:System.Security.Cryptography.Rijndael" /> 加密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateIV">
      <summary>生成用于该算法的随机初始化向量（<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />）。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateKey">
      <summary>生成用于该算法的随机 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />。</summary>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.BlockSize">
      <summary>获取或设置加密操作的块大小（以位为单位）。</summary>
      <returns>加密操作的块大小，以位为单位。 默认值为128位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.IV">
      <summary>获取或设置用于对称算法的初始化向量 (IV)。</summary>
      <returns>要用于对称算法的初始化向量 (IV) 。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Key">
      <summary>获取或设置用于对称算法的密钥。</summary>
      <returns>用于对称算法的密钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.KeySize">
      <summary>获取或设置用于对称算法的密钥大小（以位为单位）。</summary>
      <returns>用于对称算法的密钥大小（以位为单位）。 默认值为256位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.LegalKeySizes">
      <summary>获取对称算法支持的密钥大小（以位为单位）。</summary>
      <returns>对称算法支持的密钥大小（位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Mode">
      <summary>获取或设置对称算法的运算模式。</summary>
      <returns>对称算法的运算模式。 默认值为 <see cref="F:System.Security.Cryptography.CipherMode.CBC" /></returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Padding">
      <summary>获取或设置对称算法中使用的填充模式。</summary>
      <returns>对称算法中使用的填充模式。 默认值为 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSA">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的所有实现均从中继承的基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSA" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create">
      <summary>创建 <see cref="T:System.Security.Cryptography.RSA" /> 算法的默认实现的实例。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> 的默认实现的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Int32)">
      <summary>创建具有指定密钥大小的新临时 RSA 密钥。</summary>
      <param name="keySizeInBits">密钥大小（以位为单位）。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySizeInBits" /> 不受默认实现支持。</exception>
      <returns>具有指定密钥大小的新临时 RSA 密钥。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Security.Cryptography.RSAParameters)">
      <summary>创建具有指定 RSA 密钥参数的新临时 RSA 密钥。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" /> 算法的参数。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> 不表示有效 RSA 密钥。</exception>
      <returns>新的临时 RSA 密钥。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.String)">
      <summary>创建 <see cref="T:System.Security.Cryptography.RSA" /> 的指定实现的实例。</summary>
      <param name="algName">要使用的 <see cref="T:System.Security.Cryptography.RSA" /> 的实现的名称。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> 的指定实现的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>在派生类中被重写时，使用指定的填充模式来解密输入数据。</summary>
      <param name="data">要解密的数据。</param>
      <param name="padding">填充模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="padding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。

或

<paramref name="data" /> 的长度不等于 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> 的字节数。

或

此实例仅表示一个公钥。 

或

解密操作失败。</exception>
      <returns>已解密的数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])">
      <summary>当在派生类中重写时，使用私钥解密输入数据。</summary>
      <param name="rgb">要解密的密码文本。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法调用。 从 .NET Framework 4.6 开始引发了此异常。</exception>
      <returns>
        <paramref name="rgb" /> 参数产生的纯文本形式的解密结果。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>在派生类中被重写时，使用指定的填充模式加密输入数据。</summary>
      <param name="data">要加密的数据。</param>
      <param name="padding">填充模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="padding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。

或

<paramref name="data" /> 的长度太长，无法组合 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> 与所选填充。

或

加密操作失败。</exception>
      <returns>已加密的数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])">
      <summary>当在派生类中重写时，使用公钥加密输入数据。</summary>
      <param name="rgb">要加密的纯文本。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法调用。 从 .NET Framework 4.6 开始引发了此异常。</exception>
      <returns>
        <paramref name="rgb" /> 参数产生的密码文本形式的加密结果。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)">
      <summary>当在派生类中重写时，导出 <see cref="T:System.Security.Cryptography.RSAParameters" />。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出参数。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> 的参数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPrivateKey">
      <summary>以 PKCS#1 RSAPrivateKey 格式导出当前密钥。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>包含此密钥的 PKCS#1 RSAPrivateKey 表示形式的字节数组。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPublicKey">
      <summary>以 PKCS#1 RSAPublicKey 格式导出当前密钥的公钥部分。</summary>
      <returns>包含此密钥的 PKCS#1 RSAPublicKey 表示形式的字节数组。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.FromXmlString(System.String)">
      <summary>通过 XML 字符串中的密钥信息初始化 <see cref="T:System.Security.Cryptography.RSA" /> 对象。</summary>
      <param name="xmlString">包含 <see cref="T:System.Security.Cryptography.RSA" /> 密钥信息的 XML 字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlString" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="xmlString" /> 参数的格式无效。</exception>
      <exception cref="T:System.PlatformNotSupportedException">仅限 .NET Core：不支持此成员。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在派生类中被重写时，使用指定的哈希算法计算字节数组指定部分的哈希值。</summary>
      <param name="data">要进行哈希处理的数据。</param>
      <param name="offset">
        <paramref name="data" /> 中要进行哈希处理的第一个字节的索引。</param>
      <param name="count">要进行哈希处理的字节数。</param>
      <param name="hashAlgorithm">要用于哈希处理数据的算法。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <returns>经过哈希处理的数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在派生类中被重写时，使用指定的哈希算法计算指定的二进制流的哈希值。</summary>
      <param name="data">要进行哈希处理的二进制流。</param>
      <param name="hashAlgorithm">哈希算法。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <returns>经过哈希处理的数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用基于字节的密码解密之后，从 PKCS#8 EncryptedPrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</summary>
      <param name="passwordBytes">解密密钥材料时用作密码的字节。</param>
      <param name="source">ASN.1-BER 编码中 PKCS#8 EncryptedPrivateKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

或

<paramref name="source" /> 的内容表示要应用的密钥派生功能 (KDF) 是旧的 PKCS#12 KDF，需要基于 <see cref="T:System.Char" /> 的密码。

或

<paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

或

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

或

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

或

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用基于字符的密码解密之后，从 PKCS#8 EncryptedPrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</summary>
      <param name="password">用于解密密钥材料的密码。</param>
      <param name="source">ASN.1-BER 编码中 PKCS#8 EncryptedPrivateKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

或

<paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

或

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

或

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

或

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>导入已加密的 RFC 7468 PEM 编码的私钥，替换此对象的密钥。</summary>
      <param name="input">要导入的加密密钥的 PEM 文本。</param>
      <param name="passwordBytes">解密密钥材料时用作密码的字节。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。

或

<paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

或

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

或

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容指示密钥用于此实例表示的算法以外的算法。

或

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容表示密钥采用的格式不受支持。

或

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>导入已加密的 RFC 7468 PEM 编码的私钥，替换此对象的密钥。</summary>
      <param name="input">要导入的加密密钥的 PEM 文本。</param>
      <param name="password">用于解密密钥材料的密码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。

或

<paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密码不正确。

或

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容不表示 ASN.1-BER 编码的 PKCS#8 EncryptedPrivateKeyInfo 结构。

或

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容指示密钥用于此实例表示的算法以外的算法。

或

<paramref name="input" /> 中 PEM 文本的 Base-64 解码的内容表示密钥采用的格式不受支持。

或

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>导入 RFC 7468 PEM 编码的密钥，替换此对象的密钥。</summary>
      <param name="input">要导入的密钥的 PEM 文本。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含带有可识别标签的 PEM 编码的密钥。

或

<paramref name="input" /> 包含多个带有可识别标签的 PEM 编码的密钥。

或

<paramref name="input" /> 包含已加密的 PEM 编码的密钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>当在派生类中重写时，导入指定的 <see cref="T:System.Security.Cryptography.RSAParameters" />。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" /> 的参数。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密后，从 PKCS#8 PrivateKeyInfo 结构中导入公/私钥对，以替换此对象的密钥。</summary>
      <param name="source">ASN.1-BER 编码中 PKCS#8 PrivateKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#8 PrivateKeyInfo 结构。

或

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

或

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

或

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密后，从 PKCS#1 RSAPrivateKey 结构中导入公共/私有密钥对，以便替换此对象的密钥。</summary>
      <param name="source">ASN.1-BER 编码中 PKCS#1 RSAPrivateKey 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#1 RSAPrivateKey 结构。

或

密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPublicKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密后，从 PKCS#1 RSAPublicKey 结构中导入公钥，以便替换此对象的密钥。</summary>
      <param name="source">ASN.1-BER 编码中 PKCS#1 RSAPublicKey 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的内容不表示 ASN.1-BER 编码的 PKCS#1 RSAPublicKey 结构。

或

密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密后，从 X.509 SubjectPublicKeyInfo 结构中导入公钥，以替换此对象的密钥。</summary>
      <param name="source">ASN.1-DER 编码中的 X.509 SubjectPublicKeyInfo 结构的字节。</param>
      <param name="bytesRead">此方法返回时，包含一个指示从 <paramref name="source" /> 中读取的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的内容不表示 ASN.1-DER 编码的 X.509 SubjectPublicKeyInfo 结构。

或

<paramref name="source" /> 的内容指示密钥用于此实例表示的算法以外的算法。

或

<paramref name="source" /> 的内容表示密钥采用的格式不受支持。

或

特定于算法的密钥导入失败。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>使用指定的哈希算法和填充模式计算指定字节数组部分的哈希值并签名生成的哈希值。</summary>
      <param name="data">要进行哈希处理和签名的输入数据。</param>
      <param name="offset">数组中自其开始使用数据的偏移量。</param>
      <param name="count">数组中用作数据的字节数。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="padding">填充模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。  
  
或 
 <paramref name="padding" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。  
  
或 
 <paramref name="count" /> 小于零。  
  
或 
 <paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。

或

此实例仅表示一个公钥。

或

创建签名时出错。</exception>
      <returns>指定的数据的 RSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>使用指定的哈希算法和填充模式计算指定字节的哈希值，并对生产的哈希值进行签名。</summary>
      <param name="data">要进行哈希处理和签名的输入数据。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="padding">填充模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。  
  
或 
 <paramref name="padding" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。

或

此实例仅表示一个公钥。

或

创建签名时出错。</exception>
      <returns>指定的数据的 RSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>使用指定的哈希算法和填充模式计算指定流的哈希值并签名生成的哈希值。</summary>
      <param name="data">要进行哈希处理和签名的输入流。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <param name="padding">填充模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。  
  
或 
 <paramref name="padding" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。

或

此实例仅表示一个公钥。

或

创建签名时出错。</exception>
      <returns>指定的数据的 RSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>在派生类中重写时，使用指定的填充来计算指定的哈希值的签名。</summary>
      <param name="hash">待签名数据的哈希值。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <param name="padding">填充。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="padding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。

或

此实例仅表示一个公钥。

或

创建签名时出错。</exception>
      <returns>指定哈希值的 RSA 签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)">
      <summary>创建并返回包含当前 <see cref="T:System.Security.Cryptography.RSA" /> 对象的密钥的 XML 字符串。</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> 表示同时包含 RSA 公钥和私钥；<see langword="false" /> 表示仅包含公钥。</param>
      <exception cref="T:System.PlatformNotSupportedException">仅限 .NET Core：不支持此成员。</exception>
      <returns>包含当前 <see cref="T:System.Security.Cryptography.RSA" /> 对象的密钥的 XML 字符串。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryDecrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <summary>尝试使用指定填充模式对输入数据进行解密，然后将结果写入到提供的缓冲区中。</summary>
      <param name="data">要解密的数据。</param>
      <param name="destination">要接收解密数据的缓冲区。</param>
      <param name="padding">填充模式。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。

或

<paramref name="data" /> 的长度不等于 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> 的字节数。

或

此实例仅表示一个公钥。 

或

解密操作失败。</exception>
      <returns>如果 <paramref name="destination" /> 的长度足以接收解密数据，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryEncrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <summary>尝试使用指定的填充模式将输入数据加密存入提供的缓冲区中。</summary>
      <param name="data">要加密的数据。</param>
      <param name="destination">要接收加密数据的缓冲区。</param>
      <param name="padding">填充模式。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。

或

<paramref name="data" /> 的长度太长，无法组合 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> 与所选填充。

或

加密操作失败。</exception>
      <returns>如果 <paramref name="destination" /> 的长度足以接收加密数据，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用基于字节的密码以 PKCS#8 EncryptedPrivateKeyInfo 格式将当前密钥导出到所提供的缓冲区。</summary>
      <param name="passwordBytes">加密密钥材料时用作密码的字节。</param>
      <param name="pbeParameters">加密密钥材料时使用的基于密码加密 (PBE) 参数。</param>
      <param name="destination">接收 PKCS#8 EncryptedPrivateKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。

或

<paramref name="pbeParameters" /> 指示应使用需要基于 <see cref="T:System.Char" /> 密码的 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用基于字符的密码以 PKCS#8 EncryptedPrivateKeyInfo 格式将当前密钥导入所提供的缓冲区。</summary>
      <param name="password">加密密钥材料时使用的密码。</param>
      <param name="pbeParameters">加密密钥材料时使用的基于密码加密 (PBE) 参数。</param>
      <param name="destination">接收 PKCS#8 EncryptedPrivateKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>尝试以 PKCS#8 PrivateKeyInfo 格式将当前密钥导出到所提供的缓冲区。</summary>
      <param name="destination">接收 PKCS#8 PrivateKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>尝试以 PKCS#1 RSAPrivateKey 格式将当前密钥导入所提供的缓冲区。</summary>
      <param name="destination">用于接收 PKCS#1 RSAPrivateKey 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPublicKey(System.Span{System.Byte},System.Int32@)">
      <summary>尝试以 PKCS#1 RSAPublicKey 格式将当前密钥导入所提供的缓冲区。</summary>
      <param name="destination">用于接收 PKCS#1 RSAPublicKey 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>尝试以 X.509 SubjectPublicKeyInfo 格式将当前密钥导出到所提供的缓冲区。</summary>
      <param name="destination">接收 X.509 SubjectPublicKeyInfo 数据的字节范围。</param>
      <param name="bytesWritten">此方法返回时，包含一个指示写入 <paramref name="destination" /> 的字节数的值。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">未能导出密钥。</exception>
      <returns>如果 <paramref name="destination" /> 具有足够的大小以接收输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>尝试使用指定算法计算提供的数据的哈希值，然后将结果写入提供的缓冲区中。</summary>
      <param name="data">要进行哈希处理的数据。</param>
      <param name="destination">要接收哈希值的缓冲区。</param>
      <param name="hashAlgorithm">要用于哈希处理数据的算法。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <returns>
        <paramref name="destination" /> 的长度不足以接收哈希值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <summary>尝试使用指定的算法对提供的数据进行哈希处理，并使用当前密钥对哈希进行签名，从而将签名写入所提供的缓冲区中。</summary>
      <param name="data">要进行哈希处理和签名的输入数据。</param>
      <param name="destination">要接收 RSA 签名的缓冲区。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <param name="padding">填充模式。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">此实例仅表示一个公钥。

或

创建签名时出错。</exception>
      <returns>如果 <paramref name="destination" /> 的长度不足以接收 RSA 签名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <summary>尝试使用当前密钥对哈希进行签名，从而将签名写入到提供的缓冲区中。</summary>
      <param name="hash">待签名数据的哈希值。</param>
      <param name="destination" />
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <param name="padding">填充。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。

或

此实例仅表示一个公钥。

或

创建签名时出错。</exception>
      <returns>如果 <paramref name="destination" /> 的长度不足以接收 RSA 签名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>通过使用指定的哈希算法和填充方式计算指定数据的哈希值，然后将其与提供的签名进行比较来验证数字签名是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <param name="padding">填充模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。  
  
或 
 <paramref name="signature" /> 上声明的默认值为 <see langword="null" />。  
  
或 
 <paramref name="padding" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。</exception>
      <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>通过使用指定的哈希算法和填充模式计算字节数组某部分中数据的哈希值，并将其与所提供的签名进行比较，以此验证数字签名是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="offset">开始计算哈希的起始索引。</param>
      <param name="count">要进行哈希处理的字节数。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <param name="padding">填充模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。  
  
或 
 <paramref name="signature" /> 上声明的默认值为 <see langword="null" />。  
  
或 
 <paramref name="padding" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。  
  
或 
 <paramref name="count" /> 小于零。  
  
或 
 <paramref name="offset" /> + <paramref name="count" /> - 1 会导致超出 <paramref name="data" /> 上限的索引。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。</exception>
      <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>通过使用指定的哈希算法和填充方式计算指定流的哈希值，然后将其与提供的签名进行比较来验证数字签名是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <param name="padding">填充模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 上声明的默认值为 <see langword="null" />。  
  
或 
 <paramref name="signature" /> 上声明的默认值为 <see langword="null" />。  
  
或 
 <paramref name="padding" /> 上声明的默认值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。</exception>
      <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>通过使用指定的哈希算法和填充方式计算指定数据的哈希值，然后将其与提供的签名进行比较来验证数字签名是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <param name="padding">填充模式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。</exception>
      <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>通过使用指定的哈希算法和填充方式计算签名中的哈希值，然后将其与提供的哈希值进行比较来验证数字签名是否有效。</summary>
      <param name="hash">已签名数据的哈希值。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">用于创建哈希值的哈希算法。</param>
      <param name="padding">填充模式。</param>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 或 <paramref name="padding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。</exception>
      <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>通过使用指定的哈希算法和填充方式计算签名中的哈希值，然后将其与提供的哈希值进行比较来验证数字签名是否有效。</summary>
      <param name="hash">已签名数据的哈希值。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">用于创建哈希值的哈希算法。</param>
      <param name="padding">填充模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 或 <paramref name="padding" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知或不受此实现支持。</exception>
      <returns>如果签名有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.KeyExchangeAlgorithm">
      <summary>获取可用于 <see cref="T:System.Security.Cryptography.RSA" /> 的此实现的密钥交换算法的名称。</summary>
      <returns>返回“RSA”。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.SignatureAlgorithm">
      <summary>获取可用于此 <see cref="T:System.Security.Cryptography.RSA" /> 的实现的签名算法的名称。</summary>
      <returns>返回“RSA”。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPadding">
      <summary>指定要用于 RSA 加密或解密操作的填充模式和参数。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)">
      <summary>创建一个新的 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 实例，它的 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> 是具有给定哈希算法的 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />。</summary>
      <param name="hashAlgorithm">哈希算法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>模式为 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> 的对象是具有 <paramref name="hashAlgorithm" /> 指定的哈希算法的 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Object)">
      <summary>确定当前实例与指定对象是否相等。</summary>
      <param name="obj">要比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 等于当前实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>确定当前实例是否与指定的 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 对象相等。</summary>
      <param name="other">要比较的对象。</param>
      <returns>如果 <paramref name="other" /> 等于当前实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.GetHashCode">
      <summary>返回此 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 对象的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Equality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>指示所指定的两个 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 对象是否相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="left" /> 和 <see langword="right" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Inequality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>指示两个指定的 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 对象是否不相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="left" /> 和 <see langword="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.ToString">
      <summary>返回当前 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 实例的字符串表示形式。</summary>
      <returns>当前对象的字符串表示形式。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Mode">
      <summary>获取此 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 实例所表示的填充模式。</summary>
      <returns>一种填充模式。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm">
      <summary>获取与 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> 填充模式结合使用的哈希算法。</summary>
      <returns>哈希算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1">
      <summary>获取一个对象，该对象表示最优非对称加密填充 (OAEP) 加密标准（包含 SHA1 哈希算法）。</summary>
      <returns>一个表示 OAEP 加密标准（包含 SHA1 哈希算法）的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256">
      <summary>获取一个表示使用 SHA256 哈希算法的最优非对称加密填充 (OAEP) 加密标准的对象。</summary>
      <returns>一个表示使用 SHA256 哈希算法的最优非对称加密填充 (OAEP) 加密标准的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384">
      <summary>获取一个表示使用 SHA-384 哈希算法的最优非对称加密填充 (OAEP) 加密标准的对象。</summary>
      <returns>一个表示使用 SHA384 哈希算法的 OAEP 加密标准的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512">
      <summary>获取一个表示使用 SHA512 哈希算法的最优非对称加密填充 (OAEP) 加密标准的对象。</summary>
      <returns>一个表示使用 SHA512 哈希算法的 OAEP 加密标准的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1">
      <summary>获取一个表示 PKCS #1 加密标准的对象。</summary>
      <returns>一个表示 PKCS #1 加密标准的对象。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPaddingMode">
      <summary>指定要与 RSA 加密或解密操作一起使用的填充模式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep">
      <summary>最佳非对称加密填充。 建议新应用程序使用。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5。 它支持与现有应用程序兼容。</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter">
      <summary>对最优非对称加密填充 (OAEP) 密钥交换数据进行解密。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> 类的新实例。</summary>
      <param name="key">包含私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>从加密的密钥交换数据中提取机密信息。</summary>
      <param name="rgbData">其中隐藏了机密信息的密钥交换数据。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密钥交换数据验证已失败。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">缺少密钥。</exception>
      <returns>从密钥交换数据派生的机密信息。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>设置用于解密机密信息的私钥。</summary>
      <param name="key">包含私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.Parameters">
      <summary>获取或设置最优不对称加密填充 (OAEP) 密钥交换的参数。</summary>
      <returns>包含 OAEP 密钥交换操作的参数的 XML 字符串。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter">
      <summary>使用 <see cref="T:System.Security.Cryptography.RSA" /> 创建最优非对称加密填充 (OAEP) 密钥交换数据。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> 类的新实例。</summary>
      <param name="key">包含公钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>从指定的输入数据创建加密的密钥交换数据。</summary>
      <param name="rgbData">要在密钥交换中传递的机密信息。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">缺少密钥。</exception>
      <returns>要发送到目标接收方的加密密钥交换数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>从指定的输入数据创建加密的密钥交换数据。</summary>
      <param name="rgbData">要在密钥交换中传递的机密信息。</param>
      <param name="symAlgType">当前版本未使用此参数。</param>
      <returns>要发送到目标接收方的加密密钥交换数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>设置要用于对密钥交换数据进行加密的公钥。</summary>
      <param name="key">包含公钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter">
      <summary>获取或设置用于在密钥交换创建过程中创建空白的参数。</summary>
      <returns>参数值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters">
      <summary>获取或设置最优不对称加密填充 (OAEP) 密钥交换的参数。</summary>
      <returns>包含 OAEP 密钥交换操作的参数的 XML 字符串。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng">
      <summary>获取或设置创建密钥交换时要使用的随机数生成器算法。</summary>
      <returns>要使用的随机数生成器算法的实例。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAParameters">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的标准参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.D">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="D" /> 参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DP">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="DP" /> 参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DQ">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="DQ" /> 参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Exponent">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="Exponent" /> 参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.InverseQ">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="InverseQ" /> 参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Modulus">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="Modulus" /> 参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.P">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="P" /> 参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Q">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 算法的 <see langword="Q" /> 参数。</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter">
      <summary>对 PKCS #1 密钥交换数据进行解密。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> 类的新实例。</summary>
      <param name="key">包含私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>从加密的密钥交换数据中提取机密信息。</summary>
      <param name="rgbIn">其中隐藏了机密信息的密钥交换数据。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">缺少密钥。</exception>
      <returns>从密钥交换数据派生的机密信息。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>设置用于解密机密信息的私钥。</summary>
      <param name="key">包含私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.Parameters">
      <summary>获取 PKCS #1 密钥交换的参数。</summary>
      <returns>一个 XML 字符串，其中包含 PKCS #1 密钥交换操作的参数。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.RNG">
      <summary>获取或设置创建密钥交换时要使用的随机数生成器算法。</summary>
      <returns>要使用的随机数生成器算法的实例。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter">
      <summary>使用 <see cref="T:System.Security.Cryptography.RSA" /> 创建 PKCS#1 密钥交换数据。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> 类的新实例。</summary>
      <param name="key">包含公钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>从指定的输入数据创建加密的密钥交换数据。</summary>
      <param name="rgbData">要在密钥交换中传递的机密信息。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbData" /> 过大。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">键为 <see langword="null" />。</exception>
      <returns>要发送到目标接收方的加密密钥交换数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>从指定的输入数据创建加密的密钥交换数据。</summary>
      <param name="rgbData">要在密钥交换中传递的机密信息。</param>
      <param name="symAlgType">当前版本未使用此参数。</param>
      <returns>要发送到目标接收方的加密密钥交换数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>设置要用于对密钥交换数据进行加密的公钥。</summary>
      <param name="key">包含公钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters">
      <summary>获取 PKCS #1 密钥交换的参数。</summary>
      <returns>一个 XML 字符串，其中包含 PKCS #1 密钥交换操作的参数。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng">
      <summary>获取或设置创建密钥交换时要使用的随机数生成器算法。</summary>
      <returns>要使用的随机数生成器算法的实例。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter">
      <summary>验证 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 1.5 版签名。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> 类的新实例。</summary>
      <param name="key">包含公钥的 <see cref="T:System.Security.Cryptography.RSA" /> 的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>设置用于验证签名的哈希算法。</summary>
      <param name="strName">用于验证签名的哈希算法的名称。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>设置用于验证签名的公钥。</summary>
      <param name="key">包含公钥的 <see cref="T:System.Security.Cryptography.RSA" /> 的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>验证指定数据的 <see cref="T:System.Security.Cryptography.RSA" /> PKCS#1 签名。</summary>
      <param name="rgbHash">用 <paramref name="rgbSignature" /> 签名的数据。</param>
      <param name="rgbSignature">要为 <paramref name="rgbHash" /> 验证的签名。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">键为 <see langword="null" />。  
  
- 或 - 
哈希算法为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 参数为 <see langword="null" />。  
  
- 或 - 
<paramref name="rgbSignature" /> 参数为 <see langword="null" />。</exception>
      <returns>如果 <paramref name="rgbSignature" /> 与使用指定的哈希算法和密钥在 <paramref name="rgbHash" /> 上计算出的签名匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter">
      <summary>创建 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 1.5 版签名。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> 类的新实例。</summary>
      <param name="key">包含私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(System.Byte[])">
      <summary>为指定数据创建 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 签名。</summary>
      <param name="rgbHash">要签名的数据。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">键为 <see langword="null" />。  
  
- 或 - 
哈希算法为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 参数为 <see langword="null" />。</exception>
      <returns>
        <paramref name="rgbHash" /> 的数字签名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>设置用于创建签名的哈希算法。</summary>
      <param name="strName">用于创建签名的哈希算法的名称。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>设置要用于创建签名的私钥。</summary>
      <param name="key">包含私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 算法的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePadding">
      <summary>指定要用于 RSA 签名创建或验证操作的填充模式和参数。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>如果指定的对象是等于当前对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Security.Cryptography.RSASignaturePadding)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 对象相等。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>如果指定的对象是等于当前对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.GetHashCode">
      <summary>返回此 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 实例的哈希代码。</summary>
      <returns>此 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 实例的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Equality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指示所指定的两个 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 对象是否相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="left" /> 和 <see langword="right" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Inequality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指示两个指定的 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 对象是否不相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="left" /> 和 <see langword="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.ToString">
      <summary>返回当前 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 实例的字符串表示形式。</summary>
      <returns>当前对象的字符串表示形式。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Mode">
      <summary>获取此 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 实例的填充模式。</summary>
      <returns>此实例的填充模式（<see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> 或 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" />）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1">
      <summary>获取使用 PKCS #1 v1.5 填充模式的对象。</summary>
      <returns>使用的 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> 填充模式的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pss">
      <summary>获取使用 PSS 填充模式的对象。</summary>
      <returns>使用的 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" /> 填充模式的对象（salt 字节数等于哈希大小）。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePaddingMode">
      <summary>指定要使用 RSA 签名创建或验证操作的填充模式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss">
      <summary>概率签名方案。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1">
      <summary>计算输入数据的 <see cref="T:System.Security.Cryptography.SHA1" /> 哈希值。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA1" /> 的新实例。</summary>
      <exception cref="T:System.InvalidOperationException">针对此对象的策略不符合 FIPS 算法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create">
      <summary>创建 <see cref="T:System.Security.Cryptography.SHA1" /> 的默认实现的实例。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA1" /> 的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create(System.String)">
      <summary>创建 <see cref="T:System.Security.Cryptography.SHA1" /> 的指定实现的实例。</summary>
      <param name="hashName">要使用的 <see cref="T:System.Security.Cryptography.SHA1" /> 的特定实现的名称。</param>
      <returns>使用指定实现的 <see cref="T:System.Security.Cryptography.SHA1" /> 的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.Byte[])">
      <summary>使用 SHA1 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 上声明的默认值为 <see langword="null" />。</exception>
      <returns>数据的哈希。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>使用 SHA1 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <returns>数据的哈希。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>使用 SHA1 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <param name="destination">要接收哈希值的缓冲区。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 中的缓冲区太小，无法容纳计算所得的哈希大小。 SHA1 算法始终会生成 160 位的哈希或 20 个字节。</exception>
      <returns>写入 <paramref name="destination" /> 的总字节数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用 SHA1 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <param name="destination">要接收哈希值的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。</param>
      <returns>如果 <paramref name="destination" /> 太小，无法容纳计算所得的哈希，则为 <see langword="false" />；否则为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Managed">
      <summary>使用托管库计算输入数据的 <see cref="T:System.Security.Cryptography.SHA1" /> 哈希值。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA1Managed" /> 类的新实例。</summary>
      <exception cref="T:System.InvalidOperationException">此类不符合 FIPS 算法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Initialize">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA1Managed" /> 的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256">
      <summary>计算输入数据的 <see cref="T:System.Security.Cryptography.SHA256" /> 哈希值。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA256" /> 的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create">
      <summary>创建 <see cref="T:System.Security.Cryptography.SHA256" /> 的默认实现的实例。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">仅限 .NET Framework 4.6.1 和更低版本：使用算法时启用了美国联邦信息处理标准 (FIPS) 模式，但该算法与 FIPS 不兼容。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA256" /> 的新实例。 在 .NET Framework 中，如果 FIPS 模式未处于活动状态，则此方法创建 <see cref="T:System.Security.Cryptography.SHA256Managed" /> 类的实例；如果 FIPS 模式处于活动状态，则创建 <see cref="T:System.Security.Cryptography.SHA256Cng" /> 类的实例。 在 .NET Core 中，此方法返回派生自 <see cref="T:System.Security.Cryptography.SHA256" /> 的私有类实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create(System.String)">
      <summary>创建 <see cref="T:System.Security.Cryptography.SHA256" /> 的指定实现的实例。</summary>
      <param name="hashName">要使用的 <see cref="T:System.Security.Cryptography.SHA256" /> 的特定实现的名称。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">仅限 .NET Framework：启用了 FIPS 模式，但 <paramref name="hashName" /> 请求了与 FIPS 不兼容的 <see cref="T:System.Security.Cryptography.SHA256Managed" />。</exception>
      <returns>使用指定实现的 <see cref="T:System.Security.Cryptography.SHA256" /> 的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.Byte[])">
      <summary>使用 SHA256 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 上声明的默认值为 <see langword="null" />。</exception>
      <returns>数据的哈希。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>使用 SHA256 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <returns>数据的哈希。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>使用 SHA256 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <param name="destination">要接收哈希值的缓冲区。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 中的缓冲区太小，无法容纳计算所得的哈希大小。 SHA256 算法始终会生成 256 位的哈希或 32 个字节。</exception>
      <returns>写入 <paramref name="destination" /> 的总字节数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用 SHA256 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <param name="destination">要接收哈希值的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。</param>
      <returns>如果 <paramref name="destination" /> 太小，无法容纳计算所得的哈希，则为 <see langword="false" />；否则为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Managed">
      <summary>使用托管库计算输入数据的 <see cref="T:System.Security.Cryptography.SHA256" /> 哈希值。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.#ctor">
      <summary>使用托管库初始化 <see cref="T:System.Security.Cryptography.SHA256Managed" /> 类的新实例。</summary>
      <exception cref="T:System.InvalidOperationException">联邦信息处理标准 (FIPS) 安全设置已启用。 此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Initialize">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA256Managed" /> 的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384">
      <summary>计算输入数据的 <see cref="T:System.Security.Cryptography.SHA384" /> 哈希值。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA384" /> 的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create">
      <summary>创建 <see cref="T:System.Security.Cryptography.SHA384" /> 的默认实现的实例。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">使用算法时启用了美国联邦信息处理标准 (FIPS) 模式，但该算法与 FIPS 不兼容。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA384" /> 的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create(System.String)">
      <summary>创建 <see cref="T:System.Security.Cryptography.SHA384" /> 的指定实现的实例。</summary>
      <param name="hashName">要使用的 <see cref="T:System.Security.Cryptography.SHA384" /> 的特定实现的名称。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">由 <paramref name="hashName" /> 参数描述的算法在使用中已启用联邦信息处理标准 (FIPS) 模式，但与 FIPS 不兼容。</exception>
      <returns>使用指定实现的 <see cref="T:System.Security.Cryptography.SHA384" /> 的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.Byte[])">
      <summary>使用 SHA384 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 上声明的默认值为 <see langword="null" />。</exception>
      <returns>数据的哈希。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>使用 SHA384 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <returns>数据的哈希。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>使用 SHA384 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <param name="destination">要接收哈希值的缓冲区。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 中的缓冲区太小，无法容纳计算所得的哈希大小。 SHA384 算法始终会生成 384 位的哈希或 48 个字节。</exception>
      <returns>写入 <paramref name="destination" /> 的总字节数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用 SHA384 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <param name="destination">要接收哈希值的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。</param>
      <returns>如果 <paramref name="destination" /> 太小，无法容纳计算所得的哈希，则为 <see langword="false" />；否则为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Managed">
      <summary>使用托管库计算输入数据的 <see cref="T:System.Security.Cryptography.SHA384" /> 哈希值。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA384Managed" /> 类的新实例。</summary>
      <exception cref="T:System.InvalidOperationException">联邦信息处理标准 (FIPS) 安全设置已启用。 此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.Initialize">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA384Managed" /> 的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512">
      <summary>计算输入数据的 <see cref="T:System.Security.Cryptography.SHA512" /> 哈希值。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA512" /> 的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create">
      <summary>创建 <see cref="T:System.Security.Cryptography.SHA512" /> 的默认实现的实例。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">使用算法时启用了美国联邦信息处理标准 (FIPS) 模式，但该算法与 FIPS 不兼容。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA512" /> 的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create(System.String)">
      <summary>创建 <see cref="T:System.Security.Cryptography.SHA512" /> 的指定实现的实例。</summary>
      <param name="hashName">要使用的 <see cref="T:System.Security.Cryptography.SHA512" /> 的特定实现的名称。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">由 <paramref name="hashName" /> 参数描述的算法在使用中已启用联邦信息处理标准 (FIPS) 模式，但与 FIPS 不兼容。</exception>
      <returns>使用指定实现的 <see cref="T:System.Security.Cryptography.SHA512" /> 的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.Byte[])">
      <summary>使用 SHA512 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 上声明的默认值为 <see langword="null" />。</exception>
      <returns>数据的哈希。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>使用 SHA512 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <returns>数据的哈希。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>使用 SHA512 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <param name="destination">要接收哈希值的缓冲区。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 中的缓冲区太小，无法容纳计算所得的哈希大小。 SHA1 算法始终会生成 512 位的哈希或 64 个字节。</exception>
      <returns>写入 <paramref name="destination" /> 的总字节数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>尝试使用 SHA512 算法计算数据的哈希值。</summary>
      <param name="source">要进行哈希处理的数据。</param>
      <param name="destination">要接收哈希值的缓冲区。</param>
      <param name="bytesWritten">此方法返回时，为写入 <paramref name="destination" /> 的字节总数。</param>
      <returns>如果 <paramref name="destination" /> 太小，无法容纳计算所得的哈希，则为 <see langword="false" />；否则为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Managed">
      <summary>使用托管库计算输入数据的 <see cref="T:System.Security.Cryptography.SHA512" /> 哈希算法。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA512Managed" /> 类的新实例。</summary>
      <exception cref="T:System.InvalidOperationException">联邦信息处理标准 (FIPS) 安全设置已启用。 此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.Initialize">
      <summary>使用托管库初始化 <see cref="T:System.Security.Cryptography.SHA512Managed" /> 类的实例。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SignatureDescription">
      <summary>包含有关数字签名的属性的信息。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SignatureDescription" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor(System.Security.SecurityElement)">
      <summary>从指定的 <see cref="T:System.Security.SecurityElement" /> 初始化 <see cref="T:System.Security.Cryptography.SignatureDescription" /> 类的新实例。</summary>
      <param name="el">从中获取签名说明的算法的 <see cref="T:System.Security.SecurityElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="el" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 属性创建具有指定密钥的 <see cref="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm" /> 实例。</summary>
      <param name="key">要在 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 中使用的密钥。</param>
      <returns>新创建的 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDigest">
      <summary>使用 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 属性创建 <see cref="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm" /> 实例。</summary>
      <returns>新创建的 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 属性创建具有指定密钥的 <see cref="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm" /> 实例。</summary>
      <param name="key">要在 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 中使用的密钥。</param>
      <returns>新创建的 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 实例。</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm">
      <summary>获取或设置签名说明的反格式化程序算法。</summary>
      <returns>签名说明的反格式化程序算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm">
      <summary>获取或设置签名说明的摘要算法。</summary>
      <returns>签名说明的摘要算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm">
      <summary>获取或设置签名说明的格式化程序算法。</summary>
      <returns>签名说明的格式化程序算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.KeyAlgorithm">
      <summary>获取或设置签名说明的密钥算法。</summary>
      <returns>签名说明的密钥算法。</returns>
    </member>
    <member name="T:System.Security.Cryptography.TripleDES">
      <summary>表示三重数据加密标准算法的基类，<see cref="T:System.Security.Cryptography.TripleDES" /> 的所有实现都必须从此基类派生。</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.TripleDES" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create">
      <summary>创建加密对象的实例以执行 <see cref="T:System.Security.Cryptography.TripleDES" /> 算法。</summary>
      <returns>加密对象的实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create(System.String)">
      <summary>创建加密对象的实例以执行 <see cref="T:System.Security.Cryptography.TripleDES" /> 算法的指定实现。</summary>
      <param name="str">要使用的 <see cref="T:System.Security.Cryptography.TripleDES" /> 的特定实现的名称。</param>
      <returns>加密对象的实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])">
      <summary>确定指定的密钥是否为弱密钥。</summary>
      <param name="rgbKey">要进行漏洞测试的密钥。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 参数的大小无效。</exception>
      <returns>如果密钥为弱密钥，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDES.Key">
      <summary>获取或设置 <see cref="T:System.Security.Cryptography.TripleDES" /> 算法的密钥。</summary>
      <exception cref="T:System.ArgumentNullException">尝试将密钥设置为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">尝试设置的密钥长度无效。  
  
- 或 - 
尝试设置弱密钥（请参阅 <see cref="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])" />）。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.TripleDES" /> 算法的密钥。</returns>
    </member>
  </members>
</doc>