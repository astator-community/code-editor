<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Common</name>
  </assembly>
  <members>
    <member name="T:System.Data.AcceptRejectRule">
      <summary>确定在带有 <see cref="M:System.Data.DataSet.AcceptChanges" /> 的 <see cref="M:System.Data.DataTable.RejectChanges" /> 上调用 <see cref="T:System.Data.DataTable" /> 或 <see cref="T:System.Data.ForeignKeyConstraint" /> 方法时将发生的操作。</summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.Cascade">
      <summary>在关系中级联更改。</summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.None">
      <summary>不发生任何操作（默认）。</summary>
    </member>
    <member name="T:System.Data.CommandBehavior">
      <summary>提供查询结果及其对数据库的影响的说明。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.CloseConnection">
      <summary>执行命令时，关闭关联的 <see langword="DataReader" /> 对象时，关联的 <see langword="Connection" /> 对象也会关闭。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.Default">
      <summary>查询可能返回多个结果集。 执行此查询可能会影响数据库状态。 <see langword="Default" /> 未设置 <see cref="T:System.Data.CommandBehavior" /> 标志，因此调用 <see langword="ExecuteReader(CommandBehavior.Default)" /> 在功能上等效于调用 <see langword="ExecuteReader()" />。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.KeyInfo">
      <summary>查询返回列和主键信息。 提供程序将额外的列附加到现有主键和时间戳列的结果集。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SchemaOnly">
      <summary>查询仅返回列信息。 使用 <see cref="F:System.Data.CommandBehavior.SchemaOnly" /> 时，用于 SQL Server 的 .NET Framework 数据提供程序在要执行的语句前加上 SET FMTONLY ON。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SequentialAccess">
      <summary>提供一种方法，以便 <see langword="DataReader" /> 处理包含带有大型二进制值的列的行。 <see langword="SequentialAccess" /> 不是加载整行，而是使 <see langword="DataReader" /> 能够以数据流的加载数据。 然后可以使用 <see langword="GetBytes" /> 或 <see langword="GetChars" /> 方法来指定开始读取操作的字节位置，以及正在返回的数据的有限缓冲区大小。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleResult">
      <summary>查询会返回单个结果集。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleRow">
      <summary>查询应返回结果集中的单行。 执行此查询可能会影响数据库状态。 某些 .NET Framework 数据提供程序可能（但不要求）使用此信息来优化命令性能。 使用 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象的 <see cref="M:System.Data.OleDb.OleDbCommand.ExecuteReader" /> 方法指定 <see cref="F:System.Data.CommandBehavior.SingleRow" /> 时，用于 OLE DB 的 .NET Framework 数据提供程序使用 OLE DB <see langword="IRow" /> 接口（如果可用）执行绑定。 否则，它使用 <see langword="IRowset" /> 接口。 如果期望 SQL 语句仅返回一行，则指定 <see cref="F:System.Data.CommandBehavior.SingleRow" /> 也可提高应用程序性能。 执行应返回多个结果集的查询时，可指定 <see langword="SingleRow" />。  在这种情况下，如果同时指定了多结果集 SQL 查询和单行，返回的结果仅包含第一个结果集的第一行。 不返回查询的其他结果集。</summary>
    </member>
    <member name="T:System.Data.CommandType">
      <summary>指定如何解释命令字符串。</summary>
    </member>
    <member name="F:System.Data.CommandType.StoredProcedure">
      <summary>存储过程的名称。</summary>
    </member>
    <member name="F:System.Data.CommandType.TableDirect">
      <summary>表的名称。</summary>
    </member>
    <member name="F:System.Data.CommandType.Text">
      <summary>SQL 文本命令。 （默认。）</summary>
    </member>
    <member name="T:System.Data.Common.CatalogLocation">
      <summary>指示目录名称在文本命令的限定表名中的位置。</summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.End">
      <summary>指示目录名称的位置位于文本命令的完全限定表名中的架构部分之后。 <c>结束</c>和<c>开始</c>是互斥的。</summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.Start">
      <summary>指示目录名称的位置位于文本命令的完全限定表名中的架构部分之前。 <c>开始</c>和<c>结束</c>是互斥的。</summary>
    </member>
    <member name="T:System.Data.Common.DataAdapter">
      <summary>表示用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源的一组 SQL 命令和一个数据库连接。</summary>
    </member>
    <member name="E:System.Data.Common.DataAdapter.FillError">
      <summary>在填充操作过程中出现错误时返回。</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataAdapter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)">
      <summary>从同一类型的现有对象中初始化 <see cref="T:System.Data.Common.DataAdapter" /> 类的新实例。</summary>
      <param name="from">用于创建新 <see cref="T:System.Data.Common.DataAdapter" /> 的 <see cref="T:System.Data.Common.DataAdapter" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CloneInternals">
      <summary>创建此 <see cref="T:System.Data.Common.DataAdapter" /> 实例的一个副本。</summary>
      <returns>
        <see cref="T:System.Data.Common.DataAdapter" /> 的克隆实例。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CreateTableMappings">
      <summary>创建一个新的 <see cref="T:System.Data.Common.DataTableMappingCollection" />。</summary>
      <returns>新的表映射集合。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DataAdapter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 中添加或刷新行以与数据源中的行匹配。</summary>
      <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行以匹配使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行。</summary>
      <param name="dataSet">一个要用记录填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="srcTable">一个字符串，指示源表的名称。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的一个实例。</param>
      <param name="startRecord">起始记录的从零开始的索引。</param>
      <param name="maxRecords">指示最大记录数的整数。</param>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)">
      <summary>在 <see cref="T:System.Data.DataTable" /> 中添加或刷新行以与使用 <see cref="T:System.Data.DataTable" /> 名称和指定的 <see cref="T:System.Data.IDataReader" /> 的数据源中的行匹配。</summary>
      <param name="dataTable">一个要用记录填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的一个实例。</param>
      <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>在 <see cref="T:System.Data.DataTable" /> 对象集合的指定范围中添加或刷新行以与数据源中的行匹配。</summary>
      <param name="dataTables">要用记录填充的 <see cref="T:System.Data.DataTable" /> 对象的集合。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的一个实例。</param>
      <param name="startRecord">起始记录的从零开始的索引。</param>
      <param name="maxRecords">指示最大记录数的整数。</param>
      <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>将 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> ，并根据指定的 <see cref="T:System.Data.SchemaType" />配置架构以匹配数据源中的架构。</summary>
      <param name="dataSet">要用数据源中的架构填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <returns>包含从数据源返回的架构信息的 <see cref="T:System.Data.DataTable" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)">
      <summary>向指定的 <see cref="T:System.Data.DataTable" /> 添加一个 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataSet">要从 <see cref="T:System.Data.DataTable" /> 填充的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <param name="dataReader">填充 <see cref="T:System.Data.IDataReader" /> 时要用作数据源的 <see cref="T:System.Data.DataTable" />。</param>
      <returns>一个引用，指向添加到 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 对象的集合。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)">
      <summary>向指定的 <see cref="T:System.Data.DataTable" /> 添加一个 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataTable">要从 <see cref="T:System.Data.DataTable" /> 填充的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <param name="dataReader">填充 <see cref="T:System.Data.IDataReader" /> 时要用作数据源的 <see cref="T:System.Data.DataTable" />。</param>
      <returns>包含从数据源返回的架构信息的 <see cref="T:System.Data.DataTable" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.GetFillParameters">
      <summary>获取当执行 SQL SELECT 语句时由用户设置的参数。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 对象的数组，这些对象包含由用户设置的参数。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.HasTableMappings">
      <summary>指示是否已创建了一个 <see cref="T:System.Data.Common.DataTableMappingCollection" />。</summary>
      <returns>如果已创建 <see cref="T:System.Data.Common.DataTableMappingCollection" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)">
      <summary>当 <see langword="Fill" /> 过程中出现错误时调用。</summary>
      <param name="value">
        <see cref="T:System.Data.FillErrorEventArgs" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ResetFillLoadOption">
      <summary>将 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 重置为默认状态，并使 <see cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" /> 接受 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />。</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill">
      <summary>确定是否应保持 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 属性。</summary>
      <returns>如果保持 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption">
      <summary>确定是否应保持 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 属性。</summary>
      <returns>如果保持 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeTableMappings">
      <summary>确定一个或多个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象是否存在，并且它们是否应该是持久的。</summary>
      <returns>如果存在一个或多个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)">
      <summary>从名为“Table”的 <see cref="T:System.Data.DataSet" /> 为指定的 <see cref="T:System.Data.DataTable" /> 中每个已插入、已更新或已删除的行调用相应的 INSERT、UPDATE 或 DELETE 语句。</summary>
      <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</param>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill">
      <summary>获取或设置一个值，该值指示在任何 Fill**** 操作过程中，在将 <see cref="M:System.Data.DataRow.AcceptChanges" /> 添加到 <see cref="T:System.Data.DataRow" /> 之后是否在 <see cref="T:System.Data.DataTable" /> 上调用它。</summary>
      <returns>如果在 <see cref="M:System.Data.DataRow.AcceptChanges" /> 上调用 <see cref="T:System.Data.DataRow" />，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate">
      <summary>获取或设置在 <see cref="M:System.Data.DataRow.AcceptChanges" /> 期间是否调用 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>如果在 <see cref="M:System.Data.DataRow.AcceptChanges" /> 期间调用 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ContinueUpdateOnError">
      <summary>获取或设置一个值，该值指定在行更新过程中遇到错误时是否生成异常。</summary>
      <returns>如果要继续更新而不生成异常，则为 <see langword="true" />，否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.FillLoadOption">
      <summary>获取或设置 <see cref="T:System.Data.LoadOption" />，后者确定适配器如何从 <see cref="T:System.Data.DataTable" /> 中填充 <see cref="T:System.Data.Common.DbDataReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.LoadOption" /> 值。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingMappingAction">
      <summary>确定传入数据没有匹配的表或列时需要执行的操作。</summary>
      <exception cref="T:System.ArgumentException">设置的值不是 <see cref="T:System.Data.MissingMappingAction" /> 值之一。</exception>
      <returns>
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。 默认值为 <see langword="Passthrough" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingSchemaAction">
      <summary>确定现有 <see cref="T:System.Data.DataSet" /> 架构与传入数据不匹配时需要执行的操作。</summary>
      <exception cref="T:System.ArgumentException">设置的值不是 <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</exception>
      <returns>
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。 默认值为 <see langword="Add" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ReturnProviderSpecificTypes">
      <summary>获取或设置 <see langword="Fill" /> 方法是应当返回提供程序特定的值，还是返回公用的符合 CLS 的值。</summary>
      <returns>如果 <see langword="true" /> 方法应返回特定于提供程序的值，则为 <see langword="Fill" />；否则如果返回常用的符合 CLS 的值，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings">
      <summary>指示如何将源表映射到数据集表。</summary>
      <returns>一个集合，它提供返回记录和 <see cref="T:System.Data.DataSet" /> 之间的主映射。 默认值为空集合。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.TableMappings">
      <summary>获取一个集合，它提供源表和 <see cref="T:System.Data.DataTable" /> 之间的主映射。</summary>
      <returns>一个集合，它提供返回记录和 <see cref="T:System.Data.DataSet" /> 之间的主映射。 默认值为空集合。</returns>
    </member>
    <member name="T:System.Data.Common.DataColumnMapping">
      <summary>包含从 <see cref="T:System.Data.Common.DataAdapter" /> 继承的对象的一般列映射。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataColumnMapping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor(System.String,System.String)">
      <summary>使用指定的源列名称和要映射到的 <see cref="T:System.Data.Common.DataColumnMapping" /> 列名初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
      <param name="sourceColumn">数据源中区分大小写的列名。</param>
      <param name="dataSetColumn">
        <see cref="T:System.Data.DataSet" /> 中要映射到的列名（该名称不区分大小写）。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>使用 <see cref="T:System.Data.DataColumn" /> 和 <see cref="T:System.Data.DataTable" /> 属性从给定的 <see cref="T:System.Data.MissingSchemaAction" /> 获取 <see cref="P:System.Data.Common.DataColumnMapping.DataSetColumn" />。</summary>
      <param name="dataTable">从中获取列的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="dataType">数据列的 <see cref="T:System.Type" />。</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <returns>数据列。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.String,System.String,System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>
        <see cref="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)" /> 的静态版本，可以在不实例化 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的情况下调用。</summary>
      <param name="sourceColumn">数据源中区分大小写的列名。</param>
      <param name="dataSetColumn">
        <see cref="T:System.Data.DataSet" /> 中要映射到的列名（该名称不区分大小写）。</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 的一个实例。</param>
      <param name="dataType">正被映射的列的数据类型。</param>
      <param name="schemaAction">确定现有 <see cref="T:System.Data.DataSet" /> 架构与传入数据不匹配时需要执行的操作。</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>当前对象的副本。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.ToString">
      <summary>将当前的 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 名称转换为字符串。</summary>
      <returns>当前的 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 名称作为字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.DataSetColumn">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 中要映射到的列的名称。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中要映射到的列的名称。 该名称不区分大小写。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.SourceColumn">
      <summary>获取或设置数据源中从其映射的列的名称。 该名称区分大小写。</summary>
      <returns>数据源中列的区分大小写的名称。</returns>
    </member>
    <member name="T:System.Data.Common.DataColumnMappingCollection">
      <summary>包含 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.#ctor">
      <summary>创建一个空的 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.Object)">
      <summary>将 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象添加到集合中。</summary>
      <param name="value">要添加到集合的 <see langword="DataColumnMapping" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">传入的对象不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
      <returns>已添加到集合中的 <see langword="DataColumnMapping" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.String,System.String)">
      <summary>当给定源列名称和 <see cref="T:System.Data.Common.DataColumnMapping" /> 列名时，将 <see cref="T:System.Data.DataSet" /> 对象添加到集合中。</summary>
      <param name="sourceColumn">要映射到的源列的区分大小写的名称。</param>
      <param name="dataSetColumn">要映射到的 <see cref="T:System.Data.DataSet" /> 列的名称（该名称不区分大小写）。</param>
      <returns>已添加到集合中的 <see langword="DataColumnMapping" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Array)">
      <summary>将指定的 <see cref="T:System.Array" /> 的元素复制到集合末尾。</summary>
      <param name="values">要添加到集合中的 <see cref="T:System.Array" />。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Data.Common.DataColumnMapping[])">
      <summary>将指定的 <see cref="T:System.Data.Common.DataColumnMapping" /> 数组的元素复制到集合末尾。</summary>
      <param name="values">要添加到集合中的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的数组。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Clear">
      <summary>从集合中删除所有 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.Object)">
      <summary>获取一个值，该值指示集合中是否存在具有给定 <see cref="T:System.Data.Common.DataColumnMapping" /> 的 <see cref="T:System.Object" /> 对象。</summary>
      <param name="value">是 <see cref="T:System.Data.Common.DataColumnMapping" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.InvalidCastException">传入的对象不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
      <returns>如果集合包含指定的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.String)">
      <summary>获取一个值，该值指示集合中是否存在具有给定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的区分大小写的源列名称。</param>
      <returns>如果集合包含具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 的元素复制到指定的数组。</summary>
      <param name="array">要将 <see cref="T:System.Array" /> 元素复制到其中的 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</param>
      <param name="index">数组的起始索引。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Data.Common.DataColumnMapping[],System.Int32)">
      <summary>将 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 的元素复制到指定的 <see cref="T:System.Data.Common.DataColumnMapping" /> 数组。</summary>
      <param name="array">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 元素要复制到的 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 数组。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>获取具有指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 列名的 <see cref="T:System.Data.DataSet" /> 对象。</summary>
      <param name="value">要查找的 <see cref="T:System.Data.DataSet" /> 列的名称（该名称不区分大小写）。</param>
      <returns>具有指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 列名的 <see cref="T:System.Data.DataSet" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetColumnMappingBySchemaAction(System.Data.Common.DataColumnMappingCollection,System.String,System.Data.MissingMappingAction)">
      <summary>给指定的 <see cref="T:System.Data.Common.DataColumnMapping" />、源列名称和 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 获取一个 <see cref="T:System.Data.MissingMappingAction" />。</summary>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />
      </param>
      <param name="sourceColumn">要查找的区分大小写的源列名称。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 参数设置为 <see langword="Error" />，并且未指定任何映射。</exception>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetDataColumn(System.Data.Common.DataColumnMappingCollection,System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>一个静态方法，它返回未实例化的 <see cref="T:System.Data.DataColumn" /> 对象的 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 对象。</summary>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />
      </param>
      <param name="sourceColumn">数据源中区分大小写的列名。</param>
      <param name="dataType">正被映射的列的数据类型。</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 的一个实例。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <param name="schemaAction">确定现有 <see cref="T:System.Data.DataSet" /> 架构与传入数据不匹配时需要执行的操作。</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetEnumerator">
      <summary>获取可循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.Object)">
      <summary>获取指定的 <see cref="T:System.Object" />（它是 <see cref="T:System.Data.Common.DataColumnMapping" />）在集合中的位置。</summary>
      <param name="value">一个 <see cref="T:System.Object" />，它是要查找的 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
      <returns>指定的 <see cref="T:System.Object" />（它是 <see cref="T:System.Data.Common.DataColumnMapping" />）在集合中从零开始的位置。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.String)">
      <summary>获取具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 的位置。</summary>
      <param name="sourceColumn">源列的区分大小写的名称。</param>
      <returns>具有指定的区分大小写的源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 从零开始的位置。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOfDataSetColumn(System.String)">
      <summary>获取具有给定 <see cref="T:System.Data.Common.DataColumnMapping" /> 列名的指定 <see cref="T:System.Data.DataSet" /> 的位置。</summary>
      <param name="dataSetColumn">要查找的数据集列的名称（该名称不区分大小写）。</param>
      <returns>具有给定 <see langword="DataSet" /> 列名的指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 的从零开始的位置；或者如果在集合中不存在 <see langword="DataColumnMapping" /> 对象，则为 -1。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Data.Common.DataColumnMapping)">
      <summary>在 <see cref="T:System.Data.Common.DataColumnMapping" /> 中的指定索引处插入一个 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 对象。</summary>
      <param name="index">要插入的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的从零开始的索引。</param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Data.Common.DataColumnMapping" /> 中的指定索引处插入一个 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 对象。</summary>
      <param name="index">要插入的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的从零开始的索引。</param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Data.Common.DataColumnMapping)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Common.DataColumnMapping" />。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Object)">
      <summary>从集合中移除 <see cref="T:System.Object" />，它是一个 <see cref="T:System.Data.Common.DataColumnMapping" />。</summary>
      <param name="value">
        <see cref="T:System.Object" />，它是要移除的 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
      <exception cref="T:System.InvalidCastException">指定的对象不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
      <exception cref="T:System.ArgumentException">指定的对象不在集合中。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除具有指定索引的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">没有具有指定索引的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.String)">
      <summary>从集合中移除具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <param name="sourceColumn">区分大小写的源列名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">没有具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Add(System.String,System.String)">
      <summary>使用源列名和 <see cref="T:System.Data.Common.DataColumnMapping" /> 列名将 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 对象添加到 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="sourceColumnName">源列的区分大小写的名称。</param>
      <param name="dataSetColumnName">
        <see cref="T:System.Data.DataSet" /> 列的名称。</param>
      <returns>已添加到集合中的 ColumnMapping 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#GetByDataSetColumn(System.String)">
      <summary>获取具有指定的 <see cref="T:System.Data.Common.DataColumnMapping" /> 列名的 <see cref="T:System.Data.DataSet" /> 对象。</summary>
      <param name="dataSetColumnName">要查找的 <see cref="T:System.Data.DataSet" /> 列的名称（该名称不区分大小写）。</param>
      <returns>具有指定的 <see cref="T:System.Data.Common.DataColumnMapping" /> 列名的 <see cref="T:System.Data.DataSet" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Count">
      <summary>获取集合中 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的数量。</summary>
      <returns>集合中项的数目。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.Int32)">
      <summary>获取或设置位于指定索引处的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <param name="index">要查找的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的从零开始的索引。</param>
      <returns>指定索引处的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.String)">
      <summary>获取或设置具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <param name="sourceColumn">源列的区分大小写的名称。</param>
      <returns>具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Item(System.String)">
      <summary>获取或设置具有指定 <see langword="SourceColumn" /> 名称的 <see cref="T:System.Data.IColumnMapping" /> 对象。</summary>
      <param name="index">元素的索引。</param>
      <returns>具有指定 <see langword="IColumnMapping" /> 名称的 <see langword="SourceColumn" /> 对象。</returns>
    </member>
    <member name="T:System.Data.Common.DataTableMapping">
      <summary>包含有关源表与 <see cref="T:System.Data.DataTable" /> 之间映射关系的说明。 填充 <see cref="T:System.Data.DataSet" /> 时，由 <see cref="T:System.Data.Common.DataAdapter" /> 使用该类。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String)">
      <summary>给定源表名称和 <see cref="T:System.Data.DataTable" /> 名称时，使用源初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 类的新实例。</summary>
      <param name="sourceTable">数据源中区分大小写的源表名称。</param>
      <param name="dataSetTable">
        <see cref="T:System.Data.DataSet" /> 中要映射到的表名。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String,System.Data.Common.DataColumnMapping[])">
      <summary>给定源表名称、<see cref="T:System.Data.DataTable" /> 名称和 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象数组时，初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 类的新实例。</summary>
      <param name="sourceTable">数据源中区分大小写的源表名称。</param>
      <param name="dataSetTable">
        <see cref="T:System.Data.DataSet" /> 中要映射到的表名。</param>
      <param name="columnMappings">一个 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象数组。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetColumnMappingBySchemaAction(System.String,System.Data.MissingMappingAction)">
      <summary>使用指定的 <see cref="T:System.Data.MissingMappingAction" /> 值和 <see cref="T:System.Data.DataColumn" /> 的名称从指定的 <see cref="T:System.Data.DataTable" /> 中获取 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" /> 的名称。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 参数设置为 <see langword="Error" />，并且未指定任何映射。</exception>
      <returns>数据列。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataColumn(System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>为给定的列名返回 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" /> 的名称。</param>
      <param name="dataType">
        <paramref name="sourceColumn" /> 的数据类型。</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataSet" /> 中要映射到的表名。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataTableBySchemaAction(System.Data.DataSet,System.Data.MissingSchemaAction)">
      <summary>使用指定的 <see cref="T:System.Data.MissingSchemaAction" /> 值获取指定 <see cref="T:System.Data.DataSet" /> 的当前 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="dataSet">要从其中获取 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <returns>数据表。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>作为当前实例副本的新对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.ToString">
      <summary>将当前的 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 名称转换为字符串。</summary>
      <returns>当前的 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 名称作为字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.ColumnMappings">
      <summary>获取 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个数据列映射集合。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.DataSetTable">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 中的表名。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中的表名称。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.SourceTable">
      <summary>获取或设置数据源中区分大小写的源表名称。</summary>
      <returns>数据源中区分大小写的源表名称。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.System#Data#ITableMapping#ColumnMappings">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 的派生 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</summary>
      <returns>一个数据列映射集合。</returns>
    </member>
    <member name="T:System.Data.Common.DataTableMappingCollection">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 类的新实例。 此新实例为空，即它尚未包含任何 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.Object)">
      <summary>添加 <see cref="T:System.Object" />，它是集合的表映射。</summary>
      <param name="value">要添加到集合的 <see langword="DataTableMapping" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">传入的对象不是 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</exception>
      <returns>添加到集合中的 <see langword="DataTableMapping" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.String,System.String)">
      <summary>给定源表名称和 <see cref="T:System.Data.DataSet" /> 表名时，向集合添加 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="sourceTable">要从中映射的源表的区分大小写的名称。</param>
      <param name="dataSetTable">要映射到的 <see cref="T:System.Data.DataSet" /> 表的名称（该名称不区分大小写）。</param>
      <returns>已添加到集合中的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Array)">
      <summary>将指定的 <see cref="T:System.Array" /> 的元素复制到集合末尾。</summary>
      <param name="values">要添加到集合的值的 <see cref="T:System.Array" />。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Data.Common.DataTableMapping[])">
      <summary>将指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 数组的元素复制到集合末尾。</summary>
      <param name="values">要添加到集合中的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的数组。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Clear">
      <summary>从集合中删除所有 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.Object)">
      <summary>获取一个值，该值指示集合中是否存在给定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="value">是 <see cref="T:System.Data.Common.DataTableMapping" /> 的 <see cref="T:System.Object" />。</param>
      <returns>如果此集合包含指定的 <see cref="T:System.Data.Common.DataTableMapping" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.String)">
      <summary>获取一个值，该值指示集合中是否存在具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="value">包含 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的区分大小写的源表名称。</param>
      <returns>如果该集合包含具有此源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 的元素复制到指定的数组。</summary>
      <param name="array">要将 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 元素复制到其中的 <see cref="T:System.Array" />。</param>
      <param name="index">数组的起始索引。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Data.Common.DataTableMapping[],System.Int32)">
      <summary>将 <see cref="T:System.Data.Common.DataTableMapping" /> 的元素复制到指定的数组。</summary>
      <param name="array">要将 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 元素复制到其中的 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
      <param name="index">数组的起始索引。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetByDataSetTable(System.String)">
      <summary>获取具有指定的 <see cref="T:System.Data.DataSet" /> 表名的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="dataSetTable">要查找的 <see cref="T:System.Data.DataSet" /> 表的名称（该名称不区分大小写）。</param>
      <returns>具有指定的 <see cref="T:System.Data.DataSet" /> 表名的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetEnumerator">
      <summary>获取可循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetTableMappingBySchemaAction(System.Data.Common.DataTableMappingCollection,System.String,System.String,System.Data.MissingMappingAction)">
      <summary>使用给定的 <see cref="T:System.Data.MissingMappingAction" /> 获取具有指定源表名称和 <see cref="T:System.Data.DataSet" /> 表名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <param name="tableMappings">要搜索的 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 集合。</param>
      <param name="sourceTable">已映射的区分大小写的源表名称。</param>
      <param name="dataSetTable">已映射的 <see cref="T:System.Data.DataSet" /> 表的名称（该名称不区分大小写）。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 参数设置为 <see langword="Error" />，并且未指定任何映射。</exception>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.Object)">
      <summary>获取指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象在集合中的位置。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 即要查找的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <returns>指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象在集合中从零开始的位置。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.String)">
      <summary>获取具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的位置。</summary>
      <param name="sourceTable">区分大小写的源表名称。</param>
      <returns>具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的位置。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOfDataSetTable(System.String)">
      <summary>获取具有指定的 <see cref="T:System.Data.DataSet" /> 表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的位置。</summary>
      <param name="dataSetTable">要查找的 <see langword="DataSet" /> 表的名称（该名称不区分大小写）。</param>
      <returns>具有给定 <see cref="T:System.Data.DataSet" /> 表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的位置；或者，如果集合中不存在 <see cref="T:System.Data.Common.DataTableMapping" /> 对象，则为 -1。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Data.Common.DataTableMapping)">
      <summary>在 <see cref="T:System.Data.Common.DataTableMapping" /> 中的指定索引处插入一个 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 对象。</summary>
      <param name="index">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的索引。</param>
      <param name="value">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Data.Common.DataTableMapping" /> 中的指定索引处插入一个 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 对象。</summary>
      <param name="index">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的索引。</param>
      <param name="value">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Data.Common.DataTableMapping)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Object)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">指定的对象不是 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</exception>
      <exception cref="T:System.ArgumentException">指定的对象不在集合中。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除位于指定索引处的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">具有指定索引的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象不存在。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.String)">
      <summary>从集合中移除具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="sourceTable">要查找的区分大小写的源表名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象不存在。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Add(System.String,System.String)">
      <summary>向集合添加表映射。</summary>
      <param name="sourceTableName">区分大小写的源表名称。</param>
      <param name="dataSetTableName">
        <see cref="T:System.Data.DataSet" /> 表的名称。</param>
      <returns>对新映射的 <see cref="T:System.Data.ITableMapping" /> 对象的引用。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#GetByDataSetTable(System.String)">
      <summary>获取具有指定的 <see cref="T:System.Data.DataSet" /> 表名的 TableMapping 对象。</summary>
      <param name="dataSetTableName">集合中表 <see langword="DataSet" /> 的名称。</param>
      <returns>具有指定的 <see langword="DataSet" /> 表名的 TableMapping 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Count">
      <summary>获取集合中 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的数量。</summary>
      <returns>集合中 <see langword="DataTableMapping" /> 对象的数目。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.Int32)">
      <summary>获取或设置位于指定索引处的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="index">要返回的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的索引。</param>
      <returns>指定索引处的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.String)">
      <summary>获取或设置具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="sourceTable">区分大小写的源表名称。</param>
      <returns>具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的集合中的项。</summary>
      <param name="index">要获取或设置的项的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Item(System.String)">
      <summary>获取或设置具有指定 <see cref="P:System.Data.ITableMapping.SourceTable" /> 名称的 <see cref="T:System.Data.ITableMapping" /> 的实例。</summary>
      <param name="index">
        <see cref="T:System.Data.ITableMapping" /> 的 <see langword="SourceTable" /> 名称。</param>
      <returns>具有指定的 <see langword="SourceTable" /> 名称的 <see cref="T:System.Data.ITableMapping" /> 的实例。</returns>
    </member>
    <member name="T:System.Data.Common.DbColumn">
      <summary>表示数据源中的列。</summary>
    </member>
    <member name="M:System.Data.Common.DbColumn.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbColumn" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Common.DbColumn.AllowDBNull">
      <summary>获取可为 null 的布尔值，该值指示此列中是否允许 <see langword="DBNull" /> 值，或者在未设置任何值时返回 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列中是否允许 <see langword="DBNull" /> 值，也可设置为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</summary>
      <returns>如果此列中允许 <see langword="DBNull" /> 值，则返回 <see langword="true" />，否则，返回 <see langword="false" />。 如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseCatalogName">
      <summary>获取与数据源关联的目录；否则，如果未设置任何值，则为 <see langword="null" />。 在派生类中重写时，可设置为目录名称或 <see langword="null" />。</summary>
      <returns>与数据源关联的目录名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseColumnName">
      <summary>获取列名称；否则，如果未设置任何值，则为 <see langword="null" />。 在派生类中重写时，可设置为列名称或 <see langword="null" />。</summary>
      <returns>基列名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseSchemaName">
      <summary>获取与数据源关联的架构；否则，如果未设置任何值，则为 <see langword="null" />。 在派生类中重写时，可设置为架构名称或 <see langword="null" />。</summary>
      <returns>与数据源关联的架构名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseServerName">
      <summary>获取与列关联的服务器名称；否则，如果未设置任何值，则为 <see langword="null" />。 在派生类中重写时，可设置为服务器名称或 <see langword="null" />。</summary>
      <returns>与列关联的服务器名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseTableName">
      <summary>获取架构中的表名称；否则，如果未设置任何值，则为 <see langword="null" />。 在派生类中重写时，可设置为表名称或 <see langword="null" />。</summary>
      <returns>架构中的表名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnName">
      <summary>获取列的名称。 在派生类中重写时，可设置为列名称。</summary>
      <returns>列的名称。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnOrdinal">
      <summary>获取数据源行中的列位置（序号）；否则，如果未设置任何值，则为 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="int32" /> 值（用于指定列位置）或 <see langword="null" />。</summary>
      <returns>表示列序号的 <see langword="int32" /> 值；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnSize">
      <summary>获取列大小；否则，如果未设置任何值，则为 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="int32" /> 值（用于指定列大小）或 <see langword="null" />。</summary>
      <returns>
        <see langword="int32" />列大小的值; 否则，如果未设置任何值，则为 null 引用 (<see langword="Nothing" /> Visual Basic) 。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.DataType">
      <summary>获取列中存储的数据的类型。 在派生类中重写时，可设置为表示列中数据类型的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>表示列中包含的数据类型的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.DataTypeName">
      <summary>获取数据类型的名称；否则，如果未设置任何值，则为 <see langword="null" />。 在派生类中重写时，可设置为数据类型名称或 <see langword="null" />。</summary>
      <returns>数据类型的名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsAliased">
      <summary>获取可为 null 的布尔值，该值指示此列是否具有别名，或者在未设置任何值时返回 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否具有别名，也可设置为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</summary>
      <returns>如果此列具有别名，则返回 <see langword="true" />；否则返回 <see langword="false" />。 如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsAutoIncrement">
      <summary>获取可为 null 的布尔值，该值指示此列中的值是否自动递增，或者在未设置任何值时返回 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列中的值是否自动递增，也可设置为 <see langword="null" />（在 Visual Basic中为 <see langword="Nothing" />）。</summary>
      <returns>如果此列中的值自动递增，则返回 <see langword="true" />，否则，返回 <see langword="false" />。 如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsExpression">
      <summary>获取可为 null 的布尔值，该值指示此列是否是表达式，或者在未设置任何值时返回 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否是表达式，也可设置为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</summary>
      <returns>如果此列是表达式，将返回 <see langword="true" />；否则返回 <see langword="false" />。 如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsHidden">
      <summary>获取可为 null 的布尔值，该值指示此列是否被隐藏，或者在未设置任何值时返回 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否被隐藏，也可设置为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</summary>
      <returns>如果此列被隐藏，则返回 <see langword="true" />；否则返回 <see langword="false" />。 如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsIdentity">
      <summary>获取可为 null 的布尔值，该值指示此列是否是标识，或者在未设置任何值时返回 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否是标识，也可设置为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</summary>
      <returns>如果此列是标识，将返回 <see langword="true" />；否则返回 <see langword="false" />。 如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsKey">
      <summary>获取可为 null 的布尔值，该值指示此列是否是密钥，或者在未设置任何值时返回 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否是密钥，也可以设置为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</summary>
      <returns>如果此列是密钥，则返回 <see langword="true" />；否则返回 <see langword="false" />。 如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsLong">
      <summary>获取可为 null 的布尔值，该值指示此列是否包含长数据，或者在未设置任何值时返回 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否包含长数据，也可设置为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</summary>
      <returns>如果此列包含长数据，则返回 <see langword="true" />；否则，返回 <see langword="false" />。 如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsReadOnly">
      <summary>获取可为 null 的布尔值，该值指示此列是否是只读的，或者在未设置任何值时返回 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示此列是否是只读的，也可设置为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</summary>
      <returns>如果此列为只读，则返回 <see langword="true" />；否则返回 <see langword="false" />。 如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsUnique">
      <summary>获取可为 null 的布尔值，该值指示唯一约束是否适用于此列，或者在未设置任何值时返回 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="true" /> 或 <see langword="false" />，指示唯一约束是否适用于此列，也可设置为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</summary>
      <returns>如果唯一约束适用于此列，返回 <see langword="true" />；否则返回 <see langword="false" />。 如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.Item(System.String)">
      <summary>获取基于列属性名称的对象。</summary>
      <param name="property">列属性名称。</param>
      <returns>基于列属性名称的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.NumericPrecision">
      <summary>获取列数据的数值精度，否则在未设置任何值时为 <see langword="null" />。 在派生类中重写时，可设置为 <see langword="int32" /> 值（用于指定列数据的数值精度）或 <see langword="null" />。</summary>
      <returns>
        <see langword="int32" />如果数据为数值，则为指定列数据的精度的值; 否则，如果未设置任何值，则为 null 引用 (<see langword="Nothing" /> Visual Basic) 。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.NumericScale">
      <summary>获取可为 null 的 <see langword="int32" /> 值，该值将返回 <see langword="null" /> 或列数据的数值范围。 在派生类中重写时，可设置为 <see langword="null" /> 或 <see langword="int32" /> 值（用于表示列数据的数值范围）。</summary>
      <returns>如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）；否则，在数据是数值时，为指定列数据范围的 <see langword="int32" /> 值。</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.UdtAssemblyQualifiedName">
      <summary>获取表示列中数据类型的 <see cref="T:System.Type" /> 对象的程序集限定名称，否则，在未设置任何值时为 <see langword="null" />。 在派生类中重写时，可设置为程序集限定名称或 <see langword="null" />。</summary>
      <returns>表示列中数据类型的 <see cref="T:System.Type" /> 对象的程序集限定名称，否则，在未设置任何值时为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="T:System.Data.Common.DbCommand">
      <summary>表示要对数据源执行的 SQL 语句或存储过程。 提供表示命令的数据库特定类的基类。 <see cref="Overload:System.Data.Common.DbCommand.ExecuteNonQueryAsync" /></summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.#ctor">
      <summary>构造 <see cref="T:System.Data.Common.DbCommand" /> 对象的实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.Cancel">
      <summary>在派生类中重写时，尝试取消 <see cref="T:System.Data.Common.DbCommand" /> 的执行。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateDbParameter">
      <summary>在派生类中重写时，创建 <see cref="T:System.Data.Common.DbParameter" /> 对象的新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateParameter">
      <summary>创建 <see cref="T:System.Data.Common.DbParameter" /> 对象的新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.DisposeAsync">
      <summary>异步处置命令对象。</summary>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>当在派生类中重写时，针对连接执行命令文本。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 的一个实例。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
      <returns>表示该操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>提供程序应执行该方法对 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> 重载提供非默认的实现。  
  
默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteReader" /> 方法并返回已完成任务，以便阻止调用线程。 如果传递到已取消的取消标记，则默认实现将返回已取消的任务。 ExecuteReader 引发的异常将通过返回的任务异常属性传递。  
  
该方法可用于请求操作之前接受取消标记。 实现可能会忽略该请求。</summary>
      <param name="behavior">语句执行和数据检索的选项。</param>
      <param name="cancellationToken">用于取消异步操作的令牌。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQuery">
      <summary>当在派生类中重写时，针对连接对象执行 SQL 语句。</summary>
      <returns>受影响的行数。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync">
      <summary>
        <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />的异步版本，针对一个连接对象执行一个 SQL 声明。  
  
通过 CancellationToken.None 调用 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />。</summary>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 的异步版本。 提供程序应使用合适的实现进行重写。 可选择性忽略取消标记。  
  
默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 方法并返回已完成任务，以便阻止调用线程。 如果传递到已取消的取消标记，则默认实现将返回已取消的任务。  <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 引发的异常将通过任务异常属性传递。  
  
在返回的任务完成前，不要调用 <see langword="DbCommand" /> 对象的其他方法和属性。</summary>
      <param name="cancellationToken">用于取消异步操作的令牌。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader">
      <summary>针对 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 执行 <see cref="P:System.Data.Common.DbCommand.Connection" />，并返回 <see cref="T:System.Data.Common.DbDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>针对 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 执行 <see cref="P:System.Data.Common.DbCommand.Connection" />，并使用 <see cref="T:System.Data.Common.DbDataReader" /> 值之一返回 <see cref="T:System.Data.CommandBehavior" />。</summary>
      <param name="behavior">用于指定命令行为的枚举值之一。</param>
      <returns>一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync">
      <summary>
        <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> 的异步版本，针对 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 和 <see cref="P:System.Data.Common.DbCommand.Connection" /> 执行 <see cref="T:System.Data.Common.DbDataReader" />。  
  
通过 CancellationToken.None 调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。</summary>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>
        <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> 的异步版本，针对 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 和 <see cref="P:System.Data.Common.DbCommand.Connection" /> 执行 <see cref="T:System.Data.Common.DbDataReader" />。  
  
调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />.</summary>
      <param name="behavior">指定了命令行为的枚举值之一。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />.</summary>
      <param name="behavior">用于指定命令行为的枚举值之一。</param>
      <param name="cancellationToken">用于取消异步操作的令牌。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> 的异步版本，针对 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 和 <see cref="P:System.Data.Common.DbCommand.Connection" /> 执行 <see cref="T:System.Data.Common.DbDataReader" />。 此方法传播有关应取消操作的通知。  
  
调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />.</summary>
      <param name="cancellationToken">用于取消异步操作的令牌。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalar">
      <summary>当在派生类中重写时，执行查询，并将查询返回的结果集中第一行的第一列返回。 所有其他的列和行将被忽略。</summary>
      <returns>结果集中第一行的第一列。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync">
      <summary>
        <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> 的异步版本，执行查询，并将查询返回的结果集中第一行的第一列返回。 所有其他的列和行将被忽略。  
  
通过 CancellationToken.None 调用 <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />。</summary>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> 的异步版本。 提供程序应使用合适的实现进行重写。 可选择性忽略取消标记。  
  
默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> 方法并返回已完成任务，以便阻止调用线程。 如果传递到已取消的取消标记，则默认实现将返回已取消的任务。 ExecuteScalar 引发的异常将通过返回的任务异常属性传递。  
  
在返回的任务完成前，不要调用 <see langword="DbCommand" /> 对象的其他方法和属性。</summary>
      <param name="cancellationToken">用于取消异步操作的令牌。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.Prepare">
      <summary>当在派生类中重写时，在数据源上创建准备就绪（或已编译）的命令版本。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.PrepareAsync(System.Threading.CancellationToken)">
      <summary>在数据源上异步创建准备就绪（或已编译）的命令版本。</summary>
      <param name="cancellationToken">用于取消异步操作的可选令牌。 默认值是 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter">
      <summary>创建 <see cref="T:System.Data.IDbDataParameter" /> 对象的新实例。</summary>
      <returns>一个 <see langword="IDbDataParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader">
      <summary>对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" /> 并生成 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
      <summary>对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一生成 <see cref="T:System.Data.IDataReader" />。</summary>
      <param name="behavior">用于指定命令行为的枚举值之一。</param>
      <returns>一个 <see cref="T:System.Data.IDataReader" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandText">
      <summary>在派生类中重写时，获取或设置对数据源运行的文本命令。</summary>
      <returns>要执行的文本命令。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandTimeout">
      <summary>在派生类中重写时，获取或设置在终止尝试执行命令并生成错误之前的等待时间（以秒为单位）。</summary>
      <returns>等待命令执行所需的时间（以秒为单位）。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandType">
      <summary>在派生类中重写时，获取或设置 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 属性的解释方式。</summary>
      <returns>指定如何解释命令字符串的枚举值之一。 默认值为 <see langword="Text" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Connection">
      <summary>获取或设置此 <see cref="T:System.Data.Common.DbConnection" /> 使用的 <see cref="T:System.Data.Common.DbCommand" />。</summary>
      <returns>与数据源的连接。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbConnection">
      <summary>当在派生类中重写时，获取或设置此 <see cref="T:System.Data.Common.DbCommand" /> 使用的 <see cref="T:System.Data.Common.DbConnection" />。</summary>
      <returns>与数据源的连接。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbParameterCollection">
      <summary>在派生类中重写时，获取 <see cref="T:System.Data.Common.DbParameter" /> 对象的集合。</summary>
      <returns>SQL 语句或存储过程的参数。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbTransaction">
      <summary>当在派生类中重写时，获取或设置执行 <see cref="T:System.Data.Common.DbCommand" /> 对象时所在的 <see cref="P:System.Data.Common.DbCommand.DbTransaction" />。</summary>
      <returns>.NET 数据提供程序的命令对象在其中执行的事务。 默认值为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DesignTimeVisible">
      <summary>当在派生类中重写时，获取或设置一个值，该值指示此命令对象在自定义界面控件中是否可见。</summary>
      <returns>如果该命令对象应在控件中可见，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Parameters">
      <summary>获取 <see cref="T:System.Data.Common.DbParameter" /> 对象的集合。 有关参数的详细信息，请参阅配置参数和参数数据类型。</summary>
      <returns>SQL 语句或存储过程的参数。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Connection">
      <summary>获取或设置 <see cref="T:System.Data.IDbCommand" /> 的此实例使用的 <see cref="T:System.Data.IDbConnection" />。</summary>
      <returns>与数据源的连接。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters">
      <summary>获取 <see cref="T:System.Data.IDataParameterCollection" />。</summary>
      <returns>SQL 语句或存储过程的参数。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction">
      <summary>获取或设置将在其中执行此 <see cref="T:System.Data.Common.DbCommand" /> 对象的 <see cref="P:System.Data.Common.DbCommand.DbTransaction" />。</summary>
      <returns>在其中执行 .NET Framework 数据提供程序的 <see langword="Command" /> 对象的事务。 默认值为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Transaction">
      <summary>获取或设置将在其中执行此 <see cref="T:System.Data.Common.DbCommand" /> 对象的 <see cref="T:System.Data.Common.DbTransaction" />。</summary>
      <returns>在其中执行 .NET Framework 数据提供程序的 <see langword="Command" /> 对象的事务。 默认值为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.UpdatedRowSource">
      <summary>当在派生类中重写时，获取或设置命令结果在由 <see cref="T:System.Data.DataRow" /> 的 Update 方法使用时如何应用于 <see cref="T:System.Data.Common.DbDataAdapter" />。</summary>
      <returns>枚举值之一，指示如何应用命令结果。 除非自动生成该命令，否则默认值为 <see langword="Both" />。 如果自动生成该命令，默认值为 <see langword="None" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbCommandBuilder">
      <summary>自动生成用于协调 <see cref="T:System.Data.DataSet" /> 的更改与关联数据库的单表命令。 这是一个只能被继承的抽象类。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.#ctor">
      <summary>初始化从 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类继承的类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
      <summary>允许 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类的提供程序实现处理附加参数属性。</summary>
      <param name="parameter">要将附加修改应用到的 <see cref="T:System.Data.Common.DbParameter" />。</param>
      <param name="row">来自由 <see cref="T:System.Data.DataRow" /> 提供的架构表的 <see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" />。</param>
      <param name="statementType">生成的命令的类型；INSERT、UPDATE 或 DELETE。</param>
      <param name="whereClause">如果参数是 update 或 delete WHERE 子句的一部分，则为 <see langword="true" />；如果是 insert 或 update 值的一部分，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DbCommandBuilder" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
      <summary>获取在数据源中执行删除操作所需的自动生成的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>自动生成的、执行删除操作所需的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>获取对数据源执行删除操作所必需的自动生成的 <see cref="T:System.Data.Common.DbCommand" /> 对象，可选择使用列作为参数名。</summary>
      <param name="useColumnsForParameterNames">如果为 <see langword="true" />，则生成与列名匹配的参数名（如果可能）。 如果为 <see langword="false" />，则生成 <c>@p1</c>、<c>@p2</c>，以此类推。</param>
      <returns>自动生成的、执行删除操作所需的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
      <summary>获取在数据源中执行插入操作所需的自动生成的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>自动生成的、执行插入操作所需的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>获取对数据源执行插入操作所必需的自动生成的 <see cref="T:System.Data.Common.DbCommand" /> 对象，可选择使用列作为参数名。</summary>
      <param name="useColumnsForParameterNames">如果为 <see langword="true" />，则生成与列名匹配的参数名（如果可能）。 如果为 <see langword="false" />，则生成 <c>@p1</c>、<c>@p2</c>，以此类推。</param>
      <returns>自动生成的、执行插入操作所需的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)">
      <summary>以 <c>@p#</c> 格式返回指定参数的名称。 在生成自定义命令生成器时使用。</summary>
      <param name="parameterOrdinal">作为参数名的一部分而包含的数字。</param>
      <returns>参数名，其中包含作为参数名的一部分而附加的指定数字。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.String)">
      <summary>给定部分参数名，返回完整参数名。</summary>
      <param name="parameterName">参数的部分名称。</param>
      <returns>对应于所请求的部分参数名的完整参数名。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)">
      <summary>返回该参数在关联的 SQL 语句中的占位符。</summary>
      <param name="parameterOrdinal">作为参数名的一部分而包含的数字。</param>
      <returns>附加了指定数字的参数名。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
      <summary>返回 <see cref="T:System.Data.Common.DbCommandBuilder" /> 的架构表。</summary>
      <param name="sourceCommand">要为其检索对应架构表的 <see cref="T:System.Data.Common.DbCommand" />。</param>
      <returns>表示特定 <see cref="T:System.Data.DataTable" /> 的架构的 <see cref="T:System.Data.Common.DbCommand" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
      <summary>获取在数据源中执行更新操作所需的自动生成的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>自动生成的、执行更新所需的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>获取对数据源执行更新操作所必需的自动生成的 <see cref="T:System.Data.Common.DbCommand" /> 对象，可选择使用列作为参数名。</summary>
      <param name="useColumnsForParameterNames">如果为 <see langword="true" />，则生成与列名匹配的参数名（如果可能）。 如果为 <see langword="false" />，则生成 <c>@p1</c>、<c>@p2</c>，以此类推。</param>
      <returns>自动生成的、执行更新所需的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
      <summary>重置 <see cref="P:System.Data.Common.DbCommand.CommandTimeout" /> 上的 <see cref="P:System.Data.Common.DbCommand.Transaction" />、<see cref="P:System.Data.Common.DbCommand.CommandType" />、<see cref="T:System.Data.UpdateRowSource" /> 和 <see cref="T:System.Data.Common.DbCommand" /> 属性。</summary>
      <param name="command">由命令生成器用于对应的 insert、update 或 delete 命令的 <see cref="T:System.Data.Common.DbCommand" />。</param>
      <returns>用于每个 insert、update 或 delete 操作的 <see cref="T:System.Data.Common.DbCommand" /> 实例。 传入一个 null 值将允许 <see cref="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" /> 方法根据与 <see cref="T:System.Data.Common.DbCommand" /> 关联的 Select 命令创建 <see cref="T:System.Data.Common.DbCommandBuilder" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)">
      <summary>以正确的目录大小写给定一个不带引号的标识符，返回该标识符的带引号的正确形式，包括正确转义该标识符中嵌入的任何引号。</summary>
      <param name="unquotedIdentifier">不带引号的原始标识符。</param>
      <returns>带引号的标识符版本。 该标识符中嵌入的引号已正确转义。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RefreshSchema">
      <summary>清除与此 <see cref="T:System.Data.Common.DbCommandBuilder" /> 关联的命令。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)">
      <summary>添加 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 事件的事件处理程序。</summary>
      <param name="rowUpdatingEvent">包含关于该事件的信息的 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 实例。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
      <summary>注册 <see cref="T:System.Data.Common.DbCommandBuilder" /> 以处理 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 的 <see cref="T:System.Data.Common.DbDataAdapter" /> 事件。</summary>
      <param name="adapter">要用于更新的 <see cref="T:System.Data.Common.DbDataAdapter" />。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>给定一个带引号的标识符，返回该标识符的不带引号的正确形式，包括正确地取消转义该标识符中嵌入的任何引号。</summary>
      <param name="quotedIdentifier">其嵌入引号将被移除的标识符。</param>
      <returns>不带引号的标识符，其中嵌入的引号已正确进行取消转义。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogLocation">
      <summary>获取或设置 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类的实例的 <see cref="T:System.Data.Common.CatalogLocation" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.CatalogLocation" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogSeparator">
      <summary>获取或设置一个字符串，该字符串用作 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类的实例的目录分隔符。</summary>
      <returns>一个字符串，指示用于 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类的实例的目录分隔符。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.ConflictOption">
      <summary>指定哪个 <see cref="T:System.Data.ConflictOption" /> 将由 <see cref="T:System.Data.Common.DbCommandBuilder" /> 使用。</summary>
      <returns>返回描述此 <see cref="T:System.Data.ConflictOption" /> 行为的 <see cref="T:System.Data.Common.DbCommandBuilder" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.DataAdapter">
      <summary>获取或设置自动为其生成 Transact-SQL 语句的一个 <see cref="T:System.Data.Common.DbDataAdapter" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataAdapter" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
      <summary>获取或设置指定其名称包含空格或保留标记等字符的数据库对象（例如，表或列）时使用的开始字符。</summary>
      <exception cref="T:System.InvalidOperationException">当生成 Insert、Update 或 Delete 命令后，不能更改此属性。</exception>
      <returns>要使用的起始字符。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
      <summary>获取或设置一个或多个结束字符，供指定其名称中包含空格或保留标记等字符的数据库对象（例如，表或列）时使用。</summary>
      <returns>要使用的结束字符。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SchemaSeparator">
      <summary>获取或设置要用作架构标识符和任何其他标识符之间的分隔符的字符。</summary>
      <returns>要用作架构分隔符的字符。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SetAllValues">
      <summary>指定 update 语句中是包含所有列值还是仅包含更改的列值。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbCommandBuilder" /> 生成的 UPDATE 语句包含所有列，则为 <see langword="true" />；如果它仅包含更改的列，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbConnection">
      <summary>定义数据库连接的核心行为，并为数据库专用连接提供基类。</summary>
    </member>
    <member name="E:System.Data.Common.DbConnection.StateChange">
      <summary>当连接状态改变时发生。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbConnection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>在派生类中重写时，启动数据库事务。</summary>
      <param name="isolationLevel">枚举值之一，指定要使用的事务的隔离级别。</param>
      <returns>表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginDbTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
      <summary>异步启动数据库事务。</summary>
      <param name="isolationLevel">枚举值之一，指定要使用的事务的隔离级别。</param>
      <param name="cancellationToken">用于取消异步操作的令牌。</param>
      <returns>一个任务，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性为表示新事物的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction">
      <summary>开始数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>以指定的隔离级别启动数据库事务。</summary>
      <param name="isolationLevel">枚举值之一，指定要使用的事务的隔离级别。</param>
      <returns>表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
      <summary>异步开始数据库事务。</summary>
      <param name="isolationLevel">枚举值之一，指定要使用的事务的隔离级别。</param>
      <param name="cancellationToken">用于取消异步操作的可选令牌。 默认值是 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>一个任务，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性为表示新事物的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Threading.CancellationToken)">
      <summary>异步开始数据库事务。</summary>
      <param name="cancellationToken">用于取消异步操作的可选令牌。 默认值是 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>一个任务，其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性为表示新事物的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.ChangeDatabase(System.String)">
      <summary>当在派生类中重写时，更改打开的连接的当前数据库。</summary>
      <param name="databaseName">要使用的连接的数据库名称。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.ChangeDatabaseAsync(System.String,System.Threading.CancellationToken)">
      <summary>为打开的连接对象异步更改当前数据库。</summary>
      <param name="databaseName">要使用的连接的数据库名称。</param>
      <param name="cancellationToken">用于取消异步操作的可选令牌。 默认值是 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.Close">
      <summary>在派生类中重写时，关闭与数据库之间的连接。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.CloseAsync">
      <summary>异步关闭与数据库之间的连接。</summary>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateCommand">
      <summary>创建并返回与当前连接关联的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateDbCommand">
      <summary>在派生类中重写时，创建并返回与当前连接关联的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.DisposeAsync">
      <summary>异步处置连接对象。</summary>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>在指定事务中登记。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.Transactions.Transaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema">
      <summary>返回此 <see cref="T:System.Data.Common.DbConnection" /> 的数据源的架构信息。</summary>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String)">
      <summary>通过使用架构名称的指定字符串，返回此 <see cref="T:System.Data.Common.DbConnection" /> 的数据源的架构信息。</summary>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <exception cref="T:System.ArgumentException">将 <paramref name="collectionName" /> 指定为 null。</exception>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])">
      <summary>通过使用指定字符串作为架构名称，指定字符串数组作为限制值，返回此 <see cref="T:System.Data.Common.DbConnection" /> 的数据源的架构信息。</summary>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <param name="restrictionValues">为请求的架构指定一组限制值。</param>
      <exception cref="T:System.ArgumentException">将 <paramref name="collectionName" /> 指定为 null。</exception>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchemaAsync(System.String,System.String[],System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])" /> 的异步版本。
提供程序应使用合适的实现进行重写。
可以选择接受 <paramref name="cancellationToken" />。
默认实现调用同步 <see cref="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])" /> 调用并返回已完成任务。
如果传递到已取消 <paramref name="cancellationToken" />，则默认实现将返回已取消的任务。
<see cref="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])" /> 引发的异常将通过任务异常属性传递。</summary>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <param name="restrictionValues">为请求的架构指定一组限制值。</param>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchemaAsync(System.String,System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbConnection.GetSchema(System.String)" /> 的异步版本。
提供程序应使用合适的实现进行重写。
可以选择接受 <paramref name="cancellationToken" />。
默认实现调用同步 <see cref="M:System.Data.Common.DbConnection.GetSchema(System.String)" /> 调用并返回已完成任务。
如果传递到已取消 <paramref name="cancellationToken" />，则默认实现将返回已取消的任务。
<see cref="M:System.Data.Common.DbConnection.GetSchema(System.String)" /> 引发的异常将通过任务异常属性传递。</summary>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchemaAsync(System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 的异步版本。
提供程序应使用合适的实现进行重写。
可以选择接受 <paramref name="cancellationToken" />。
默认实现调用同步 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 调用并返回已完成任务。
如果传递到已取消 <paramref name="cancellationToken" />，则默认实现将返回已取消的任务。
<see cref="M:System.Data.Common.DbConnection.GetSchema" /> 引发的异常将通过任务异常属性传递。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.Common.DbConnection.StateChange" /> 事件。</summary>
      <param name="stateChange">包含事件数据的 <see cref="T:System.Data.StateChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.Open">
      <summary>在派生类中重写时，打开其设置由 <see cref="P:System.Data.Common.DbConnection.ConnectionString" /> 指定的数据库连接。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync">
      <summary>
        <see cref="M:System.Data.Common.DbConnection.Open" />的异步版本，打开由 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />指定的设置的数据库连接。 此方法通过 CancellationToken.None 调用虚拟方法 <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" />。</summary>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbConnection.Open" /> 的异步版本。 提供程序应使用合适的实现进行重写。 可选择性接受取消标记。  
  
默认实现调用同步 <see cref="M:System.Data.Common.DbConnection.Open" /> 调用并返回已完成任务。 如果传递到已取消的取消标记，则默认实现将返回已取消的 cancellationToken。 Open 引发的异常将通过返回的任务异常属性传递。  
  
在返回的任务完成前，不要调用 <see langword="DbConnection" /> 对象的其他方法和属性。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction">
      <summary>开始一项数据库事务。</summary>
      <returns>一个表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
      <summary>以指定的隔离级别启动数据库事务。</summary>
      <param name="isolationLevel">枚举值之一，指定要使用的事务的隔离级别。</param>
      <returns>一个表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand">
      <summary>创建并返回与当前连接关联的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>与连接关联的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionString">
      <summary>在派生类中重写时，获取或设置用于打开连接的字符串。</summary>
      <returns>用来建立初始连接的连接字符串。 该连接字符串的确切内容取决于此连接的特定数据源。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionTimeout">
      <summary>获取在建立连接时终止尝试并生成错误之前所等待的时间（以秒为单位）。</summary>
      <returns>等待连接打开所需的时间（以秒为单位）。 默认值是由您正在使用的连接的特定类型确定的。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.Database">
      <summary>在派生类中重写时，在连接打开之后获取当前数据库的名称，或者在连接打开之前获取连接字符串中指定的数据库名。</summary>
      <returns>当前数据库的名称或打开连接后要使用的数据库的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.DataSource">
      <summary>在派生类中重写时，获取要连接的数据库服务器的名称。</summary>
      <returns>要连接的数据库服务器的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.DbProviderFactory">
      <summary>获取此 <see cref="T:System.Data.Common.DbProviderFactory" /> 的 <see cref="T:System.Data.Common.DbConnection" />。</summary>
      <returns>一组方法的集合，这些方法用于创建提供程序对数据源类的实现的实例。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ServerVersion">
      <summary>在派生类中重写时，获取表示对象所连接到的服务器的版本的字符串。</summary>
      <exception cref="T:System.InvalidOperationException">当返回的任务未完成，且在调用 <see cref="Overload:System.Data.Common.DbConnection.OpenAsync" /> 后未打开连接时，调用了 <see cref="P:System.Data.Common.DbConnection.ServerVersion" />。</exception>
      <returns>数据库的版本。 返回的字符串的格式取决于您正在使用的连接的特定类型。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.State">
      <summary>获取描述连接状态的字符串。</summary>
      <returns>连接的状态。 返回的字符串的格式取决于您正在使用的连接的特定类型。</returns>
    </member>
    <member name="T:System.Data.Common.DbConnectionStringBuilder">
      <summary>提供强类型化连接字符串生成器的基类。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 类的新实例，可以选择使用 ODBC 规则来引用值。</summary>
      <param name="useOdbcRules">如果使用 {} 来分隔字段，则为 <see langword="true" />；如果使用引号，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)">
      <summary>将带有指定键和值的条目添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中。</summary>
      <param name="keyword">要添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的键。</param>
      <param name="value">指定键的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读。

- 或 -

<see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)">
      <summary>提供了一种有效而安全的方法，用于将键和值附加到现有的 <see cref="T:System.Text.StringBuilder" /> 对象中。</summary>
      <param name="builder">要向其中添加键/值对的 <see cref="T:System.Text.StringBuilder" />。</param>
      <param name="keyword">要添加的键。</param>
      <param name="value">提供的键的值。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
      <summary>提供了一种有效而安全的方法，用于将键和值附加到现有的 <see cref="T:System.Text.StringBuilder" /> 对象中。</summary>
      <param name="builder">要向其中添加键/值对的 <see cref="T:System.Text.StringBuilder" />。</param>
      <param name="keyword">要添加的键。</param>
      <param name="value">提供的键的值。</param>
      <param name="useOdbcRules">如果使用 {} 来分隔字段，则为 <see langword="true" />；如果使用引号，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例的内容。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ClearPropertyDescriptors">
      <summary>清除关联的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 上的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象集合。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否包含特定键。</summary>
      <param name="keyword">要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
      <returns>如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 包含具有指定键的项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)">
      <summary>将此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 对象中的连接信息与提供的对象中的连接信息进行比较。</summary>
      <param name="connectionStringBuilder">要与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 对象进行比较的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</param>
      <returns>如果两个 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 对象中的连接信息生成等效的连接字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.GetProperties(System.Collections.Hashtable)">
      <summary>使用有关此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的所有属性的信息，填充提供的 <see cref="T:System.Collections.Hashtable" />。</summary>
      <param name="propertyDescriptors">使用有关此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的信息填充的 <see cref="T:System.Collections.Hashtable" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Remove(System.String)">
      <summary>从 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例中移除具有指定的键的项。</summary>
      <param name="keyword">要从此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的连接字符串移除的键/值对中的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 Null（在 Visual Basic 中为 <see langword="Nothing" />）</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是只读，或 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定的大小。</exception>
      <returns>如果该键存在于连接字符串中并已被移除，则为 <see langword="true" />；如果该键不存在，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)">
      <summary>指示此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例中是否存在指定的键。</summary>
      <param name="keyword">要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中定位的键。</param>
      <returns>如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 包含具有指定键的项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>在 <see cref="T:System.Collections.IDictionary" /> 对象中添加一个带有所提供的键和值的元素。</summary>
      <param name="keyword">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <param name="value">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IDictionary" /> 对象是否包含具有指定键的元素。</summary>
      <param name="keyword">要在 <see cref="T:System.Collections.IDictionary" /> 对象中查找的键。</param>
      <returns>如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象的 <see cref="T:System.Collections.IDictionary" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 对象中移除具有指定键的元素。</summary>
      <param name="keyword">要移除的元素的键。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>返回此组件实例的自定义属性的集合。</summary>
      <returns>包含此对象的属性的 <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>返回此组件实例的类名称。</summary>
      <returns>对象的类名称，如果该类没有名称，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>返回某个组件的此实例的名称。</summary>
      <returns>对象的名称，如果该对象不具有名称，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>返回此组件实例的类型转换器。</summary>
      <returns>作为此对象转换器的 <see cref="T:System.ComponentModel.TypeConverter" />，或为 <see langword="null" />（如果此对象不存在任何 <see cref="T:System.ComponentModel.TypeConverter" />）。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>返回某个组件的此实例的默认事件。</summary>
      <returns>表示此对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" /> ；如果该对象没有事件，则为 <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>返回此组件实例的默认属性。</summary>
      <returns>表示此对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果该对象没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>返回此组件实例的指定类型的编辑器。</summary>
      <param name="editorBaseType">表示该对象的编辑器的 <see cref="T:System.Type" />。</param>
      <returns>表示该对象编辑器的指定类型的 <see cref="T:System.Object" />；如果无法找到编辑器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>返回此组件实例的事件。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，表示此组件实例的事件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>使用指定的属性数组作为筛选器，返回此组件实例的事件。</summary>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>返回此组件实例的属性。</summary>
      <returns>表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>使用特性数组作为筛选器，返回此组件实例的属性。</summary>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它表示此组件实例的已筛选属性。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回一个对象，该对象包含指定的属性描述符所描述的属性。</summary>
      <param name="pd">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。</param>
      <returns>一个 <see cref="T:System.Object" />，表示指定属性的所有者。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ToString">
      <summary>返回与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 关联的连接字符串。</summary>
      <returns>当前 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 属性。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>从此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中检索与提供的键相对应的值。</summary>
      <param name="keyword">要检索的项的键。</param>
      <param name="value">与 <paramref name="keyword" /> 对应的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 包含一个 null 值（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
      <returns>如果在连接字符串中找到 <paramref name="keyword" />，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.BrowsableConnectionString">
      <summary>获取或设置一个值，该值指示 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 属性是否在 Visual Studio 设计器中可见。</summary>
      <returns>如果连接字符串在设计器中可见，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString">
      <summary>获取或设置与 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 相关联的连接字符串。</summary>
      <exception cref="T:System.ArgumentException">提供的连接字符串参数无效。</exception>
      <returns>使用 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中包含的键/值对创建的当前连接字符串。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Count">
      <summary>获取属性 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 中包含的键的当前数目。</summary>
      <returns>由 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例维护的连接字符串中包含的键的数目。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 为只读，则为 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Item(System.String)">
      <summary>获取或设置与指定的键关联的值。</summary>
      <param name="keyword">要获取或设置的项的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
      <exception cref="T:System.NotSupportedException">设置了该属性，但 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读。

- 或 -

设置了该属性，但 <paramref name="keyword" /> 不存在于集合中，且 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定的大小。</exception>
      <returns>与指定的键相关联的值。 如果指定键未找到，尝试让其返回空引用（在 Visual Basic 中为 <see langword="Nothing" />），并尝试设置为使用指定键创建新的元素。

传递 null 键（在 Visual Basic 中为 <see langword="Nothing" />）将引发 <see cref="T:System.ArgumentNullException" />。 分配一个删除键/值对的 null 值。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Keys">
      <summary>获取包含 <see cref="T:System.Collections.ICollection" /> 中的键的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的键。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="keyword">要获取或设置的元素的键。</param>
      <returns>带有指定键的元素。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Values">
      <summary>获取一个包含 <see cref="T:System.Collections.ICollection" /> 中的值的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的值。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataAdapter">
      <summary>帮助实现 <see cref="T:System.Data.IDbDataAdapter" /> 接口。 <see cref="T:System.Data.Common.DbDataAdapter" /> 的继承类实现了一组功能以提供强类型，但是继承了完全实现 DataAdapter**** 所需的大部分功能。</summary>
    </member>
    <member name="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> 对象用于表映射的默认名称。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor">
      <summary>初始化 DataAdapter**** 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)">
      <summary>从同一类型的现有对象中初始化 <see langword="DataAdapter" /> 类的新实例。</summary>
      <param name="adapter">用于创建新 <see langword="DataAdapter" /> 的 <see langword="DataAdapter" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)">
      <summary>向当前批处理添加 <see cref="T:System.Data.IDbCommand" />。</summary>
      <param name="command">要添加到批处理的 <see cref="T:System.Data.IDbCommand" />。</param>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
      <returns>添加 <see cref="T:System.Data.IDbCommand" /> 之前批处理中的命令数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ClearBatch">
      <summary>从批处理中移除所有 <see cref="T:System.Data.IDbCommand" /> 对象。</summary>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">用于更新数据源的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">在 <see cref="T:System.Data.IDbCommand" /> 过程中执行的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">该命令是 UPDATE、INSERT、DELETE 语句还是 SELECT 语句。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">更新数据源的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">要在 <see cref="T:System.Data.IDbCommand" /> 过程中执行的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">该命令是 UPDATE、INSERT、DELETE 语句还是 SELECT 语句。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DbDataAdapter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ExecuteBatch">
      <summary>执行当前批处理。</summary>
      <returns>从批处理中的最后一个命令返回的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 中添加或刷新行。</summary>
      <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行以匹配使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行。</summary>
      <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="startRecord">从其开始的从零开始的记录号。</param>
      <param name="maxRecords">要检索的最大记录数。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">源表无效。  
  
 - 或 -  
  
 连接无效。</exception>
      <exception cref="T:System.InvalidCastException">未能找到连接。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 参数小于 0。  
  
- 或 - 
<paramref name="maxRecords" /> 参数小于 0。</exception>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>使用 <see cref="T:System.Data.DataSet" /> 和源表名称、命令字符串以及命令行为，在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新某些行以使它们与数据源中对应的行相一致。</summary>
      <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="startRecord">从其开始的从零开始的记录号。</param>
      <param name="maxRecords">要检索的最大记录数。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <param name="command">用于从数据源中检索行的 SQL SELECT 语句。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 参数小于 0。  
  
- 或 - 
<paramref name="maxRecords" /> 参数小于 0。</exception>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 中添加或刷新行以匹配使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行。</summary>
      <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <exception cref="T:System.SystemException">源表无效。</exception>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行，以与使用 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行匹配。</summary>
      <param name="dataTable">用于表映射的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>在 <see cref="T:System.Data.DataTable" /> 中添加或刷新行，以与使用指定的 <see cref="T:System.Data.DataTable" />、<see cref="T:System.Data.IDbCommand" /> 和 <see cref="T:System.Data.CommandBehavior" /> 的数据源中的行匹配。</summary>
      <param name="dataTable">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="command">用于从数据源中检索行的 SQL SELECT 语句。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行以匹配使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行。</summary>
      <param name="dataTables">要从数据源填充的 <see cref="T:System.Data.DataTable" /> 对象。</param>
      <param name="startRecord">从其开始的从零开始的记录号。</param>
      <param name="maxRecords">要检索的最大记录数。</param>
      <param name="command">执行以填充 <see cref="T:System.Data.IDbCommand" /> 对象的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">源表无效。  
  
 - 或 -  
  
 连接无效。</exception>
      <exception cref="T:System.InvalidCastException">未能找到连接。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 参数小于 0。  
  
- 或 - 
<paramref name="maxRecords" /> 参数小于 0。</exception>
      <returns>已在数据表中添加或刷新的行数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])">
      <summary>在 <see cref="T:System.Data.DataTable" /> 中添加或刷新行，以与从指定的记录开始一直检索到指定的最大数目的记录的数据源中的行匹配。</summary>
      <param name="startRecord">从其开始的从零开始的记录号。</param>
      <param name="maxRecords">要检索的最大记录数。</param>
      <param name="dataTables">要从数据源填充的 <see cref="T:System.Data.DataTable" /> 对象。</param>
      <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 此值不包括受不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>将名为“Table”的 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" />，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</summary>
      <param name="dataSet">要插入架构的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一，指定如何插入架构。</param>
      <returns>一个引用，指向添加到 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 对象的集合。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)">
      <summary>将 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> ，并根据指定的 <see cref="T:System.Data.SchemaType" />配置架构以匹配数据源中的架构。</summary>
      <param name="dataSet">要用数据源中的架构填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <param name="command">用于从数据源中检索行的 SQL SELECT 语句。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> 对象的数组，这些对象包含从数据源返回的架构信息。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)">
      <summary>将 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> 中，并根据指定的 <see cref="T:System.Data.SchemaType" /> 和 <see cref="T:System.Data.DataTable" /> 配置架构以匹配数据源中的架构。</summary>
      <param name="dataSet">要插入架构的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一，指定如何插入架构。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <exception cref="T:System.ArgumentException">找不到从中获取架构的源表。</exception>
      <returns>一个引用，指向添加到 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 对象的集合。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)">
      <summary>根据指定的 <see cref="T:System.Data.SchemaType" /> 配置指定 <see cref="T:System.Data.DataTable" /> 的架构。</summary>
      <param name="dataTable">要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.DataTable" />，其中包含从数据源返回的架构信息。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>根据指定的 <see cref="T:System.Data.DataTable" />、命令字符串以及 <see cref="T:System.Data.SchemaType" /> 值配置指定 <see cref="T:System.Data.CommandBehavior" /> 的架构。</summary>
      <param name="dataTable">要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <param name="command">用于从数据源中检索行的 SQL SELECT 语句。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>包含从数据源返回的架构信息的 <see cref="T:System.Data.DataTable" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)">
      <summary>从当前批处理中的其中一个命令返回一个 <see cref="T:System.Data.IDataParameter" />。</summary>
      <param name="commandIdentifier">要从中检索参数的命令的索引。</param>
      <param name="parameterIndex">命令内的参数的索引。</param>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
      <returns>指定的 <see cref="T:System.Data.IDataParameter" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)">
      <summary>返回与较大的批处理更新内的单次更新尝试有关的信息。</summary>
      <param name="commandIdentifier">该批次内单个命令的从零开始的列序号。</param>
      <param name="recordsAffected">数据存储区中受该批内的指定命令影响的行数。</param>
      <param name="error">在执行指定命令期间引发的一个 <see cref="T:System.Exception" />。 如果未引发任何异常，则返回 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
      <returns>与较大的批处理更新内的单次更新尝试有关的信息。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetFillParameters">
      <summary>获取当执行 SQL SELECT 语句时由用户设置的参数。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 对象的数组，这些对象包含由用户设置的参数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.InitializeBatching">
      <summary>初始化 <see cref="T:System.Data.Common.DbDataAdapter" /> 的批处理。</summary>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
      <summary>引发 .NET Framework 数据提供程序的 <see langword="RowUpdated" /> 事件。</summary>
      <param name="value">包含事件数据的 <see cref="T:System.Data.Common.RowUpdatedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
      <summary>引发 .NET Framework 数据提供程序的 <see langword="RowUpdating" /> 事件。</summary>
      <param name="value">包含事件数据的 <see cref="T:System.Data.Common.RowUpdatingEventArgs" />。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>作为此实例副本的新对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.TerminateBatching">
      <summary>结束 <see cref="T:System.Data.Common.DbDataAdapter" /> 的批处理。</summary>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])">
      <summary>通过为 <see cref="T:System.Data.DataSet" /> 中的指定数组中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
      <param name="dataRows">用于更新数据源的 <see cref="T:System.Data.DataRow" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.SystemException">不存在要更新的 <see cref="T:System.Data.DataRow" />。  
  
- 或 - 
不存在要更新的 <see cref="T:System.Data.DataTable" />。  
  
- 或 - 
不存在要用作源的 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)">
      <summary>通过为指定的 <see cref="T:System.Data.DataSet" /> 对象数组中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
      <param name="dataRows">用于更新数据源的 <see cref="T:System.Data.DataRow" /> 对象的数组。</param>
      <param name="tableMapping">要使用的 <see cref="P:System.Data.IDataAdapter.TableMappings" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.SystemException">不存在要更新的 <see cref="T:System.Data.DataRow" />。  
  
- 或 - 
不存在要更新的 <see cref="T:System.Data.DataTable" />。  
  
- 或 - 
不存在要用作源的 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)">
      <summary>通过为指定的 <see cref="T:System.Data.DataSet" /> 中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
      <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</param>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)">
      <summary>通过为具有指定名称 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
      <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)">
      <summary>通过为指定的 <see cref="T:System.Data.DataTable" /> 中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
      <param name="dataTable">用于更新数据源的 <see cref="T:System.Data.DataTable" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.SystemException">不存在要更新的 <see cref="T:System.Data.DataRow" />。  
  
- 或 - 
不存在要更新的 <see cref="T:System.Data.DataTable" />。  
  
- 或 - 
不存在要用作源的 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <returns>
        <see cref="T:System.Data.DataTable" /> 中成功更新的行数。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.DeleteCommand">
      <summary>获取或设置用于从数据集中删除记录的命令。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中已删除的行删除数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.FillCommandBehavior">
      <summary>获取或设置用于填充数据适配器的命令的行为。</summary>
      <returns>用于填充数据适配器的命令的 <see cref="T:System.Data.CommandBehavior" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.InsertCommand">
      <summary>获取或设置用于在数据源中插入新记录的命令。</summary>
      <returns>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中的新行将记录插入到数据源中。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.SelectCommand">
      <summary>获取或设置用于在数据源中选择记录的命令。</summary>
      <returns>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />，它从数据源中选择记录以便放入数据集中。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>获取或设置用于从数据集中删除记录的 SQL 语句。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中已删除的行删除数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>获取或设置用于将新记录插入到数据源中的 SQL 语句。</summary>
      <returns>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中的新行将记录插入到数据源。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>获取或设置用于在数据源中选择记录的 SQL 语句。</summary>
      <returns>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它从数据源中选择记录以便放入数据集中。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>获取或设置用于更新数据源中的记录的 SQL 语句。</summary>
      <returns>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中已修改的行更新数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateBatchSize">
      <summary>获取或设置一个值，该值启用或禁用批处理支持，并且指定可在一次批处理中执行的命令的数量。</summary>
      <returns>每个批处理要处理的行数。  
  
 <list type="table"><listheader><term> 值为</term><description> 效果</description></listheader><item><term> 0</term><description> 批大小没有限制。</description></item><item><term> 1</term><description> 禁用批量更新。</description></item><item><term> &gt; 2</term><description> 更改是使用 <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> 操作的批处理一次性发送的。</description></item></list>  

 将此值设置为1以外的值时，所有与关联的命令都 <see cref="T:System.Data.Common.DbDataAdapter" /> 必须 <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> 将其属性设置为 None 或 OutputParameters。 否则，将引发异常。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateCommand">
      <summary>获取或设置用于更新数据源中的记录的命令。</summary>
      <returns>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中已修改的行更新数据源中的记录。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataReader">
      <summary>从数据源中读取行的只进流。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbDataReader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.CloseAsync">
      <summary>异步关闭 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</summary>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose">
      <summary>释放 <see cref="T:System.Data.Common.DbDataReader" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DbDataReader" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管的资源，则为 <see langword="true" />；若要仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbDataReader.DisposeAsync">
      <summary>异步释放 <see cref="T:System.Data.Common.DbDataReader" /> 类的当前实例所使用的所有资源。</summary>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBoolean(System.Int32)">
      <summary>在派生类中重写时，以布尔值的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetByte(System.Int32)">
      <summary>在派生类中重写时，以字节形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，从指定列中指定索引处开始读取指定数量的字节，并从缓冲区的指定位置开始将其写入缓冲区中。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataOffset">行中作为读取操作起始位置的索引。</param>
      <param name="buffer">要将数据复制到的缓冲区。</param>
      <param name="bufferOffset">要将数据复制到的位置的缓冲区索引。</param>
      <param name="length">最多读取的字节数。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>读取的实际字节数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChar(System.Int32)">
      <summary>在派生类中重写时，以单个字符的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，从指定列中指定索引处开始读取指定数量的字符，并从缓冲区的指定位置开始将其写入缓冲区中。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataOffset">行中作为读取操作起始位置的索引。</param>
      <param name="buffer">要将数据复制到的缓冲区。</param>
      <param name="bufferOffset">要将数据复制到的位置的缓冲区索引。</param>
      <param name="length">最多读取的字符数。</param>
      <returns>读取的实际字符数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetColumnSchemaAsync(System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)" /> 的异步版本。
提供程序应使用合适的实现进行重写。
可以选择接受 <paramref name="cancellationToken" />。
默认实现调用同步 <see cref="M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)" /> 调用并返回已完成任务。
如果传递到已取消 <paramref name="cancellationToken" />，则默认实现将返回已取消的任务。
<see cref="M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)" /> 引发的异常将通过任务异常属性传递。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetData(System.Int32)">
      <summary>返回所请求列的嵌套数据读取器。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <returns>数据读取器。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)">
      <summary>在派生类中重写时，获取指定列的数据类型的名称。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <returns>数据类型的名称。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDateTime(System.Int32)">
      <summary>在派生类中重写时，以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)">
      <summary>返回被请求的列序号的 <see cref="T:System.Data.Common.DbDataReader" /> 对象，可以使用提供程序特定的实现对该对象进行重写。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDecimal(System.Int32)">
      <summary>在派生类中重写时，以 <see cref="T:System.Decimal" /> 的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDouble(System.Int32)">
      <summary>在派生类中重写时，以双精度浮点数的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetEnumerator">
      <summary>当在派生类中重写时，返回一个枚举器，可用于循环访问数据读取器中的行。</summary>
      <returns>一个枚举器，可用于循环访问数据读取器中的行。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldType(System.Int32)">
      <summary>在派生类中重写时，获取指定列的数据类型。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的数据类型。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)">
      <summary>获取指定列的值作为请求的类型。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <typeparam name="T">要返回的值的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">在数据检索期间删除或关闭连接。  

- 或 - 
在数据检索期间关闭数据读取器。  
  
- 或 -

没有可读取的数据（例如尚未调用第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />，或调用返回了 <see langword="false" />）。  

- 或 -

读取器试图按顺序模式读取曾读取的列。  

- 或 -

没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">数据库返回的值不匹配或不能转换为 <typeparamref name="T" />。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)">
      <summary>异步获取指定列的值作为请求的类型。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <typeparam name="T">要返回的值的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">在数据检索期间删除或关闭连接。  
  
- 或 -

在数据检索期间关闭数据读取器。  

- 或 -

没有可读取的数据（例如尚未调用第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />，或调用返回了 <see langword="false" />）。

- 或 -

按顺序模式尝试读取上一步骤中读取的列。  

- 或 -

没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get_*_ 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">数据库返回的值不匹配或不能转换为 <typeparamref name="T" />。</exception>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> 包含指定列的值的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
      <summary>异步获取指定列的值作为请求的类型。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="cancellationToken">用于取消异步操作的令牌。</param>
      <typeparam name="T">要返回的值的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">在数据检索期间删除或关闭连接。  
  
- 或 -

在数据检索期间关闭数据读取器。  

- 或 -

没有可读取的数据（例如尚未调用第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />，或调用返回了 <see langword="false" />）。

- 或 -

按顺序模式尝试读取上一步骤中读取的列。  

- 或 -

没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get_*_ 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">数据库返回的值不匹配或不能转换为 <typeparamref name="T" />。</exception>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> 包含指定列的值的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFloat(System.Int32)">
      <summary>在派生类中重写时，以单精度浮点数的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetGuid(System.Int32)">
      <summary>在派生类中重写时，以全局唯一标识符 (GUID) 的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt16(System.Int32)">
      <summary>在派生类中重写时，以 16 位带符号整数的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt32(System.Int32)">
      <summary>在派生类中重写时，以 32 位带符号整数的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt64(System.Int32)">
      <summary>在派生类中重写时，以 64 位带符号整数的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetName(System.Int32)">
      <summary>在派生类中重写时，获取列的名称，前提是列的序号是从零开始的。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的名称。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetOrdinal(System.String)">
      <summary>在派生类中重写时，在给定了列名称的情况下，获取列序号。</summary>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <returns>从零开始的列序号。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>获取指定列的特定于提供程序的类型。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <returns>特定于提供程序的 .NET 类型。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>以特定于提供程序的类型实例的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>在当前行的集合中获取提供程序特定的所有属性列。</summary>
      <param name="values">要将属性列复制到的 <see cref="T:System.Object" /> 数组。</param>
      <returns>数组中元素的实例数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetSchemaTable">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，它描述 <see cref="T:System.Data.Common.DbDataReader" /> 的列元数据。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Common.DbDataReader" /> 是关闭的。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.NotSupportedException">仅限 .NET Core：不支持此成员。</exception>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetSchemaTableAsync(System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" /> 的异步版本。
提供程序应使用合适的实现进行重写。
可以选择接受 <paramref name="cancellationToken" />。
默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" /> 调用并返回已完成任务。
如果传递到已取消 <paramref name="cancellationToken" />，则默认实现将返回已取消的任务。
<see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" /> 引发的异常将通过任务异常属性传递。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetStream(System.Int32)">
      <summary>获取从指定列检索数据的流。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidOperationException">在数据检索期间删除或关闭连接。  
  
- 或 -

在数据检索期间关闭数据读取器。  

- 或 -

没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。  

- 或 -

数据读取器按顺序模式尝试读取上一步骤中读取的列。  

- 或 -

没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不是支持用 <see cref="T:System.IO.Stream" /> 读取的二进制类型。</exception>
      <returns>一个流。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetString(System.Int32)">
      <summary>在派生类中重写时，以 <see cref="T:System.String" /> 实例的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetTextReader(System.Int32)">
      <summary>获取文本读取器以从列中检索数据。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidOperationException">在数据检索期间删除或关闭连接。  
  
- 或 -

在数据检索期间关闭数据读取器。  

- 或 -

没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。  

- 或 -

数据读取器按顺序模式尝试读取上一步骤中读取的列。  

- 或 -

没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不是支持用 <see cref="T:System.IO.TextReader" /> 读取的文本类型。</exception>
      <returns>文本读取器。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValue(System.Int32)">
      <summary>在派生类中重写时，以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValues(System.Object[])">
      <summary>在派生类中重写时，使用当前行的列值来填充对象数组。</summary>
      <param name="values">要将属性列复制到的 <see cref="T:System.Object" /> 数组。</param>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)">
      <summary>在派生类中重写时，获取一个值，该值指示列中是否包含不存在或丢失的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <returns>如果指定的列与 <see cref="T:System.DBNull" /> 等效，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)">
      <summary>异步获取一个值，该值指示列中是否包含不存在的或缺少的值。</summary>
      <param name="ordinal">从零开始的要检索的列。</param>
      <exception cref="T:System.InvalidOperationException">在数据检索期间删除或关闭连接。  
  
- 或 -

在数据检索期间关闭数据读取器。  

- 或 -

没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。  

- 或 -

按顺序模式尝试读取上一步骤中读取的列。  

- 或 -

没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <returns>一个 <see cref="T:System.Threading.Tasks.Task`1" />，如果指定的列值等于 <see langword="DBNull" />，则其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性为 <see langword="true" />，如果不等于，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>异步获取一个值，该值指示列中是否包含不存在的或缺少的值。</summary>
      <param name="ordinal">从零开始的要检索的列。</param>
      <param name="cancellationToken">用于取消异步操作的令牌。</param>
      <exception cref="T:System.InvalidOperationException">在数据检索期间删除或关闭连接。  
  
- 或 -

在数据检索期间关闭数据读取器。  

- 或 -

没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。  

- 或 -

按顺序模式尝试读取上一步骤中读取的列。  

- 或 - 
没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <returns>一个 <see cref="T:System.Threading.Tasks.Task`1" />，如果指定的列值等于 <see langword="DBNull" />，则其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性为 <see langword="true" />，如果不等于，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResult">
      <summary>在派生类中重写时，在读取一批语句的结果时，使读取器前进到下一个结果。</summary>
      <returns>如果存在多个结果集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync">
      <summary>在读取一批语句的结果时，使读取器异步前进到下一个结果。</summary>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <returns>一个任务，如果有更多的结果集，则其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性为 <see langword="true" />，如果没有，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>在读取一批语句的结果时，使读取器异步前进到下一个结果。</summary>
      <param name="cancellationToken">取消指令。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <returns>一个 <see cref="T:System.Threading.Tasks.Task`1" />，如果有更多的结果集，则其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性为 <see langword="true" />，如果没有，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Read">
      <summary>当在派生类中重写时，将读取器前移至结果集中的下一条记录。</summary>
      <returns>如果存在更多行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync">
      <summary>使读取器异步前进到结果集中的下一条记录。</summary>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <returns>一个 <see cref="T:System.Threading.Tasks.Task`1" />，如果有更多的行，则其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性为 <see langword="true" />，如果没有，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>使读取器异步前进到结果集中的下一条记录。</summary>
      <param name="cancellationToken">取消指令。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <returns>一个 <see cref="T:System.Threading.Tasks.Task`1" />，如果有更多的行，则其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性为 <see langword="true" />，如果没有，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Data.IDataRecord.GetData(System.Int32)" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>在字段指向更多的远程结构化数据时使用的 <see cref="T:System.Data.IDataReader" /> 的实例。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Depth">
      <summary>获取一个值，该值指示当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.FieldCount">
      <summary>在派生类中重写时，获取当前行中的列数。</summary>
      <exception cref="T:System.NotSupportedException">没有对 SQL Server 实例的当前连接。</exception>
      <returns>当前行中的列数。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.HasRows">
      <summary>在派生类中重写时，获取一个值，该值指示此 <see cref="T:System.Data.Common.DbDataReader" /> 是包含一行还是多行。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbDataReader" /> 包含一行或多行，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.IsClosed">
      <summary>在派生类中重写时，获取一个值，该值指示 <see cref="T:System.Data.Common.DbDataReader" /> 是否关闭。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Common.DbDataReader" /> 是关闭的。</exception>
      <returns>如果 <see cref="T:System.Data.Common.DbDataReader" /> 已关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.Int32)">
      <summary>在派生类中重写时，以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">列索引超出范围。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.String)">
      <summary>在派生类中重写时，以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。</summary>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">未找到具有指定名称的列。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.RecordsAffected">
      <summary>当在派生类中重写时，获取通过执行 SQL 语句而更改、插入或删除的行数。</summary>
      <returns>更改、插入或删除的行数。 对于 SELECT 语句为 -1；如果没影响任何行或该语句失败，则为 0。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.VisibleFieldCount">
      <summary>获取 <see cref="T:System.Data.Common.DbDataReader" /> 中未隐藏的字段的数目。</summary>
      <returns>未隐藏的字段的数目。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataReaderExtensions">
      <summary>此类包含用于 <see cref="T:System.Data.Common.DbDataReader" /> 的列架构扩展方法。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)">
      <summary>获取一个值，指示 <see cref="T:System.Data.Common.DbDataReader" /> 是否可以获取列架构。</summary>
      <param name="reader">要检查其是否支持列架构的 <see cref="T:System.Data.Common.DbDataReader" />。</param>
      <returns>如果 <see cref="T:System.Data.Common.DbDataReader" /> 可以获取列架构，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)">
      <summary>获取 <see cref="T:System.Data.Common.DbDataReader" /> 的列架构（<see cref="T:System.Data.Common.DbColumn" /> 集合）。</summary>
      <param name="reader">要返回列架构的 <see cref="T:System.Data.Common.DbDataReader" />。</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 的列架构（<see cref="T:System.Data.Common.DbColumn" /> 集合）。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataRecord">
      <summary>实现 <see cref="T:System.Data.IDataRecord" /> 和 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，并为 <see cref="T:System.Data.Common.DbEnumerator" /> 提供数据绑定支持。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbDataRecord" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBoolean(System.Int32)">
      <summary>以布尔值的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>如果布尔值为 <see langword="true" /> 则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetByte(System.Int32)">
      <summary>以字节的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>以字节数组的形式返回指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">字段中作为读取操作起始位置的索引。</param>
      <param name="buffer">要读入字节流的缓冲区。</param>
      <param name="bufferIndex">开始读取操作的 <paramref name="buffer" /> 的索引。</param>
      <param name="length">要读取的字节数。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChar(System.Int32)">
      <summary>以字符的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>以字符数组的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <param name="dataIndex">要将数据复制到其中的缓冲区。</param>
      <param name="buffer">复制到缓冲区的最大长度。</param>
      <param name="bufferIndex">从缓冲区中开始的点。</param>
      <param name="length">从数据源中开始的点。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetData(System.Int32)">
      <summary>目前尚不支持。</summary>
      <param name="i">目前尚不支持。</param>
      <returns>目前尚不支持。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDataTypeName(System.Int32)">
      <summary>返回后端数据类型的名称。</summary>
      <param name="i">列序号。</param>
      <returns>后端数据类型的名称。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDateTime(System.Int32)">
      <summary>以 <see cref="T:System.DateTime" /> 对象的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDbDataReader(System.Int32)">
      <summary>返回被请求的列序号的 <see cref="T:System.Data.Common.DbDataReader" /> 对象，可以使用提供程序特定的实现对该对象进行重写。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDecimal(System.Int32)">
      <summary>以 <see cref="T:System.Decimal" /> 对象的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDouble(System.Int32)">
      <summary>以双精度浮点数字的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFieldType(System.Int32)">
      <summary>返回作为对象的数据类型的 <see cref="T:System.Type" />。</summary>
      <param name="i">列序号。</param>
      <returns>作为对象的数据类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFloat(System.Int32)">
      <summary>以单精度浮点数字的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetGuid(System.Int32)">
      <summary>返回指定字段的 GUID 值。</summary>
      <param name="i">要返回的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定字段的 GUID 值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt16(System.Int32)">
      <summary>以 16 位带符号整数的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt32(System.Int32)">
      <summary>以 32 位带符号整数的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt64(System.Int32)">
      <summary>以 64 位带符号整数的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetName(System.Int32)">
      <summary>返回指定列的名称。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的名称。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetOrdinal(System.String)">
      <summary>在给定列名时返回列序号。</summary>
      <param name="name">列的名称。</param>
      <returns>列序号。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetString(System.Int32)">
      <summary>以字符串的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValue(System.Int32)">
      <summary>以本机格式返回位于指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>要返回的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValues(System.Object[])">
      <summary>使用当前记录的列值填充对象的数组。</summary>
      <param name="values">要将属性字段复制到其中的 <see cref="T:System.Object" /> 数组。</param>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.IsDBNull(System.Int32)">
      <summary>用于指示不存在的值。</summary>
      <param name="i">列序号。</param>
      <returns>如果指定的列等于 <see cref="T:System.DBNull" />，则为<see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>返回此组件实例的自定义属性的集合。</summary>
      <returns>一个包含该对象的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>返回此组件实例的类名称。</summary>
      <returns>对象的类名称，如果该类没有名称，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>返回某个组件的此实例的名称。</summary>
      <returns>对象的名称，如果该对象不具有名称，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>返回此组件实例的类型转换器。</summary>
      <returns>作为此对象转换器的 <see cref="T:System.ComponentModel.TypeConverter" />，或为 <see langword="null" />（如果此对象不存在任何 <see cref="T:System.ComponentModel.TypeConverter" />）。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>返回某个组件的此实例的默认事件。</summary>
      <returns>表示此对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" /> ；如果该对象没有事件，则为 <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>返回此组件实例的默认属性。</summary>
      <returns>表示此对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果该对象没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>返回此组件实例的指定类型的编辑器。</summary>
      <param name="editorBaseType">表示该对象的编辑器的 <see cref="T:System.Type" />。</param>
      <returns>表示该对象编辑器的指定类型的 <see cref="T:System.Object" />；如果无法找到编辑器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>返回此组件实例的事件。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，表示此组件实例的事件。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>使用指定的属性数组作为筛选器，返回此组件实例的事件。</summary>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>返回此组件实例的属性。</summary>
      <returns>表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>使用特性数组作为筛选器，返回此组件实例的属性。</summary>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它表示此组件实例的已筛选属性。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回一个对象，该对象包含指定的属性描述符所描述的属性。</summary>
      <param name="pd">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。</param>
      <returns>一个 <see cref="T:System.Object" />，表示指定属性的所有者。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.FieldCount">
      <summary>指示当前记录中字段的数目。 此属性为只读。</summary>
      <exception cref="T:System.NotSupportedException">未连接到要从中读取的数据源。</exception>
      <returns>当前记录中字段的数目。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.Int32)">
      <summary>在给定列序号的情况下，指示位于指定列中采用本机格式的值。 此属性为只读。</summary>
      <param name="i">列序号。</param>
      <returns>位于指定列中采用本机格式的值。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.String)">
      <summary>在给定列名的情况下，指示位于指定列中采用本机格式的值。 此属性为只读。</summary>
      <param name="name">列名称。</param>
      <returns>位于指定列中采用本机格式的值。</returns>
    </member>
    <member name="T:System.Data.Common.DbDataSourceEnumerator">
      <summary>提供了一种枚举本地网络内的所有可用数据库服务器实例的机制。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.#ctor">
      <summary>创建 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.GetDataSources">
      <summary>检索一个 <see cref="T:System.Data.DataTable" />，它包含由该类的强类型实例所表示的服务器的所有可见实例的相关信息。</summary>
      <returns>一个 <see cref="T:System.Data.DataTable" />，它包含有关联数据源的可见实例的信息。</returns>
    </member>
    <member name="T:System.Data.Common.DbEnumerator">
      <summary>公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。</summary>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)">
      <summary>使用给定的数据读取器初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 类的新实例。</summary>
      <param name="reader">要对其进行循环访问的 DataReader。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
      <summary>使用指定的读取器初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 类的新实例，并表示在循环访问读取器的数据后是否将其自动关闭。</summary>
      <param name="reader">要对其进行循环访问的 DataReader。</param>
      <param name="closeReader">若要在循环访问 DataReader 的数据后将其自动关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)">
      <summary>使用指定的 <see cref="T:System.Data.Common.DbEnumerator" /> 初始化 <see langword="DataReader" /> 类的新实例。</summary>
      <param name="reader">要通过其进行循环访问的 <see langword="DataReader" />。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)">
      <summary>使用指定的 <see langword="DataReader" /> 初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 类的新实例，并指示在循环访问 <see langword="DataReader" /> 的数据后是否将其自动关闭。</summary>
      <param name="reader">要通过其进行循环访问的 <see langword="DataReader" />。</param>
      <param name="closeReader">若要在循环访问 <see langword="DataReader" /> 的数据后将其自动关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.MoveNext">
      <summary>将枚举数推进到集合的下一个元素。</summary>
      <exception cref="T:System.InvalidOperationException">集合在枚举器创建后被修改。</exception>
      <returns>如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">集合在枚举器创建后被修改。</exception>
    </member>
    <member name="P:System.Data.Common.DbEnumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <exception cref="T:System.InvalidOperationException">枚举器位于集合中第一个元素之前或最后一个元素之后。</exception>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="T:System.Data.Common.DbException">
      <summary>代表数据源引发的所有异常的基类。</summary>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化信息和上下文初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
      <param name="message">为此异常显示的消息。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
      <param name="message">错误消息字符串。</param>
      <param name="innerException">内部异常引用。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Int32)">
      <summary>使用指定的错误消息和错误代码初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="errorCode">异常的错误代码。</param>
    </member>
    <member name="P:System.Data.Common.DbException.IsTransient">
      <summary>指示此 <see cref="T:System.Data.Common.DbException" /> 表示的错误是否可能是暂时性错误，即重试触发操作是否可以在不进行任何其他更改的情况下成功。</summary>
      <returns>
        <see langword="true" /> 如果表示的错误可能是暂时性错误，则为; <see langword="false" /> 否则为。</returns>
    </member>
    <member name="P:System.Data.Common.DbException.SqlState">
      <summary>
        <para> 对于支持它的数据库提供程序，包含标准的 SQL 5 字符返回代码，该代码指示数据库操作是成功还是失败。 前 2 个字符表示返回代码的 <strong>类</strong>（例如错误、成功），而最后 3 个字符表示 <strong>子类</strong>，允许以数据库可移植的方式检测错误情况。</para>
        <para> 对于不支持它的数据库提供程序，或对于不适用的错误方案，包含 <see langword="null" />。</para>
      </summary>
      <returns>标准 SQL 5 个字符的返回代码，或 <see langword="null" /> 。</returns>
    </member>
    <member name="T:System.Data.Common.DbMetaDataCollectionNames">
      <summary>提供已知 MetaDataCollections 的常量列表：DataSourceInformation、DataTypes、MetaDataCollections、ReservedWords 和 Restrictions。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation">
      <summary>与表示 DataSourceInformation**** 集合的 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法一起使用的常量。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataTypes">
      <summary>与表示 DataTypes**** 集合的 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法一起使用的常量。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.MetaDataCollections">
      <summary>与表示 MetaDataCollections**** 集合的 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法一起使用的常量。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.ReservedWords">
      <summary>与表示 ReservedWords**** 集合的 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法一起使用的常量。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.Restrictions">
      <summary>与表示 Restrictions**** 集合的 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法一起使用的常量。</summary>
    </member>
    <member name="T:System.Data.Common.DbMetaDataColumnNames">
      <summary>提供静态值，这些值用于 <see cref="T:System.Data.DataTable" /> 中包含的 MetaDataCollection**** 对象的列名称。 <see cref="T:System.Data.DataTable" /> 由 GetSchema 方法创建****。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CollectionName">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 CollectionName* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ColumnSize">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 ColumnSize* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CompositeIdentifierSeparatorPattern">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 CompositeIdentifierSeparatorPattern* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateFormat">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 CreateFormat* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateParameters">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 CreateParameters* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductName">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 DataSourceProductName* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersion">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 DataSourceProductVersion* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersionNormalized">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 DataSourceProductVersionNormalized* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataType">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 DataType* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.GroupByBehavior">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 GroupByBehavior* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierCase">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 IdentifierCase* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierPattern">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 IdentifierPattern* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsAutoIncrementable">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 IsAutoIncrementable* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsBestMatch">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 IsBestMatch* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsCaseSensitive">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 IsCaseSensitive* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsConcurrencyType">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 IsConcurrencyType* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedLength">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 IsFixedLength* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedPrecisionScale">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 IsFixedPrecisionScale* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLiteralSupported">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 IsLiteralSupported* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLong">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 IsLong* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsNullable">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 IsNullable* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchable">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 IsSearchable* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchableWithLike">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 IsSearchableWithLike* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsUnsigned">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 IsUnsigned* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralPrefix">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 LiteralPrefix* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralSuffix">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 LiteralSuffix* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MaximumScale">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 MaximumScale* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MinimumScale">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 MinimumScale* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfIdentifierParts">
      <summary>由 GetSchema* 方法用来创建 MetaDataCollections 集合中的 NumberOfIdentifierParts* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfRestrictions">
      <summary>由 GetSchema* 方法用来创建 MetaDataCollections 集合中的 NumberOfRestrictions* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.OrderByColumnsInSelect">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 OrderByColumnsInSelect* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 ParameterMarkerFormat* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerPattern">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 ParameterMarkerPattern* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation ParameterNameMaxLength* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 ParameterNamePattern* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ProviderDbType">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 ProviderDbType* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierCase">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 QuotedIdentifierCase* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierPattern">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 QuotedIdentifierPattern* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ReservedWord">
      <summary>由 GetSchema* 方法用来创建 ReservedWords 集合中的 ReservedWord* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StatementSeparatorPattern">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 StatementSeparatorPattern* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StringLiteralPattern">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 StringLiteralPattern* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.SupportedJoinOperators">
      <summary>由 GetSchema* 方法用来创建 DataSourceInformation 集合中的 SupportedJoinOperators* 列。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.TypeName">
      <summary>由 GetSchema* 方法用来创建 DataTypes 集合中的 TypeName* 列。</summary>
    </member>
    <member name="T:System.Data.Common.DbParameter">
      <summary>表示 <see cref="T:System.Data.Common.DbCommand" /> 的参数，还可以是它到 <see cref="T:System.Data.DataSet" /> 列的映射。 有关参数的详细信息，请参阅配置参数和参数数据类型。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameter.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameter.ResetDbType">
      <summary>将 DbType**** 属性重置为其原始设置。</summary>
    </member>
    <member name="P:System.Data.Common.DbParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
      <exception cref="T:System.ArgumentException">该属性未设置为有效的 <see cref="T:System.Data.DbType" />。</exception>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。 默认值为 <see cref="F:System.Data.DbType.String" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是只可输入的参数、只可输出的参数、双向参数还是存储过程返回值参数。</summary>
      <exception cref="T:System.ArgumentException">该属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。 默认值为 <see langword="Input" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.IsNullable">
      <summary>获取或设置一个值，该值指示参数是否接受 null 值。</summary>
      <returns>如果接受 null 值，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.Common.DbParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 的名称。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Precision">
      <summary>获取或设置用于表示 <see cref="P:System.Data.Common.DbParameter.Value" /> 属性的最大位数。</summary>
      <returns>用于表示 <see cref="P:System.Data.Common.DbParameter.Value" /> 属性的最大位数。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Scale">
      <summary>获取或设置所解析的 <see cref="P:System.Data.Common.DbParameter.Value" /> 的小数位数。</summary>
      <returns>对 <see cref="P:System.Data.Common.DbParameter.Value" /> 进行解析的小数位数。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Size">
      <summary>获取或设置列中数据的最大大小（字节）。</summary>
      <returns>列中数据的最大大小（字节）。 默认值将根据参数值进行推断。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumn">
      <summary>获取或设置源列的名称，该源列映射到 <see cref="T:System.Data.DataSet" /> 并用于加载或返回 <see cref="P:System.Data.Common.DbParameter.Value" />。</summary>
      <returns>映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumnNullMapping">
      <summary>获取或设置一个值，该值指示源列是否可以为 null。 通过此操作，<see cref="T:System.Data.Common.DbCommandBuilder" /> 能够为可以为 null 的列正确地生成 Update 语句。</summary>
      <returns>如果源列可以为 null，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceVersion">
      <summary>获取或设置在加载 <see cref="T:System.Data.DataRowVersion" /> 时使用的 <see cref="P:System.Data.Common.DbParameter.Value" />。</summary>
      <exception cref="T:System.ArgumentException">该属性未设置为 <see cref="T:System.Data.DataRowVersion" /> 值之一。</exception>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 默认值为 <see langword="Current" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Precision">
      <summary>指示数值参数的精度。</summary>
      <returns>用于表示数据提供程序 <see langword="Parameter" /> 对象的 <see langword="Value" /> 属性的最大位数。 默认值为 0，指示数据提供程序将设置 <see langword="Value" /> 的精度。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Scale">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Data.IDbDataParameter.Scale" />。</summary>
      <returns>对 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 进行解析的小数位数。 默认值为 0。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Value">
      <summary>获取或设置参数的值。</summary>
      <returns>充当参数值的 <see cref="T:System.Object" />。 默认值为 null。</returns>
    </member>
    <member name="T:System.Data.Common.DbParameterCollection">
      <summary>与 <see cref="T:System.Data.Common.DbCommand" /> 相关的参数集合的基类。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbParameterCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Add(System.Object)">
      <summary>将指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象添加到 <see cref="T:System.Data.Common.DbParameterCollection" /> 中。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.Common.DbParameter" /> 的 <see cref="P:System.Data.Common.DbParameter.Value" />。</param>
      <returns>集合中的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.AddRange(System.Array)">
      <summary>将具有指定值的项的数组添加到 <see cref="T:System.Data.Common.DbParameterCollection" />。</summary>
      <param name="values">要添加到集合的 <see cref="T:System.Data.Common.DbParameter" /> 类型的值的数组。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Clear">
      <summary>将所有 <see cref="T:System.Data.Common.DbParameter" /> 值从 <see cref="T:System.Data.Common.DbParameterCollection" /> 中移除。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.Object)">
      <summary>指示集合中是否包含具有指定 <see cref="P:System.Data.Common.DbParameter.Value" /> 的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.Data.Common.DbParameter" /> 的 <see cref="P:System.Data.Common.DbParameter.Value" />。</param>
      <returns>如果 <see cref="T:System.Data.Common.DbParameter" /> 位于集合中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.String)">
      <summary>指示具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 是否存在于集合中。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.Data.Common.DbParameter" /> 的名称。</param>
      <returns>如果 <see cref="T:System.Data.Common.DbParameter" /> 位于集合中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>将项的数组复制到从指定索引开始的集合。</summary>
      <param name="array">要复制到集合的项数组。</param>
      <param name="index">要复制项的集合中的索引。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetEnumerator">
      <summary>公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.Int32)">
      <summary>返回位于集合中指定索引处的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="index">集合中 <see cref="T:System.Data.Common.DbParameter" /> 的索引。</param>
      <returns>集合中指定索引处的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.String)">
      <summary>返回具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="parameterName">集合中 <see cref="T:System.Data.Common.DbParameter" /> 的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.Object)">
      <summary>返回指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</summary>
      <param name="value">集合中的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</param>
      <returns>指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.String)">
      <summary>返回具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</summary>
      <param name="parameterName">集合中 <see cref="T:System.Data.Common.DbParameter" /> 对象的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Insert(System.Int32,System.Object)">
      <summary>将具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象的指定索引插入指定索引处的集合中。</summary>
      <param name="index">插入 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引位置。</param>
      <param name="value">要插入到集合中的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Remove(System.Object)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.Int32)">
      <summary>从集合中删除位于指定位置的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 对象所在的索引。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.String)">
      <summary>从集合中删除具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="parameterName">要删除的 <see cref="T:System.Data.Common.DbParameter" /> 对象的名称。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
      <summary>将指定索引处的 <see cref="T:System.Data.Common.DbParameter" /> 对象设置为新值。</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 对象所在的索引。</param>
      <param name="value">新的 <see cref="T:System.Data.Common.DbParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
      <summary>将具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象设置为新值。</summary>
      <param name="parameterName">集合中 <see cref="T:System.Data.Common.DbParameter" /> 对象的名称。</param>
      <param name="value">新的 <see cref="T:System.Data.Common.DbParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.System#Collections#IList#Add(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。</summary>
      <param name="value">有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。</param>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.System#Collections#IList#Contains(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</summary>
      <param name="value">有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</param>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</summary>
      <param name="value">有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</param>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。</summary>
      <param name="index">有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。</param>
      <param name="value">有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.System#Collections#IList#Remove(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。</summary>
      <param name="value">有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。</param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Count">
      <summary>指定集合中项的数目。</summary>
      <returns>集合中项的数目。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsFixedSize">
      <summary>指定集合是否为固定大小。</summary>
      <returns>如果集合为固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsReadOnly">
      <summary>指定集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsSynchronized">
      <summary>指定是否同步集合。</summary>
      <returns>如果同步集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <param name="index">参数的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
      <returns>指定索引处的 <see cref="T:System.Data.Common.DbParameter" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.String)">
      <summary>获取或设置具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <param name="parameterName">参数的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
      <returns>具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.SyncRoot">
      <summary>指定将用于同步集合访问的 <see cref="T:System.Object" />。</summary>
      <returns>用于同步 <see cref="T:System.Data.Common.DbParameterCollection" /> 访问的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Data#IDataParameterCollection#Item(System.String)">
      <summary>获取或设置指定索引处的参数。</summary>
      <param name="parameterName">要检索的参数的名称。</param>
      <returns>指定的索引中的一个 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderFactories">
      <summary>表示一组静态方法，这些方法用于创建 <see cref="T:System.Data.Common.DbProviderFactory" /> 类的一个或多个实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.Common.DbConnection)">
      <summary>返回 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</summary>
      <param name="connection">要使用的连接。</param>
      <returns>指定连接的 <see cref="T:System.Data.Common.DbProviderFactory" /> 实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.DataRow)">
      <summary>返回 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</summary>
      <param name="providerRow">
        <see cref="T:System.Data.DataRow" /> 包含提供程序的配置信息。</param>
      <returns>指定 <see cref="T:System.Data.Common.DbProviderFactory" /> 的 <see cref="T:System.Data.DataRow" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.String)">
      <summary>返回 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</summary>
      <param name="providerInvariantName">提供程序的固定名称。</param>
      <returns>指定提供程序名称的 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactoryClasses">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，其中包含有关实现 <see cref="T:System.Data.Common.DbProviderFactory" /> 的所有已安装提供程序的信息。</summary>
      <returns>一个包含 <see cref="T:System.Data.DataRow" /> 对象的 <see cref="T:System.Data.DataTable" />，这些对象具有以下数据： 
 <list type="table"><listheader><term> 列序号</term><description> 列名称</description><description> 描述</description></listheader><item><term> 0</term><description> Name</description><description> 数据提供程序的可识别名称。</description></item><item><term> 1</term><description> 描述</description><description> 数据提供程序的可识别描述。</description></item><item><term> 2</term><description> InvariantName</description><description> 可以以编程方式用于引用数据提供程序的名称。</description></item><item><term> 3</term><description> AssemblyQualifiedName</description><description> 工厂类的完全限定名，它包含用于实例化该对象的足够的信息。</description></item></list></returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetProviderInvariantNames">
      <summary>为 <see cref="T:System.Data.Common.DbProviderFactory" /> 的所有已注册的实例返回固定提供程序名称。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbProviderFactory" /> 的所有已注册实例的固定提供程序名称。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.Data.Common.DbProviderFactory)">
      <summary>使用指定的固定提供程序名称注册 <see cref="T:System.Data.Common.DbProviderFactory" /> 的实例。</summary>
      <param name="providerInvariantName">用于注册提供程序的固定提供程序名称。</param>
      <param name="factory">要注册的提供程序工厂实例。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.String)">
      <summary>使用按指定的固定提供程序名称给定的程序集限定名称注册 <see cref="T:System.Data.Common.DbProviderFactory" />。</summary>
      <param name="providerInvariantName">用于注册提供程序的固定提供程序名称。</param>
      <param name="factoryTypeAssemblyQualifiedName">
        <see cref="T:System.Data.Common.DbProviderFactory" /> 的程序集限定名称。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.Type)">
      <summary>使用按指定的固定提供程序名称给定的类型注册 <see cref="T:System.Data.Common.DbProviderFactory" />。</summary>
      <param name="providerInvariantName">用于注册提供程序的固定提供程序名称。</param>
      <param name="providerFactoryClass">表示 <see cref="T:System.Data.Common.DbProviderFactory" /> 的类型。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.TryGetFactory(System.String,System.Data.Common.DbProviderFactory@)">
      <summary>尝试获取按指定的固定提供程序名称注册的 <see cref="T:System.Data.Common.DbProviderFactory" />。</summary>
      <param name="providerInvariantName">要查找的固定提供程序名称。</param>
      <param name="factory">当此方法返回时，如果找到指定的固定提供程序名称，则包含与此名称关联的 <see cref="T:System.Data.Common.DbProviderFactory" />；否则为 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <returns>如果提供程序是使用指定的固定提供程序名称注册的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.UnregisterFactory(System.String)">
      <summary>删除给定提供程序固定名称的 <see cref="T:System.Data.Common.DbProviderFactory" /> 注册。</summary>
      <param name="providerInvariantName">要删除的注册的固定提供程序名称。</param>
      <returns>如果成功找到并删除注册，则为 <see langword="true" />；否则为 <see langword="false" />。 如果没有找到 <paramref name="providerInvariantName" /> 的注册，此方法将返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderFactory">
      <summary>表示一组方法，这些方法用于创建提供程序对数据源类的实现的实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbProviderFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommand">
      <summary>返回实现 <see cref="T:System.Data.Common.DbCommand" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommandBuilder">
      <summary>返回实现 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnection">
      <summary>返回实现 <see cref="T:System.Data.Common.DbConnection" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnectionStringBuilder">
      <summary>返回实现 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataAdapter">
      <summary>返回实现 <see cref="T:System.Data.Common.DbDataAdapter" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataAdapter" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataSourceEnumerator">
      <summary>返回实现 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateParameter">
      <summary>返回实现 <see cref="T:System.Data.Common.DbParameter" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 的新实例。</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateCommandBuilder">
      <summary>获取一个值，该值指示此 <see cref="T:System.Data.Common.DbProviderFactory" /> 是否支持 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类。</summary>
      <returns>
        <see langword="true" /> 如果此实例支持 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类，则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateDataAdapter">
      <summary>获取一个值，该值指示此 <see cref="T:System.Data.Common.DbProviderFactory" /> 是否支持 <see cref="T:System.Data.Common.DbDataAdapter" /> 类。</summary>
      <returns>
        <see langword="true" /> 如果该实例支持 <see cref="T:System.Data.Common.DbDataAdapter" /> 类，则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateDataSourceEnumerator">
      <summary>获取一个值，该值指示此 <see cref="T:System.Data.Common.DbProviderFactory" /> 是否支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类。</summary>
      <returns>
        <see langword="true" /> 如果该实例支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类，则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute">
      <summary>标识在设置提供程序特定的类型时，使用强类型参数类中的哪个提供程序特定的属性。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderSpecificTypePropertyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute" /> 类的新实例。</summary>
      <param name="isProviderSpecificTypeProperty">指定该属性是否是提供程序特定的属性。</param>
    </member>
    <member name="P:System.Data.Common.DbProviderSpecificTypePropertyAttribute.IsProviderSpecificTypeProperty">
      <summary>指示特性化属性是否为特定于提供程序的类型。</summary>
      <returns>如果此特性所应用的属性是特定于提供程序的类型属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.Common.DbTransaction">
      <summary>定义数据库事务的核心行为，并为数据库专用事务提供基类。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.#ctor">
      <summary>初始化新的 <see cref="T:System.Data.Common.DbTransaction" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Commit">
      <summary>在派生类中重写时，提交数据库事务。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.CommitAsync(System.Threading.CancellationToken)">
      <summary>异步提交数据库事务。</summary>
      <param name="cancellationToken">用于取消异步操作的可选令牌。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose">
      <summary>释放 <see cref="T:System.Data.Common.DbTransaction" /> 使用的非托管资源。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DbTransaction" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">如果为 <see langword="true" />，此方法将释放由此 <see cref="T:System.Data.Common.DbTransaction" /> 引用的任何托管对象所保留的全部资源。</param>
    </member>
    <member name="M:System.Data.Common.DbTransaction.DisposeAsync">
      <summary>异步处置事务对象。</summary>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Release(System.String)">
      <summary>销毁先前在当前事务中定义的保存点。 这允许系统在事务结束之前回收一些资源。</summary>
      <param name="savepointName">要释放的保存点的名称。</param>
    </member>
    <member name="M:System.Data.Common.DbTransaction.ReleaseAsync(System.String,System.Threading.CancellationToken)">
      <summary>销毁先前在当前事务中定义的保存点。 这允许系统在事务结束之前回收一些资源。</summary>
      <param name="savepointName">要释放的保存点的名称。</param>
      <param name="cancellationToken">用于取消异步操作的可选令牌。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Rollback">
      <summary>在派生类中重写时，从挂起状态回滚事务。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Rollback(System.String)">
      <summary>回滚在建立指定保存点后执行的所有命令。</summary>
      <param name="savepointName">要回滚到的保存点的名称。</param>
    </member>
    <member name="M:System.Data.Common.DbTransaction.RollbackAsync(System.String,System.Threading.CancellationToken)">
      <summary>回滚在建立指定保存点后执行的所有命令。</summary>
      <param name="savepointName">要回滚到的保存点的名称。</param>
      <param name="cancellationToken">用于取消异步操作的可选令牌。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.RollbackAsync(System.Threading.CancellationToken)">
      <summary>从挂起状态异步回滚事务。</summary>
      <param name="cancellationToken">用于取消异步操作的可选令牌。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Save(System.String)">
      <summary>在事务中创建保存点。 这样，在建立保存点后执行的所有命令都将被回滚，并将事务状态还原到保存点时的状态。</summary>
      <param name="savepointName">要创建的保存点的名称。</param>
    </member>
    <member name="M:System.Data.Common.DbTransaction.SaveAsync(System.String,System.Threading.CancellationToken)">
      <summary>在事务中创建保存点。 这样，在建立保存点后执行的所有命令都将被回滚，并将事务状态还原到保存点时的状态。</summary>
      <param name="savepointName">要创建的保存点的名称。</param>
      <param name="cancellationToken">用于取消异步操作的可选令牌。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.Connection">
      <summary>指定与该事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象。</summary>
      <returns>与事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.DbConnection">
      <summary>在派生类中重写时，获取与事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象。</summary>
      <returns>与事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.IsolationLevel">
      <summary>在派生类中重写时，获取此事务的隔离级别。</summary>
      <returns>此事务的隔离级别。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.SupportsSavepoints">
      <summary>获取一个值，该值指示此 <see cref="T:System.Data.Common.DbTransaction" /> 实例是否支持数据库保存点。
如果为 <see langword="false" />，则 <see cref="M:System.Data.Common.DbTransaction.SaveAsync(System.String,System.Threading.CancellationToken)" />、<see cref="M:System.Data.Common.DbTransaction.RollbackAsync(System.String,System.Threading.CancellationToken)" /> 和 <see cref="M:System.Data.Common.DbTransaction.ReleaseAsync(System.String,System.Threading.CancellationToken)" /> 方法及其同步对应项应引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>
        <see langword="true" /> 如果此 <see cref="T:System.Data.Common.DbTransaction" /> 实例支持数据库保存点，则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection">
      <summary>获取与事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象，或空引用（如果该事务不再有效）。</summary>
      <returns>与事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象。</returns>
    </member>
    <member name="T:System.Data.Common.GroupByBehavior">
      <summary>指定 GROUP BY 子句中的列与 SELECT 语句的选择列表中的非聚合列之间的关系。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.ExactMatch">
      <summary>GROUP BY 子句必须包含选择列表中的所有非聚合列，而且不能包含不在选择列表中的其他列。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.MustContainAll">
      <summary>GROUP BY 子句必须包含选择列表中的所有非聚合列，而且可以包含不在选择列表中的其他列。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.NotSupported">
      <summary>不支持 GROUP BY 子句。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unknown">
      <summary>对 GROUP BY 子句的支持尚不清楚。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unrelated">
      <summary>GROUP BY 子句中的列与 SELECT 列表中的非聚合列之间不存在关系。 可按任何列分组。</summary>
    </member>
    <member name="T:System.Data.Common.IDbColumnSchemaGenerator">
      <summary>生成列架构。</summary>
    </member>
    <member name="M:System.Data.Common.IDbColumnSchemaGenerator.GetColumnSchema">
      <summary>获取列架构（<see cref="T:System.Data.Common.DbColumn" /> 集合）。</summary>
      <returns>列架构（<see cref="T:System.Data.Common.DbColumn" /> 集合）。</returns>
    </member>
    <member name="T:System.Data.Common.IdentifierCase">
      <summary>指定在搜索系统目录时，数据源如何处理标识符。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Insensitive">
      <summary>搜索系统目录时，数据源忽略标识符的大小写。 标识符“ab”和“AB”匹配。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Sensitive">
      <summary>搜索系统目录时，数据源区分标识符的大小写。 标识符“ab”和“AB”不匹配。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Unknown">
      <summary>数据源的标识符大小写规则不明确，无法识别此信息。</summary>
    </member>
    <member name="T:System.Data.Common.RowUpdatedEventArgs">
      <summary>为 .NET Framework 数据提供程序的 <see langword="RowUpdated" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.IDbCommand" />。</param>
      <param name="statementType">所执行的 SQL 语句类型。</param>
      <param name="tableMapping">通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[])">
      <summary>将已修改的行的引用复制到提供的数组中。</summary>
      <param name="array">要复制到其中的 <see cref="T:System.Data.DataRow" /> 数组。</param>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>将已修改的行的引用复制到提供的数组中。</summary>
      <param name="array">要复制到其中的 <see cref="T:System.Data.DataRow" /> 数组。</param>
      <param name="arrayIndex">要在数组中开始粘贴的位置的索引。</param>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Command">
      <summary>调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.IDbCommand" />。</summary>
      <returns>调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.IDbCommand" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Errors">
      <summary>获取当 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 执行时 .NET Framework 数据提供程序生成的任何错误。</summary>
      <returns>当 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 执行时 .NET Framework 数据提供程序生成的错误。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RecordsAffected">
      <summary>通过执行 SQL 语句获取更改、插入或删除的行数。</summary>
      <returns>已更改、插入或删除的行数；如果没有受影响的行或语句失败，则为 0；对于 SELECT 语句为 -1。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Row">
      <summary>获取通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RowCount">
      <summary>获取在一批更新记录中处理的行数。</summary>
      <returns>指定已处理的行数的 <see langword="int" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.StatementType">
      <summary>获取所执行的 SQL 语句的类型。</summary>
      <returns>所执行的 SQL 语句类型。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Status">
      <summary>获取 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 属性的 <see cref="T:System.Data.UpdateStatus" />。</summary>
      <returns>
        <see cref="T:System.Data.UpdateStatus" /> 值之一。 默认值为 <see langword="Continue" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.TableMapping">
      <summary>获取通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</summary>
      <returns>通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送 <see cref="T:System.Data.Common.DataTableMapping" />。</returns>
    </member>
    <member name="T:System.Data.Common.RowUpdatingEventArgs">
      <summary>为 .NET Framework 数据提供程序的 RowUpdating**** 事件提供数据。</summary>
    </member>
    <member name="M:System.Data.Common.RowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">要进行 <see cref="T:System.Data.DataRow" /> 的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="command">当调用 <see cref="T:System.Data.IDbCommand" /> 时执行的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">要执行的 SQL 语句的类型。</param>
      <param name="tableMapping">要通过 <see cref="T:System.Data.Common.DataTableMapping" /> 发送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.BaseCommand">
      <summary>获取或设置此类的实例的 <see cref="T:System.Data.IDbCommand" /> 对象。</summary>
      <returns>要在 <see cref="T:System.Data.IDbCommand" /> 过程中执行的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Command">
      <summary>获取要在 <see cref="T:System.Data.IDbCommand" /> 操作过程中执行的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>要在 <see cref="T:System.Data.IDbCommand" /> 过程中执行的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Errors">
      <summary>获取当 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 执行时 .NET Framework 数据提供程序生成的任何错误。</summary>
      <returns>当 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 执行时 .NET Framework 数据提供程序生成的错误。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Row">
      <summary>获取要作为插入、更新或删除操作的一部分发送到服务器的 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>要通过 <see cref="T:System.Data.DataRow" /> 发送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.StatementType">
      <summary>获取要执行的 SQL 语句的类型。</summary>
      <returns>要执行的 SQL 语句的类型。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Status">
      <summary>获取或设置 <see cref="T:System.Data.UpdateStatus" /> 属性的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />。</summary>
      <returns>
        <see cref="T:System.Data.UpdateStatus" /> 值之一。 默认值为 <see langword="Continue" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.TableMapping">
      <summary>获取要通过 <see cref="T:System.Data.Common.DataTableMapping" /> 发送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>要通过 <see cref="T:System.Data.Common.DataTableMapping" /> 发送的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="T:System.Data.Common.SchemaTableColumn">
      <summary>描述数据库表的架构的列元数据。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.AllowDBNull">
      <summary>指定是否允许值 <see langword="DBNull" />。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseColumnName">
      <summary>指定架构表中的列的名称。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseSchemaName">
      <summary>指定架构表中的架构的名称。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseTableName">
      <summary>指定架构表中的表的名称。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnName">
      <summary>指定架构表中的列的名称。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnOrdinal">
      <summary>指定列的序号。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnSize">
      <summary>指定列的大小。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.DataType">
      <summary>指定列中数据的类型。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsAliased">
      <summary>指定该列是否具有别名。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsExpression">
      <summary>指定该列是否是一个表达式。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsKey">
      <summary>指定该列是否是表的一个键。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsLong">
      <summary>指定该列是否包含 long 型数据。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsUnique">
      <summary>指定是否有唯一的约束应用于此列。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NonVersionedProviderType">
      <summary>指定该列特定于无版本提供程序的数据类型。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericPrecision">
      <summary>指定列数据的精度（如果是数值数据）。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericScale">
      <summary>指定列数据的小数位数（如果是数值数据）。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ProviderType">
      <summary>指定列的提供程序特定的数据类型。</summary>
    </member>
    <member name="T:System.Data.Common.SchemaTableOptionalColumn">
      <summary>描述数据库表的架构的可选列元数据。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementSeed">
      <summary>指定新标识列的序列被分配的值。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementStep">
      <summary>指定标识列中的值之间的增量。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseCatalogName">
      <summary>与最新的查询的结果相关联的目录的名称。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseColumnNamespace">
      <summary>列的命名空间。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseServerName">
      <summary>列的服务器名。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseTableNamespace">
      <summary>包含列的表的命名空间。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ColumnMapping">
      <summary>指定列的映射。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.DefaultValue">
      <summary>列的默认值。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.Expression">
      <summary>用于计算该列的表达式。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsAutoIncrement">
      <summary>指定列中的列值是否自动递增。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsHidden">
      <summary>指定该列是否是隐藏的。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsReadOnly">
      <summary>指定该列是否是只读的。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsRowVersion">
      <summary>指定该列是否包含行版本信息。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ProviderSpecificDataType">
      <summary>指定列的提供程序特定的数据类型。</summary>
    </member>
    <member name="T:System.Data.Common.SupportedJoinOperators">
      <summary>指定数据源支持何种类型的 Transact-SQL 联接语句。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.FullOuter">
      <summary>数据源支持完全外部联接。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.Inner">
      <summary>数据源支持内部联接。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.LeftOuter">
      <summary>数据源支持左外部联接。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.None">
      <summary>数据源不支持联接查询。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.RightOuter">
      <summary>数据源支持右外部联接。</summary>
    </member>
    <member name="T:System.Data.ConflictOption">
      <summary>指定将如何检测和解决对数据源的相互冲突的更改。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareAllSearchableValues">
      <summary>更新和删除语句将在 WHERE 子句中包含表中的所有可搜索列。 这等效于指定 <see langword="CompareAllValuesUpdate" /> | <see langword="CompareAllValuesDelete" />。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareRowVersion">
      <summary>如果表中存在任何 Timestamp 列，则这些列在 WHERE 子句中用于所有生成的更新语句。 这等效于指定 <see langword="CompareRowVersionUpdate" /> | <see langword="CompareRowVersionDelete" />。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.OverwriteChanges">
      <summary>所有的更新和删除语句仅在 WHERE 子句中包含 <see cref="P:System.Data.DataTable.PrimaryKey" /> 列。 如果未定义 <see cref="P:System.Data.DataTable.PrimaryKey" />，则所有可搜索的列都包含在 WHERE 子句中。 这等效于 <see langword="OverwriteChangesUpdate" /> | <see langword="OverwriteChangesDelete" />。</summary>
    </member>
    <member name="T:System.Data.ConnectionState">
      <summary>描述与数据源连接的当前状态。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Broken">
      <summary>与数据源的连接中断。 只有在连接打开之后才可能发生这种情况。 可以关闭处于这种状态的连接，然后重新打开。 （该值是为此产品的未来版本保留的。）</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Closed">
      <summary>连接已关闭。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Connecting">
      <summary>连接对象正在与数据源连接。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Executing">
      <summary>连接对象正在执行命令。 （该值是为此产品的未来版本保留的。）</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Fetching">
      <summary>连接对象正在检索数据。 （该值是为此产品的未来版本保留的。）</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Open">
      <summary>连接处于打开状态。</summary>
    </member>
    <member name="T:System.Data.Constraint">
      <summary>表示可在一个或多个 <see cref="T:System.Data.DataColumn" /> 对象上强制执行的约束。</summary>
    </member>
    <member name="M:System.Data.Constraint.CheckStateForProperty">
      <summary>获取此约束所属的 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="M:System.Data.Constraint.SetDataSet(System.Data.DataSet)">
      <summary>设置约束的 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataSet">此约束将属于的 <see cref="T:System.Data.DataSet" />。</param>
    </member>
    <member name="M:System.Data.Constraint.ToString">
      <summary>获取 <see cref="P:System.Data.Constraint.ConstraintName" />（如果存在）作为字符串。</summary>
      <returns>
        <see cref="P:System.Data.Constraint.ConstraintName" /> 的字符串值。</returns>
    </member>
    <member name="P:System.Data.Constraint._DataSet">
      <summary>获取此约束所属的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>此约束所属的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.Constraint.ConstraintName">
      <summary>
        <see cref="T:System.Data.ConstraintCollection" /> 中的约束的名称。</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.Constraint" /> 名称是空值或空字符串。</exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.ConstraintCollection" /> 已经包含同名称的 <see cref="T:System.Data.Constraint" />（比较不区分大小写。）</exception>
      <returns>
        <see cref="T:System.Data.Constraint" /> 的名称。</returns>
    </member>
    <member name="P:System.Data.Constraint.ExtendedProperties">
      <summary>获取用户定义的约束属性的集合。</summary>
      <returns>自定义信息的 <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="P:System.Data.Constraint.Table">
      <summary>获取向其应用约束的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>向其应用约束的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="T:System.Data.ConstraintCollection">
      <summary>表示 <see cref="T:System.Data.DataTable" /> 的约束集合。</summary>
    </member>
    <member name="E:System.Data.ConstraintCollection.CollectionChanged">
      <summary>每当由于添加或移除 <see cref="T:System.Data.Constraint" /> 对象而更改 <see cref="T:System.Data.ConstraintCollection" /> 时发生。</summary>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.Data.Constraint)">
      <summary>将指定的 <see cref="T:System.Data.Constraint" /> 对象添加到集合。</summary>
      <param name="constraint">要添加的 <see langword="Constraint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">约束已属于此集合，或属于其他集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合已具有相同名称的约束。 （该比较不区分大小写。）</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>使用指定名称、<see cref="T:System.Data.DataColumn" /> 和指示列是否为主键的值构造一个新 <see cref="T:System.Data.UniqueConstraint" />，并将其添加到集合中。</summary>
      <param name="name">
        <see langword="UniqueConstraint" /> 的名称。</param>
      <param name="column">向其应用约束的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="primaryKey">指定列是否应为主键。 如果为 <see langword="true" />，则该列将为主键列。</param>
      <exception cref="T:System.ArgumentException">该约束已属于此集合。  
  
 -或者-  
  
 该约束属于另一集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的约束。 （该比较不区分大小写。）</exception>
      <returns>一个新的 <see langword="UniqueConstraint" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定名称、父列和子列来构造新 <see cref="T:System.Data.ForeignKeyConstraint" />，并将此约束添加到集合。</summary>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名称。</param>
      <param name="primaryKeyColumn">主键或父级、<see cref="T:System.Data.DataColumn" />。</param>
      <param name="foreignKeyColumn">外键或子级、<see cref="T:System.Data.DataColumn" />。</param>
      <returns>一个新的 <see langword="ForeignKeyConstraint" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>使用指定名称、<see cref="T:System.Data.DataColumn" /> 对象的数组和指示列是否为主键的值构造一个新 <see cref="T:System.Data.UniqueConstraint" />，并将其添加到集合中。</summary>
      <param name="name">
        <see cref="T:System.Data.UniqueConstraint" /> 的名称。</param>
      <param name="columns">对其应用约束的 <see cref="T:System.Data.DataColumn" /> 对象数组。</param>
      <param name="primaryKey">指定列是否应为主键。 如果为 <see langword="true" />，则该列将为主键列。</param>
      <exception cref="T:System.ArgumentException">该约束已属于此集合。  
  
 -或者-  
  
 该约束属于另一集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的约束。 （该比较不区分大小写。）</exception>
      <returns>一个新的 <see langword="UniqueConstraint" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用指定的父列和子列数组，构造新的 <see cref="T:System.Data.ForeignKeyConstraint" />，并将该约束添加到集合。</summary>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名称。</param>
      <param name="primaryKeyColumns">作为主键列或父列的 <see cref="T:System.Data.DataColumn" /> 对象数组。</param>
      <param name="foreignKeyColumns">作为外键列或子列的 <see cref="T:System.Data.DataColumn" /> 对象数组。</param>
      <returns>一个新的 <see langword="ForeignKeyConstraint" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])">
      <summary>将指定的 <see cref="T:System.Data.ConstraintCollection" /> 数组的元素复制到集合末尾。</summary>
      <param name="constraints">要添加到集合中的 <see cref="T:System.Data.ConstraintCollection" /> 对象的数组。</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.CanRemove(System.Data.Constraint)">
      <summary>指示是否可移除 <see cref="T:System.Data.Constraint" />。</summary>
      <param name="constraint">要对其进行测试以查看是否可从集合删除的 <see cref="T:System.Data.Constraint" />。</param>
      <returns>如果可从集合中移除 <see cref="T:System.Data.Constraint" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Clear">
      <summary>清除所有 <see cref="T:System.Data.Constraint" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Data.ConstraintCollection.Contains(System.String)">
      <summary>指示集合中是否存在按名称指定的 <see cref="T:System.Data.Constraint" /> 对象。</summary>
      <param name="name">约束的 <see cref="P:System.Data.Constraint.ConstraintName" />。</param>
      <returns>如果集合包含指定的约束，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.CopyTo(System.Data.Constraint[],System.Int32)">
      <summary>从指定的索引处开始，将集合对象复制到一维 <see cref="T:System.Array" /> 实例中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组索引。</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.Data.Constraint)">
      <summary>获取指定 <see cref="T:System.Data.Constraint" /> 的索引。</summary>
      <param name="constraint">要搜索的 <see cref="T:System.Data.Constraint" />。</param>
      <returns>如果 <see cref="T:System.Data.Constraint" /> 在集合中，则为其从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.String)">
      <summary>获取按名称指定的 <see cref="T:System.Data.Constraint" /> 的索引。</summary>
      <param name="constraintName">
        <see cref="T:System.Data.Constraint" /> 的名称。</param>
      <returns>如果 <see cref="T:System.Data.Constraint" /> 在集合中，则为它的索引，否则为 -1。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.Data.Constraint)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Constraint" />。</summary>
      <param name="constraint">要移除的 <see cref="T:System.Data.Constraint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">约束不属于该集合。</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.String)">
      <summary>从集合中移除按名称指定的 <see cref="T:System.Data.Constraint" /> 对象。</summary>
      <param name="name">要删除的 <see cref="T:System.Data.Constraint" /> 的名称。</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.RemoveAt(System.Int32)">
      <summary>从集合中的指定索引处删除 <see cref="T:System.Data.Constraint" /> 对象。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.Constraint" /> 的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">该集合在此索引位置无约束。</exception>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.Int32)">
      <summary>从集合中获取位于指定索引位置的 <see cref="T:System.Data.Constraint" />。</summary>
      <param name="index">要返回的约束的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中的项目数。</exception>
      <returns>指定索引处的 <see cref="T:System.Data.Constraint" />。</returns>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.String)">
      <summary>从具有指定名称的集合中获取 <see cref="T:System.Data.Constraint" />。</summary>
      <param name="name">要返回的约束的 <see cref="P:System.Data.Constraint.ConstraintName" />。</param>
      <returns>具有指定名称的 <see cref="T:System.Data.Constraint" />；否则，如果 <see cref="T:System.Data.Constraint" /> 不存在，则为空值。</returns>
    </member>
    <member name="T:System.Data.ConstraintException">
      <summary>表示在尝试执行违反约束的操作时引发的异常。</summary>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor">
      <summary>初始化 <see cref="T:System.Data.ConstraintException" /> 类的新实例。 这是无参数构造函数。</summary>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化和流上下文初始化 <see cref="T:System.Data.ConstraintException" /> 类的新实例。</summary>
      <param name="info">将对象序列化或反序列化所必需的数据。</param>
      <param name="context">指定的序列化流的源和目标的说明。</param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.ConstraintException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字符串和内部异常初始化 <see cref="T:System.Data.ConstraintException" /> 类的新实例。</summary>
      <param name="message">引发异常时显示的字符串。</param>
      <param name="innerException">获取导致当前异常的 <see langword="Exception" /> 实例。</param>
    </member>
    <member name="T:System.Data.DataColumn">
      <summary>表示 <see cref="T:System.Data.DataTable" /> 中的列的架构。</summary>
    </member>
    <member name="M:System.Data.DataColumn.#ctor">
      <summary>将 <see cref="T:System.Data.DataColumn" /> 类的新实例初始化为类型字符串。</summary>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String)">
      <summary>使用指定的列名称将 <see cref="T:System.Data.DataColumn" /> 类的新实例初始化为类型字符串。</summary>
      <param name="columnName">一个字符串，它表示要创建的列的名称。 如果设置为 <see langword="null" /> 或空字符串 ("")，则当添加到列集合中时，将指定一个默认名称。</param>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type)">
      <summary>使用指定列名称和数据类型初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="columnName">一个字符串，它表示要创建的列的名称。 如果设置为 <see langword="null" /> 或空字符串 ("")，则当添加到列集合中时，将指定一个默认名称。</param>
      <param name="dataType">支持的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <exception cref="T:System.ArgumentNullException">未指定任何 <paramref name="dataType" />。</exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)">
      <summary>使用指定的名称、数据类型和表达式初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="columnName">一个字符串，它表示要创建的列的名称。 如果设置为 <see langword="null" /> 或空字符串 ("")，则当添加到列集合中时，将指定一个默认名称。</param>
      <param name="dataType">支持的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expr">用于创建该列的表达式。 有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">未指定任何 <paramref name="dataType" />。</exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)">
      <summary>使用指定名称、数据类型、表达式和确定列是否为特性的值，初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="columnName">一个字符串，它表示要创建的列的名称。 如果设置为 <see langword="null" /> 或空字符串 ("")，则当添加到列集合中时，将指定一个默认名称。</param>
      <param name="dataType">支持的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expr">用于创建该列的表达式。 有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</param>
      <param name="type">
        <see cref="T:System.Data.MappingType" /> 值之一。</param>
      <exception cref="T:System.ArgumentNullException">未指定任何 <paramref name="dataType" />。</exception>
    </member>
    <member name="M:System.Data.DataColumn.CheckNotAllowNull">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
    </member>
    <member name="M:System.Data.DataColumn.CheckUnique">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
    </member>
    <member name="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="pcevent">参数引用。</param>
    </member>
    <member name="M:System.Data.DataColumn.RaisePropertyChanging(System.String)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="name">参数引用。</param>
    </member>
    <member name="M:System.Data.DataColumn.SetOrdinal(System.Int32)">
      <summary>将 <see cref="T:System.Data.DataColumn" /> 的序号或位置更改为指定的序号或位置。</summary>
      <param name="ordinal">指定的序号。</param>
    </member>
    <member name="M:System.Data.DataColumn.ToString">
      <summary>获取列的 <see cref="P:System.Data.DataColumn.Expression" />（如果存在的话）。</summary>
      <returns>如果设置了属性；则为 <see cref="P:System.Data.DataColumn.Expression" /> 的值；否则为 <see cref="P:System.Data.DataColumn.ColumnName" /> 的属性。</returns>
    </member>
    <member name="P:System.Data.DataColumn.AllowDBNull">
      <summary>获取或设置一个值，该值指示对于属于该表的行，此列中是否允许空值。</summary>
      <returns>
        <see langword="true" /> 如果允许空值，则为;否则为 <see langword="false" /> 。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrement">
      <summary>获取或设置一个值，该值指示对于添加到该表中的新行，列是否将列的值自动递增。</summary>
      <exception cref="T:System.ArgumentException">该列是计算所得的列。</exception>
      <returns>如果列的值自动递增，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementSeed">
      <summary>获取或设置其 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 属性设置为 <see langword="true" /> 的列的起始值。 默认值为 0。</summary>
      <returns>
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> 功能的起始值。</returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementStep">
      <summary>获取或设置其 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 属性设置为 <see langword="true" /> 的列使用的增量。</summary>
      <exception cref="T:System.ArgumentException">设置的值为零。</exception>
      <returns>列的值自动递增的数值。 默认值为 1。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Caption">
      <summary>获取或设置列的标题。</summary>
      <returns>列的标题。 如果没有设置，则返回 <see cref="P:System.Data.DataColumn.ColumnName" /> 的值。</returns>
    </member>
    <member name="P:System.Data.DataColumn.ColumnMapping">
      <summary>获取或设置列的 <see cref="T:System.Data.MappingType" />。</summary>
      <returns>
        <see cref="T:System.Data.MappingType" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.DataColumn.ColumnName">
      <summary>获取或设置 <see cref="T:System.Data.DataColumnCollection" /> 中的列的名称。</summary>
      <exception cref="T:System.ArgumentException">属性设置为 <see langword="null" /> 或空字符串，且列属于一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已经存在同名称的列。 名称比较不区分大小写。</exception>
      <returns>列的名称。</returns>
    </member>
    <member name="P:System.Data.DataColumn.DataType">
      <summary>获取或设置存储在列中的数据的类型。</summary>
      <exception cref="T:System.ArgumentException">列已经存储了数据。</exception>
      <returns>一个 <see cref="T:System.Type" /> 对象，它表示列数据类型。</returns>
    </member>
    <member name="P:System.Data.DataColumn.DateTimeMode">
      <summary>获取或设置列的 <see langword="DateTimeMode" />。</summary>
      <returns>所指定的列的 <see cref="T:System.Data.DataSetDateTime" />。</returns>
    </member>
    <member name="P:System.Data.DataColumn.DefaultValue">
      <summary>在创建新行时获取或设置列的默认值。</summary>
      <exception cref="T:System.InvalidCastException">在添加行时，默认值不是列的数据类型的实例。</exception>
      <returns>适合于列的 <see cref="P:System.Data.DataColumn.DataType" /> 的值。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Expression">
      <summary>获取或设置表达式，用于筛选行、计算列中的值或创建聚合列。</summary>
      <exception cref="T:System.ArgumentException">将 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 或 <see cref="P:System.Data.DataColumn.Unique" /> 属性设置为 <see langword="true" />。</exception>
      <exception cref="T:System.FormatException">在使用 CONVERT 函数时，表达式的计算结果为一个字符串，但该字符串不包含可以转换成类型参数的表示形式。</exception>
      <exception cref="T:System.InvalidCastException">在使用 CONVERT 函数时，所请求的强制转换不可能完成。 有关可能的强制转换的详细信息，请参见下面一节中的 Conversion 函数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">在使用 SUBSTRING 函数时，起始参数超出范围。  
  
 -或者-  
  
 在使用 SUBSTRING 函数时，长度参数超出范围。</exception>
      <exception cref="T:System.Exception">在使用 LEN 函数或 TRIM 函数时，表达式的计算结果不是字符串。 这包括计算结果为 <see cref="T:System.Char" /> 的表达式。</exception>
      <returns>用来计算列的值，或创建聚合列的表达式。 表达式的返回类型由列的 <see cref="P:System.Data.DataColumn.DataType" /> 来确定。</returns>
    </member>
    <member name="P:System.Data.DataColumn.ExtendedProperties">
      <summary>获取与 <see cref="T:System.Data.DataColumn" /> 相关的自定义用户信息的集合。</summary>
      <returns>自定义信息的 <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="P:System.Data.DataColumn.MaxLength">
      <summary>获取或设置文本列的最大长度。</summary>
      <returns>列的最大长度（以字符数表示）。 如果列没有最大长度，则值为-1 (默认) 。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Namespace">
      <summary>获取或设置 <see cref="T:System.Data.DataColumn" /> 的命名空间。</summary>
      <exception cref="T:System.ArgumentException">该命名空间已有数据。</exception>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 的命名空间。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Ordinal">
      <summary>获取列在 <see cref="T:System.Data.DataColumnCollection" /> 集合中的位置（从零开始）。</summary>
      <returns>列的位置。 如果列不是集合的成员，获取 -1。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Prefix">
      <summary>获取或设置一个 XML 前缀，该前缀是 <see cref="T:System.Data.DataTable" /> 的命名空间的别名。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 命名空间的 XML 前缀。</returns>
    </member>
    <member name="P:System.Data.DataColumn.ReadOnly">
      <summary>获取或设置一个值，该值指示一旦向表中添加了行，列是否还允许更改。</summary>
      <exception cref="T:System.ArgumentException">对于计算所得的列，此属性设置为 <see langword="false" />。</exception>
      <returns>如果列为只读，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Table">
      <summary>获取列所属的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 所属的 <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Unique">
      <summary>获取或设置一个值，该值指示列的每一行中的值是否必须是唯一的。</summary>
      <exception cref="T:System.ArgumentException">列是计算出的列。</exception>
      <returns>如果值必须是唯一的，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.DataColumnChangeEventArgs">
      <summary>为 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Data.DataColumnChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataColumn,System.Object)">
      <summary>初始化 <see cref="T:System.Data.DataColumnChangeEventArgs" /> 类的新实例。</summary>
      <param name="row">带有可变值的列的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="column">带有可变值的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="value">新值。</param>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Column">
      <summary>获取带有可变值的 <see cref="T:System.Data.DataColumn" />。</summary>
      <returns>带有可变值的 <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.ProposedValue">
      <summary>获取或设置列的建议新值。</summary>
      <returns>建议的值，类型为 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Row">
      <summary>获取带有可变值的列的 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>带有可变值的列的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.DataColumnChangeEventHandler">
      <summary>表示用来处理 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataColumnCollection">
      <summary>表示 <see cref="T:System.Data.DataColumn" /> 的 <see cref="T:System.Data.DataTable" /> 对象的集合。</summary>
    </member>
    <member name="E:System.Data.DataColumnCollection.CollectionChanged">
      <summary>在由于添加或删除列而使列集合发生变化时发生。</summary>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add">
      <summary>创建 <see cref="T:System.Data.DataColumn" /> 对象并将其添加到 <see cref="T:System.Data.DataColumnCollection" /> 中。</summary>
      <returns>新创建的 <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)">
      <summary>创建指定的 <see cref="T:System.Data.DataColumn" /> 对象并将其添加到 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <param name="column">要添加的 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">该列已经属于此集合，或者属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的列。 （该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidExpressionException">表达式无效。 有关如何创建表达式的更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String)">
      <summary>创建一个具有指定名称的 <see cref="T:System.Data.DataColumn" /> 对象，并将其添加到 <see cref="T:System.Data.DataColumnCollection" /> 中。</summary>
      <param name="columnName">列的名称。</param>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的列。 （该比较不区分大小写。）</exception>
      <returns>新创建的 <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type)">
      <summary>创建一个具有指定名称和类型的 <see cref="T:System.Data.DataColumn" /> 对象，并将其添加到 <see cref="T:System.Data.DataColumnCollection" /> 中。</summary>
      <param name="columnName">要在创建列时使用的 <see cref="P:System.Data.DataColumn.ColumnName" />。</param>
      <param name="type">新列的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的列。 （该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidExpressionException">表达式无效。 有关如何创建表达式的更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</exception>
      <returns>新创建的 <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type,System.String)">
      <summary>创建一个具有指定名称、类型和表达式的 <see cref="T:System.Data.DataColumn" /> 对象，并将其添加到 <see cref="T:System.Data.DataColumnCollection" /> 中。</summary>
      <param name="columnName">要在创建列时使用的名称。</param>
      <param name="type">新列的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expression">要分配给 <see cref="P:System.Data.DataColumn.Expression" /> 属性的表达式。</param>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的列。 （该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidExpressionException">表达式无效。 有关如何创建表达式的更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</exception>
      <returns>新创建的 <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.AddRange(System.Data.DataColumn[])">
      <summary>将指定的 <see cref="T:System.Data.DataColumn" /> 数组的元素复制到集合末尾。</summary>
      <param name="columns">要添加到集合中的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
    </member>
    <member name="M:System.Data.DataColumnCollection.CanRemove(System.Data.DataColumn)">
      <summary>检查是否可从集合中移除特定列。</summary>
      <param name="column">集合中的 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">该列不属于此集合。
        
- 或 -

该列是关系的一部分。

- 或 -

另一个列的表达式取决于该列。</exception>
      <returns>如果可移除该列，则为 <see langword="true" />。 <see langword="false" />，如果 
-   <paramref name="column" /> 参数为 <see langword="null" />。  
  
-   该列不属于此集合。  
  
-   该列是关系的一部分。  
  
-   另一个列的表达式取决于该列。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Clear">
      <summary>清除集合中的所有列。</summary>
    </member>
    <member name="M:System.Data.DataColumnCollection.Contains(System.String)">
      <summary>检查集合是否包含具有指定名称的列。</summary>
      <param name="name">要查找的列的 <see cref="P:System.Data.DataColumn.ColumnName" />。</param>
      <returns>如果存在此名称的列，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.CopyTo(System.Data.DataColumn[],System.Int32)">
      <summary>将整个集合复制到现有数组中，从该数组内的指定索引处开始复制。</summary>
      <param name="array">将集合复制到其中的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.Data.DataColumn)">
      <summary>获取按名称指定的列的索引。</summary>
      <param name="column">要返回的列的名称。</param>
      <returns>如果找到由 <paramref name="column" /> 指定的列的索引，则为这个索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.String)">
      <summary>获取具有特定名称的列的索引（名称不区分大小写）。</summary>
      <param name="columnName">要查找的列的名称。</param>
      <returns>具有指定名称的列的从零开始的索引，或者如果集合中不存在该列，则为 -1。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.Data.DataColumn)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="column">要移除的 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">该列不属于此集合。  
  
 -或者-  
  
 该列是关系的一部分。  
  
 -或者-  
  
 另一个列的表达式取决于该列。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.String)">
      <summary>从集合中移除具有指定名称的 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="name">要移除的列的名称。</param>
      <exception cref="T:System.ArgumentException">该集合中没有具有指定名称的列。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引位置的列。</summary>
      <param name="index">要移除的列的索引。</param>
      <exception cref="T:System.ArgumentException">该集合在指定的索引位置没有列。</exception>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.Int32)">
      <summary>从集合中获取位于指定索引位置的 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="index">要返回的列的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中的项目数。</exception>
      <returns>指定索引处的 <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.String)">
      <summary>从具有指定名称的集合中获取 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="name">要返回的列的 <see cref="P:System.Data.DataColumn.ColumnName" />。</param>
      <returns>具有指定 <see cref="T:System.Data.DataColumn" /> 的集合中的 <see cref="P:System.Data.DataColumn.ColumnName" />，否则，如果 <see cref="T:System.Data.DataColumn" /> 不存在，则为空值。</returns>
    </member>
    <member name="T:System.Data.DataException">
      <summary>表示使用 ADO.NET 组件发生错误时引发的异常。</summary>
    </member>
    <member name="M:System.Data.DataException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataException" /> 类的新实例。 这是无参数构造函数。</summary>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化信息和上下文初始化 <see cref="T:System.Data.DataException" /> 类的新实例。</summary>
      <param name="info">将对象序列化或反序列化所必需的数据。</param>
      <param name="context">指定的序列化流的源和目标的说明。</param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.DataException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字符串和内部异常初始化 <see cref="T:System.Data.DataException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
      <param name="innerException">对内部异常的引用。</param>
    </member>
    <member name="T:System.Data.DataReaderExtensions">
      <summary>为 <see cref="T:System.Data.Common.DbDataReader" /> 提供扩展方法。</summary>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetBoolean(System.Data.Common.DbDataReader,System.String)">
      <summary>获取指定列的布尔值形式的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetByte(System.Data.Common.DbDataReader,System.String)">
      <summary>以字节的形式获取指定列的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetBytes(System.Data.Common.DbDataReader,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>从指定列中指定索引处开始读取指定字节数，并将其写入缓冲区中从指定位置开始的缓冲区。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <param name="dataOffset">行中作为读取操作起始位置的索引。</param>
      <param name="buffer">要将数据复制到的缓冲区。</param>
      <param name="bufferOffset">要将数据复制到的位置的缓冲区索引。</param>
      <param name="length">最多读取的字符数。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>读取的实际字节数。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetChar(System.Data.Common.DbDataReader,System.String)">
      <summary>作为单个字符获取指定列的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetChars(System.Data.Common.DbDataReader,System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>从指定列中指定索引处开始读取指定字符数，并将其写入从指定位置开始的缓冲区。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <param name="dataOffset">行中作为读取操作起始位置的索引。</param>
      <param name="buffer">要将数据复制到的缓冲区。</param>
      <param name="bufferOffset">要将数据复制到的位置的缓冲区索引。</param>
      <param name="length">最多读取的字符数。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <returns>读取的实际字符数。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetData(System.Data.Common.DbDataReader,System.String)">
      <summary>返回所请求列的嵌套数据读取器。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <returns>数据读取器。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDataTypeName(System.Data.Common.DbDataReader,System.String)">
      <summary>获取指定列的数据类型的名称。</summary>
      <param name="reader">要从中获取列类型名称的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <returns>数据类型的名称。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDateTime(System.Data.Common.DbDataReader,System.String)">
      <summary>以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDecimal(System.Data.Common.DbDataReader,System.String)">
      <summary>获取指定列的 <see cref="T:System.Decimal" /> 形式的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDouble(System.Data.Common.DbDataReader,System.String)">
      <summary>获取作为双精度浮点数的指定列的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFieldType(System.Data.Common.DbDataReader,System.String)">
      <summary>获取指定列的数据类型。</summary>
      <param name="reader">要从中获取字段类型的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的数据类型。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFieldValue``1(System.Data.Common.DbDataReader,System.String)">
      <summary>获取指定列的值作为请求的类型。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <typeparam name="T">要返回的值的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">在数据检索期间删除或关闭连接。  

- 或 - 
在数据检索期间关闭数据读取器。  
  
- 或 -

没有可读取的数据（例如尚未调用第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />，或调用返回了 <see langword="false" />）。  

- 或 -

读取器试图按顺序模式读取曾读取的列。  

- 或 -

没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">数据库返回的值不匹配或不能转换为 <typeparamref name="T" />。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFieldValueAsync``1(System.Data.Common.DbDataReader,System.String,System.Threading.CancellationToken)">
      <summary>异步获取指定列的值作为请求的类型。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <param name="cancellationToken">用于取消异步操作的可选令牌。</param>
      <typeparam name="T">要返回的值的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">在数据检索期间删除或关闭连接。  
  
- 或 -

在数据检索期间关闭数据读取器。  

- 或 -

没有可读取的数据（例如尚未调用第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />，或调用返回了 <see langword="false" />）。

- 或 -

按顺序模式尝试读取上一步骤中读取的列。  

- 或 -

没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get_*_ 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">数据库返回的值不匹配或不能转换为 <typeparamref name="T" />。</exception>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> 包含指定列的值的任务。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFloat(System.Data.Common.DbDataReader,System.String)">
      <summary>以单精度浮点数字的形式获取指定列的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetGuid(System.Data.Common.DbDataReader,System.String)">
      <summary>作为全局唯一标识符 (GUID) 获取指定列的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetInt16(System.Data.Common.DbDataReader,System.String)">
      <summary>获取指定列的 16 位有符号整数形式的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetInt32(System.Data.Common.DbDataReader,System.String)">
      <summary>获取指定列的 32 位带符号整数形式的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetInt64(System.Data.Common.DbDataReader,System.String)">
      <summary>以 64 位有符号整数的形式获取指定列的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetProviderSpecificFieldType(System.Data.Common.DbDataReader,System.String)">
      <summary>获取指定列的特定于提供程序的类型。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <returns>特定于提供程序的 .NET 类型。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetProviderSpecificValue(System.Data.Common.DbDataReader,System.String)">
      <summary>以特定于提供程序的类型实例的形式获取指定列的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetStream(System.Data.Common.DbDataReader,System.String)">
      <summary>获取从指定列检索数据的流。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.InvalidOperationException">在数据检索期间删除或关闭连接。  
  
- 或 -

在数据检索期间关闭数据读取器。  

- 或 -

没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。  

- 或 -

数据读取器按顺序模式尝试读取上一步骤中读取的列。  

- 或 -

没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不是支持用 <see cref="T:System.IO.Stream" /> 读取的二进制类型。</exception>
      <returns>一个流。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetString(System.Data.Common.DbDataReader,System.String)">
      <summary>以 <see cref="T:System.String" /> 实例的形式获取指定列的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetTextReader(System.Data.Common.DbDataReader,System.String)">
      <summary>获取文本读取器以从列中检索数据。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.InvalidOperationException">在数据检索期间删除或关闭连接。  
  
- 或 -

在数据检索期间关闭数据读取器。  

- 或 -

没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。  

- 或 -

数据读取器按顺序模式尝试读取上一步骤中读取的列。  

- 或 -

没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不是支持用 <see cref="T:System.IO.TextReader" /> 读取的文本类型。</exception>
      <returns>文本读取器。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetValue(System.Data.Common.DbDataReader,System.String)">
      <summary>以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.IsDBNull(System.Data.Common.DbDataReader,System.String)">
      <summary>获取一个值，该值指示列中是否包含不存在或丢失的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <returns>如果指定的列与 <see cref="T:System.DBNull" /> 等效，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.IsDBNullAsync(System.Data.Common.DbDataReader,System.String,System.Threading.CancellationToken)">
      <summary>异步获取一个值，该值指示列中是否包含不存在的或缺少的值。</summary>
      <param name="reader">要从中获取列值的数据读取器。</param>
      <param name="name">列的名称。</param>
      <param name="cancellationToken">用于取消异步操作的可选令牌。</param>
      <exception cref="T:System.InvalidOperationException">在数据检索期间删除或关闭连接。  
  
- 或 -

在数据检索期间关闭数据读取器。  

- 或 -

没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。  

- 或 -

按顺序模式尝试读取上一步骤中读取的列。  

- 或 - 
没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
      <returns>一个 <see cref="T:System.Threading.Tasks.Task`1" />，如果指定的列值等于 <see langword="DBNull" />，则其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性为 <see langword="true" />，如果不等于，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.DataRelation">
      <summary>表示两个 <see cref="T:System.Data.DataTable" /> 对象之间的父/子关系。</summary>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 名称、父级和子级 <see cref="T:System.Data.DataColumn" /> 对象，初始化 <see cref="T:System.Data.DataRelation" /> 类的新实例。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的名称。 如果为 <see langword="null" /> 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将提供一个默认名称。</param>
      <param name="parentColumn">关系中的父级 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">关系中的子级 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个 <see cref="T:System.Data.DataColumn" /> 对象包含 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型 
-或者- 
表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>使用指定名称、父级和子级 <see cref="T:System.Data.DataColumn" /> 对象以及指示是否创建约束的值，初始化 <see cref="T:System.Data.DataRelation" /> 类的新实例。</summary>
      <param name="relationName">关系的名称。 如果为 <see langword="null" /> 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将提供一个默认名称。</param>
      <param name="parentColumn">关系中的父级 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">关系中的子级 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="createConstraints">一个指示是否创建约束的值。 如果要创建约束，则为 <see langword="true" />。 否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个 <see cref="T:System.Data.DataColumn" /> 对象包含 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型 
-或者- 
表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 名称、父级和子级 <see cref="T:System.Data.DataColumn" /> 对象的匹配数组，初始化 <see cref="T:System.Data.DataRelation" /> 类的新实例。</summary>
      <param name="relationName">关系的名称。 如果为 <see langword="null" /> 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将提供一个默认名称。</param>
      <param name="parentColumns">父级 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="childColumns">子级 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个 <see cref="T:System.Data.DataColumn" /> 对象包含 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">
        <see cref="T:System.Data.DataColumn" /> 对象具有不同的数据类型 
-或者- 
一个或两个数组不由同一个表中的不同列构成。  
  
-或者- 
表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>使用指定的名称、父级和子级 <see cref="T:System.Data.DataColumn" /> 对象的匹配数组以及指示是否创建约束的值，初始化 <see cref="T:System.Data.DataRelation" /> 类的新实例。</summary>
      <param name="relationName">关系的名称。 如果为 <see langword="null" /> 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将提供一个默认名称。</param>
      <param name="parentColumns">父级 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="childColumns">子级 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="createConstraints">一个指示是否创建约束的值。 如果要创建约束，则为 <see langword="true" />。 否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个 <see cref="T:System.Data.DataColumn" /> 对象为 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型 
-或者- 
表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>此构造函数在 Visual Studio 环境中提供设计时支持。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的名称。 如果为 <see langword="null" /> 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将提供一个默认名称。</param>
      <param name="parentTableName">作为关系的父表的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="parentTableNamespace">父表命名空间的名称。</param>
      <param name="childTableName">作为关系的子表的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="childTableNamespace">子表命名空间的名称。</param>
      <param name="parentColumnNames">关系的父级 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="childColumnNames">关系的子级 <see cref="T:System.Data.DataColumn" /> 中的 <see cref="T:System.Data.DataTable" /> 对象名称的数组。</param>
      <param name="nested">一个指示是否嵌套关系的值。</param>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>此构造函数在 Visual Studio 环境中提供设计时支持。</summary>
      <param name="relationName">关系的名称。 如果为 <see langword="null" /> 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将提供一个默认名称。</param>
      <param name="parentTableName">作为关系的父表的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="childTableName">作为关系的子表的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="parentColumnNames">关系的父级 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="childColumnNames">关系的子级 <see cref="T:System.Data.DataColumn" /> 中的 <see cref="T:System.Data.DataTable" /> 对象名称的数组。</param>
      <param name="nested">一个指示是否嵌套关系的值。</param>
    </member>
    <member name="M:System.Data.DataRelation.CheckStateForProperty">
      <summary>此方法支持 .NET Framework 基础结构，但不适合直接在代码中使用。</summary>
      <exception cref="T:System.Data.DataException">父表和子表属于不同的 <see cref="T:System.Data.DataSet" /> 对象。  
  
-或者- 
一对或多对父级和子级 <see cref="T:System.Data.DataColumn" /> 对象具有不匹配的数据类型。  
  
-或者- 
父级和子级 <see cref="T:System.Data.DataColumn" /> 对象相同。</exception>
    </member>
    <member name="M:System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="pcevent">参数引用。</param>
    </member>
    <member name="M:System.Data.DataRelation.RaisePropertyChanging(System.String)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="name">参数引用。</param>
    </member>
    <member name="M:System.Data.DataRelation.ToString">
      <summary>获取 <see cref="P:System.Data.DataRelation.RelationName" />（如果存在）。</summary>
      <returns>
        <see cref="P:System.Data.DataRelation.RelationName" /> 属性的值。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildColumns">
      <summary>获取此关系的子级 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.DataColumn" /> 对象数组。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildKeyConstraint">
      <summary>获取关系的 <see cref="T:System.Data.ForeignKeyConstraint" />。</summary>
      <returns>
        <see langword="ForeignKeyConstraint" />。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildTable">
      <summary>获取此关系的子表。</summary>
      <returns>一个 <see cref="T:System.Data.DataTable" />，它是关系的子表。</returns>
    </member>
    <member name="P:System.Data.DataRelation.DataSet">
      <summary>获取 <see cref="T:System.Data.DataRelation" /> 所属的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 所属的 <see cref="T:System.Data.DataRelation" />。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ExtendedProperties">
      <summary>获取存储自定义属性的集合。</summary>
      <returns>一个包含自定义属性的 <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="P:System.Data.DataRelation.Nested">
      <summary>获取或设置一个指示是否嵌套 <see cref="T:System.Data.DataRelation" /> 对象的值。</summary>
      <returns>如果 <see cref="T:System.Data.DataRelation" /> 对象嵌套，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentColumns">
      <summary>获取作为此 <see cref="T:System.Data.DataRelation" /> 的父列的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</summary>
      <returns>作为此 <see cref="T:System.Data.DataColumn" /> 的父列 <see cref="T:System.Data.DataRelation" /> 对象的数组。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentKeyConstraint">
      <summary>获取 <see cref="T:System.Data.UniqueConstraint" />，它确保 <see cref="T:System.Data.DataRelation" /> 的父列中的值是唯一的。</summary>
      <returns>一个 <see cref="T:System.Data.UniqueConstraint" />，它确保父列中的值是唯一的。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentTable">
      <summary>获取此 <see cref="T:System.Data.DataRelation" /> 的父级 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个 <see cref="T:System.Data.DataTable" />，它是此关系的父表。</returns>
    </member>
    <member name="P:System.Data.DataRelation.RelationName">
      <summary>获取或设置用于从 <see cref="T:System.Data.DataRelationCollection" /> 中检索 <see cref="T:System.Data.DataRelation" /> 的名称。</summary>
      <exception cref="T:System.ArgumentException">将 <see langword="null" /> 或空字符串 ("") 传入作为 <see cref="T:System.Data.DataRelation" /> 的 <see cref="T:System.Data.DataColumn" />。</exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.DataRelation" /> 属于一个集合，该集合已经包含具有相同名称的 <see cref="T:System.Data.DataRelation" />。</exception>
      <returns>
        <see cref="T:System.Data.DataRelation" /> 的名称。</returns>
    </member>
    <member name="T:System.Data.DataRelationCollection">
      <summary>表示此 <see cref="T:System.Data.DataRelation" /> 的 <see cref="T:System.Data.DataSet" /> 对象的集合。</summary>
    </member>
    <member name="E:System.Data.DataRelationCollection.CollectionChanged">
      <summary>在集合更改后发生。</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataRelationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>用指定的父列和子列创建 <see cref="T:System.Data.DataRelation" />，并将其添加到集合中。</summary>
      <param name="parentColumn">该关系的父列。</param>
      <param name="childColumn">该关系的子列。</param>
      <returns>创建的关系。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>用指定的父列和子列创建 <see cref="T:System.Data.DataRelation" />，并将其添加到集合中。</summary>
      <param name="parentColumns">该关系的父列。</param>
      <param name="childColumns">该关系的子列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 参数为空值。</exception>
      <exception cref="T:System.ArgumentException">该关系已经属于此集合，或者它属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在同名关系。 （该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidConstraintException">该关系在创建后进入了无效的状态。</exception>
      <returns>创建的关系。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataRelation)">
      <summary>向 <see cref="T:System.Data.DataRelation" /> 中添加一个 <see cref="T:System.Data.DataRelationCollection" />。</summary>
      <param name="relation">要添加到集合中的 <see langword="DataRelation" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 参数为空值。</exception>
      <exception cref="T:System.ArgumentException">该关系已经属于此集合，或者它属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已经存在具有指定名称的关系。 （该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidConstraintException">该关系在创建后进入了无效的状态。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>用指定名称以及父列和子列创建 <see cref="T:System.Data.DataRelation" />，并将其添加到集合。</summary>
      <param name="name">关系的名称。</param>
      <param name="parentColumn">该关系的父列。</param>
      <param name="childColumn">该关系的子列。</param>
      <returns>创建的关系。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>用指定的名称、父列和子列，以及根据 <paramref name="createConstraints" /> 参数的值而定的可选约束创建 <see cref="T:System.Data.DataRelation" />，并将其添加到集合中。</summary>
      <param name="name">关系的名称。</param>
      <param name="parentColumn">该关系的父列。</param>
      <param name="childColumn">该关系的子列。</param>
      <param name="createConstraints">如果创建约束，则为 <see langword="true" />；否则为 <see langword="false" />。 （默认值为 <see langword="true" />）。</param>
      <returns>创建的关系。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用父列和子列数组创建一个具有指定名称的 <see cref="T:System.Data.DataRelation" />，并将其添加到集合中。</summary>
      <param name="name">要创建的 <see langword="DataRelation" /> 的名称。</param>
      <param name="parentColumns">父级 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="childColumns">子级 <see langword="DataColumn" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">该关系名称为空值。</exception>
      <exception cref="T:System.ArgumentException">该关系已经属于此集合，或者它属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在同名关系。 （该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidConstraintException">该关系在创建后进入了无效的状态。</exception>
      <returns>创建的 <see langword="DataRelation" />。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>用指定的名称、父列和子列的数组以及指定是否创建约束的值，创建 <see cref="T:System.Data.DataRelation" />，并将其添加到集合。</summary>
      <param name="name">要创建的 <see langword="DataRelation" /> 的名称。</param>
      <param name="parentColumns">父级 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="childColumns">子级 <see langword="DataColumn" /> 对象的数组。</param>
      <param name="createConstraints">若要创建约束，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">该关系名称为空值。</exception>
      <exception cref="T:System.ArgumentException">该关系已经属于此集合，或者它属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在同名关系。 （该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidConstraintException">该关系在创建后进入了无效的状态。</exception>
      <returns>创建的关系。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddCore(System.Data.DataRelation)">
      <summary>对表执行验证。</summary>
      <param name="relation">要检查的关系。</param>
      <exception cref="T:System.ArgumentNullException">关系为空。</exception>
      <exception cref="T:System.ArgumentException">该关系已经属于此集合，或者它属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在同名关系。 （该比较不区分大小写。）</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddRange(System.Data.DataRelation[])">
      <summary>将指定的 <see cref="T:System.Data.DataRelation" /> 数组的元素复制到集合末尾。</summary>
      <param name="relations">要添加到集合中的 <see cref="T:System.Data.DataRelation" /> 对象的数组。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.CanRemove(System.Data.DataRelation)">
      <summary>验证是否可以将指定的 <see cref="T:System.Data.DataRelation" /> 从集合中移除。</summary>
      <param name="relation">要对其执行检查的关系。</param>
      <returns>如果可以移除 <see cref="T:System.Data.DataRelation" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Clear">
      <summary>清除集合的所有关系。</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Contains(System.String)">
      <summary>验证集合中是否存在具有特定名称（不区分大小写）的 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="name">要查找的关系的名称。</param>
      <returns>如果存在具有指定名称的关系，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.CopyTo(System.Data.DataRelation[],System.Int32)">
      <summary>从指定的索引开始复制 <see cref="T:System.Data.DataRelation" /> 对象的集合。</summary>
      <param name="array">该集合要复制到的 <see cref="T:System.Data.DataRelation" /> 对象的数组。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.GetDataSet">
      <summary>此方法支持 .NET Framework 基础结构，但不适合直接在代码中使用。</summary>
      <returns>引用的数据集。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.Data.DataRelation)">
      <summary>获取指定 <see cref="T:System.Data.DataRelation" /> 对象的索引。</summary>
      <param name="relation">要搜索的关系。</param>
      <returns>该关系的从 0 开始的索引；或者如果在该集合中找不到该关系，则为 -1。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.String)">
      <summary>获取按名称指定的 <see cref="T:System.Data.DataRelation" /> 的索引。</summary>
      <param name="relationName">要查找的关系的名称。</param>
      <returns>具有指定名称的关系的从零开始的索引；或者如果集合中不存在该关系，则为 -1。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件。</summary>
      <param name="ccevent">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanging(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件。</summary>
      <param name="ccevent">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.Data.DataRelation)">
      <summary>从集合中移除指定的关系。</summary>
      <param name="relation">要移除的关系。</param>
      <exception cref="T:System.ArgumentNullException">关系为空值。</exception>
      <exception cref="T:System.ArgumentException">关系不属于该集合。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.String)">
      <summary>从集合中移除具有指定名称的关系。</summary>
      <param name="name">要移除的关系的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">该集合中没有具有指定名称的关系。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引位置的关系。</summary>
      <param name="index">要移除的关系的索引。</param>
      <exception cref="T:System.ArgumentException">该集合在指定的索引位置没有关系。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveCore(System.Data.DataRelation)">
      <summary>对指定 <see cref="T:System.Data.DataRelation" /> 对象执行验证。</summary>
      <param name="relation">要验证的 <see langword="DataRelation" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">该集合在指定的索引位置没有关系。</exception>
      <exception cref="T:System.ArgumentException">指定的关系不属于此集合，或者它属于另一个集合。</exception>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.Int32)">
      <summary>获取位于指定索引位置的 <see cref="T:System.Data.DataRelation" /> 对象。</summary>
      <param name="index">要查找的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中的项目数。</exception>
      <returns>
        <see cref="T:System.Data.DataRelation" />，或者如果指定的 <see cref="T:System.Data.DataRelation" /> 不存在，则为空值。</returns>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.String)">
      <summary>获取按名称指定的 <see cref="T:System.Data.DataRelation" /> 对象。</summary>
      <param name="name">要查找的关系的名称。</param>
      <returns>命名的 <see cref="T:System.Data.DataRelation" />，或者如果指定的 <see cref="T:System.Data.DataRelation" /> 不存在，则为空值。</returns>
    </member>
    <member name="T:System.Data.DataRow">
      <summary>表示 <see cref="T:System.Data.DataTable" /> 中的一行数据。</summary>
    </member>
    <member name="M:System.Data.DataRow.#ctor(System.Data.DataRowBuilder)">
      <summary>初始化 DataRow 的新实例。 从生成器中构造行。 仅限内部使用。</summary>
      <param name="builder">生成器</param>
    </member>
    <member name="M:System.Data.DataRow.AcceptChanges">
      <summary>提交自上次调用 <see cref="M:System.Data.DataRow.AcceptChanges" /> 以来对该行进行的所有更改。</summary>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
    </member>
    <member name="M:System.Data.DataRow.BeginEdit">
      <summary>对 <see cref="T:System.Data.DataRow" /> 对象启动编辑操作。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">已在 <see cref="E:System.Data.DataTable.RowChanging" /> 事件中调用该方法。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">对已删除的行调用该方法。</exception>
    </member>
    <member name="M:System.Data.DataRow.CancelEdit">
      <summary>取消当前对该行进行的编辑。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">已在 <see cref="E:System.Data.DataTable.RowChanging" /> 事件中调用该方法。</exception>
    </member>
    <member name="M:System.Data.DataRow.ClearErrors">
      <summary>清除该行的错误。 这包括 <see cref="P:System.Data.DataRow.RowError" /> 和 <see cref="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)" /> 的错误设置。</summary>
    </member>
    <member name="M:System.Data.DataRow.Delete">
      <summary>删除 <see cref="T:System.Data.DataRow" />。</summary>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">已删除 <see cref="T:System.Data.DataRow" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.EndEdit">
      <summary>终止该行的编辑。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">已在 <see cref="E:System.Data.DataTable.RowChanging" /> 事件中调用该方法。</exception>
      <exception cref="T:System.Data.ConstraintException">该编辑操作破坏了约束。</exception>
      <exception cref="T:System.Data.ReadOnlyException">此行属于该表，该编辑尝试更改只读列的值。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">该编辑操作尝试将 null 值放在 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 False 的列中。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 获取此 <see cref="T:System.Data.DataRow" /> 的子行。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">关系为 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有此版本的数据。</exception>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组，或长度为零的数组。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 和 <see cref="T:System.Data.DataRowVersion" /> 获取 <see cref="T:System.Data.DataRow" /> 的子行。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，指定要获取的数据的版本。 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有请求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String)">
      <summary>使用 <see cref="T:System.Data.DataRelation" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 获取 <see cref="T:System.Data.DataRow" /> 的子行。</summary>
      <param name="relationName">要使用的 <see cref="T:System.Data.DataRelation" /> 的 <see cref="P:System.Data.DataRelation.RelationName" />。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组，或长度为零的数组。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)">
      <summary>使用 <see cref="T:System.Data.DataRelation" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 和 <see cref="T:System.Data.DataRowVersion" />获取 <see cref="T:System.Data.DataRow" /> 的子行。</summary>
      <param name="relationName">要使用的 <see cref="T:System.Data.DataRelation" /> 的 <see cref="P:System.Data.DataRelation.RelationName" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，指定要获取的数据的版本。 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有请求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组，或长度为零的数组。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Data.DataColumn)">
      <summary>获取指定 <see cref="T:System.Data.DataColumn" /> 的错误说明。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <returns>错误说明的文本。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Int32)">
      <summary>获取由索引指定的列的错误说明。</summary>
      <param name="columnIndex">列的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数超出范围。</exception>
      <returns>错误说明的文本。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.String)">
      <summary>获取由名称指定的列的错误说明。</summary>
      <param name="columnName">列的名称。</param>
      <returns>错误说明的文本。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnsInError">
      <summary>获取由包含错误的列组成的数组。</summary>
      <returns>包含错误的 <see cref="T:System.Data.DataColumn" /> 对象组成的数组。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 不属于 <see cref="T:System.Data.DataTable" />。  
  
- 或 -

该行为 <see langword="null" />。</exception>
      <exception cref="T:System.Data.DataException">子行具有多个父行。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">此行不属于 <see cref="T:System.Data.DataRelation" /> 对象的子表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于表。</exception>
      <returns>当前行的父 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 和 <see cref="T:System.Data.DataRowVersion" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，指定要获取的数据的版本。</param>
      <exception cref="T:System.ArgumentNullException">该行为 <see langword="null" />。  
  
- 或 -

<paramref name="relation" /> 不属于该表的父关系。</exception>
      <exception cref="T:System.Data.DataException">子行具有多个父行。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">此关系的子表不是该行所属的表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有此版本的数据。</exception>
      <returns>当前行的父 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String)">
      <summary>使用 <see cref="T:System.Data.DataRelation" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的 <see cref="P:System.Data.DataRelation.RelationName" />。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.Data.DataException">子行具有多个父行。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <returns>当前行的父 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)">
      <summary>使用 <see cref="T:System.Data.DataRelation" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 和 <see cref="T:System.Data.DataRowVersion" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的 <see cref="P:System.Data.DataRelation.RelationName" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Data.DataException">子行具有多个父行。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有请求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
      <returns>当前行的父 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" /> 不属于此行的 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.ArgumentNullException">该行为 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">此关系的子表不是该行所属的表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于 <see cref="T:System.Data.DataTable" />。</exception>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组，或长度为零的数组。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 和 <see cref="T:System.Data.DataRowVersion" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，指定要获取的数据的版本。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" /> 不属于此行的 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.ArgumentNullException">该行为 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">此关系的子表不是该行所属的表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于 <see cref="T:System.Data.DataTable" />。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有请求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组，或长度为零的数组。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String)">
      <summary>使用 <see cref="T:System.Data.DataRelation" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的 <see cref="P:System.Data.DataRelation.RelationName" />。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组，或长度为零的数组。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)">
      <summary>使用 <see cref="T:System.Data.DataRelation" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 和 <see cref="T:System.Data.DataRowVersion" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的 <see cref="P:System.Data.DataRelation.RelationName" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，指定要获取的数据的版本。 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有请求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组，或长度为零的数组。</returns>
    </member>
    <member name="M:System.Data.DataRow.HasVersion(System.Data.DataRowVersion)">
      <summary>获取一个值，该值指示指定的版本是否存在。</summary>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，用于指定行版本。</param>
      <returns>如果该版本存在，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn)">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Data.DataColumn" /> 是否包含 null 值。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <returns>如果该列包含 null 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Data.DataColumn" /> 和 <see cref="T:System.Data.DataRowVersion" /> 是否包含 null 值。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，用于指定行版本。 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有请求的 <paramref name="version" />。</exception>
      <returns>如果该列包含 null 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Int32)">
      <summary>获取一个值，该值指示位于指定索引处的列是否包含 null 值。</summary>
      <param name="columnIndex">列的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">没有列对应于 <paramref name="columnIndex" /> 指定的索引。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <returns>如果该列包含 null 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.String)">
      <summary>获取一个值，该值指示指定的列是否包含 null 值。</summary>
      <param name="columnName">列的名称。</param>
      <exception cref="T:System.ArgumentException">找不到由 <paramref name="columnName" /> 指定的列。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <returns>如果该列包含 null 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRow.RejectChanges">
      <summary>拒绝自上次调用 <see cref="M:System.Data.DataRow.AcceptChanges" /> 以来进行的所有更改。</summary>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
    </member>
    <member name="M:System.Data.DataRow.SetAdded">
      <summary>将 <see cref="T:System.Data.DataRow" /> 的 <see cref="P:System.Data.DataRow.RowState" /> 更改为 <see langword="Added" />。</summary>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)">
      <summary>为指定为 <see cref="T:System.Data.DataColumn" /> 的列设置错误说明。</summary>
      <param name="column">为其设置错误说明的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="error">错误说明。</param>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)">
      <summary>为由索引指定的列设置错误说明。</summary>
      <param name="columnIndex">列的从零开始的索引。</param>
      <param name="error">错误说明。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数超出范围</exception>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.String,System.String)">
      <summary>为由名称指定的列设置错误说明。</summary>
      <param name="columnName">列的名称。</param>
      <param name="error">错误说明。</param>
    </member>
    <member name="M:System.Data.DataRow.SetModified">
      <summary>将 <see cref="T:System.Data.DataRow" /> 的 <see cref="P:System.Data.DataRow.RowState" /> 更改为 <see langword="Modified" />。</summary>
    </member>
    <member name="M:System.Data.DataRow.SetNull(System.Data.DataColumn)">
      <summary>将指定 <see cref="T:System.Data.DataColumn" /> 的值设置为 null 值。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow)">
      <summary>使用指定的新父 <see cref="T:System.Data.DataRow" /> 设置 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <param name="parentRow">新的父 <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)">
      <summary>使用指定的新父 <see cref="T:System.Data.DataRow" /> 和 <see cref="T:System.Data.DataRelation" /> 设置 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <param name="parentRow">新的父 <see cref="T:System.Data.DataRow" />。</param>
      <param name="relation">要使用的关系 <see cref="T:System.Data.DataRelation" />。</param>
      <exception cref="T:System.Data.RowNotInTableException">其中一行不属于表</exception>
      <exception cref="T:System.ArgumentNullException">其中一行为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">该关系不属于 <see cref="T:System.Data.DataSet" /> 对象的 <see cref="T:System.Data.DataRelationCollection" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">该关系的子级 <see cref="T:System.Data.DataTable" /> 不是此行所属的表。</exception>
    </member>
    <member name="P:System.Data.DataRow.HasErrors">
      <summary>获取一个值，该值指示某行是否包含错误。</summary>
      <returns>如果该行包含错误，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn)">
      <summary>获取或设置指定 <see cref="T:System.Data.DataColumn" /> 中存储的数据。</summary>
      <param name="column">一个包含数据的 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentException">该列不属于此表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 为 null。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值。</exception>
      <exception cref="T:System.InvalidCastException">值与列的数据类型不匹配。</exception>
      <returns>包该数据的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>获取指定 <see cref="T:System.Data.DataColumn" /> 中存储的数据的指定版本。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />，包含有关该列的信息。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，用于指定需要的行版本。 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <exception cref="T:System.ArgumentException">该列不属于此表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数包含 null。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有此版本的数据。</exception>
      <returns>包该数据的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32)">
      <summary>获取或设置由索引指定的列中存储的数据。</summary>
      <param name="columnIndex">列的从零开始的索引。</param>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值时发生。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数超出范围。</exception>
      <exception cref="T:System.InvalidCastException">设置值且新值的 <see cref="T:System.Type" /> 与 <see cref="P:System.Data.DataColumn.DataType" /> 不匹配时发生。</exception>
      <returns>包该数据的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)">
      <summary>获取由索引和要检索的数据版本指定的列中存储的数据。</summary>
      <param name="columnIndex">列的从零开始的索引。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，用于指定需要的行版本。 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数超出范围。</exception>
      <exception cref="T:System.InvalidCastException">值与列的数据类型不匹配。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有此版本的数据。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值。</exception>
      <returns>包该数据的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String)">
      <summary>获取或设置由名称指定的列中存储的数据。</summary>
      <param name="columnName">列的名称。</param>
      <exception cref="T:System.ArgumentException">找不到由 <paramref name="columnName" /> 指定的列。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值时发生。</exception>
      <exception cref="T:System.InvalidCastException">设置值且该值的 <see cref="T:System.Type" /> 与 <see cref="P:System.Data.DataColumn.DataType" /> 不匹配时发生。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">尝试在 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 设置为 <see langword="false" /> 的列中插入 null 值时发生。</exception>
      <returns>包该数据的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)">
      <summary>获取指定列中存储的数据的指定版本。</summary>
      <param name="columnName">列的名称。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，用于指定需要的行版本。 可能值为 <see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</param>
      <exception cref="T:System.ArgumentException">找不到由 <paramref name="columnName" /> 指定的列。</exception>
      <exception cref="T:System.InvalidCastException">值与列的数据类型不匹配。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有此版本的数据。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">该行已删除。</exception>
      <returns>包该数据的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.DataRow.ItemArray">
      <summary>通过数组获取或设置此行的所有值。</summary>
      <exception cref="T:System.ArgumentException">该数组大于表中的列数。</exception>
      <exception cref="T:System.InvalidCastException">数组中的值与其相应的 <see cref="T:System.Data.DataColumn" /> 中的 <see cref="P:System.Data.DataColumn.DataType" /> 不匹配。</exception>
      <exception cref="T:System.Data.ConstraintException">编辑操作破坏了约束。</exception>
      <exception cref="T:System.Data.ReadOnlyException">编辑操作尝试更改只读列的值。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">编辑操作尝试将 null 值放在 <see cref="T:System.Data.DataColumn" /> 对象的 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 <see langword="false" /> 的列中。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">已删除该行。</exception>
      <returns>
        <see cref="T:System.Object" /> 类型的数组。</returns>
    </member>
    <member name="P:System.Data.DataRow.RowError">
      <summary>获取或设置行的自定义错误说明。</summary>
      <returns>描述错误的文本。</returns>
    </member>
    <member name="P:System.Data.DataRow.RowState">
      <summary>获取与该行和 <see cref="T:System.Data.DataRowCollection" /> 的关系相关的当前状态。</summary>
      <returns>
        <see cref="T:System.Data.DataRowState" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.DataRow.Table">
      <summary>获取该行拥有其架构的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>该行所属的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="T:System.Data.DataRowAction">
      <summary>描述对 <see cref="T:System.Data.DataRow" /> 执行的操作。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Add">
      <summary>该行已添加到表中。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Change">
      <summary>此行已更改。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeCurrentAndOriginal">
      <summary>该行的原始版本和当前版本都已更改。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeOriginal">
      <summary>该行的原始版本已更改。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Commit">
      <summary>已提交了对此行的更改。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Delete">
      <summary>已从表中删除此行。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Nothing">
      <summary>此行尚未更改。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Rollback">
      <summary>对此行的最近更改已回滚。</summary>
    </member>
    <member name="T:System.Data.DataRowBuilder">
      <summary>
        <see langword="DataRowBuilder" /> 类型支持 .NET Framework 基础结构，并且不应直接从代码中使用。</summary>
    </member>
    <member name="T:System.Data.DataRowChangeEventArgs">
      <summary>为 <see cref="E:System.Data.DataTable.RowChanged" />、<see cref="E:System.Data.DataTable.RowChanging" />、<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" /> 和 <see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Data.DataRowChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataRowAction)">
      <summary>初始化 <see cref="T:System.Data.DataRowChangeEventArgs" /> 类的新实例。</summary>
      <param name="row">正针对其发生操作的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="action">
        <see cref="T:System.Data.DataRowAction" /> 值之一。</param>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Action">
      <summary>获取针对 <see cref="T:System.Data.DataRow" /> 进行的操作。</summary>
      <returns>
        <see cref="T:System.Data.DataRowAction" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Row">
      <summary>获取已针对其进行操作的行。</summary>
      <returns>已针对其发生操作的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.DataRowChangeEventHandler">
      <summary>表示将处理 <see cref="E:System.Data.DataTable.RowChanging" /> 的 <see cref="E:System.Data.DataTable.RowChanged" />、<see cref="E:System.Data.DataTable.RowDeleting" />、<see cref="E:System.Data.DataTable.RowDeleted" /> 和 <see cref="T:System.Data.DataTable" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataRowCollection">
      <summary>表示 <see cref="T:System.Data.DataTable" /> 的行的集合。</summary>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Data.DataRow)">
      <summary>将指定的 <see cref="T:System.Data.DataRow" /> 添加到 <see cref="T:System.Data.DataRowCollection" /> 对象中。</summary>
      <param name="row">要添加的 <see cref="T:System.Data.DataRow" />。</param>
      <exception cref="T:System.ArgumentNullException">该行为 null。</exception>
      <exception cref="T:System.ArgumentException">此行要么属于另一个表，要么已经属于此表。</exception>
      <exception cref="T:System.Data.ConstraintException">添加将使约束无效。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">添加尝试将 null 置于 <see cref="T:System.Data.DataColumn" /> 为 false 的 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 中。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Object[])">
      <summary>创建使用指定值的行，并将其添加到 <see cref="T:System.Data.DataRowCollection" /> 中。</summary>
      <param name="values">用于创建新行的值的数组。</param>
      <exception cref="T:System.ArgumentException">该数组大于表中的列数。</exception>
      <exception cref="T:System.InvalidCastException">值与其各自的列类型不匹配。</exception>
      <exception cref="T:System.Data.ConstraintException">添加行会使约束无效。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">尝试将空值放到 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false 的列中。</exception>
      <returns>无。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.Clear">
      <summary>清除所有行的集合。</summary>
      <exception cref="T:System.Data.InvalidConstraintException">针对 <see cref="T:System.Data.ForeignKeyConstraint" /> 实施 <see cref="T:System.Data.DataRowCollection" />。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object)">
      <summary>获取一个值，该值指示集合中任何行的主键中是否包含指定的值。</summary>
      <param name="key">要测试的主键的值。</param>
      <exception cref="T:System.Data.MissingPrimaryKeyException">该表没有主键。</exception>
      <returns>如果集合中包含具有指定主键值的 <see cref="T:System.Data.DataRow" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object[])">
      <summary>获取一个值，该值指示集合中任何行的主键列中是否包含在对象数组中指定的值。</summary>
      <param name="keys">要测试的主键值的数组。</param>
      <exception cref="T:System.Data.MissingPrimaryKeyException">该表没有主键。</exception>
      <returns>如果 <see cref="T:System.Data.DataRowCollection" /> 中包含具有指定键值的 <see cref="T:System.Data.DataRow" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)">
      <summary>将该集合中的所有 <see cref="T:System.Data.DataRow" /> 对象复制到起始位置为给定目标数组索引的给定数组中。</summary>
      <param name="ar">一维数组，它是从 <see langword="DataRowCollection" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">数组中开始复制的位置的索引（从零开始）。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)">
      <summary>将该集合中的所有 <see cref="T:System.Data.DataRow" /> 对象复制到起始位置为给定目标数组索引的给定数组中。</summary>
      <param name="array">一维数组，它是从 <see langword="DataRowCollection" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">数组中开始复制的位置的索引（从零开始）。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object)">
      <summary>获取由主键值指定的行。</summary>
      <param name="key">要查找的 <see cref="T:System.Data.DataRow" /> 的主键值。</param>
      <exception cref="T:System.Data.MissingPrimaryKeyException">该表没有主键。</exception>
      <returns>包含指定的主键值的 <see cref="T:System.Data.DataRow" />；否则为空值（如果 <see cref="T:System.Data.DataRowCollection" /> 中不存在主键值）。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object[])">
      <summary>获取包含指定的主键值的行。</summary>
      <param name="keys">要查找的主键值的数组。 数组的类型为 <see langword="Object" />。</param>
      <exception cref="T:System.IndexOutOfRangeException">任何行都不与该索引值相对应。</exception>
      <exception cref="T:System.Data.MissingPrimaryKeyException">该表没有主键。</exception>
      <returns>包含指定的主键值的 <see cref="T:System.Data.DataRow" /> 对象；如果 <see cref="T:System.Data.DataRowCollection" /> 中不存在主键值，则为 Null 值。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.GetEnumerator">
      <summary>获取该集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>该集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.IndexOf(System.Data.DataRow)">
      <summary>获取指定 <see cref="T:System.Data.DataRow" /> 对象的索引。</summary>
      <param name="row">要搜索的 <see langword="DataRow" />。</param>
      <returns>该行从零开始的索引；如果在集合中未找到该行，则为 -1。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)">
      <summary>将新行插入到集合中的指定位置。</summary>
      <param name="row">要添加的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="pos">您要添加该 <see langword="DataRow" /> 的集合的位置（位置从零开始）。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="pos" /> 小于 0。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Remove(System.Data.DataRow)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="row">要移除的 <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引处的行。</summary>
      <param name="index">要移除的行的索引。</param>
    </member>
    <member name="P:System.Data.DataRowCollection.Count">
      <summary>获取该集合中 <see cref="T:System.Data.DataRow" /> 对象的总数。</summary>
      <returns>该集合中的 <see cref="T:System.Data.DataRow" /> 对象的总数。</returns>
    </member>
    <member name="P:System.Data.DataRowCollection.Item(System.Int32)">
      <summary>获取指定索引处的行。</summary>
      <param name="index">要返回的行的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中的项目数。</exception>
      <returns>指定的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.DataRowComparer">
      <summary>返回 <see cref="T:System.Data.DataRowComparer`1" /> 类的单一实例。</summary>
    </member>
    <member name="P:System.Data.DataRowComparer.Default">
      <summary>获取 <see cref="T:System.Data.DataRowComparer`1" /> 的单一实例。 此属性是只读的。</summary>
      <returns>
        <see cref="T:System.Data.DataRowComparer`1" /> 的一个实例。</returns>
    </member>
    <member name="T:System.Data.DataRowComparer`1">
      <summary>通过使用基于值的比较来比较两个 <see cref="T:System.Data.DataRow" /> 对象是否等值。</summary>
      <typeparam name="TRow">要进行比较的对象的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
    </member>
    <member name="M:System.Data.DataRowComparer`1.Equals(`0,`0)">
      <summary>通过使用基于值的逐列比较来比较两个 <see cref="T:System.Data.DataRow" /> 对象。</summary>
      <param name="leftRow">要比较的第一个 <see cref="T:System.Data.DataRow" /> 对象。</param>
      <param name="rightRow">要比较的第二个 <see cref="T:System.Data.DataRow" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">两个源 <see cref="T:System.Data.DataRow" /> 对象之一或全部为 <see langword="null" />。</exception>
      <returns>如果两个 <see cref="T:System.Data.DataRow" /> 对象具有相等的列值有序集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRowComparer`1.GetHashCode(`0)">
      <summary>返回指定 <see cref="T:System.Data.DataRow" /> 对象的哈希代码。</summary>
      <param name="row">要从中计算哈希代码的 <see cref="T:System.Data.DataRow" />。</param>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Data.DataRow" /> 对象不属于 <see cref="T:System.Data.DataTable" />。</exception>
      <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Data.DataRow" /> 对象为 <see langword="null" />。</exception>
      <returns>表示该行的哈希代码的 <see cref="T:System.Int32" /> 值。</returns>
    </member>
    <member name="P:System.Data.DataRowComparer`1.Default">
      <summary>获取 <see cref="T:System.Data.DataRowComparer`1" /> 的单一实例。 此属性是只读的。</summary>
      <returns>
        <see cref="T:System.Data.DataRowComparer`1" /> 的一个实例。</returns>
    </member>
    <member name="T:System.Data.DataRowExtensions">
      <summary>定义 <see cref="T:System.Data.DataRow" /> 类的扩展方法。 这是一个静态类。</summary>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)">
      <summary>为指定行中的每个列值提供强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)" /> 方法还支持可以为 null 的类型。</summary>
      <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
      <param name="column">输入 <see cref="T:System.Data.DataColumn" /> 对象，该对象指定要返回其值的列。</param>
      <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
      <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="column" /> 指定的列不会出现在包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
      <exception cref="T:System.NullReferenceException">将“null”值赋给了不可为 null 的类型****。</exception>
      <returns>由 <paramref name="column" /> 指定的 <paramref name="T" /> 类型的 <see cref="T:System.Data.DataColumn" /> 值。</returns>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>为指定行中的每个列值提供强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)" /> 方法还支持可以为 null 的类型。</summary>
      <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
      <param name="column">输入 <see cref="T:System.Data.DataColumn" /> 对象，该对象指定要返回其值的列。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 枚举，指定要返回的列值版本，如 <see langword="Current" /> 或 <see langword="Original" /> 版本。</param>
      <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
      <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="column" /> 指定的列不存在于包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
      <exception cref="T:System.NullReferenceException">将“null”值赋给了不可为 null 的类型****。</exception>
      <returns>由 <paramref name="column" /> 和 <paramref name="version" /> 指定的 <paramref name="T" /> 类型的 <see cref="T:System.Data.DataColumn" /> 值。</returns>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)">
      <summary>为指定行中的每个列值提供强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)" /> 方法还支持可以为 null 的类型。</summary>
      <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
      <param name="columnIndex">列索引。</param>
      <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
      <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 指定的列不存在于包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
      <exception cref="T:System.NullReferenceException">将“null”值赋给了不可为 null 的类型****。</exception>
      <returns>由 <paramref name="columnIndex" /> 指定的 <paramref name="T" /> 类型的 <see cref="T:System.Data.DataColumn" /> 值。</returns>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
      <summary>为指定行中的每个列值提供强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)" /> 方法还支持可以为 null 的类型。</summary>
      <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
      <param name="columnIndex">要返回其值的列的从零开始的序号。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 枚举，指定要返回的列值版本，如 <see langword="Current" /> 或 <see langword="Original" /> 版本。</param>
      <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
      <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 指定的列不存在于包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
      <exception cref="T:System.NullReferenceException">将“null”值赋给了不可为 null 的类型****。</exception>
      <returns>由 <paramref name="ordinal" /> 和 <paramref name="version" /> 指定的 <paramref name="T" /> 类型的 <see cref="T:System.Data.DataColumn" /> 值。</returns>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)">
      <summary>为指定行中的每个列值提供强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)" /> 方法还支持可以为 null 的类型。</summary>
      <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
      <param name="columnName">要返回其值的列名称。</param>
      <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
      <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnName" /> 指定的列不会出现在包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
      <exception cref="T:System.NullReferenceException">将 <see langword="null" /> 值分配给不可为 null 的类型。</exception>
      <returns>由 <paramref name="columnName" /> 指定的 <paramref name="T" /> 类型的 <see cref="T:System.Data.DataColumn" /> 值。</returns>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
      <summary>为指定行中的每个列值提供强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)" /> 方法还支持可以为 null 的类型。</summary>
      <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
      <param name="columnName">要返回其值的列名称。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 枚举，指定要返回的列值版本，如 <see langword="Current" /> 或 <see langword="Original" /> 版本。</param>
      <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
      <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnName" /> 指定的列不存在于包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
      <exception cref="T:System.NullReferenceException">将“null”值赋给了不可为 null 的类型****。</exception>
      <returns>由 <paramref name="columnName" /> 和 <paramref name="version" /> 指定的 <paramref name="T" /> 类型的 <see cref="T:System.Data.DataColumn" /> 值。</returns>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)">
      <summary>为 <see cref="T:System.Data.DataRow" /> 中的指定列设置一个新值。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)" /> 方法还支持可以为 null 的类型。</summary>
      <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
      <param name="column">输入 <see cref="T:System.Data.DataColumn" /> 指定要检索的行值。</param>
      <param name="value">指定列的新行值，类型为 <paramref name="T" />。</param>
      <typeparam name="T">指定列的值类型的泛型形参。</typeparam>
      <exception cref="T:System.ArgumentException">找不到由 <paramref name="column" /> 指定的列。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 为“null”。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值时发生。</exception>
      <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)">
      <summary>为在其上调用此方法的 <see cref="T:System.Data.DataRow" /> 中的指定列设置一个新值。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)" /> 方法还支持可以为 null 的类型。</summary>
      <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
      <param name="columnIndex">要设置其值的列的从零开始的序号。</param>
      <param name="value">指定列的新行值，类型为 <paramref name="T" />。</param>
      <typeparam name="T">指定列的值类型的泛型形参。</typeparam>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值时发生。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 参数超出范围。</exception>
      <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)">
      <summary>为 <see cref="T:System.Data.DataRow" /> 中的指定列设置一个新值。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)" /> 方法还支持可以为 null 的类型。</summary>
      <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
      <param name="columnName">要设置其值的列的名称。</param>
      <param name="value">指定列的新行值，类型为 <paramref name="T" />。</param>
      <typeparam name="T">指定列的值类型的泛型形参。</typeparam>
      <exception cref="T:System.ArgumentException">找不到由 <paramref name="columnName" /> 指定的列。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值时发生。</exception>
      <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
    </member>
    <member name="T:System.Data.DataRowState">
      <summary>获取 <see cref="T:System.Data.DataRow" /> 对象的状态。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Added">
      <summary>该行已添加到 <see cref="T:System.Data.DataRowCollection" /> 中，<see cref="M:System.Data.DataRow.AcceptChanges" /> 尚未调用。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Deleted">
      <summary>该行已通过 <see cref="M:System.Data.DataRow.Delete" /> 的 <see cref="T:System.Data.DataRow" /> 方法被删除。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Detached">
      <summary>已创建该行，但它不是任何 <see cref="T:System.Data.DataRowCollection" /> 的一部分。 <see cref="T:System.Data.DataRow" /> 在以下情况下立即处于此状态：创建之后添加到集合中之前；或从集合中移除之后。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Modified">
      <summary>该行已被修改，<see cref="M:System.Data.DataRow.AcceptChanges" /> 尚未调用。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Unchanged">
      <summary>自上一次调用 <see cref="M:System.Data.DataRow.AcceptChanges" /> 之后，该行未更改。</summary>
    </member>
    <member name="T:System.Data.DataRowVersion">
      <summary>介绍 <see cref="T:System.Data.DataRow" /> 的版本。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Current">
      <summary>包含其当前值的行。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Default">
      <summary>
        <see cref="T:System.Data.DataRowState" /> 的默认版本。 对于 <see langword="Added" />、<see langword="Modified" /> 或 <see langword="Deleted" /> 的 <see langword="DataRowState" /> 值，默认的版本是 <see langword="Current" />。 对于 <see langword="Detached" /> 的 <see cref="T:System.Data.DataRowState" /> 值，版本是 <see langword="Proposed" />。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Original">
      <summary>包含其原始值的行。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Proposed">
      <summary>包含建议值的行。</summary>
    </member>
    <member name="T:System.Data.DataRowView">
      <summary>表示 <see cref="T:System.Data.DataRow" /> 的自定义视图。</summary>
    </member>
    <member name="E:System.Data.DataRowView.PropertyChanged">
      <summary>当 <see cref="T:System.Data.DataRowView" /> 属性发生更改时引发的事件。</summary>
    </member>
    <member name="M:System.Data.DataRowView.BeginEdit">
      <summary>开始编辑过程。</summary>
    </member>
    <member name="M:System.Data.DataRowView.CancelEdit">
      <summary>取消编辑过程。</summary>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation)">
      <summary>返回具有指定的子级 <see cref="T:System.Data.DataView" /> 的子级 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 对象。</param>
      <returns>子级 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation,System.Boolean)">
      <summary>返回具有指定的 <see cref="T:System.Data.DataRelation" /> 及父级的子级 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataView" />。</summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 对象。</param>
      <param name="followParent">父 对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relation" /> 为 <see langword="null" />。</exception>
      <returns>子级 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String)">
      <summary>返回具有指定的子级 <see cref="T:System.Data.DataView" /> 名称的子级 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relationName">一个包含 <see cref="T:System.Data.DataRelation" /> 名称的字符串。</param>
      <returns>子级 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String,System.Boolean)">
      <summary>返回具有指定的 <see cref="T:System.Data.DataView" /> 及父级的子级 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relationName">一个包含 <see cref="T:System.Data.DataRelation" /> 名称的字符串。</param>
      <param name="followParent">要使创建的子视图与父级视图保持同步，则为 <see langword="true" />；否则，则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relation" /> 为 <see langword="null" />。</exception>
      <returns>子级 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.Delete">
      <summary>删除行。</summary>
    </member>
    <member name="M:System.Data.DataRowView.EndEdit">
      <summary>提交基础 <see cref="T:System.Data.DataRow" /> 的更改并结束使用 <see cref="M:System.Data.DataRowView.BeginEdit" />启动的编辑会话。  使用 <see cref="M:System.Data.DataRowView.CancelEdit" /> 放弃对 <see cref="T:System.Data.DataRow" /> 所做的更改。</summary>
    </member>
    <member name="M:System.Data.DataRowView.Equals(System.Object)">
      <summary>获取一个值，该值指示当前的 <see cref="T:System.Data.DataRowView" /> 是否与指定对象相同。</summary>
      <param name="other">要比较的 <see cref="T:System.Object" />。</param>
      <returns>如果 <paramref name="object" /> 是 <see cref="T:System.Data.DataRowView" /> 且它返回与当前 <see cref="T:System.Data.DataRowView" /> 相同的行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.GetHashCode">
      <summary>返回 <see cref="T:System.Data.DataRow" /> 对象的哈希代码。</summary>
      <returns>如果此实例的值不为零，则为 32 位有符号整数哈希代码 1，它表示布尔值 <see langword="true" />；否则为整数 0，它表示布尔值 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>返回此组件实例的自定义属性的集合。</summary>
      <returns>包含此对象的 AttributeCollection 特性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>返回此组件实例的类名称。</summary>
      <returns>此组件实例的类名。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>返回某个组件的此实例的名称。</summary>
      <returns>此组件实例的名称。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>返回此组件实例的类型转换器。</summary>
      <returns>此组件实例的类型转换器。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>返回某个组件的此实例的默认事件。</summary>
      <returns>此组件实例的默认事件。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>返回此组件实例的默认属性。</summary>
      <returns>此组件实例的默认属性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>返回此组件实例的指定类型的编辑器。</summary>
      <param name="editorBaseType">表示该对象的编辑器的 <see cref="T:System.Type" />。</param>
      <returns>表示该对象编辑器的指定类型的 <see cref="T:System.Object" />；如果无法找到编辑器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>返回此组件实例的事件。</summary>
      <returns>此组件实例的事件。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>返回具有指定特性的此组件实例的事件。</summary>
      <param name="attributes">特性</param>
      <returns>此组件实例的事件。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>返回此组件实例的属性。</summary>
      <returns>此组件实例的属性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>返回具有指定特性的此组件实例的属性。</summary>
      <param name="attributes">属性。</param>
      <returns>此组件实例的属性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回一个对象，该对象包含指定的属性描述符所描述的属性。</summary>
      <param name="pd">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。</param>
      <returns>一个 <see cref="T:System.Object" />，表示指定属性的所有者。</returns>
    </member>
    <member name="P:System.Data.DataRowView.DataView">
      <summary>获取该行所属的 <see cref="T:System.Data.DataView" />。</summary>
      <returns>该行所属的 <see langword="DataView" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.IsEdit">
      <summary>指示行是否处于编辑模式。</summary>
      <returns>如果行处于编辑模式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.IsNew">
      <summary>指示 <see cref="T:System.Data.DataRowView" /> 是否为新。</summary>
      <returns>如果是新行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.Int32)">
      <summary>获取或设置指定列中的值。</summary>
      <param name="ndx">列索引。</param>
      <exception cref="T:System.Data.DataException">
        <see cref="P:System.Data.DataRowView.DataView" /> 不允许编辑，<see cref="T:System.Data.DataRowView" /> 不是新项。</exception>
      <exception cref="T:System.IndexOutOfRangeException">任何列都不与该索引值相对应。</exception>
      <returns>列的值。</returns>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.String)">
      <summary>获取或设置指定列中的值。</summary>
      <param name="property">包含指定列的字符串。</param>
      <exception cref="T:System.ArgumentException">找不到具有指定名称或关系的列。
        
- 或 -

<see cref="P:System.Data.DataRowView.DataView" /> 不允许编辑，<see cref="T:System.Data.DataRowView" /> 不是新项。</exception>
      <exception cref="T:System.Data.DataException">设置值时，<paramref name="property" /> 不匹配。</exception>
      <returns>列的值。</returns>
    </member>
    <member name="P:System.Data.DataRowView.Row">
      <summary>获取正被查看的 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>正被 <see cref="T:System.Data.DataRow" /> 查看的 <see cref="T:System.Data.DataRowView" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.RowVersion">
      <summary>获取 <see cref="T:System.Data.DataRow" /> 的当前版本说明。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 <see cref="P:System.Data.DataRowView.RowVersion" /> 属性的可能值有：<see langword="Default" />、<see langword="Original" />、<see langword="Current" /> 和 <see langword="Proposed" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Error">
      <summary>获取描述该对象的任何验证错误的消息。</summary>
      <returns>对象上的验证错误。</returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Item(System.String)">
      <summary>获取具有给定名称的属性的错误信息。</summary>
      <param name="colName">要获取其错误信息的属性的名称。</param>
      <returns>该属性的错误信息。 默认值为空字符串("")。</returns>
    </member>
    <member name="T:System.Data.DataSet">
      <summary>表示数据的内存中缓存。</summary>
    </member>
    <member name="E:System.Data.DataSet.Initialized">
      <summary>初始化 <see cref="T:System.Data.DataSet" /> 后发生。</summary>
    </member>
    <member name="E:System.Data.DataSet.MergeFailed">
      <summary>当目标和源 <see cref="T:System.Data.DataRow" /> 的主键值相同且 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 设置为真时发生。</summary>
    </member>
    <member name="M:System.Data.DataSet.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化具有给定序列化信息和上下文的 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象所需的数据。</param>
      <param name="context">给定序列化流的源和目标。</param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
      <param name="ConstructSchema">布尔值。</param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.String)">
      <summary>用给定名称初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
      <param name="dataSetName">
        <see cref="T:System.Data.DataSet" /> 的名称。</param>
    </member>
    <member name="M:System.Data.DataSet.AcceptChanges">
      <summary>提交自加载此 <see cref="T:System.Data.DataSet" /> 或上次调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来对其进行的所有更改。</summary>
    </member>
    <member name="M:System.Data.DataSet.BeginInit">
      <summary>开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" />。 初始化发生在运行时。</summary>
    </member>
    <member name="M:System.Data.DataSet.Clear">
      <summary>通过移除所有表中的所有行来清除任何数据的 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="M:System.Data.DataSet.Clone">
      <summary>复制 <see cref="T:System.Data.DataSet" /> 的结构，包括所有 <see cref="T:System.Data.DataTable" /> 架构、关系和约束。 不要复制任何数据。</summary>
      <returns>新 <see cref="T:System.Data.DataSet" />，其架构与当前 <see cref="T:System.Data.DataSet" /> 的架构相同，但是不包含任何数据。</returns>
    </member>
    <member name="M:System.Data.DataSet.Copy">
      <summary>复制该 <see cref="T:System.Data.DataSet" /> 的结构和数据。</summary>
      <returns>新的 <see cref="T:System.Data.DataSet" />，具有与该 <see cref="T:System.Data.DataSet" /> 相同的结构（表架构、关系和约束）和数据。  
  
 <block subset="none" type="note"><para>  
 如果已创建这些类的子类，则副本也将属于相同的子类。</para></block></returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader">
      <summary>为每个 <see cref="T:System.Data.DataTableReader" /> 返回带有一个结果集的 <see cref="T:System.Data.DataTable" />，顺序与 <see cref="P:System.Data.DataSet.Tables" /> 集合中表的显示顺序相同。</summary>
      <returns>包含一个或多个结果集的 <see cref="T:System.Data.DataTableReader" />，与源 <see cref="T:System.Data.DataTable" /> 中包含的 <see cref="T:System.Data.DataSet" /> 实例相对应。</returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])">
      <summary>为每个 <see cref="T:System.Data.DataTableReader" /> 返回带有一个结果集的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="dataTables">一个 DataTable 数组，它提供要在 <see cref="T:System.Data.DataTableReader" /> 中返回的结果集的顺序。</param>
      <returns>包含一个或多个结果集的 <see cref="T:System.Data.DataTableReader" />，与源 <see cref="T:System.Data.DataTable" /> 中包含的 <see cref="T:System.Data.DataSet" /> 实例相对应。 返回的结果集按 <paramref name="dataTables" /> 参数所指定的顺序排列。</returns>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>确定 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，在远程处理方案中进行反序列化期间将使用它调用 <see langword="DataSet" /> 的受保护构造函数 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，在远程处理方案中进行反序列化期间将使用它调用 <see langword="DataSet" /> 的受保护构造函数 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</param>
      <returns>一个 <see cref="T:System.Data.SchemaSerializationMode" /> 枚举，指示是否已从负载中忽略架构信息。</returns>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)">
      <summary>确定 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">在对 <see cref="T:System.Xml.XmlReader" /> 进行反序列化期间传递的 <see cref="T:System.Data.DataSet" /> 实例。</param>
      <returns>一个 <see cref="T:System.Data.SchemaSerializationMode" /> 枚举，指示是否已从负载中忽略架构信息。</returns>
    </member>
    <member name="M:System.Data.DataSet.EndInit">
      <summary>结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" /> 的初始化。 初始化发生在运行时。</summary>
    </member>
    <member name="M:System.Data.DataSet.GetChanges">
      <summary>获取 <see cref="T:System.Data.DataSet" /> 的副本，该副本包含自加载以来或自上次调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来对该数据集进行的所有更改。</summary>
      <returns>此 <see cref="T:System.Data.DataSet" /> 中更改的副本，可以对该副本执行操作，然后可以使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 将其合并回去。 如果未找到更改的行，则该方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)">
      <summary>获取由 <see cref="T:System.Data.DataRowState" /> 筛选的 <see cref="T:System.Data.DataSet" /> 的副本，该副本包含上次加载以来或调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来进行的所有更改。</summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 值之一。</param>
      <returns>此 <see cref="T:System.Data.DataSet" /> 的筛选副本，可以对该副本执行操作，然后使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 将其合并回数据集。 如果未找到所需 <see cref="T:System.Data.DataRowState" /> 的行，则该方法返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>获取数据集的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的副本。</summary>
      <param name="schemaSet">指定的架构集。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的副本。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化 <see cref="T:System.Data.DataSet" /> 时所需的数据填充序列化信息对象。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存与 <see cref="T:System.Data.DataSet" /> 关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与 <see cref="T:System.Data.DataSet" /> 关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.GetSchemaSerializable">
      <summary>返回一个可序列化的 <see cref="T:System.Xml.Schema.XmlSchema" /> 实例。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 实例。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从二进制或 XML 流反序列化表数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</param>
      <param name="context">流上下文。</param>
    </member>
    <member name="M:System.Data.DataSet.GetXml">
      <summary>返回存储在 <see cref="T:System.Data.DataSet" /> 中的数据的 XML 表示形式。</summary>
      <returns>表示存储在 <see cref="T:System.Data.DataSet" /> 中的数据的字符串。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetXmlSchema">
      <summary>返回存储在 <see cref="T:System.Data.DataSet" /> 中的数据的 XML 表示形式的 XML 架构。</summary>
      <returns>字符串，它是存储在 <see cref="T:System.Data.DataSet" /> 中的数据的 XML 表示形式的 XML 架构。</returns>
    </member>
    <member name="M:System.Data.DataSet.HasChanges">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.DataSet" /> 是否有更改，包括新增行、已删除的行或已修改的行。</summary>
      <returns>如果 <see cref="T:System.Data.DataSet" /> 有更改，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.DataSet" /> 是否有 <see cref="T:System.Data.DataRowState" /> 被筛选的更改，包括新增行、已删除的行或已修改的行。</summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 值之一。</param>
      <returns>如果 <see cref="T:System.Data.DataSet" /> 有更改，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])">
      <summary>将指定 <see cref="T:System.IO.Stream" /> 中的 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="stream">将从其中读取该架构的 <see langword="Stream" />。</param>
      <param name="nsArray">要从架构推理中排除的命名空间统一资源标识符 (URI) 字符串的数组。</param>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])">
      <summary>将指定 <see cref="T:System.IO.TextReader" /> 中的 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">将从其中读取该架构的 <see langword="TextReader" />。</param>
      <param name="nsArray">要从架构推理中排除的命名空间统一资源标识符 (URI) 字符串的数组。</param>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])">
      <summary>将指定文件中的 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="fileName">从中读取架构的文件的名称（包括路径）。</param>
      <param name="nsArray">要从架构推理中排除的命名空间统一资源标识符 (URI) 字符串的数组。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])">
      <summary>将指定 <see cref="T:System.Xml.XmlReader" /> 中的 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">将从其中读取该架构的 <see langword="XMLReader" />。</param>
      <param name="nsArray">要从架构推理中排除的命名空间统一资源标识符 (URI) 字符串的数组。</param>
    </member>
    <member name="M:System.Data.DataSet.InitializeDerivedDataSet">
      <summary>从二进制或 XML 流反序列化数据集的所有表数据。</summary>
    </member>
    <member name="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>检查 <see langword="DataSet" /> 的序列化表示形式的格式。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
      <returns>如果指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 表示以二进制格式序列化的 <see langword="true" />，则为 <see langword="DataSet" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])">
      <summary>使用提供的 <see cref="T:System.Data.DataSet" /> 以数据源的值填充 <see cref="T:System.Data.IDataReader" />，同时使用 <see cref="T:System.Data.DataTable" /> 实例的数组提供架构和命名空间信息。</summary>
      <param name="reader">提供一个或多个结果集的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">一个来自 <see cref="T:System.Data.LoadOption" /> 枚举的值，该值指示 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataSet" /> 实例内已有的行如何与共享同一主键的传入行进行组合。</param>
      <param name="tables">
        <see cref="T:System.Data.DataTable" /> 实例的数组，<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> 方法从该数组中检索名称和命名空间信息。 其中每个表都必须是此 <see cref="T:System.Data.DataTableCollection" /> 所包含的 <see cref="T:System.Data.DataSet" /> 的成员。</param>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])">
      <summary>使用提供的 <see cref="T:System.Data.DataSet" /> 以数据源的值填充 <see cref="T:System.Data.IDataReader" />，同时使用 <see cref="T:System.Data.DataTable" /> 实例的数组提供架构和命名空间信息。</summary>
      <param name="reader">提供一个或多个结果集的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">一个来自 <see cref="T:System.Data.LoadOption" /> 枚举的值，该值指示 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataSet" /> 实例内已有的行如何与共享同一主键的传入行进行组合。</param>
      <param name="errorHandler">加载数据时出现错误的情况下要调用的 <see cref="T:System.Data.FillErrorEventHandler" /> 委托。</param>
      <param name="tables">
        <see cref="T:System.Data.DataTable" /> 实例的数组，<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> 方法从该数组中检索名称和命名空间信息。</param>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])">
      <summary>使用所提供的 <see cref="T:System.Data.DataSet" />，并使用字符串数组为 <see langword="DataSet" /> 中的表提供名称，从而用来自数据源的值填充 <see cref="T:System.Data.IDataReader" />。</summary>
      <param name="reader">提供一个或多个结果集的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">一个来自 <see cref="T:System.Data.LoadOption" /> 枚举的值，该值指示 <see cref="T:System.Data.DataTable" /> 中的 <see langword="DataSet" /> 实例内已有的行如何与共享同一主键的传入行进行组合。</param>
      <param name="tables">字符串数组，<see langword="Load" /> 方法将从该数组中检索表名称信息。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[])">
      <summary>将 <see cref="T:System.Data.DataRow" /> 对象数组合并到当前的 <see cref="T:System.Data.DataSet" /> 中。</summary>
      <param name="rows">要合并到 <see langword="DataRow" /> 中的 <see langword="DataSet" /> 对象数组。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)">
      <summary>将 <see cref="T:System.Data.DataRow" /> 对象数组合并到当前的 <see cref="T:System.Data.DataSet" /> 中，在此过程中，将根据给定的参数保留或放弃在 <see langword="DataSet" /> 中进行的更改并处理不兼容的架构。</summary>
      <param name="rows">要合并到 <see cref="T:System.Data.DataRow" /> 中的 <see langword="DataSet" /> 对象数组。</param>
      <param name="preserveChanges">要保留 <see langword="DataSet" /> 中的更改，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet)">
      <summary>将指定的 <see cref="T:System.Data.DataSet" /> 及其架构合并到当前 <see langword="DataSet" /> 中。</summary>
      <param name="dataSet">其数据和架构将被合并的 <see langword="DataSet" />。</param>
      <exception cref="T:System.Data.ConstraintException">无法启用一个或多个约束。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)">
      <summary>将指定的 <see cref="T:System.Data.DataSet" /> 及其架构合并到当前 <see langword="DataSet" /> 中，在此过程中，将根据给定的参数保留或放弃在此 <see langword="DataSet" /> 中进行的任何更改。</summary>
      <param name="dataSet">其数据和架构将被合并的 <see langword="DataSet" />。</param>
      <param name="preserveChanges">要保留当前 <see langword="DataSet" /> 中的更改，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>将指定的 <see cref="T:System.Data.DataSet" /> 及其架构与当前的 <see langword="DataSet" /> 合并，在此过程中，将根据给定的参数保留或放弃在当前 <see langword="DataSet" /> 中的更改并处理不兼容的架构。</summary>
      <param name="dataSet">其数据和架构将被合并的 <see langword="DataSet" />。</param>
      <param name="preserveChanges">要保留当前 <see langword="DataSet" /> 中的更改，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable)">
      <summary>将指定的 <see cref="T:System.Data.DataTable" /> 及其架构合并到当前 <see cref="T:System.Data.DataSet" /> 中。</summary>
      <param name="table">其数据和架构将被合并的 <see cref="T:System.Data.DataTable" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>将指定的 <see cref="T:System.Data.DataTable" /> 及其架构合并到当前的 <see langword="DataSet" /> 中，在此过程中，将根据给定的参数保留或放弃在 <see langword="DataSet" /> 中进行的更改并处理不兼容的架构。</summary>
      <param name="table">其数据和架构将被合并的 <see langword="DataTable" />。</param>
      <param name="preserveChanges">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <param name="missingSchemaAction">要保留 <see langword="DataSet" /> 中的更改，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引发 <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 事件。</summary>
      <param name="pcevent">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)">
      <summary>当从 <see cref="T:System.Data.DataRelation" /> 中移除 <see cref="T:System.Data.DataTable" /> 对象时发生。</summary>
      <param name="relation">正在移除的 <see cref="T:System.Data.DataRelation" />。</param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)">
      <summary>当从 <see cref="T:System.Data.DataTable" /> 中移除 <see cref="T:System.Data.DataSet" /> 时发生。</summary>
      <param name="table">正在移除的 <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="M:System.Data.DataSet.RaisePropertyChanging(System.String)">
      <summary>发送指定的 <see cref="T:System.Data.DataSet" /> 属性将要更改的通知。</summary>
      <param name="name">将要更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="stream">从 <see cref="T:System.IO.Stream" /> 派生的对象。</param>
      <returns>用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.IO.Stream" /> 将 XML 架构和数据读入 <see cref="T:System.Data.XmlReadMode" />。</summary>
      <param name="stream">从中读取的 <see cref="T:System.IO.Stream" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。</param>
      <returns>用于读取数据的 <see langword="XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader)">
      <summary>使用指定的 <see cref="T:System.IO.TextReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">从中读取架构和数据的 <see langword="TextReader" />。</param>
      <returns>用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.IO.TextReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.XmlReadMode" />。</summary>
      <param name="reader">从中读取的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。</param>
      <returns>用于读取数据的 <see langword="XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String)">
      <summary>使用指定的文件将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="fileName">作为读取源的文件名（包括路径）。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
      <returns>用于读取数据的 <see langword="XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)">
      <summary>使用指定的文件和 <see cref="T:System.Data.DataSet" /> 将 XML 架构和数据读入 <see cref="T:System.Data.XmlReadMode" />。</summary>
      <param name="fileName">作为读取源的文件名（包括路径）。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
      <returns>用于读取数据的 <see langword="XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">从中读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>用于读取数据的 <see langword="XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Xml.XmlReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.XmlReadMode" />。</summary>
      <param name="reader">从中读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。</param>
      <returns>用于读取数据的 <see langword="XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)">
      <summary>从指定的 <see cref="T:System.IO.Stream" /> 中将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="stream">从中读取的 <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)">
      <summary>从指定的 <see cref="T:System.IO.TextReader" /> 中将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">从中读取的 <see cref="T:System.IO.TextReader" />。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.String)">
      <summary>从指定的文件中将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="fileName">从中读取的文件的名称（包括路径）。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 中将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">从中读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>忽略特性并返回一个空的数据集。</summary>
      <param name="reader">指定的 XML 读取器。</param>
    </member>
    <member name="M:System.Data.DataSet.RejectChanges">
      <summary>回滚自创建 <see cref="T:System.Data.DataSet" /> 以来或上次调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来对其进行的所有更改。</summary>
    </member>
    <member name="M:System.Data.DataSet.Reset">
      <summary>清除所有表并从 <see cref="T:System.Data.DataSet" /> 中删除所有关系、外部约束和表。 子类应重写 <see cref="M:System.Data.DataSet.Reset" />，以便将 <see cref="T:System.Data.DataSet" /> 还原到其原始状态。</summary>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeRelations">
      <summary>获取一个值，该值指示是否应该保持 <see cref="P:System.Data.DataSet.Relations" /> 属性。</summary>
      <returns>如果已将属性值更改为其默认值之外的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeTables">
      <summary>获取一个值，该值指示是否应该保持 <see cref="P:System.Data.DataSet.Tables" /> 属性。</summary>
      <returns>如果已将属性值更改为其默认值之外的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IListSource.GetList" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IListSource.GetList" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" /> 为 <see cref="T:System.IO.Stream" /> 写当前数据。</summary>
      <param name="stream">用于写入文件的 <see cref="T:System.IO.Stream" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataSet" /> 的当前数据和架构（可选）。 若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。</summary>
      <param name="stream">用于写入文件的 <see cref="T:System.IO.Stream" /> 对象。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" /> 为 <see cref="T:System.IO.TextWriter" /> 写当前数据。</summary>
      <param name="writer">要进行写入的 <see cref="T:System.IO.TextWriter" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataSet" /> 的当前数据和架构（可选）。 若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 对象用于写文档。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String)">
      <summary>将 <see cref="T:System.Data.DataSet" /> 的当前数据写入指定的文件。</summary>
      <param name="fileName">要向其写入的文件的名称（包括路径）。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Data.XmlWriteMode" /> 将 <see cref="T:System.Data.DataSet" /> 的当前数据和架构（可选）写入指定的文件。 若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。</summary>
      <param name="fileName">要向其写入的文件的名称（包括路径）。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)">
      <summary>将 <see cref="T:System.Data.DataSet" /> 的当前数据写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">用于写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataSet" /> 的当前数据和架构（可选）。 若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。</summary>
      <param name="writer">用于写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)">
      <summary>将 <see cref="T:System.Data.DataSet" /> 结构作为 XML 架构写入指定的 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <param name="stream">用于写入文件的 <see cref="T:System.IO.Stream" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})">
      <summary>将 <see cref="T:System.Data.DataSet" /> 结构作为 XML 架构写入指定的 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <param name="stream">要写入到的 <see cref="T:System.IO.Stream" /> 对象。</param>
      <param name="multipleTargetConverter">用于将 <see cref="T:System.Type" /> 转换为字符串的委托。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)">
      <summary>将 <see cref="T:System.Data.DataSet" /> 结构作为 XML 架构写入指定的 <see cref="T:System.IO.TextWriter" /> 对象。</summary>
      <param name="writer">要进行写入的 <see cref="T:System.IO.TextWriter" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})">
      <summary>将 <see cref="T:System.Data.DataSet" /> 结构作为一个 XML 架构写入指定的 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">要写入到的 <see cref="T:System.IO.TextWriter" /> 对象。</param>
      <param name="multipleTargetConverter">用于将 <see cref="T:System.Type" /> 转换为字符串的委托。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String)">
      <summary>将 XML 架构形式的 <see cref="T:System.Data.DataSet" /> 结构写入文件。</summary>
      <param name="fileName">要向其写入的文件的名称（包括路径）。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})">
      <summary>将 XML 架构形式的 <see cref="T:System.Data.DataSet" /> 结构写入文件。</summary>
      <param name="fileName">要写入的文件的名称。</param>
      <param name="multipleTargetConverter">用于将 <see cref="T:System.Type" /> 转换为字符串的委托。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>将 XML 架构形式的 <see cref="T:System.Data.DataSet" /> 结构写入 <see cref="T:System.Xml.XmlWriter" /> 对象。</summary>
      <param name="writer">要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})">
      <summary>将 <see cref="T:System.Data.DataSet" /> 结构作为一个 XML 架构写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入到的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="multipleTargetConverter">用于将 <see cref="T:System.Type" /> 转换为字符串的委托。</param>
    </member>
    <member name="P:System.Data.DataSet.CaseSensitive">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Data.DataTable" /> 对象中的字符串比较是否区分大小写。</summary>
      <returns>
        <see langword="true" /> 如果字符串比较区分大小写，则为; 否则为。否则为 <see langword="false" /> 。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.DataSetName">
      <summary>获取或设置当前 <see cref="T:System.Data.DataSet" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 的名称。</returns>
    </member>
    <member name="P:System.Data.DataSet.DefaultViewManager">
      <summary>获取 <see cref="T:System.Data.DataSet" /> 所包含的数据的自定义视图，以允许使用自定义的 <see cref="T:System.Data.DataViewManager" /> 进行筛选、搜索和导航。</summary>
      <returns>
        <see cref="T:System.Data.DataViewManager" /> 对象。</returns>
    </member>
    <member name="P:System.Data.DataSet.EnforceConstraints">
      <summary>获取或设置一个值，该值指示在尝试执行任何更新操作时是否遵循约束规则。</summary>
      <exception cref="T:System.Data.ConstraintException">无法实施一个或多个约束。</exception>
      <returns>
        <see langword="true" /> 如果强制执行规则，则为;否则为 <see langword="false" /> 。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.ExtendedProperties">
      <summary>获取与 <see langword="DataSet" /> 相关的自定义用户信息的集合。</summary>
      <returns>包含所有自定义用户信息的 <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.HasErrors">
      <summary>获取一个值，指示在此 <see cref="T:System.Data.DataTable" /> 中的任何 <see cref="T:System.Data.DataSet" /> 对象中是否存在错误。</summary>
      <returns>
        <see langword="true" /> 如果任何表包含错误，则为;否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Data.DataSet.IsInitialized">
      <summary>获取一个值，该值指示是否已初始化 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>如果为 <see langword="true" />，说明组件已完成初始化；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.Locale">
      <summary>获取或设置用于比较表中字符串的区域设置信息。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，它包含有关用户计算机区域设置的数据。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.Namespace">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 的命名空间。</summary>
      <exception cref="T:System.ArgumentException">该命名空间已有数据。</exception>
      <returns>
        <see cref="T:System.Data.DataSet" /> 的命名空间。</returns>
    </member>
    <member name="P:System.Data.DataSet.Prefix">
      <summary>获取或设置一个 XML 前缀，该前缀是 <see cref="T:System.Data.DataSet" /> 的命名空间的别名。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 命名空间的 XML 前缀。</returns>
    </member>
    <member name="P:System.Data.DataSet.Relations">
      <summary>获取用于将表链接起来并允许从父表浏览到子表的关系的集合。</summary>
      <returns>一个包含 <see cref="T:System.Data.DataRelationCollection" /> 对象集合的 <see cref="T:System.Data.DataRelation" />。 如果 <see cref="T:System.Data.DataRelation" /> 对象不存在，将返回空集合。</returns>
    </member>
    <member name="P:System.Data.DataSet.RemotingFormat">
      <summary>为远程处理期间使用的 <see cref="T:System.Data.SerializationFormat" /> 获取或设置 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>
        <see cref="T:System.Data.SerializationFormat" /> 对象。</returns>
    </member>
    <member name="P:System.Data.DataSet.SchemaSerializationMode">
      <summary>获取或设置 <see cref="T:System.Data.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>
        <see cref="T:System.Data.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.Site">
      <summary>获取或设置 <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> 的一个 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.Tables">
      <summary>获取包含在 <see cref="T:System.Data.DataSet" /> 中的表的集合。</summary>
      <returns>此 <see cref="T:System.Data.DataTableCollection" /> 包含的 <see cref="T:System.Data.DataSet" />。 如果 <see cref="T:System.Data.DataTable" /> 对象不存在，将返回空集合。</returns>
    </member>
    <member name="T:System.Data.DataSetDateTime">
      <summary>介绍 <see cref="T:System.DateTime" /> 中 <see cref="T:System.Data.DataSet" /> 列的序列化格式。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Local">
      <summary>
        <see langword="DateTime" /> 始终存储为 Local 格式。 如果将 <see cref="F:System.Data.DataSetDateTime.Utc" /> 或 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 分配给此模式的列，则首先要将其转换为 Local 格式。 通常以 Local 格式在此模式中执行序列化。 在序列化期间将产生偏移量。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Unspecified">
      <summary>
        <see langword="DateTime" /> 始终存储为 Unspecified 格式。 如果将 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Utc" /> 分配给此模式的列，则首先要将其转换为 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 格式。 在此模式中的序列化不会产生偏移量。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.UnspecifiedLocal">
      <summary>
        <see langword="DateTime" /> 存储为 Unspecified 格式。 如果将 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Utc" /> 分配给此模式的列，则首先要将其转换为 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 格式。 在此模式中的序列化将产生偏移量。 此为默认行为，可向后兼容。 应将此选项在存储区中视为 Unspecified 格式，而在序列化期间应用类似于 <see cref="F:System.Data.DataSetDateTime.Local" /> 的偏移量。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Utc">
      <summary>
        <see langword="DateTime" /> 存储为协调通用时间 (UTC) 格式。 如果将 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 分配给此模式的列，则首先要将其转换为 <see langword="Utc" /> 格式。 通常以 <see langword="Utc" /> 格式在此模式中执行序列化。 序列化时不会产生偏移量。</summary>
    </member>
    <member name="T:System.Data.DataSysDescriptionAttribute">
      <summary>用说明来标记属性、事件或扩展程序。 可视化设计器在引用成员时可显示该说明。</summary>
    </member>
    <member name="M:System.Data.DataSysDescriptionAttribute.#ctor(System.String)">
      <summary>使用指定的说明字符串初始化 <see cref="T:System.Data.DataSysDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">说明字符串。</param>
    </member>
    <member name="P:System.Data.DataSysDescriptionAttribute.Description">
      <summary>获取说明的文本。</summary>
      <returns>说明字符串。</returns>
    </member>
    <member name="T:System.Data.DataTable">
      <summary>表示内存中数据的一个表。</summary>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanged">
      <summary>更改 <see cref="T:System.Data.DataRow" /> 中指定的 <see cref="T:System.Data.DataColumn" /> 值之后发生。</summary>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanging">
      <summary>更改 <see cref="T:System.Data.DataRow" /> 中指定的 <see cref="T:System.Data.DataColumn" /> 值时发生。</summary>
    </member>
    <member name="E:System.Data.DataTable.Initialized">
      <summary>初始化 <see cref="T:System.Data.DataTable" /> 后发生。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowChanged">
      <summary>在成功更改 <see cref="T:System.Data.DataRow" /> 后发生。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowChanging">
      <summary>在更改 <see cref="T:System.Data.DataRow" /> 时发生。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowDeleted">
      <summary>删除表中的行后发生。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowDeleting">
      <summary>要删除表中的行之前发生。</summary>
    </member>
    <member name="E:System.Data.DataTable.TableCleared">
      <summary>清除 <see cref="T:System.Data.DataTable" /> 后发生。</summary>
    </member>
    <member name="E:System.Data.DataTable.TableClearing">
      <summary>清除 <see cref="T:System.Data.DataTable" /> 时发生。</summary>
    </member>
    <member name="E:System.Data.DataTable.TableNewRow">
      <summary>插入新的 <see cref="T:System.Data.DataRow" /> 时发生。</summary>
    </member>
    <member name="F:System.Data.DataTable.fInitInProgress">
      <summary>检查是否正在进行初始化。 初始化发生在运行时。</summary>
    </member>
    <member name="M:System.Data.DataTable.#ctor">
      <summary>在不使用参数的情况下初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象所需的数据。</param>
      <param name="context">给定序列化流的源和目标。</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String)">
      <summary>使用指定的表名初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
      <param name="tableName">要向表提供的名称。 如果 <paramref name="tableName" /> 为 <see langword="null" /> 或是空字符串，则在添加到 <see cref="T:System.Data.DataTableCollection" /> 中时指定默认名称。</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String,System.String)">
      <summary>使用指定的表名和命名空间初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
      <param name="tableName">要向表提供的名称。 如果 <paramref name="tableName" /> 为 <see langword="null" /> 或是空字符串，则在添加到 <see cref="T:System.Data.DataTableCollection" /> 中时指定默认名称。</param>
      <param name="tableNamespace">
        <see langword="DataTable" /> 中所存储数据的 XML 表示形式的命名空间。</param>
    </member>
    <member name="M:System.Data.DataTable.AcceptChanges">
      <summary>提交自上次调用 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以来对该表进行的所有更改。</summary>
    </member>
    <member name="M:System.Data.DataTable.BeginInit">
      <summary>开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataTable" />。 初始化发生在运行时。</summary>
    </member>
    <member name="M:System.Data.DataTable.BeginLoadData">
      <summary>加载数据时，关闭通知、索引维护和约束。</summary>
    </member>
    <member name="M:System.Data.DataTable.Clear">
      <summary>清除所有数据的 <see cref="T:System.Data.DataTable" />。</summary>
    </member>
    <member name="M:System.Data.DataTable.Clone">
      <summary>克隆 <see cref="T:System.Data.DataTable" /> 的结构，包括所有 <see cref="T:System.Data.DataTable" /> 架构和约束。</summary>
      <returns>新的 <see cref="T:System.Data.DataTable" />，与当前 <see cref="T:System.Data.DataTable" /> 具有相同架构。</returns>
    </member>
    <member name="M:System.Data.DataTable.Compute(System.String,System.String)">
      <summary>计算用来传递筛选条件的当前行上的给定表达式。</summary>
      <param name="expression">要计算的表达式。</param>
      <param name="filter">用于限制表达式中计算的行的筛选器。</param>
      <returns>将 <see cref="T:System.Object" /> 设置为计算结果。 如果该表达式计算结果为 null，则返回值为 <see cref="F:System.DBNull.Value" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.Copy">
      <summary>复制该 <see cref="T:System.Data.DataTable" /> 的结构和数据。</summary>
      <returns>新的 <see cref="T:System.Data.DataTable" />，具有与该 <see cref="T:System.Data.DataTable" /> 相同的结构（表架构和约束）和数据。  
  
如果已派生这些类，则副本也是相同的派生类。  
  
 <see cref="M:System.Data.DataTable.Copy" /> 创建一个新 <see cref="T:System.Data.DataTable" />，后者与原始 <see cref="T:System.Data.DataTable" /> 具有相同的结构和数据。 要将结构复制到新的 <see cref="T:System.Data.DataTable" />，而不是复制到数据，请使用 <see cref="M:System.Data.DataTable.Clone" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.CreateDataReader">
      <summary>返回与此 <see cref="T:System.Data.DataTable" /> 内的数据对应的 <see cref="T:System.Data.DataTableReader" />。</summary>
      <returns>
        <see cref="T:System.Data.DataTableReader" /> 包含一个对应于源 <see cref="T:System.Data.DataTable" /> 实例的结果集。</returns>
    </member>
    <member name="M:System.Data.DataTable.CreateInstance">
      <summary>创建 <see cref="T:System.Data.DataTable" /> 的新实例。</summary>
      <returns>新表达式。</returns>
    </member>
    <member name="M:System.Data.DataTable.EndInit">
      <summary>结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataTable" /> 的初始化。 初始化发生在运行时。</summary>
    </member>
    <member name="M:System.Data.DataTable.EndLoadData">
      <summary>加载数据后，打开通知、索引维护和约束。</summary>
    </member>
    <member name="M:System.Data.DataTable.GetChanges">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 的副本，该副本包含自加载以来或自上次调用 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以来进行的所有更改。</summary>
      <returns>此 <see cref="T:System.Data.DataTable" /> 中的更改的副本，如果未发现更改，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
      <summary>获取由 <see cref="T:System.Data.DataRowState" /> 筛选的 <see cref="T:System.Data.DataTable" /> 的副本，该副本包含上次加载以来或调用 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以来进行的所有更改。</summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 值之一。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的筛选副本，可以对该副本执行操作，之后可以使用 <see cref="T:System.Data.DataTable" /> 将其合并回 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />。 如果未找到所需 <see cref="T:System.Data.DataRowState" /> 的行，则该方法返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>该方法返回一个包含 Web Services 描述语言 (WSDL) 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 实例，该语言描述了用于 Web 服务的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 实例。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 实例。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetErrors">
      <summary>获取包含错误的 <see cref="T:System.Data.DataRow" /> 对象数组。</summary>
      <returns>包含错误的 <see cref="T:System.Data.DataRow" /> 对象数组。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化 <see cref="T:System.Data.DataTable" /> 时所需的数据填充序列化信息对象。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含与 <see cref="T:System.Data.DataTable" /> 关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，包含与 <see cref="T:System.Data.DataTable" /> 关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
    </member>
    <member name="M:System.Data.DataTable.GetRowType">
      <summary>获取行类型。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 的类型。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetSchema">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>由 <see cref="T:System.Xml.Schema.XmlSchema" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法使用的对象的 XML 表示形式的 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
      <summary>将 <see cref="T:System.Data.DataRow" /> 复制到 <see cref="T:System.Data.DataTable" /> 中，保留任何属性设置以及初始值和当前值。</summary>
      <param name="row">要导入的 <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader)">
      <summary>通过所提供的 <see cref="T:System.Data.IDataReader" />，用某个数据源的值填充 <see cref="T:System.Data.DataTable" />。 如果 <see cref="T:System.Data.DataTable" /> 已经包含行，则从数据源传入的数据与现有行合并。</summary>
      <param name="reader">提供结果集的 <see cref="T:System.Data.IDataReader" />。</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
      <summary>通过所提供的 <see cref="T:System.Data.IDataReader" />，用某个数据源的值填充 <see cref="T:System.Data.DataTable" />。 如果 <see langword="DataTable" /> 已包含行，则从数据源传入的数据根据 <paramref name="loadOption" /> 参数的值与现有行合并。</summary>
      <param name="reader">提供一个或多个结果集的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 枚举的值，指示 <see cref="T:System.Data.DataTable" /> 中已有的行如何与共享相同主键的传入行合并。</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>通过所提供的使用错误处理委托的 <see cref="T:System.Data.IDataReader" />，用某个数据源中的值填充 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="reader">提供结果集的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 枚举的值，指示 <see cref="T:System.Data.DataTable" /> 中已有的行如何与共享相同主键的传入行合并。</param>
      <param name="errorHandler">加载数据时出现错误的情况下要调用的 <see cref="T:System.Data.FillErrorEventHandler" /> 委托。</param>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
      <summary>查找和更新特定行。 如果找不到任何匹配行，则使用给定值创建新行。</summary>
      <param name="values">用于创建新行的值数组。</param>
      <param name="fAcceptChanges">如果接受更改，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">该数组大于表中的列数。</exception>
      <exception cref="T:System.InvalidCastException">值与其各自的列类型不匹配。</exception>
      <exception cref="T:System.Data.ConstraintException">添加行会使约束无效。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">尝试将 null 值放到 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false 的列中。</exception>
      <returns>新的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
      <summary>查找和更新特定行。 如果找不到任何匹配行，则使用给定值创建新行。</summary>
      <param name="values">用于创建新行的值数组。</param>
      <param name="loadOption">用于确定数组值如何应用于现有行中的对应值。</param>
      <returns>新的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable)">
      <summary>将指定的 <see cref="T:System.Data.DataTable" /> 与当前 <see cref="T:System.Data.DataTable" /> 合并。</summary>
      <param name="table">要与当前 <see cref="T:System.Data.DataTable" /> 合并的 <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
      <summary>将指定的 <see cref="T:System.Data.DataTable" /> 与当前 <see langword="DataTable" /> 合并，指示是否保留当前 <see langword="DataTable" /> 中的更改。</summary>
      <param name="table">要与当前 <see langword="DataTable" /> 合并的 <see langword="DataTable" />。</param>
      <param name="preserveChanges">如果保留当前 <see langword="DataTable" /> 中的更改，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>将指定的 <see cref="T:System.Data.DataTable" /> 与当前 <see langword="DataTable" /> 合并，指示是否保留更改以及如何处理当前 <see langword="DataTable" /> 中缺失的架构。</summary>
      <param name="table">要与当前 <see cref="T:System.Data.DataTable" /> 合并的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="preserveChanges">如果保留当前 <see cref="T:System.Data.DataTable" /> 中的更改，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataTable.NewRow">
      <summary>创建与该表具有相同架构的新 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>与 <see cref="T:System.Data.DataTable" /> 具有相同架构的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.NewRowArray(System.Int32)">
      <summary>返回 <see cref="T:System.Data.DataRow" /> 的数组。</summary>
      <param name="size">描述数组大小的 <see cref="T:System.Int32" /> 值。</param>
      <returns>新数组。</returns>
    </member>
    <member name="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
      <summary>从现有行创建新行。</summary>
      <param name="builder">
        <see cref="T:System.Data.DataRowBuilder" /> 对象。</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 派生类。</returns>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.ColumnChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</summary>
      <param name="pcevent">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)">
      <summary>通知 <see cref="T:System.Data.DataTable" /> 正在移除 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="column">正在移除的 <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.RowChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.RowDeleted" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.RowDeleting" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.TableCleared" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.TableClearing" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.TableNewRow" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableNewRowEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="stream">从 <see cref="T:System.IO.Stream" /> 派生的对象</param>
      <returns>用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
      <summary>使用指定的 <see cref="T:System.IO.TextReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="reader">将用于读取数据的 <see cref="T:System.IO.TextReader" />。</param>
      <returns>用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.String)">
      <summary>从指定的文件将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="fileName">从中读取数据的文件的名称。</param>
      <returns>用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="reader">将用于读取数据的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
      <summary>使用指定的流将 XML 架构读入 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="stream">用于读取架构的流。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
      <summary>使用指定的 <see cref="T:System.IO.TextReader" /> 将 XML 架构读入 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="reader">用于读取架构信息的 <see cref="T:System.IO.TextReader" />。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.String)">
      <summary>从指定的文件将 XML 架构读入 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="fileName">从中读取架构信息的文件的名称。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 将 XML 架构读入 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="reader">用于读取架构信息的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>从 XML 流中读取。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataTable.RejectChanges">
      <summary>回滚自该表加载以来或上次调用 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以来对该表进行的所有更改。</summary>
    </member>
    <member name="M:System.Data.DataTable.Reset">
      <summary>将 <see cref="T:System.Data.DataTable" /> 重置为其初始状态。 重置将移除表的所有数据、索引、关系和列。 如果数据集包含一个数据表，则在重置该表之后，它将仍是数据集的一部分。</summary>
    </member>
    <member name="M:System.Data.DataTable.Select">
      <summary>获取由所有 <see cref="T:System.Data.DataRow" /> 对象组成的数组。</summary>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String)">
      <summary>获取由与筛选条件匹配的所有 <see cref="T:System.Data.DataRow" /> 对象组成的数组。</summary>
      <param name="filterExpression">用于筛选行的条件。 有关如何筛选行的示例，请参阅 DataView RowFilter 语法 [C#]。</param>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String)">
      <summary>以指定排序顺序，获取由与筛选条件匹配的所有 <see cref="T:System.Data.DataRow" /> 对象组成的数组。</summary>
      <param name="filterExpression">用于筛选行的条件。 有关如何筛选行的示例，请参阅 DataView RowFilter 语法 [C#]。</param>
      <param name="sort">指定列和排序方向的字符串。</param>
      <returns>由与筛选条件匹配的 <see cref="T:System.Data.DataRow" /> 对象组成的数组。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
      <summary>以与指定状态匹配的排序顺序，获取由与筛选条件匹配的所有 <see cref="T:System.Data.DataRow" /> 对象组成的数组。</summary>
      <param name="filterExpression">用于筛选行的条件。 有关如何筛选行的示例，请参阅 DataView RowFilter 语法 [C#]。</param>
      <param name="sort">指定列和排序方向的字符串。</param>
      <param name="recordStates">
        <see cref="T:System.Data.DataViewRowState" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IListSource.GetList" />。</summary>
      <returns>对象中可以绑定到数据源的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>由 <see cref="T:System.Xml.Schema.XmlSchema" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法使用的对象的 XML 表示形式的 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="reader">XmlReader。</param>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">XmlWriter。</param>
    </member>
    <member name="M:System.Data.DataTable.ToString">
      <summary>获取 <see cref="P:System.Data.DataTable.TableName" /> 和 <see cref="P:System.Data.DataTable.DisplayExpression" />（如果有一个用作连接字符串）。</summary>
      <returns>一个由 <see cref="P:System.Data.DataTable.TableName" /> 和 <see cref="P:System.Data.DataTable.DisplayExpression" /> 值字符串。</returns>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
      <summary>通过指定的 <see cref="T:System.IO.Stream" />，按 XML 形式编写 <see cref="T:System.Data.DataTable" /> 的当前内容。</summary>
      <param name="stream">要向其写入数据的流。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
      <summary>通过指定的 <see cref="T:System.IO.Stream" />，按 XML 形式编写 <see cref="T:System.Data.DataTable" /> 的当前内容。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 <see langword="true" />。</summary>
      <param name="stream">要向其写入数据的流。</param>
      <param name="writeHierarchy">如果为 <see langword="true" />，则写入当前表及其所有子代的内容。 如果为 <see langword="false" />（默认值），则只写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Data.XmlWriteMode" /> 将 <see cref="T:System.Data.DataTable" /> 的当前数据和架构（可选）写入指定的文件。 若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。</summary>
      <param name="stream">要向其写入数据的流。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Data.XmlWriteMode" /> 将 <see cref="T:System.Data.DataTable" /> 的当前数据和架构（可选）写入指定的文件。 若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 <see langword="true" />。</summary>
      <param name="stream">要向其写入数据的流。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <param name="writeHierarchy">如果为 <see langword="true" />，则写入当前表及其所有子代的内容。 如果为 <see langword="false" />（默认值），则只写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
      <summary>通过指定的 <see cref="T:System.IO.TextWriter" />，按 XML 形式编写 <see cref="T:System.Data.DataTable" /> 的当前内容。</summary>
      <param name="writer">用于写入内容的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
      <summary>通过指定的 <see cref="T:System.IO.TextWriter" />，按 XML 形式编写 <see cref="T:System.Data.DataTable" /> 的当前内容。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 <see langword="true" />。</summary>
      <param name="writer">用于写入内容的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="writeHierarchy">如果为 <see langword="true" />，则写入当前表及其所有子代的内容。 如果为 <see langword="false" />（默认值），则只写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataTable" /> 的当前数据和架构（可选）。 若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。</summary>
      <param name="writer">用于写入文档的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataTable" /> 的当前数据和架构（可选）。 若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 <see langword="true" />。</summary>
      <param name="writer">用于写入文档的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <param name="writeHierarchy">如果为 <see langword="true" />，则写入当前表及其所有子代的内容。 如果为 <see langword="false" />（默认值），则只写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String)">
      <summary>使用指定的文件以 XML 形式写入 <see cref="T:System.Data.DataTable" /> 的当前内容。</summary>
      <param name="fileName">要向其写入 XML 数据的文件。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
      <summary>使用指定的文件以 XML 形式写入 <see cref="T:System.Data.DataTable" /> 的当前内容。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 <see langword="true" />。</summary>
      <param name="fileName">要向其写入 XML 数据的文件。</param>
      <param name="writeHierarchy">如果为 <see langword="true" />，则写入当前表及其所有子代的内容。 如果为 <see langword="false" />（默认值），则只写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>使用指定的文件和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataTable" /> 的当前数据和架构（可选）。 若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。</summary>
      <param name="fileName">将向其写入数据的文件名称。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
      <summary>使用指定的文件和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataTable" /> 的当前数据和架构（可选）。 若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 <see langword="true" />。</summary>
      <param name="fileName">将向其写入数据的文件名称。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <param name="writeHierarchy">如果为 <see langword="true" />，则写入当前表及其所有子代的内容。 如果为 <see langword="false" />（默认值），则只写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
      <summary>通过指定的 <see cref="T:System.Xml.XmlWriter" />，按 XML 形式编写 <see cref="T:System.Data.DataTable" /> 的当前内容。</summary>
      <param name="writer">用于写入内容的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
      <summary>通过指定的 <see cref="T:System.Xml.XmlWriter" />，按 XML 形式编写 <see cref="T:System.Data.DataTable" /> 的当前内容。</summary>
      <param name="writer">用于写入内容的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="writeHierarchy">如果为 <see langword="true" />，则写入当前表及其所有子代的内容。 如果为 <see langword="false" />（默认值），则只写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataTable" /> 的当前数据和架构（可选）。 若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。</summary>
      <param name="writer">用于写入文档的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataTable" /> 的当前数据和架构（可选）。 若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 <see langword="true" />。</summary>
      <param name="writer">用于写入文档的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <param name="writeHierarchy">如果为 <see langword="true" />，则写入当前表及其所有子代的内容。 如果为 <see langword="false" />（默认值），则只写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
      <summary>以 XML 架构的形式将 <see cref="T:System.Data.DataTable" /> 的当前数据结构写入指定的流。</summary>
      <param name="stream">要向其写入 XML 架构的流。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
      <summary>以 XML 架构的形式将 <see cref="T:System.Data.DataTable" /> 的当前数据结构写入指定的流。 若要保存该表及其所有子代的架构，请将 <paramref name="writeHierarchy" /> 参数设置为 <see langword="true" />。</summary>
      <param name="stream">要向其写入 XML 架构的流。</param>
      <param name="writeHierarchy">如果为 <see langword="true" />，则写入当前表及其所有子代的架构。 如果为 <see langword="false" />（默认值），则只写入当前表的架构。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 以 XML 架构的形式写入 <see cref="T:System.Data.DataTable" /> 的当前数据结构。</summary>
      <param name="writer">用于写入的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 以 XML 架构的形式写入 <see cref="T:System.Data.DataTable" /> 的当前数据结构。 若要保存该表及其所有子代的架构，请将 <paramref name="writeHierarchy" /> 参数设置为 <see langword="true" />。</summary>
      <param name="writer">用于写入的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="writeHierarchy">如果为 <see langword="true" />，则写入当前表及其所有子代的架构。 如果为 <see langword="false" />（默认值），则只写入当前表的架构。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String)">
      <summary>以 XML 架构的形式将 <see cref="T:System.Data.DataTable" /> 的当前数据结构写入指定的文件。</summary>
      <param name="fileName">要使用的文件的名称。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
      <summary>以 XML 架构的形式将 <see cref="T:System.Data.DataTable" /> 的当前数据结构写入指定的文件。 若要保存该表及其所有子代的架构，请将 <paramref name="writeHierarchy" /> 参数设置为 <see langword="true" />。</summary>
      <param name="fileName">要使用的文件的名称。</param>
      <param name="writeHierarchy">如果为 <see langword="true" />，则写入当前表及其所有子代的架构。 如果为 <see langword="false" />（默认值），则只写入当前表的架构。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 以 XML 架构的形式写入 <see cref="T:System.Data.DataTable" /> 的当前数据结构。</summary>
      <param name="writer">要使用的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 以 XML 架构的形式写入 <see cref="T:System.Data.DataTable" /> 的当前数据结构。 若要保存该表及其所有子代的架构，请将 <paramref name="writeHierarchy" /> 参数设置为 <see langword="true" />。</summary>
      <param name="writer">用于写入文档的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="writeHierarchy">如果为 <see langword="true" />，则写入当前表及其所有子代的架构。 如果为 <see langword="false" />（默认值），则只写入当前表的架构。</param>
    </member>
    <member name="P:System.Data.DataTable.CaseSensitive">
      <summary>指示表中的字符串比较是否区分大小写。</summary>
      <returns>如果比较区分大小写，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值被设置为父级 <see cref="T:System.Data.DataSet" /> 对象的 <see cref="P:System.Data.DataSet.CaseSensitive" /> 属性；当 <see cref="T:System.Data.DataTable" /> 的创建独立于 <see cref="T:System.Data.DataSet" /> 时设置为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.ChildRelations">
      <summary>获取此 <see cref="T:System.Data.DataTable" /> 的子关系的集合。</summary>
      <returns>一个 <see cref="T:System.Data.DataRelationCollection" />，包含该表的子关系。 如果 <see cref="T:System.Data.DataRelation" /> 对象不存在，将返回空集合。</returns>
    </member>
    <member name="P:System.Data.DataTable.Columns">
      <summary>获取属于该表的列的集合。</summary>
      <returns>一个 <see cref="T:System.Data.DataColumnCollection" />，包含该表的 <see cref="T:System.Data.DataColumn" /> 对象的集合。 如果 <see cref="T:System.Data.DataColumn" /> 对象不存在，将返回空集合。</returns>
    </member>
    <member name="P:System.Data.DataTable.Constraints">
      <summary>获取由该表维护的约束的集合。</summary>
      <returns>一个 <see cref="T:System.Data.ConstraintCollection" />，包含该表的 <see cref="T:System.Data.Constraint" /> 对象的集合。 如果 <see cref="T:System.Data.Constraint" /> 对象不存在，将返回空集合。</returns>
    </member>
    <member name="P:System.Data.DataTable.DataSet">
      <summary>获取此表所属的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>此表所属的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.DefaultView">
      <summary>获取可能包含筛选视图或游标位置的表的自定义视图。</summary>
      <returns>与 <see cref="T:System.Data.DataView" /> 关联的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.DisplayExpression">
      <summary>获取或设置一个表达式，该表达式返回的值用于在用户界面中表示此表。 <see langword="DisplayExpression" /> 属性用于在用户界面中显示此表名。</summary>
      <returns>显示字符串。</returns>
    </member>
    <member name="P:System.Data.DataTable.ExtendedProperties">
      <summary>获取自定义用户信息的集合。</summary>
      <returns>包含自定义用户信息的 <see cref="T:System.Data.PropertyCollection" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.HasErrors">
      <summary>获取一个值，该值指示该表所属的 <see cref="T:System.Data.DataSet" /> 的任何表的任何行中是否有错误。</summary>
      <returns>如果有错误，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.IsInitialized">
      <summary>获取一个值，该值指示是否已初始化 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>
        <see langword="true" /> 表明组件已完成初始化；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.Locale">
      <summary>获取或设置用于比较表中字符串的区域设置信息。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，它包含有关用户计算机区域设置的数据。 默认为 <see cref="T:System.Data.DataSet" /> 所属的 <see cref="T:System.Globalization.CultureInfo" /> 对象的 <see cref="P:System.Data.DataSet.Locale" />（由 <see cref="T:System.Data.DataTable" /> 属性返回）；如果该表不属于 <see cref="T:System.Data.DataSet" />，则默认为当前系统的 <see cref="T:System.Globalization.CultureInfo" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.MinimumCapacity">
      <summary>获取或设置该表最初的起始大小。</summary>
      <returns>该表中行的最初起始大小。 默认值为 50。</returns>
    </member>
    <member name="P:System.Data.DataTable.Namespace">
      <summary>获取或设置 <see cref="T:System.Data.DataTable" /> 中所存储数据的 XML 表示形式的命名空间。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的命名空间。</returns>
    </member>
    <member name="P:System.Data.DataTable.ParentRelations">
      <summary>获取该 <see cref="T:System.Data.DataTable" /> 的父关系的集合。</summary>
      <returns>一个 <see cref="T:System.Data.DataRelationCollection" />，包含该表的父关系。 如果 <see cref="T:System.Data.DataRelation" /> 对象不存在，将返回空集合。</returns>
    </member>
    <member name="P:System.Data.DataTable.Prefix">
      <summary>获取或设置 <see cref="T:System.Data.DataTable" /> 中所存储数据的 XML 表示形式的命名空间。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的前缀。</returns>
    </member>
    <member name="P:System.Data.DataTable.PrimaryKey">
      <summary>获取或设置用作数据表主键的列数组。</summary>
      <exception cref="T:System.Data.DataException">该键是外键。</exception>
      <returns>一个 <see cref="T:System.Data.DataColumn" /> 对象数组。</returns>
    </member>
    <member name="P:System.Data.DataTable.RemotingFormat">
      <summary>获取或设置序列化格式。</summary>
      <returns>指定 <see langword="Binary" /> 或 <see langword="Xml" /> 序列化的 <see cref="T:System.Data.SerializationFormat" /> 枚举。</returns>
    </member>
    <member name="P:System.Data.DataTable.Rows">
      <summary>获取属于该表的行的集合。</summary>
      <returns>包含 <see cref="T:System.Data.DataRowCollection" /> 对象的 <see cref="T:System.Data.DataRow" />；否则为 null 值（如果不存在任何 <see cref="T:System.Data.DataRow" /> 对象）。</returns>
    </member>
    <member name="P:System.Data.DataTable.Site">
      <summary>获取或设置 <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> 的一个 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</summary>
      <returns>如果集合是 <see cref="T:System.Collections.IList" /> 对象集合，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.TableName">
      <summary>获取或设置 <see cref="T:System.Data.DataTable" /> 的名称。</summary>
      <exception cref="T:System.ArgumentException">传入 <see langword="null" /> 或空字符串 ("")，此表属于一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">该表属于一个集合，该集合已包含同名的表。 （比较区分大小写）。</exception>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的名称。</returns>
    </member>
    <member name="T:System.Data.DataTableClearEventArgs">
      <summary>为 <see cref="M:System.Data.DataTable.Clear" /> 方法提供数据。</summary>
    </member>
    <member name="M:System.Data.DataTableClearEventArgs.#ctor(System.Data.DataTable)">
      <summary>初始化 <see cref="T:System.Data.DataTableClearEventArgs" /> 类的新实例。</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" />，它的行正在被清除。</param>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.Table">
      <summary>获取正在清除其中的行的表。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" />，它的行正在被清除。</returns>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableName">
      <summary>获取正在清除其中的行的表的名称。</summary>
      <returns>一个 <see cref="T:System.String" />，指示表的名称。</returns>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableNamespace">
      <summary>获取其中的行正在被清除的表的命名空间。</summary>
      <returns>一个 <see cref="T:System.String" />，指示命名空间名称。</returns>
    </member>
    <member name="T:System.Data.DataTableClearEventHandler">
      <summary>表示处理 <see cref="M:System.Data.DataTable.Clear" /> 方法的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataTableCollection">
      <summary>表示 <see cref="T:System.Data.DataSet" /> 的表的集合。</summary>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanged">
      <summary>由于添加或移除 <see cref="T:System.Data.DataTableCollection" /> 对象而更改 <see cref="T:System.Data.DataTable" /> 之后发生。</summary>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanging">
      <summary>由于添加或移除 <see cref="T:System.Data.DataTableCollection" /> 对象而更改 <see cref="T:System.Data.DataTable" /> 时发生。</summary>
    </member>
    <member name="M:System.Data.DataTableCollection.Add">
      <summary>使用默认名称创建一个新的 <see cref="T:System.Data.DataTable" /> 对象，并将其添加到集合中。</summary>
      <returns>新创建的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.Data.DataTable)">
      <summary>将指定的 <see langword="DataTable" /> 添加到集合。</summary>
      <param name="table">要添加的 <see langword="DataTable" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">为该表指定的值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">该表已经属于此集合，或者属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中的某个表具有相同的名称。 该比较不区分大小写。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String)">
      <summary>使用指定名称创建一个 <see cref="T:System.Data.DataTable" /> 对象，并将其添加到集合中。</summary>
      <param name="name">要赋予已创建的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <exception cref="T:System.Data.DuplicateNameException">集合中的某个表具有相同的名称。 （该比较不区分大小写。）</exception>
      <returns>新创建的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String,System.String)">
      <summary>使用指定名称创建一个 <see cref="T:System.Data.DataTable" /> 对象，并将其添加到集合中。</summary>
      <param name="name">要赋予已创建的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="tableNamespace">要为已创建的 <see cref="T:System.Data.DataTable" /> 提供的命名空间。</param>
      <exception cref="T:System.Data.DuplicateNameException">集合中的某个表具有相同的名称。 （该比较不区分大小写。）</exception>
      <returns>新创建的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.AddRange(System.Data.DataTable[])">
      <summary>将指定的 <see cref="T:System.Data.DataTable" /> 数组的元素复制到集合末尾。</summary>
      <param name="tables">要添加到集合中的 <see cref="T:System.Data.DataTable" /> 对象的数组。</param>
    </member>
    <member name="M:System.Data.DataTableCollection.CanRemove(System.Data.DataTable)">
      <summary>验证是否可以将指定的 <see cref="T:System.Data.DataTable" /> 对象从集合中移除。</summary>
      <param name="table">集合中要对其执行检查的 <see langword="DataTable" />。</param>
      <returns>如果该表可被移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Clear">
      <summary>清除所有 <see cref="T:System.Data.DataTable" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String)">
      <summary>获取一个值，该值指示集合中是否存在具有指定名称的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="name">要查找的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <returns>如果存在指定的表，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String,System.String)">
      <summary>获取一个值，该值指示集合中是否存在具有指定名称和表命名空间的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="name">要查找的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="tableNamespace">作为查找范围的 <see cref="T:System.Data.DataTable" /> 命名空间的名称。</param>
      <returns>如果存在指定的表，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.CopyTo(System.Data.DataTable[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.DataTableCollection" /> 的所有元素复制到一维 <see cref="T:System.Array" />，从指定目标数组索引处开始。</summary>
      <param name="array">要将当前 <see cref="T:System.Data.DataTableCollection" /> 对象的元素复制到其中的一维 <see cref="T:System.Array" />。</param>
      <param name="index">从其所在位置开始复制对象的目标 <see cref="T:System.Array" /> 索引。</param>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.Data.DataTable)">
      <summary>获取指定 <see cref="T:System.Data.DataTable" /> 对象的索引。</summary>
      <param name="table">要搜索的 <see langword="DataTable" />。</param>
      <returns>表从零开始的索引，如果在集合中未找到该表，则为 -1。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String)">
      <summary>获取具有指定名称的 <see cref="T:System.Data.DataTable" /> 对象的集合中的索引。</summary>
      <param name="tableName">要查找的 <see langword="DataTable" /> 对象的名称。</param>
      <returns>具有指定名称的 <see langword="DataTable" /> 的从零开始的索引；或者如果集合中不存在该表，则为 –1。  
  
 <block subset="none" type="note"><para>  
 当两个或两个以上的表同名，但是命名空间不同时，返回 -1。 如果在将表名只匹配到一个表时存在任何二义性，则该调用不会成功。</para></block></returns>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String,System.String)">
      <summary>获取指定 <see cref="T:System.Data.DataTable" /> 对象的集合中的索引。</summary>
      <param name="tableName">要查找的 <see cref="T:System.Data.DataTable" /> 对象的名称。</param>
      <param name="tableNamespace">作为查找范围的 <see cref="T:System.Data.DataTable" /> 命名空间的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.Data.DataTable" /> 的从零开始的索引；或者如果集合中不存在该表，则为 –1。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.Data.DataTable)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="table">要移除的 <see langword="DataTable" />。</param>
      <exception cref="T:System.ArgumentNullException">为该表指定的值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">该表不属于此集合。  
  
 - 或 -  
  
 该表是关系的一部分。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String)">
      <summary>从集合中删除具有指定名称的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="name">要删除的 <see cref="T:System.Data.DataTable" /> 对象的名称。</param>
      <exception cref="T:System.ArgumentException">该集合不包含具有指定名称的表。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String,System.String)">
      <summary>从集合中删除具有指定名称的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="name">要删除的 <see cref="T:System.Data.DataTable" /> 对象的名称。</param>
      <param name="tableNamespace">作为查找范围的 <see cref="T:System.Data.DataTable" /> 命名空间的名称。</param>
      <exception cref="T:System.ArgumentException">该集合不包含具有指定名称的表。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.RemoveAt(System.Int32)">
      <summary>从集合中的指定索引处删除 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="index">要移除的 <see langword="DataTable" /> 的索引。</param>
      <exception cref="T:System.ArgumentException">该集合在指定的索引位置没有表。</exception>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.Int32)">
      <summary>获取位于指定索引位置的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="index">要查找的 <see cref="T:System.Data.DataTable" /> 的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中的项目数。</exception>
      <returns>
        <see cref="T:System.Data.DataTable" />具有指定索引的; 否则，如果不存在，则为 <see langword="null" /><see cref="T:System.Data.DataTable" /> 。</returns>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String)">
      <summary>获取具有指定名称的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="name">要查找的 <see langword="DataTable" /> 的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.Data.DataTable" />；否则，如果 <see cref="T:System.Data.DataTable" /> 不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String,System.String)">
      <summary>获取指定命名空间中具有指定名称的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="name">要查找的 <see langword="DataTable" /> 的名称。</param>
      <param name="tableNamespace">作为查找范围的 <see cref="T:System.Data.DataTable" /> 命名空间的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.Data.DataTable" />；否则，如果 <see cref="T:System.Data.DataTable" /> 不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Data.DataTableExtensions">
      <summary>定义 <see cref="T:System.Data.DataTable" /> 类的扩展方法。 <see cref="T:System.Data.DataTableExtensions" /> 是一个静态类。</summary>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)">
      <summary>创建并返回支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。</summary>
      <param name="table">从中创建支持 LINQ 的 <see cref="T:System.Data.DataTable" /> 的源 <see cref="T:System.Data.DataView" />。</param>
      <returns>支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。</returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})">
      <summary>创建并返回一个支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象，该对象表示 LINQ to DataSet 查询。</summary>
      <param name="source">从中创建支持 LINQ 的 <see cref="T:System.Data.DataView" /> 的源 LINQ to DataSet 查询。</param>
      <typeparam name="T">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
      <returns>支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。</returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)">
      <summary>返回一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象，其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" />。 此对象可用在 LINQ 表达式或方法查询中。</summary>
      <param name="source">可枚举的源 <see cref="T:System.Data.DataTable" />。</param>
      <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Data.DataTable" /> 为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象，其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>在给定其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataTable" /> 的输入 <see cref="T:System.Data.DataRow" /> 对象的情况下，返回包含 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象副本的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="source">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
      <typeparam name="T">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
      <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列为 <see langword="null" />，因此无法创建新表。</exception>
      <exception cref="T:System.InvalidOperationException">源序列中的 <see cref="T:System.Data.DataRow" /> 的状态为 <see cref="F:System.Data.DataRowState.Deleted" />。  
  
源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。  
  
源序列中的 <see cref="T:System.Data.DataRow" /> 为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Data.DataTable" />，其中包含作为 <see cref="T:System.Data.DataRow" /> 对象的类型的输入序列。</returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)">
      <summary>在给定其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" /> 的输入 <see cref="T:System.Data.DataTable" /> 对象的情况下，将 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象复制到指定的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="source">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
      <param name="table">目标 <see cref="T:System.Data.DataTable" />。</param>
      <param name="options">
        <see cref="T:System.Data.LoadOption" /> 枚举，用于指定 <see cref="T:System.Data.DataTable" /> 加载选项。</param>
      <typeparam name="T">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
      <exception cref="T:System.ArgumentException">复制的 <see cref="T:System.Data.DataRow" /> 对象不符合目标 <see cref="T:System.Data.DataTable" /> 的架构。</exception>
      <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列为 <see langword="null" />，或者目标 <see cref="T:System.Data.DataTable" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">源序列中的 <see cref="T:System.Data.DataRow" /> 的状态为 <see cref="F:System.Data.DataRowState.Deleted" />。  
  
源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。  
  
源序列中的 <see cref="T:System.Data.DataRow" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>在给定其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" /> 的输入 <see cref="T:System.Data.DataTable" /> 对象的情况下，将 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象复制到指定的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="source">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
      <param name="table">目标 <see cref="T:System.Data.DataTable" />。</param>
      <param name="options">
        <see cref="T:System.Data.LoadOption" /> 枚举，用于指定 <see cref="T:System.Data.DataTable" /> 加载选项。</param>
      <param name="errorHandler">
        <see cref="T:System.Data.FillErrorEventHandler" /> 委托，表示将处理错误的方法。</param>
      <typeparam name="T">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
      <exception cref="T:System.ArgumentException">复制的 <see cref="T:System.Data.DataRow" /> 对象不符合目标 <see cref="T:System.Data.DataTable" /> 的架构。</exception>
      <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列为 <see langword="null" />，或者目标 <see cref="T:System.Data.DataTable" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">源序列中的 <see cref="T:System.Data.DataRow" /> 的状态为 <see cref="F:System.Data.DataRowState.Deleted" />。  
  
- 或 - 
源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。  
  
- 或 - 
源序列中的 <see cref="T:System.Data.DataRow" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Data.DataTableNewRowEventArgs">
      <summary>为 <see cref="M:System.Data.DataTable.NewRow" /> 方法提供数据。</summary>
    </member>
    <member name="M:System.Data.DataTableNewRowEventArgs.#ctor(System.Data.DataRow)">
      <summary>初始化 <see cref="T:System.Data.DataTableNewRowEventArgs" /> 的新实例。</summary>
      <param name="dataRow">正被添加的 <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="P:System.Data.DataTableNewRowEventArgs.Row">
      <summary>获取正被添加的行。</summary>
      <returns>正被添加的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.DataTableNewRowEventHandler">
      <summary>表示处理 <see cref="M:System.Data.DataTable.NewRow" /> 方法的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableNewRowEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataTableReader">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> 以一个或多个只读、只进结果集的形式获取一个或多个 <see cref="T:System.Data.DataTable" /> 对象的内容。</summary>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable)">
      <summary>通过使用提供的 <see cref="T:System.Data.DataTableReader" /> 中的数据初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
      <param name="dataTable">新的 <see cref="T:System.Data.DataTable" /> 从中获取其结果集的 <see cref="T:System.Data.DataTableReader" />。</param>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable[])">
      <summary>使用提供的 <see cref="T:System.Data.DataTableReader" /> 对象的数组初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
      <param name="dataTables">用于为新的 <see cref="T:System.Data.DataTable" /> 对象提供结果的 <see cref="T:System.Data.DataTableReader" /> 对象数组。</param>
    </member>
    <member name="M:System.Data.DataTableReader.Close">
      <summary>关闭当前的 <see cref="T:System.Data.DataTableReader" />。</summary>
    </member>
    <member name="M:System.Data.DataTableReader.GetBoolean(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Boolean" /> 形式的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 <see langword="Boolean" />。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetByte(System.Int32)">
      <summary>以字节的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see langword="DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含字节。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将从指定列偏移量开始的字节流作为从指定缓冲区偏移量开始的数组读入缓冲区中。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataIndex">字段中作为读取操作起始位置的索引。</param>
      <param name="buffer">要读入字节流的缓冲区。</param>
      <param name="bufferIndex">缓冲区中的索引，从该索引处开始放置数据。</param>
      <param name="length">复制到缓冲区中的最大长度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see langword="DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含字节数组。</exception>
      <returns>读取的实际字节数。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetChar(System.Int32)">
      <summary>获取指定列的字符形式的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see langword="DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的字段不包含字符。</exception>
      <returns>列的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>以字符数组的形式返回指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataIndex">字段中作为读取操作起始位置的索引。</param>
      <param name="buffer">要读入字节流的缓冲区。</param>
      <param name="bufferIndex">缓冲区中的索引，从该索引处开始放置数据。</param>
      <param name="length">复制到缓冲区中的最大长度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see langword="DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含字符数组。</exception>
      <returns>读取的实际字符数。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetDataTypeName(System.Int32)">
      <summary>获取一个表示指定列的数据类型的字符串。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <returns>一个表示列的数据类型的字符串。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetDateTime(System.Int32)">
      <summary>以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see langword="DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 DateTime 值。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetDecimal(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Decimal" /> 形式的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see langword="DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 <see langword="Decimal" /> 值。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetDouble(System.Int32)">
      <summary>获取双精度浮点数形式的列值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see langword="DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含双精度浮点数。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetEnumerator">
      <summary>返回一个可用于循环访问项集合的枚举数。</summary>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象，它代表项集合。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetFieldType(System.Int32)">
      <summary>获取作为对象的数据类型的 <see cref="T:System.Type" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <returns>作为对象的数据类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetFloat(System.Int32)">
      <summary>以单精度浮点数字的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含单精度浮点数。</exception>
      <returns>列的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetGuid(System.Int32)">
      <summary>以全局唯一标识符 (GUID) 的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 GUID。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt16(System.Int32)">
      <summary>获取指定列的 16 位有符号整数形式的值。</summary>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 16 位带符号整数。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt32(System.Int32)">
      <summary>获取指定列的 32 位带符号整数形式的值。</summary>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 32 位带符号整数值。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt64(System.Int32)">
      <summary>以 64 位有符号整数的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 64 位带符号整数值。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetName(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.String" /> 形式的值。</summary>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <returns>指定列的名称。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetOrdinal(System.String)">
      <summary>在给定列名时获取相应的列序号。</summary>
      <param name="name">列的名称。</param>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.ArgumentException">指定的名称不是有效的列名。</exception>
      <returns>从零开始的列序号。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>获取指定列特定于提供程序的格式的类型。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <returns>作为对象的数据类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValue(System.Int32)">
      <summary>获取指定列特定于提供程序的格式的值。</summary>
      <param name="ordinal">值被检索的列的从零开始的编号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭 <see cref="T:System.Data.DataTableReader" /> 中的列</exception>
      <returns>指定列特定于提供程序的格式的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValues(System.Object[])">
      <summary>使用 <see cref="T:System.Data.DataTableReader" /> 中所有列的特定于提供程序的类型信息填充提供的数组。</summary>
      <param name="values">要使用 <see cref="T:System.Data.DataTableReader" /> 中列的类型信息填充的对象数组。</param>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <returns>复制到数组中的列值个数。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetSchemaTable">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，它描述 <see cref="T:System.Data.DataTableReader" /> 的列元数据。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.DataTableReader" /> 是关闭的。</exception>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetString(System.Int32)">
      <summary>获取指定列的字符串形式的值。</summary>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含字符串。</exception>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetValue(System.Int32)">
      <summary>获取指定列以本机格式表示的值。</summary>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <returns>指定列的值。 此方法为 null 列返回 <see langword="DBNull" />。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetValues(System.Object[])">
      <summary>使用当前行的列值来填充对象数组。</summary>
      <param name="values">要将 <see cref="T:System.Object" /> 中的列值复制到其中的 <see cref="T:System.Data.DataTableReader" /> 数组。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <returns>复制到数组中的列值个数。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列中是否包含不存在的或缺少的值。</summary>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <returns>如果指定的列值与 <see cref="T:System.DBNull" /> 等效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.NextResult">
      <summary>使 <see cref="T:System.Data.DataTableReader" /> 前进到下一个结果集（如果有）。</summary>
      <exception cref="T:System.InvalidOperationException">尝试在已关闭的 <see cref="T:System.Data.DataTableReader" /> 中进行导航。</exception>
      <returns>如果有另一个结果集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataTableReader.Read">
      <summary>让 <see cref="T:System.Data.DataTableReader" /> 前进到下一条记录。</summary>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <returns>如果有另一行要读取，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataTableReader.Depth">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> 的当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度；始终为零。</returns>
    </member>
    <member name="P:System.Data.DataTableReader.FieldCount">
      <summary>返回当前行中的列数。</summary>
      <exception cref="T:System.InvalidOperationException">尝试在关闭的 <see cref="T:System.Data.DataTableReader" /> 中检索字段计数。</exception>
      <returns>如果未定位在有效的结果集中，则为 0；否则为当前行中的列数。</returns>
    </member>
    <member name="P:System.Data.DataTableReader.HasRows">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.DataTableReader" /> 是否包含一行还是多行。</summary>
      <exception cref="T:System.InvalidOperationException">尝试检索有关已关闭的 <see cref="T:System.Data.DataTableReader" /> 的信息。</exception>
      <returns>如果 <see cref="T:System.Data.DataTableReader" /> 包含一行或多行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataTableReader.IsClosed">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.DataTableReader" /> 是否已关闭。</summary>
      <returns>如果 <see cref="T:System.Data.DataTableReader" /> 已关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.Int32)">
      <summary>在给定列序号的情况下，获取指定列的以本机格式表示的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <returns>以本机格式表示的指定列的值。</returns>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.String)">
      <summary>在给定列名称的情况下，获取指定列的以本机格式表示的值。</summary>
      <param name="name">列的名称。</param>
      <exception cref="T:System.ArgumentException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <returns>以本机格式表示的指定列的值。</returns>
    </member>
    <member name="P:System.Data.DataTableReader.RecordsAffected">
      <summary>通过执行 SQL 语句获取插入、更改或删除的行数。</summary>
      <returns>
        <see cref="T:System.Data.DataTableReader" /> 不支持此属性，并且始终返回 0。</returns>
    </member>
    <member name="T:System.Data.DataView">
      <summary>代表 <see cref="T:System.Data.DataTable" /> 的可绑定数据的自定义视图，它用于排序、筛选、搜索、编辑和导航。 <see cref="T:System.Data.DataView" /> 不存储数据，而改为表示对应的 <see cref="T:System.Data.DataTable" /> 的连接视图。 更改 <see cref="T:System.Data.DataView" /> 的数据会影响 <see cref="T:System.Data.DataTable" />。 更改 <see cref="T:System.Data.DataTable" /> 的数据将影响与之关联的所有 <see cref="T:System.Data.DataView" />。</summary>
    </member>
    <member name="E:System.Data.DataView.Initialized">
      <summary>
        <see cref="T:System.Data.DataView" /> 的初始化完成时发生。</summary>
    </member>
    <member name="E:System.Data.DataView.ListChanged">
      <summary>更改由 <see cref="T:System.Data.DataView" /> 管理的列表时发生。</summary>
    </member>
    <member name="M:System.Data.DataView.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataView" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable)">
      <summary>使用指定的 <see cref="T:System.Data.DataView" /> 初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
      <param name="table">要添加到 <see cref="T:System.Data.DataView" /> 中的 <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable,System.String,System.String,System.Data.DataViewRowState)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />、<see cref="P:System.Data.DataView.RowFilter" />、<see cref="P:System.Data.DataView.Sort" /> 和 <see cref="T:System.Data.DataViewRowState" /> 初始化 <see cref="T:System.Data.DataView" /> 类的新实例。</summary>
      <param name="table">要添加到 <see cref="T:System.Data.DataView" /> 中的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="RowFilter">要应用于 <see cref="T:System.Data.DataView" /> 的 <see cref="P:System.Data.DataView.RowFilter" />。</param>
      <param name="Sort">要应用于 <see cref="T:System.Data.DataView" /> 的 <see cref="P:System.Data.DataView.Sort" />。</param>
      <param name="RowState">要应用于 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataViewRowState" />。</param>
    </member>
    <member name="M:System.Data.DataView.AddNew">
      <summary>在 <see cref="T:System.Data.DataView" /> 中添加新行。</summary>
      <returns>一个新 <see cref="T:System.Data.DataRowView" /> 对象。</returns>
    </member>
    <member name="M:System.Data.DataView.BeginInit">
      <summary>开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataView" />。 此初始化在运行时发生。</summary>
    </member>
    <member name="M:System.Data.DataView.Close">
      <summary>关闭 <see cref="T:System.Data.DataView" />。</summary>
    </member>
    <member name="M:System.Data.DataView.ColumnCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>在成功更改 <see cref="T:System.Data.DataColumnCollection" /> 后发生。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataView.CopyTo(System.Array,System.Int32)">
      <summary>将项复制到数组中。 仅适用于 Web 窗体界面。</summary>
      <param name="array">要复制到的数组。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="M:System.Data.DataView.Delete(System.Int32)">
      <summary>删除指定索引处的行。</summary>
      <param name="index">要删除行的索引。</param>
    </member>
    <member name="M:System.Data.DataView.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.DataView" /> 对象使用的资源（内存除外）。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.DataView.EndInit">
      <summary>结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataView" /> 的初始化。 此初始化在运行时发生。</summary>
    </member>
    <member name="M:System.Data.DataView.Equals(System.Data.DataView)">
      <summary>确定指定的 <see cref="T:System.Data.DataView" /> 实例是否可视为相等的实例。</summary>
      <param name="view">要比较的 <see cref="T:System.Data.DataView" />。</param>
      <returns>如果这两个 <see cref="T:System.Data.DataView" /> 实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object)">
      <summary>根据指定的排序键值在 <see cref="T:System.Data.DataView" /> 中查找行。</summary>
      <param name="key">要搜索的对象。</param>
      <returns>包含指定排序关键字值的 <see cref="T:System.Data.DataView" /> 中的行的索引；否则为 -1（如果不存在排序关键字值）。</returns>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object[])">
      <summary>根据指定的排序键值在 <see cref="T:System.Data.DataView" /> 中查找行。</summary>
      <param name="key">类型为 <see cref="T:System.Object" /> 的值的数组。</param>
      <returns>
        <see cref="T:System.Data.DataView" /> 中与指定的排序键值匹配的第一个行的位置索引；如果没有匹配的排序键值，则为 -1。</returns>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object)">
      <summary>返回其列与指定的排序键值匹配的 <see cref="T:System.Data.DataRowView" /> 对象数组。</summary>
      <param name="key">要搜索的列值，为 <see cref="T:System.Object" /> 类型。</param>
      <returns>
        <see langword="DataRowView" /> 对象数组，其列与指定的排序键值匹配；或者，如果任何行都不包含指定的排序键值，则为空的 <see langword="DataRowView" /> 数组。</returns>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object[])">
      <summary>返回其列与指定的排序键值匹配的 <see cref="T:System.Data.DataRowView" /> 对象数组。</summary>
      <param name="key">要搜索的列值数组，其类型为 <see cref="T:System.Object" />。</param>
      <returns>
        <see langword="DataRowView" /> 对象数组，其列与指定的排序键值匹配；或者，如果任何行都不包含指定的排序键值，则为空的 <see langword="DataRowView" /> 数组。</returns>
    </member>
    <member name="M:System.Data.DataView.GetEnumerator">
      <summary>获取此 <see cref="T:System.Data.DataView" /> 的枚举器。</summary>
      <returns>用于浏览列表的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.DataView.IndexListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
      <summary>在成功更改 <see cref="T:System.Data.DataView" /> 后发生。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataView.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataView.ListChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataView.Open">
      <summary>打开 <see cref="T:System.Data.DataView" />。</summary>
    </member>
    <member name="M:System.Data.DataView.Reset">
      <summary>保留以仅供内部使用。</summary>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Add(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。</summary>
      <param name="value">一个 <see cref="T:System.Object" /> 值。</param>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Clear">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Clear" />。</summary>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Contains(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</summary>
      <param name="value">一个 <see cref="T:System.Object" /> 值。</param>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#IndexOf(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</summary>
      <param name="value">一个 <see cref="T:System.Object" /> 值。</param>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。</summary>
      <param name="index">一个 <see cref="T:System.Int32" /> 值。</param>
      <param name="value">要插入的 <see cref="T:System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Remove(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。</summary>
      <param name="value">一个 <see cref="T:System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />。</summary>
      <param name="index">一个 <see cref="T:System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddNew">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns>添加到列表的项。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</param>
      <param name="key">一个 <see cref="T:System.Object" /> 值。</param>
      <returns>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveSort">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />。</summary>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" />。</summary>
      <param name="sorts">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#RemoveFilter">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingListView.RemoveFilter" />。</summary>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" />。</summary>
      <param name="listAccessors">要在组合中查找的可绑定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。 它可以是 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其表示每一项上用于绑定数据的属性。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />。</summary>
      <param name="listAccessors">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象数组。</param>
      <returns>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable">
      <summary>基于现有的 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个新 <see cref="T:System.Data.DataTable" /> 实例，其中包含请求的行和列。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.Boolean,System.String[])">
      <summary>基于现有的 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="distinct">如果为 <see langword="true" />，则返回的 <see cref="T:System.Data.DataTable" /> 包含具有与其所有列不同的值的行。 默认值是 <see langword="false" />。</param>
      <param name="columnNames">一个字符串数组，其中的一个列名称列表将包括在返回的 <see cref="T:System.Data.DataTable" /> 中。 <see cref="T:System.Data.DataTable" /> 包含指定的列，这些列按其在该数组中显示的顺序排列。</param>
      <returns>一个新 <see cref="T:System.Data.DataTable" /> 实例，其中包含请求的行和列。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String)">
      <summary>基于现有的 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="tableName">返回的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <returns>一个新 <see cref="T:System.Data.DataTable" /> 实例，其中包含请求的行和列。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String,System.Boolean,System.String[])">
      <summary>基于现有的 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="tableName">返回的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="distinct">如果为 <see langword="true" />，则返回的 <see cref="T:System.Data.DataTable" /> 包含具有与其所有列不同的值的行。 默认值是 <see langword="false" />。</param>
      <param name="columnNames">一个字符串数组，其中的一个列名称列表将包括在返回的 <see cref="T:System.Data.DataTable" /> 中。 <see langword="DataTable" /> 包含指定的列，这些列按其在该数组中显示的顺序排列。</param>
      <returns>一个新 <see cref="T:System.Data.DataTable" /> 实例，其中包含请求的行和列。</returns>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex">
      <summary>保留以仅供内部使用。</summary>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex(System.Boolean)">
      <summary>保留以仅供内部使用。</summary>
      <param name="force">保留以仅供内部使用。</param>
    </member>
    <member name="P:System.Data.DataView.AllowDelete">
      <summary>获取或设置一个值，该值指示是否允许删除。</summary>
      <returns>如果允许删除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.AllowEdit">
      <summary>获取或设置一个值，该值指示是否允许编辑。</summary>
      <returns>如果允许编辑，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.AllowNew">
      <summary>获取或设置一个值，该值指示是否可以通过使用 <see cref="M:System.Data.DataView.AddNew" /> 方法添加新行。</summary>
      <returns>如果可以添加新行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.ApplyDefaultSort">
      <summary>获取或设置一个值，该值指示是否使用默认排序。 默认排序是通过 <see cref="P:System.Data.DataTable.PrimaryKey" /> 指定的所有主键进行排序（升序）。</summary>
      <returns>如果使用默认排序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.Count">
      <summary>在应用 <see cref="P:System.Data.DataView.RowFilter" /> 和 <see cref="P:System.Data.DataView.RowStateFilter" /> 之后，获取 <see cref="T:System.Data.DataView" /> 中的记录数。</summary>
      <returns>
        <see cref="T:System.Data.DataView" /> 中的记录数。</returns>
    </member>
    <member name="P:System.Data.DataView.DataViewManager">
      <summary>获取与此视图关联的 <see cref="T:System.Data.DataViewManager" />。</summary>
      <returns>创建了此视图的 <see langword="DataViewManager" />。 如果这是 <see cref="T:System.Data.DataTable" /> 的默认 <see cref="T:System.Data.DataView" />，那么 <see langword="DataViewManager" /> 属性将返回 <see langword="DataSet" /> 的默认 <see langword="DataViewManager" />。 否则，如果在没有 <see langword="DataViewManager" /> 的情况下创建了 <see langword="DataView" />，那么此属性为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Data.DataView.IsInitialized">
      <summary>获取一个值，该值指示组件是否已初始化。</summary>
      <returns>如果为 <see langword="true" />，说明组件已完成初始化；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.IsOpen">
      <summary>获取一个值，该值指示数据源当前是否打开并投影 <see cref="T:System.Data.DataTable" /> 上的数据视图。</summary>
      <returns>如果源打开，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataView.Item(System.Int32)">
      <summary>从指定的表中获取数据行。</summary>
      <param name="recordIndex">
        <see cref="T:System.Data.DataTable" /> 中的记录的索引。</param>
      <returns>所需的行的 <see cref="T:System.Data.DataRowView" />。</returns>
    </member>
    <member name="P:System.Data.DataView.RowFilter">
      <summary>获取或设置用于筛选在 <see cref="T:System.Data.DataView" /> 中查看哪些行的表达式。</summary>
      <returns>用于指定行的筛选方式的字符串。</returns>
    </member>
    <member name="P:System.Data.DataView.RowStateFilter">
      <summary>获取或设置用于 <see cref="T:System.Data.DataView" /> 中的行状态筛选器。</summary>
      <returns>
        <see cref="T:System.Data.DataViewRowState" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.DataView.Sort">
      <summary>获取或设置 <see cref="T:System.Data.DataView" /> 的一个或多个排序列和排序顺序。</summary>
      <returns>一个字符串，该字符串包含后跟“ASC”（升序）或"DESC"（降序）的列名。 默认情况下，列按升序排序。 可以用逗号分隔多个列。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsFixedSize">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsReadOnly">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#Item(System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。</summary>
      <param name="recordIndex">一个 <see cref="T:System.Int32" /> 值。</param>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowEdit">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowNew">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowRemove">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#IsSorted">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortDirection">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortProperty">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#Filter">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.Filter" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.Filter" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SortDescriptions">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsAdvancedSorting">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsFiltering">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />。</returns>
    </member>
    <member name="P:System.Data.DataView.Table">
      <summary>获取或设置源 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>为此视图提供数据的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="T:System.Data.DataViewManager">
      <summary>在 <see cref="T:System.Data.DataSet" /> 中包含每个 <see cref="T:System.Data.DataTable" /> 的默认 <see cref="T:System.Data.DataViewSettingCollection" />。</summary>
    </member>
    <member name="E:System.Data.DataViewManager.ListChanged">
      <summary>在将行添加到 <see cref="T:System.Data.DataView" /> 或从中删除行之后发生。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataViewManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor(System.Data.DataSet)">
      <summary>为指定的 <see cref="T:System.Data.DataSet" /> 初始化 <see cref="T:System.Data.DataViewManager" /> 类的新实例。</summary>
      <param name="dataSet">要使用的 <see cref="T:System.Data.DataSet" /> 的名称。</param>
    </member>
    <member name="M:System.Data.DataViewManager.CreateDataView(System.Data.DataTable)">
      <summary>为指定的 <see cref="T:System.Data.DataTable" /> 创建 <see cref="T:System.Data.DataView" />。</summary>
      <param name="table">要在 <see cref="T:System.Data.DataView" /> 中使用的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <returns>
        <see cref="T:System.Data.DataView" /> 对象。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataViewManager.ListChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.RelationCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>在 <see cref="T:System.Data.DataRelationCollection" /> 中添加或移除 <see cref="T:System.Data.DataRelation" /> 时引发 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>新元素的插入位置。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Clear">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Clear" />。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到了 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Collections.IList" /> 中的指定索引处插入一个项。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.IList" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除位于指定索引处的 <see cref="T:System.Collections.IList" /> 项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到用于搜索的索引。</summary>
      <param name="property">将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到用于搜索的索引。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddNew">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>根据 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 对列表进行排序。</summary>
      <param name="property">以其为根据进行排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>返回具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</summary>
      <param name="property">要对其进行搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">要搜索的属性参数的值。</param>
      <returns>具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引中移除。</summary>
      <param name="property">要从用于搜索的索引中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveSort">
      <summary>使用 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 移除任何已应用的排序。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其表示每一项上用于绑定数据的属性。</summary>
      <param name="listAccessors">要在组合中查找的可绑定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。 它可以是 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其表示每一项上用于绑定数据的属性。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>返回列表名称。</summary>
      <param name="listAccessors">为其返回列表名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。 它可以是 <see langword="null" />。</param>
      <returns>列表名称。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.TableCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>在 <see cref="T:System.Data.DataTableCollection" /> 中添加或移除 <see cref="T:System.Data.DataTable" /> 时引发 <see cref="E:System.Data.DataTableCollection.CollectionChanged" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="P:System.Data.DataViewManager.DataSet">
      <summary>获取或设置要与 <see cref="T:System.Data.DataViewManager" /> 一起使用的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>要使用的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettingCollectionString">
      <summary>获取或设置用于代码持久性的值。</summary>
      <returns>一个用于代码持久性的值。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettings">
      <summary>获取 <see cref="T:System.Data.DataSet" /> 中每个 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataViewSettingCollection" />。</summary>
      <returns>每个 <see langword="DataTable" /> 的 <see cref="T:System.Data.DataViewSettingCollection" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#Count">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.Count" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.Count" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsFixedSize">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。</summary>
      <returns>如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsReadOnly">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowEdit">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowNew">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowRemove">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#IsSorted">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortDirection">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortProperty">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</returns>
    </member>
    <member name="T:System.Data.DataViewRowState">
      <summary>描述 <see cref="T:System.Data.DataRow" /> 中的数据版本。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Added">
      <summary>新行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.CurrentRows">
      <summary>当前行包括未更改的行、新行和已修改的行。 默认情况下，<see cref="T:System.Data.DataViewRowState" /> 设置为 CurrentRows。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Deleted">
      <summary>已删除的行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedCurrent">
      <summary>已修改的原始数据的当前版本（请参阅 <see langword="ModifiedOriginal" />）。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedOriginal">
      <summary>已修改数据的原始版本。 （尽管已修改此数据，它仍作为 <see langword="ModifiedCurrent" /> 可用）。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.None">
      <summary>无。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.OriginalRows">
      <summary>原始行包括未更改的行和已删除的行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Unchanged">
      <summary>未更改的行。</summary>
    </member>
    <member name="T:System.Data.DataViewSetting">
      <summary>表示从 <see cref="P:System.Data.DataView.ApplyDefaultSort" /> 创建的 DataView 的 <see cref="P:System.Data.DataView.DataViewManager" />、<see cref="P:System.Data.DataView.RowFilter" />、<see cref="P:System.Data.DataView.RowStateFilter" />、<see cref="P:System.Data.DataView.Sort" />、<see cref="P:System.Data.DataView.Table" /> 和 <see cref="T:System.Data.DataViewManager" /> 的默认设置。</summary>
    </member>
    <member name="P:System.Data.DataViewSetting.ApplyDefaultSort">
      <summary>获取或设置一个值，该值指示是否使用默认排序。</summary>
      <returns>如果使用默认排序方式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.DataViewManager">
      <summary>获取包含此 <see cref="T:System.Data.DataViewManager" /> 的 <see cref="T:System.Data.DataViewSetting" />。</summary>
      <returns>
        <see cref="T:System.Data.DataViewManager" /> 对象。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.RowFilter">
      <summary>获取或设置应用于 <see cref="T:System.Data.DataView" /> 中的筛选器。 有关使用 RowFilter 的代码示例，请参见 <see cref="P:System.Data.DataView.RowFilter" />。</summary>
      <returns>包含要应用的筛选器的字符串。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.RowStateFilter">
      <summary>获取或设置一个值，该值指示在 <see cref="T:System.Data.DataView" /> 中是显示 Current、Deleted、Modified Current、ModifiedOriginal、New、Original、Unchanged 还是不显示任何行。</summary>
      <returns>一个指示要显示哪些行的值。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.Sort">
      <summary>获取或设置一个值，该值指示要应用于 <see cref="T:System.Data.DataView" /> 中的排序。</summary>
      <returns>要应用于 <see cref="T:System.Data.DataView" /> 中的排序。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.Table">
      <summary>获取要应用 <see cref="T:System.Data.DataTable" /> 属性的 <see cref="T:System.Data.DataViewSetting" />。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 对象。</returns>
    </member>
    <member name="T:System.Data.DataViewSettingCollection">
      <summary>包含 <see cref="T:System.Data.DataViewSetting" /> 中每个 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataSet" /> 对象的只读集合。</summary>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Array,System.Int32)">
      <summary>从指定的索引处开始，将集合对象复制到一维 <see cref="T:System.Array" /> 实例中。</summary>
      <param name="ar">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组索引。</param>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Data.DataViewSetting[],System.Int32)">
      <summary>从指定的索引处开始，将集合对象复制到一维 <see cref="T:System.Array" /> 实例中。</summary>
      <param name="ar">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组索引。</param>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.GetEnumerator">
      <summary>获取集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Count">
      <summary>获取 <see cref="T:System.Data.DataViewSetting" /> 中 <see cref="T:System.Data.DataViewSettingCollection" /> 对象的数目。</summary>
      <returns>集合中 <see cref="T:System.Data.DataViewSetting" /> 对象的数目。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.DataViewSettingCollection" /> 是否为只读。</summary>
      <returns>始终返回 <see langword="true" /> 以指示集合为只读。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Data.DataViewSettingCollection" /> 的访问（线程安全）。</summary>
      <returns>如果不被派生类重写，该属性总是为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Data.DataTable)">
      <summary>获取集合中指定 <see cref="T:System.Data.DataViewSetting" /> 的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="table">要查找的 <see cref="T:System.Data.DataTable" />。</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Data.DataViewSetting" /> 的 <see cref="T:System.Data.DataTable" /> 对象（由其索引指定）。</summary>
      <param name="index">要查找的 <see cref="T:System.Data.DataTable" /> 的从零开始的索引。</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Data.DataViewSetting" /> 的 <see cref="T:System.Data.DataTable" />（由其名称指定）。</summary>
      <param name="tableName">要查找的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Data.DataViewSettingCollection" /> 的访问的对象。</summary>
      <returns>用于同步对 <see cref="T:System.Data.DataViewSettingCollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Data.DBConcurrencyException">
      <summary>在插入、更新或删除操作过程中当受影响的行数等于零时由 <see cref="T:System.Data.Common.DataAdapter" /> 引发的异常。</summary>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。</summary>
      <param name="message">文本字符串，它描述有关异常的详细信息。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。</summary>
      <param name="message">文本字符串，它描述有关异常的详细信息。</param>
      <param name="inner">对内部异常的引用。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。</summary>
      <param name="message">说明发生此异常的原因的错误消息。</param>
      <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
      <param name="dataRows">一个数组，其中包含因更新失败而导致生成此异常的 <see cref="T:System.Data.DataRow" /> 对象。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])">
      <summary>将因更新失败而导致生成此异常的 <see cref="T:System.Data.DataRow" /> 对象复制到指定的 <see cref="T:System.Data.DataRow" /> 对象数组。</summary>
      <param name="array">要向其中复制 <see cref="T:System.Data.DataRow" /> 对象的一维的 <see cref="T:System.Data.DataRow" /> 对象数组。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>将因更新失败而导致生成此异常的 <see cref="T:System.Data.DataRow" /> 对象复制到指定的 <see cref="T:System.Data.DataRow" /> 对象数组（从指定的目标数组索引开始）。</summary>
      <param name="array">要向其中复制 <see cref="T:System.Data.DataRow" /> 对象的一维的 <see cref="T:System.Data.DataRow" /> 对象数组。</param>
      <param name="arrayIndex">从其所在位置开始复制对象的目标数组索引。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化 <see cref="T:System.Data.DBConcurrencyException" /> 所需的数据填充指定的序列化信息对象。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存与 <see cref="T:System.Data.DBConcurrencyException" /> 关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与 <see cref="T:System.Data.DBConcurrencyException" /> 关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
    </member>
    <member name="P:System.Data.DBConcurrencyException.Row">
      <summary>获取或设置生成 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DBConcurrencyException" /> 的值。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 的值。</returns>
    </member>
    <member name="P:System.Data.DBConcurrencyException.RowCount">
      <summary>获取更新失败（因而生成此异常）的行数。</summary>
      <returns>一个整数，其中包含表示更新失败的行数的计数。</returns>
    </member>
    <member name="T:System.Data.DbType">
      <summary>指定 .NET Framework 数据提供程序的字段、属性或 <see langword="Parameter" /> 对象的数据类型。</summary>
    </member>
    <member name="F:System.Data.DbType.AnsiString">
      <summary>非 Unicode 字符的可变长度流，范围在 1 到 8,000 个字符之间。</summary>
    </member>
    <member name="F:System.Data.DbType.AnsiStringFixedLength">
      <summary>非 Unicode 字符的固定长度流。</summary>
    </member>
    <member name="F:System.Data.DbType.Binary">
      <summary>二进制数据的可变长度流，范围在 1 到 8,000 个字节之间。</summary>
    </member>
    <member name="F:System.Data.DbType.Boolean">
      <summary>简单类型，表示 <see langword="true" /> 或 <see langword="false" /> 的布尔值。</summary>
    </member>
    <member name="F:System.Data.DbType.Byte">
      <summary>一个 8 位无符号整数，范围在 0 到 255 之间。</summary>
    </member>
    <member name="F:System.Data.DbType.Currency">
      <summary>货币值，范围在 2 63（即 -922,337,203,685,477.5808）到 2 63 -1（即 +922,337,203,685,477.5807）之间，精度为千分之十个货币单位。</summary>
    </member>
    <member name="F:System.Data.DbType.Date">
      <summary>表示日期值的类型。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTime">
      <summary>表示一个日期和时间值的类型。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTime2">
      <summary>日期和时间数据。 日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTimeOffset">
      <summary>显示时区的日期和时间数据。 日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。 时区值范围从 -14:00 到 +14:00。</summary>
    </member>
    <member name="F:System.Data.DbType.Decimal">
      <summary>简单类型，表示从 1.0 x 10 -28 到大约 7.9 x 10 28 且有效位数为 28 到 29 位的值。</summary>
    </member>
    <member name="F:System.Data.DbType.Double">
      <summary>浮点型，表示从大约 5.0 x 10 -324 到 1.7 x 10 308 且精度为 15 到 16 位的值。</summary>
    </member>
    <member name="F:System.Data.DbType.Guid">
      <summary>全局唯一标识符（或 GUID）。</summary>
    </member>
    <member name="F:System.Data.DbType.Int16">
      <summary>整型，表示值介于 -32768 到 32767 之间的有符号 16 位整数。</summary>
    </member>
    <member name="F:System.Data.DbType.Int32">
      <summary>整型，表示值介于 -2147483648 到 2147483647 之间的 32 位有符号整数。</summary>
    </member>
    <member name="F:System.Data.DbType.Int64">
      <summary>整型，表示值介于-9223372036854775808 和 9223372036854775807 之间的 64 位有符号整数。</summary>
    </member>
    <member name="F:System.Data.DbType.Object">
      <summary>常规类型，表示任何没有由其他 <see langword="DbType" /> 值显式表示的引用或值类型。</summary>
    </member>
    <member name="F:System.Data.DbType.SByte">
      <summary>整型，表示值介于 -128 到 127 之间的 8 位有符号整数。</summary>
    </member>
    <member name="F:System.Data.DbType.Single">
      <summary>浮点型，表示从大约 1.5 x 10 -45 到 3.4 x 10 38 且精度为 7 位的值。</summary>
    </member>
    <member name="F:System.Data.DbType.String">
      <summary>表示 Unicode 字符串的类型。</summary>
    </member>
    <member name="F:System.Data.DbType.StringFixedLength">
      <summary>Unicode 字符的定长串。</summary>
    </member>
    <member name="F:System.Data.DbType.Time">
      <summary>一个表示 SQL Server <see langword="DateTime" /> 值的类型。 如果要使用 SQL Server <see langword="time" /> 值，请使用 <see cref="F:System.Data.SqlDbType.Time" />。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt16">
      <summary>整型，表示值介于 0 到 65535 之间的 16 位无符号整数。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt32">
      <summary>整型，表示值介于 0 到 4294967295 之间的 32 位无符号整数。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt64">
      <summary>整型，表示值介于 0 到 18446744073709551615 之间的 64 位无符号整数。</summary>
    </member>
    <member name="F:System.Data.DbType.VarNumeric">
      <summary>变长数值。</summary>
    </member>
    <member name="F:System.Data.DbType.Xml">
      <summary>XML 文档或片段的分析表示。</summary>
    </member>
    <member name="T:System.Data.DeletedRowInaccessibleException">
      <summary>表示尝试在已删除的 <see cref="T:System.Data.DataRow" /> 上执行操作时引发的异常。</summary>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化信息初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象时所需的数据。</param>
      <param name="context">指定的序列化流的源和目标的说明。</param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="T:System.Data.DuplicateNameException">
      <summary>表示在 <see cref="T:System.Data.DataSet" /> — 相关对象添加操作的过程中，遇到重复的数据库对象名称时引发的异常。</summary>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DuplicateNameException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化信息初始化 <see cref="T:System.Data.DuplicateNameException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象时所需的数据。</param>
      <param name="context">指定的序列化流的源和目标的说明。</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.DuplicateNameException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字符串和异常初始化 <see cref="T:System.Data.DuplicateNameException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="T:System.Data.EnumerableRowCollection">
      <summary>表示从 LINQ to DataSet 查询返回的 <see cref="T:System.Data.DataRow" /> 对象的集合。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Data.EnumerableRowCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Data.DataRow" /> 对象集合的枚举数。 此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。</summary>
      <returns>一个可用于遍历 <see cref="T:System.Collections.IEnumerator" /> 对象的集合的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.EnumerableRowCollection`1">
      <summary>表示从查询返回的 <see cref="T:System.Data.DataRow" /> 对象的集合。</summary>
      <typeparam name="TRow">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollection`1.GetEnumerator">
      <summary>返回包含的行对象集合的枚举数。</summary>
      <returns>一个强类型 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用于遍历 <paramref name="TRow" /> 对象的集合。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Data.DataRow" /> 对象集合的枚举数。</summary>
      <returns>一个可用于遍历 <see cref="T:System.Collections.IEnumerator" /> 对象的集合的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="T:System.Data.EnumerableRowCollectionExtensions">
      <summary>包含数据行集合类的扩展方法。</summary>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Cast``1(System.Data.EnumerableRowCollection)">
      <summary>将 <see cref="T:System.Data.EnumerableRowCollection" /> 的元素转换为指定的类型。</summary>
      <param name="source">包含要转换的元素的 <see cref="T:System.Data.EnumerableRowCollection" />。</param>
      <typeparam name="TResult">源中的元素要转换成的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">序列中的元素不能强制转换为 <paramref name="TResult" /> 类型。</exception>
      <returns>一个 <see cref="T:System.Data.EnumerableRowCollection" />，其中包含已转换为指定类型的源序列的每个元素。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>按指定键升序排序 <see cref="T:System.Data.EnumerableRowCollection" /> 的行。</summary>
      <param name="source">包含要排序的 <see cref="T:System.Data.EnumerableRowCollection" /> 元素的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键排序。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>按指定键和比较器升序排序 <see cref="T:System.Data.EnumerableRowCollection" /> 的行。</summary>
      <param name="source">包含要排序的 <see cref="T:System.Data.EnumerableRowCollection" /> 元素的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键和比较器排序。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>按指定键降序排序 <see cref="T:System.Data.EnumerableRowCollection" /> 的行。</summary>
      <param name="source">包含要排序的 <see cref="T:System.Data.EnumerableRowCollection" /> 元素的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键排序。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>按指定键和比较器降序排序 <see cref="T:System.Data.EnumerableRowCollection" /> 的行。</summary>
      <param name="source">包含要排序的 <see cref="T:System.Data.EnumerableRowCollection" /> 元素的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键和比较器排序。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Select``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>将 <see cref="T:System.Data.EnumerableRowCollection`1" /> 中的每个元素投影到新窗体。</summary>
      <param name="source">一个 <see cref="T:System.Data.EnumerableRowCollection`1" />，其中包含要对其调用转换函数的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="S">
        <paramref name="TRow" /> 将转换成的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.EnumerableRowCollection`1" />，其元素是对 <paramref name="source" /> 的每个元素调用转换函数得到的结果。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>根据指定键按升序对 <see cref="T:System.Data.EnumerableRowCollection" /> 的行进行次要排序。</summary>
      <param name="source">包含要排序的 <see cref="T:System.Data.EnumerableRowCollection" /> 元素的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键排序。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>根据指定键和比较器按升序对 <see cref="T:System.Data.EnumerableRowCollection" /> 的行进行次要排序。</summary>
      <param name="source">包含要排序的 <see cref="T:System.Data.EnumerableRowCollection" /> 元素的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键和比较器排序。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>根据指定键按降序对 <see cref="T:System.Data.EnumerableRowCollection" /> 的行进行次要排序。</summary>
      <param name="source">包含要排序的 <see cref="T:System.Data.EnumerableRowCollection" /> 元素的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键排序。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>根据指定键和比较器按降序对 <see cref="T:System.Data.EnumerableRowCollection" /> 的行进行次要排序。</summary>
      <param name="source">包含要排序的 <see cref="T:System.Data.EnumerableRowCollection" /> 元素的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键和比较器排序。</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Where``1(System.Data.EnumerableRowCollection{``0},System.Func{``0,System.Boolean})">
      <summary>按指定谓词筛选行序列。</summary>
      <param name="source">包含要筛选的 <see cref="T:System.Data.EnumerableRowCollection" /> 元素的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其中包含输入序列中满足该条件的行。</returns>
    </member>
    <member name="T:System.Data.EvaluateException">
      <summary>表示无法计算 <see cref="T:System.Data.DataColumn" /> 的 <see cref="P:System.Data.DataColumn.Expression" /> 属性时引发的异常。</summary>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.EvaluateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.Data.EvaluateException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象所需的数据。</param>
      <param name="context">特定序列化流的源和目标。</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.EvaluateException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.EvaluateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="T:System.Data.FillErrorEventArgs">
      <summary>为 <see cref="T:System.Data.Common.DbDataAdapter" /> 的 <see cref="E:System.Data.Common.DataAdapter.FillError" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Data.FillErrorEventArgs.#ctor(System.Data.DataTable,System.Object[])">
      <summary>初始化 <see cref="T:System.Data.FillErrorEventArgs" /> 类的新实例。</summary>
      <param name="dataTable">正在更新的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="values">正在更新的行的值。</param>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Continue">
      <summary>获取或设置一个值，指示是否继续执行填充操作而不考虑该错误。</summary>
      <returns>如果应该继续执行填充操作，则 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.DataTable">
      <summary>获取发生错误时正在更新的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>正在更新的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Errors">
      <summary>获取正在处理的错误。</summary>
      <returns>正在处理的错误。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Values">
      <summary>获取发生错误时正在更新的行的值。</summary>
      <returns>正在更新的行的值。</returns>
    </member>
    <member name="T:System.Data.FillErrorEventHandler">
      <summary>表示用来处理 <see cref="E:System.Data.Common.DataAdapter.FillError" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.FillErrorEventArgs" />。</param>
    </member>
    <member name="T:System.Data.ForeignKeyConstraint">
      <summary>表示删除或更新某个值或行时，对主键/外键关系中一组列强制进行的操作限制。</summary>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定的父级和子级 <see cref="T:System.Data.ForeignKeyConstraint" /> 对象初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="parentColumn">约束中的父级 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">约束中的子级 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一列是或两列都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。  
  
- 或 - 
表不属于同一 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用指定的父级和子级 <see cref="T:System.Data.ForeignKeyConstraint" /> 对象的数组，初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="parentColumns">约束中的父级 <see cref="T:System.Data.DataColumn" /> 的数组。</param>
      <param name="childColumns">约束中的子级 <see cref="T:System.Data.DataColumn" /> 的数组。</param>
      <exception cref="T:System.ArgumentNullException">其中一列是或两列都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。  
  
- 或 - 
表不属于同一 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定的名称、父级和子级 <see cref="T:System.Data.ForeignKeyConstraint" /> 对象初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="constraintName">约束的名称。</param>
      <param name="parentColumn">约束中的父级 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">约束中的子级 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一列是或两列都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。  
  
- 或 - 
表不属于同一 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用指定的名称、父级和子级 <see cref="T:System.Data.ForeignKeyConstraint" /> 对象的数组初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="constraintName">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名称。 当添加到约束集合中时，如果是 <see langword="null" /> 或空字符串，则给出默认名称。</param>
      <param name="parentColumns">约束中的父级 <see cref="T:System.Data.DataColumn" /> 的数组。</param>
      <param name="childColumns">约束中的子级 <see cref="T:System.Data.DataColumn" /> 的数组。</param>
      <exception cref="T:System.ArgumentNullException">其中一列是或两列都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。  
  
- 或 - 
表不属于同一 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>此构造函数在 Visual Studio 环境中提供设计时支持。 因此，使用此构造函数创建的 <see cref="T:System.Data.ForeignKeyConstraint" /> 对象必须通过 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" /> 添加到集合中。 当调用该方法时，必须存在具有指定名称的表和列，或者如果在调用该构造函数之前已经调用了 <see cref="M:System.Data.DataTable.BeginInit" />，则在调用 <see cref="M:System.Data.DataTable.EndInit" /> 时，必须存在具有指定名称的表和列。</summary>
      <param name="constraintName">约束的名称。</param>
      <param name="parentTableName">在约束中包含父级 <see cref="T:System.Data.DataTable" /> 对象的父级 <see cref="T:System.Data.DataColumn" /> 的名称。</param>
      <param name="parentTableNamespace">
        <see cref="P:System.Data.DataTable.Namespace" /> 的名称。</param>
      <param name="parentColumnNames">约束中父级 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="childColumnNames">约束中子级 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="acceptRejectRule">
        <see cref="T:System.Data.AcceptRejectRule" /> 值之一。 可能的值包括 <see langword="None" />、<see langword="Cascade" /> 和 <see langword="Default" />。</param>
      <param name="deleteRule">当删除某行时要使用 <see cref="T:System.Data.Rule" /> 值之一。 默认值为 <see langword="Cascade" />。 可能的值包括：<see langword="None" />、<see langword="Cascade" />、<see langword="SetNull" />、<see langword="SetDefault" /> 和 <see langword="Default" />。</param>
      <param name="updateRule">当某一行被更新时，要使用 <see cref="T:System.Data.Rule" /> 值之一。 默认值为 <see langword="Cascade" />。 可能的值包括：<see langword="None" />、<see langword="Cascade" />、<see langword="SetNull" />、<see langword="SetDefault" /> 和 <see langword="Default" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一列是或两列都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。  
  
- 或 - 
表不属于同一 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>此构造函数在 Visual Studio 环境中提供设计时支持。 因此，使用此构造函数创建的 <see cref="T:System.Data.ForeignKeyConstraint" /> 对象必须通过 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" /> 添加到集合中。 当调用该方法时，必须存在具有指定名称的表和列，或者如果在调用该构造函数之前已经调用了 <see cref="M:System.Data.DataTable.BeginInit" />，则在调用 <see cref="M:System.Data.DataTable.EndInit" /> 时，必须存在具有指定名称的表和列。</summary>
      <param name="constraintName">约束的名称。</param>
      <param name="parentTableName">在约束中包含父级 <see cref="T:System.Data.DataTable" /> 对象的父级 <see cref="T:System.Data.DataColumn" /> 的名称。</param>
      <param name="parentColumnNames">约束中父级 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="childColumnNames">约束中子级 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="acceptRejectRule">
        <see cref="T:System.Data.AcceptRejectRule" /> 值之一。 可能的值包括 <see langword="None" />、<see langword="Cascade" /> 和 <see langword="Default" />。</param>
      <param name="deleteRule">当删除某行时要使用 <see cref="T:System.Data.Rule" /> 值之一。 默认值为 <see langword="Cascade" />。 可能的值包括：<see langword="None" />、<see langword="Cascade" />、<see langword="SetNull" />、<see langword="SetDefault" /> 和 <see langword="Default" />。</param>
      <param name="updateRule">当某一行被更新时，要使用 <see cref="T:System.Data.Rule" /> 值之一。 默认值为 <see langword="Cascade" />。 可能的值包括：<see langword="None" />、<see langword="Cascade" />、<see langword="SetNull" />、<see langword="SetDefault" /> 和 <see langword="Default" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一列是或两列都是 <see langword="null" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。  
  
- 或 - 
表不属于同一 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.Equals(System.Object)">
      <summary>获取一个值，该值指示当前的 <see cref="T:System.Data.ForeignKeyConstraint" /> 是否与指定对象相同。</summary>
      <param name="key">此 <see cref="T:System.Data.ForeignKeyConstraint" /> 将与之比较的对象。 如果两个 <see cref="T:System.Data.ForeignKeyConstraint" /> 约束相同的列，则它们相等。</param>
      <returns>如果对象相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.GetHashCode">
      <summary>获取 <see cref="T:System.Data.ForeignKeyConstraint" /> 对象的此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.AcceptRejectRule">
      <summary>指示调用 <see cref="M:System.Data.DataTable.AcceptChanges" /> 时，通过该约束应发生的操作。</summary>
      <returns>
        <see cref="T:System.Data.AcceptRejectRule" /> 值之一。 可能的值包括 <see langword="None" /> 和 <see langword="Cascade" />。 默认值为 <see langword="None" />。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Columns">
      <summary>获取该约束的子列。</summary>
      <returns>作为约束子列的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.DeleteRule">
      <summary>获取或设置当删除某一行时通过该约束发生的操作。</summary>
      <returns>
        <see cref="T:System.Data.Rule" /> 值之一。 默认值为 <see langword="Cascade" />。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedColumns">
      <summary>该约束的父列。</summary>
      <returns>作为约束父列的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedTable">
      <summary>获取该约束的父表。</summary>
      <returns>该约束的父级 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Table">
      <summary>获取该约束的子表。</summary>
      <returns>作为该约束中子表的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.UpdateRule">
      <summary>获取或设置当更新某一行时通过该约束发生的操作。</summary>
      <returns>
        <see cref="T:System.Data.Rule" /> 值之一。 默认值为 <see langword="Cascade" />。</returns>
    </member>
    <member name="T:System.Data.IColumnMapping">
      <summary>将数据源列与 <see cref="T:System.Data.DataSet" /> 列关联起来，并由 <see cref="T:System.Data.Common.DataColumnMapping" /> 类实现，这是 .NET Framework 数据提供程序通常使用的方法。</summary>
    </member>
    <member name="P:System.Data.IColumnMapping.DataSetColumn">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 中要映射到的列的名称。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中要映射到的列的名称。 该名称不区分大小写。</returns>
    </member>
    <member name="P:System.Data.IColumnMapping.SourceColumn">
      <summary>获取或设置数据源中从其映射的列的名称。 该名称区分大小写。</summary>
      <returns>数据源中列的区分大小写的名称。</returns>
    </member>
    <member name="T:System.Data.IColumnMappingCollection">
      <summary>包含一个 DataColumnMapping 对象的集合，并由 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 实现，这是由 .NET Framework 数据提供程序通常使用的方法。</summary>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Add(System.String,System.String)">
      <summary>使用源列和 <see cref="T:System.Data.DataSet" /> 列名，将 ColumnMapping 对象添加到 ColumnMapping 集合中。</summary>
      <param name="sourceColumnName">源列的区分大小写的名称。</param>
      <param name="dataSetColumnName">
        <see cref="T:System.Data.DataSet" /> 列的名称。</param>
      <returns>已添加到集合中的 ColumnMapping 对象。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Contains(System.String)">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 是否包含具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <param name="sourceColumnName">源列的区分大小写的名称。</param>
      <returns>如果具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象存在，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>获取具有指定 <see cref="T:System.Data.DataSet" /> 列名的 ColumnMapping 对象。</summary>
      <param name="dataSetColumnName">集合中 <see cref="T:System.Data.DataSet" /> 列的名称。</param>
      <returns>具有指定 <see langword="DataSet" /> 列名的 ColumnMapping 对象。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.IndexOf(System.String)">
      <summary>获取具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的位置。 该名称区分大小写。</summary>
      <param name="sourceColumnName">源列的区分大小写的名称。</param>
      <returns>具有指定源列名称的 <see langword="DataColumnMapping" /> 对象的从零开始的位置。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.RemoveAt(System.String)">
      <summary>从集合中移除具有指定 <see cref="P:System.Data.IColumnMapping.SourceColumn" /> 名称的 <see cref="T:System.Data.IColumnMapping" /> 对象。</summary>
      <param name="sourceColumnName">区分大小写的 <see langword="SourceColumn" /> 名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">带有指定的 <see langword="SourceColumn" /> 名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象不存在</exception>
    </member>
    <member name="P:System.Data.IColumnMappingCollection.Item(System.String)">
      <summary>获取或设置具有指定 <see langword="SourceColumn" /> 名称的 <see cref="T:System.Data.IColumnMapping" /> 对象。</summary>
      <param name="index">要查找的 <see langword="SourceColumn" /> 对象的 <see langword="IColumnMapping" /> 名称。</param>
      <returns>具有指定 <see langword="IColumnMapping" /> 名称的 <see langword="SourceColumn" /> 对象。</returns>
    </member>
    <member name="T:System.Data.IDataAdapter">
      <summary>允许对象实现 DataAdapter，并且表示一组用于填充和更新 <see cref="T:System.Data.DataSet" /> 及数据源的方法以及与映射操作有关的属性。  
  
 <see cref="T:System.Data.IDbDataAdapter" /> 实例针对作为（或类似于）具有文字命令（如 Transact-SQL）的关系数据库的数据源，而 <see cref="T:System.Data.IDataAdapter" /> 实例可使用任何类型的数据源。</summary>
    </member>
    <member name="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)">
      <summary>添加或更新 <see cref="T:System.Data.DataSet" /> 中的行以匹配使用 <see cref="T:System.Data.DataSet" /> 名称的数据源中的行，并创建一个名为“Table”的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>将名为“Table”的 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" />，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</summary>
      <param name="dataSet">要用数据源中的架构填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> 对象的数组，这些对象包含从数据源返回的架构信息。</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.GetFillParameters">
      <summary>获取当执行 SQL SELECT 语句时由用户设置的参数。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 对象的数组，这些对象包含由用户设置的参数。</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.Update(System.Data.DataSet)">
      <summary>从名为“Table”的 <see cref="T:System.Data.DataSet" /> 为指定的 <see cref="T:System.Data.DataTable" /> 中每个已插入、已更新或已删除的行调用相应的 INSERT、UPDATE 或 DELETE 语句。</summary>
      <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</param>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingMappingAction">
      <summary>指示或指定是否将未映射的源表或列与其源名一起传递以便筛选或引发错误。</summary>
      <exception cref="T:System.ArgumentException">设置的值不是 <see cref="T:System.Data.MissingMappingAction" /> 值之一。</exception>
      <returns>
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。 默认值为 <see langword="Passthrough" />。</returns>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingSchemaAction">
      <summary>指示或指定是否将丢失的源表、列及其关系添加到数据集架构中，是否忽略它们或者它们是否会引发错误。</summary>
      <exception cref="T:System.ArgumentException">设置的值不是 <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</exception>
      <returns>
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。 默认值为 <see langword="Add" />。</returns>
    </member>
    <member name="P:System.Data.IDataAdapter.TableMappings">
      <summary>指示如何将源表映射到数据集表。</summary>
      <returns>一个集合，它提供返回记录和 <see cref="T:System.Data.DataSet" /> 之间的主映射。 默认值为空集合。</returns>
    </member>
    <member name="T:System.Data.IDataParameter">
      <summary>表示 Command 对象的参数，也可以表示其到 <see cref="T:System.Data.DataSet" /> 列的映射；并由访问数据源的 .NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="P:System.Data.IDataParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性未设置为有效的 <see cref="T:System.Data.DbType" />。</exception>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。 默认值为 <see cref="F:System.Data.DbType.String" />。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是只可输入的参数、只可输出的参数、双向参数还是存储过程返回值参数。</summary>
      <exception cref="T:System.ArgumentException">属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。 默认值为 <see langword="Input" />。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.IsNullable">
      <summary>获取一个值，该值指示参数是否接受 null 值。</summary>
      <returns>如果接受 null 值，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.IDataParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.SourceColumn">
      <summary>获取或设置映射到 <see cref="T:System.Data.DataSet" /> 并且用于加载或返回 <see cref="P:System.Data.IDataParameter.Value" /> 的源列的名称。</summary>
      <returns>映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.SourceVersion">
      <summary>获取或设置要在加载 <see cref="P:System.Data.IDataParameter.Value" /> 时使用的 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <exception cref="T:System.ArgumentException">属性未设置为 <see cref="T:System.Data.DataRowVersion" /> 值之一。</exception>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 默认值为 <see langword="Current" />。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.Value">
      <summary>获取或设置参数的值。</summary>
      <returns>充当参数值的 <see cref="T:System.Object" />。 默认值为 null。</returns>
    </member>
    <member name="T:System.Data.IDataParameterCollection">
      <summary>收集与 Command 对象相关的所有参数以及这些参数到 <see cref="T:System.Data.DataSet" /> 列的映射，并由访问数据源的 .NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="M:System.Data.IDataParameterCollection.Contains(System.String)">
      <summary>获取一个值，该值指示集合中的参数是否具有指定的名称。</summary>
      <param name="parameterName">参数的名称。</param>
      <returns>如果集合包含该参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.IDataParameterCollection.IndexOf(System.String)">
      <summary>在集合中获取 <see cref="T:System.Data.IDataParameter" /> 的位置。</summary>
      <param name="parameterName">参数的名称。</param>
      <returns>集合中 <see cref="T:System.Data.IDataParameter" /> 从零开始的位置。</returns>
    </member>
    <member name="M:System.Data.IDataParameterCollection.RemoveAt(System.String)">
      <summary>从集合中移除 <see cref="T:System.Data.IDataParameter" />。</summary>
      <param name="parameterName">参数的名称。</param>
    </member>
    <member name="P:System.Data.IDataParameterCollection.Item(System.String)">
      <summary>获取或设置指定索引处的参数。</summary>
      <param name="parameterName">要检索的参数的名称。</param>
      <returns>指定的索引中的一个 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Data.IDataReader">
      <summary>提供一种读取结果集（通过对数据源执行命令获取）的一个或多个只进流的方法，并由访问关系数据库的.NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="M:System.Data.IDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.IDataReader" /> 对象。</summary>
    </member>
    <member name="M:System.Data.IDataReader.GetSchemaTable">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，它描述 <see cref="T:System.Data.IDataReader" /> 的列元数据。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.IDataReader" /> 是关闭的。</exception>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.IDataReader.NextResult">
      <summary>在读取一批 SQL 语句的结果时，使数据读取器前进到下一个结果。</summary>
      <returns>如果存在更多行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.IDataReader.Read">
      <summary>让 <see cref="T:System.Data.IDataReader" /> 前进到下一条记录。</summary>
      <returns>如果存在更多行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.IDataReader.Depth">
      <summary>获取一个值，该值指示当前行的嵌套深度。</summary>
      <returns>嵌套的级别。</returns>
    </member>
    <member name="P:System.Data.IDataReader.IsClosed">
      <summary>获取一个值，该值指示数据读取器是否已关闭。</summary>
      <returns>如果数据读取器已关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.IDataReader.RecordsAffected">
      <summary>通过执行 SQL 语句获取更改、插入或删除的行数。</summary>
      <returns>已更改、插入或删除的行数；如果没有受影响的行或语句失败，则为 0；对于 SELECT 语句为 -1。</returns>
    </member>
    <member name="T:System.Data.IDataRecord">
      <summary>为 <see langword="DataReader" /> 提供对每行中的列值的访问权限，并由访问关系数据库的.NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="M:System.Data.IDataRecord.GetBoolean(System.Int32)">
      <summary>获取指定列的布尔值形式的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>列的值。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetByte(System.Int32)">
      <summary>获取指定列的 8 位无符号整数值。</summary>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定列的 8 位无符号整数值。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将字节流从指定列偏移量读入到缓冲区中，将其作为从给定缓冲区偏移量开始的数组。</summary>
      <param name="i">从零开始的列序号。</param>
      <param name="fieldOffset">字段中作为读取操作起始位置的索引。</param>
      <param name="buffer">要读入字节流的缓冲区。</param>
      <param name="bufferoffset">开始读取操作的 <paramref name="buffer" /> 的索引。</param>
      <param name="length">要读取的字节数。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>读取的实际字节数。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetChar(System.Int32)">
      <summary>获取指定列的字符值。</summary>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定列的字符值。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>将字符流从指定列偏移量读入到缓冲区中，将其作为从给定缓冲区偏移量开始的数组。</summary>
      <param name="i">从零开始的列序号。</param>
      <param name="fieldoffset">行中作为读取操作起始位置的索引。</param>
      <param name="buffer">要读入字节流的缓冲区。</param>
      <param name="bufferoffset">开始读取操作的 <paramref name="buffer" /> 的索引。</param>
      <param name="length">要读取的字节数。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>读取的实际字符数。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetData(System.Int32)">
      <summary>返回指定列序号的 <see cref="T:System.Data.IDataReader" />。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定列序号的 <see cref="T:System.Data.IDataReader" />。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetDataTypeName(System.Int32)">
      <summary>获取指定字段的数据类型信息。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定字段的数据类型信息。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetDateTime(System.Int32)">
      <summary>获取指定字段的日期和时间数据值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定字段的日期和时间数据值。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetDecimal(System.Int32)">
      <summary>获取指定字段的固定位置数值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定字段的固定位置数值。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetDouble(System.Int32)">
      <summary>获取指定字段的双精度浮点数。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定字段的双精度浮点数。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetFieldType(System.Int32)">
      <summary>获取对应于会从 <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" /> 返回的 <see cref="T:System.Object" /> 类型的 <see cref="T:System.Type" /> 信息。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>对应于会从 <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" /> 返回的 <see cref="T:System.Object" /> 类型的 <see cref="T:System.Type" /> 信息。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetFloat(System.Int32)">
      <summary>获取指定字段的单精度浮点数。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定字段的单精度浮点数。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetGuid(System.Int32)">
      <summary>返回指定字段的 GUID 值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定字段的 GUID 值。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt16(System.Int32)">
      <summary>获取指定字段的 16 位带符号整数值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定字段的 16 位带符号整数值。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt32(System.Int32)">
      <summary>获取指定字段的 32 位带符号整数值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定字段的 32 位带符号整数值。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt64(System.Int32)">
      <summary>获取指定字段的 64 位带符号整数值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定字段的 64 位带符号整数值。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetName(System.Int32)">
      <summary>获取要查找的字段的名称。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>字段的名称，如果没有要返回的值，则为空字符串 ("")。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetOrdinal(System.String)">
      <summary>返回已命名字段的索引。</summary>
      <param name="name">要查找的字段的名称。</param>
      <returns>已命名字段的索引。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetString(System.Int32)">
      <summary>获取指定字段的字符串值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>指定字段的字符串值。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetValue(System.Int32)">
      <summary>返回指定字段的值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>返回时将包含字段值的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetValues(System.Object[])">
      <summary>使用当前记录的列值填充对象的数组。</summary>
      <param name="values">要将属性字段复制到其中的 <see cref="T:System.Object" /> 数组。</param>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.IsDBNull(System.Int32)">
      <summary>返回指定字段是否设置为 null。</summary>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>如果指定的字段设置为 null，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.IDataRecord.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>如果未位于有效的记录集中，则为 0；否则为当前记录中的列数。 默认值为 -1。</returns>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.Int32)">
      <summary>获取位于指定索引处的列。</summary>
      <param name="i">要获取的列的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <returns>位于作为 <see cref="T:System.Object" /> 指定索引处的列。</returns>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.String)">
      <summary>获取具有指定名称的列。</summary>
      <param name="name">要查找的列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">未找到具有指定名称的列。</exception>
      <returns>具有指定名称、作为 <see cref="T:System.Object" /> 的列。</returns>
    </member>
    <member name="T:System.Data.IDbCommand">
      <summary>表示连接到数据源时执行的 SQL 语句，并由访问关系数据库的 .NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="M:System.Data.IDbCommand.Cancel">
      <summary>尝试取消执行 <see cref="T:System.Data.IDbCommand" />。</summary>
    </member>
    <member name="M:System.Data.IDbCommand.CreateParameter">
      <summary>创建 <see cref="T:System.Data.IDbDataParameter" /> 对象的新实例。</summary>
      <returns>一个 <see langword="IDbDataParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteNonQuery">
      <summary>对 .NET Framework 数据提供程序的 <see langword="Connection" /> 对象执行 SQL 语句，并返回受影响的行数。</summary>
      <exception cref="T:System.InvalidOperationException">连接不存在。  
  
 - 或 -  
  
 连接未打开。</exception>
      <returns>受影响的行数。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader">
      <summary>对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" /> 并生成 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一生成 <see cref="T:System.Data.IDataReader" />。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.IDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteScalar">
      <summary>执行查询，并返回由查询返回的结果集中第一行的第一列。 忽略其他列或行。</summary>
      <returns>结果集中第一行的第一列。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.Prepare">
      <summary>在数据源上创建准备就绪（或已编译）的命令版本。</summary>
      <exception cref="T:System.InvalidOperationException">未设置 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />。  
  
- 或 - 
<see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 不为 <see cref="M:System.Data.OleDb.OleDbConnection.Open" />。</exception>
    </member>
    <member name="P:System.Data.IDbCommand.CommandText">
      <summary>获取或设置对数据源运行的文本命令。</summary>
      <returns>要执行的文本命令。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.CommandTimeout">
      <summary>获取或设置在终止尝试执行命令并生成错误之前的等待时间（以秒为单位）。</summary>
      <exception cref="T:System.ArgumentException">分配的属性值小于 0。</exception>
      <returns>等待命令执行的时间（秒）。 默认值为 30 秒。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.CommandType">
      <summary>指示或指定解释 <see cref="P:System.Data.IDbCommand.CommandText" /> 属性的方式。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 值之一。 默认值为 <see langword="Text" />。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Connection">
      <summary>获取或设置 <see cref="T:System.Data.IDbCommand" /> 的此实例使用的 <see cref="T:System.Data.IDbConnection" />。</summary>
      <returns>与数据源的连接。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Parameters">
      <summary>获取 <see cref="T:System.Data.IDataParameterCollection" />。</summary>
      <returns>SQL 语句或存储过程的参数。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Transaction">
      <summary>获取或设置要在其中执行 .NET Framework 数据提供程序的 <see langword="Command" /> 对象的事务。</summary>
      <returns>.NET Framework 数据提供程序的 <see langword="Command" /> 对象执行。 默认值是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.UpdatedRowSource">
      <summary>获取或设置命令结果在由 <see cref="T:System.Data.Common.DbDataAdapter" /> 的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 方法使用时应用于 <see cref="T:System.Data.DataRow" /> 的方式。</summary>
      <exception cref="T:System.ArgumentException">输入的值不是 <see cref="T:System.Data.UpdateRowSource" /> 值之一。</exception>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。 除非自动生成该命令，否则默认值为 <see langword="Both" />。 如果自动生成该命令，默认值为 <see langword="None" />。</returns>
    </member>
    <member name="T:System.Data.IDbConnection">
      <summary>表示一个与数据源的开放连接，并由访问关系数据库的 .NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction">
      <summary>开始一项数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>以指定的 <see cref="T:System.Data.IsolationLevel" /> 值开始数据库事务。</summary>
      <param name="il">
        <see cref="T:System.Data.IsolationLevel" /> 值之一。</param>
      <returns>表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.ChangeDatabase(System.String)">
      <summary>更改已打开的 <see langword="Connection" /> 对象的当前数据库。</summary>
      <param name="databaseName">要代替当前数据库使用的数据库名称。</param>
    </member>
    <member name="M:System.Data.IDbConnection.Close">
      <summary>关闭与数据库之间的连接。</summary>
    </member>
    <member name="M:System.Data.IDbConnection.CreateCommand">
      <summary>创建并返回一个与连接关联的命令对象。</summary>
      <returns>与连接关联的命令对象。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.Open">
      <summary>打开具有指定设置（由特定于提供程序的 Connection 对象的 <see langword="ConnectionString" /> 属性所指定）的数据库连接。</summary>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionString">
      <summary>获取或设置用于打数据库的字符串。</summary>
      <returns>包含连接设置的字符串。</returns>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionTimeout">
      <summary>获取在尝试建立连接时终止尝试并生成错误之前所等待的时间（以秒为单位）。</summary>
      <returns>等待连接打开所需的时间（以秒为单位）。 默认值为 15 秒。</returns>
    </member>
    <member name="P:System.Data.IDbConnection.Database">
      <summary>获取当前数据库的名称或打开连接后要使用的数据库的名称。</summary>
      <returns>当前数据库的名称或打开连接后要使用的数据库的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.IDbConnection.State">
      <summary>获取连接的当前状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值之一。</returns>
    </member>
    <member name="T:System.Data.IDbDataAdapter">
      <summary>表示一组与命令有关的属性，用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源，由访问关系数据库的 .NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="P:System.Data.IDbDataAdapter.DeleteCommand">
      <summary>获取或设置用于从数据集中删除记录的 SQL 语句。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中已删除的行删除数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.InsertCommand">
      <summary>获取或设置用于将新记录插入到数据源中的 SQL 语句。</summary>
      <returns>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中的新行将记录插入到数据源。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.SelectCommand">
      <summary>获取或设置用于在数据源中选择记录的 SQL 语句。</summary>
      <returns>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它从数据源中选择记录以便放入数据集中。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.UpdateCommand">
      <summary>获取或设置用于更新数据源中的记录的 SQL 语句。</summary>
      <returns>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中已修改的行更新数据源中的记录。</returns>
    </member>
    <member name="T:System.Data.IDbDataParameter">
      <summary>由 Visual Basic.NET 数据设计器使用，用于表示命令对象的参数和（可选）该参数到 <see cref="T:System.Data.DataSet" /> 列的映射。</summary>
    </member>
    <member name="P:System.Data.IDbDataParameter.Precision">
      <summary>指示数值参数的精度。</summary>
      <returns>用于表示数据提供程序 Parameter 对象的 Value 属性的最大位数。 默认值为 0，指示数据提供程序将设置 Value 的精度。</returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Scale">
      <summary>指示数值参数的比例。</summary>
      <returns>对 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 进行解析的小数位数。 默认值为 0。</returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Size">
      <summary>参数的大小。</summary>
      <returns>列中数据的最大大小（字节）。 默认值将根据参数值进行推断。</returns>
    </member>
    <member name="T:System.Data.IDbTransaction">
      <summary>表示要在数据源上执行的事务，并由访问关系数据库的 .NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="M:System.Data.IDbTransaction.Commit">
      <summary>提交数据库事务。</summary>
      <exception cref="T:System.Exception">在尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">已提交或回滚事务。  
  
 - 或 -  
  
 连接已断开。</exception>
    </member>
    <member name="M:System.Data.IDbTransaction.Rollback">
      <summary>从挂起状态回滚事务。</summary>
      <exception cref="T:System.Exception">在尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">已提交或回滚事务。  
  
 - 或 -  
  
 连接已断开。</exception>
    </member>
    <member name="P:System.Data.IDbTransaction.Connection">
      <summary>指定要与事务关联的 Connection 对象。</summary>
      <returns>要与事务关联的 Connection 对象。</returns>
    </member>
    <member name="P:System.Data.IDbTransaction.IsolationLevel">
      <summary>为该事务指定 <see cref="T:System.Data.IsolationLevel" />。</summary>
      <returns>该事务的 <see cref="T:System.Data.IsolationLevel" />。 默认值为 <see langword="ReadCommitted" />。</returns>
    </member>
    <member name="T:System.Data.InRowChangingEventException">
      <summary>表示在 <see cref="M:System.Data.DataRow.EndEdit" /> 事件中调用 <see cref="E:System.Data.DataTable.RowChanging" /> 方法时引发的异常。</summary>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor">
      <summary>初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化信息初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象时所需的数据。</param>
      <param name="context">指定的序列化流的源和目标的说明。</param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="T:System.Data.InternalDataCollectionBase">
      <summary>提供用于创建集合的基本功能。</summary>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.#ctor">
      <summary>初始化 <see cref="T:System.Data.InternalDataCollectionBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.CopyTo(System.Array,System.Int32)">
      <summary>将当前 <see cref="T:System.Data.InternalDataCollectionBase" /> 的所有元素复制到一维 <see cref="T:System.Array" />，从指定的 <see cref="T:System.Data.InternalDataCollectionBase" /> 索引开始。</summary>
      <param name="ar">要将当前 <see cref="T:System.Data.InternalDataCollectionBase" /> 对象的元素复制到其中的一维 <see cref="T:System.Array" />。</param>
      <param name="index">从其所在位置开始复制对象的目标 <see cref="T:System.Array" /> 索引。</param>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.GetEnumerator">
      <summary>获取集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.Count">
      <summary>获取集合中的元素总数。</summary>
      <returns>集合中的元素的总数。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" /> 是否为只读。</summary>
      <returns>如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsSynchronized">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" /> 是否已同步。</summary>
      <returns>如果同步集合，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.List">
      <summary>获取作为列表的集合的项。</summary>
      <returns>包含集合的 <see cref="T:System.Collections.ArrayList" />。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.SyncRoot">
      <summary>获取可用于同步集合的对象。</summary>
      <returns>用于同步集合的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Data.InvalidConstraintException">
      <summary>表示在不正确地尝试创建或访问关系时引发的异常。</summary>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor">
      <summary>初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化信息初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象时所需的数据。</param>
      <param name="context">指定的序列化流的源和目标的说明。</param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="T:System.Data.InvalidExpressionException">
      <summary>表示在尝试将包含无效 <see cref="T:System.Data.DataColumn" /> 的 <see cref="P:System.Data.DataColumn.Expression" /> 添加到 <see cref="T:System.Data.DataColumnCollection" /> 中时引发的异常。</summary>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor">
      <summary>初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象所需的数据。</param>
      <param name="context">给定序列化流的源和目标。</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="T:System.Data.IsolationLevel">
      <summary>指定连接的事务锁定行为。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Chaos">
      <summary>无法覆盖隔离级别更高的事务中的挂起的更改。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadCommitted">
      <summary>在正在读取数据时保持共享锁，以避免脏读，但是在事务结束之前可以更改数据，从而导致不可重复的读取或幻像数据。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadUncommitted">
      <summary>可以进行脏读，意思是说，不发布共享锁，也不接受独占锁。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.RepeatableRead">
      <summary>在查询中使用的所有数据上放置锁，以防止其他用户更新这些数据。 防止不可重复的读取，但是仍可以有幻像行。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Serializable">
      <summary>在 <see cref="T:System.Data.DataSet" /> 上放置范围锁，以防止在事务完成之前由其他用户更新行或向数据集中插入行。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Snapshot">
      <summary>通过在一个应用程序正在修改数据时存储另一个应用程序可以读取的相同数据版本来减少阻止。 表示您无法从一个事务中看到在其他事务中进行的更改，即便重新查询也是如此。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Unspecified">
      <summary>正在使用与指定隔离级别不同的隔离级别，但是无法确定该级别。</summary>
    </member>
    <member name="T:System.Data.ITableMapping">
      <summary>将源表与 <see cref="T:System.Data.DataSet" /> 中的表关联，并由 <see cref="T:System.Data.Common.DataTableMapping" /> 类实现，该类由 .NET Framework 数据提供程序共同使用。</summary>
    </member>
    <member name="P:System.Data.ITableMapping.ColumnMappings">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 的派生 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</summary>
      <returns>数据列映射集合。</returns>
    </member>
    <member name="P:System.Data.ITableMapping.DataSetTable">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 中不区分大小写的表名。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 内的表的不区分大小写的名称。</returns>
    </member>
    <member name="P:System.Data.ITableMapping.SourceTable">
      <summary>获取或设置区分大小写的源表名称。</summary>
      <returns>区分大小写的源表名称。</returns>
    </member>
    <member name="T:System.Data.ITableMappingCollection">
      <summary>包含 TableMapping 对象的集合，并由 <see cref="T:System.Data.Common.DataTableMappingCollection" />（通常由 .NET Framework 数据提供程序共同使用）实现。</summary>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Add(System.String,System.String)">
      <summary>向集合添加表映射。</summary>
      <param name="sourceTableName">区分大小写的源表名称。</param>
      <param name="dataSetTableName">
        <see cref="T:System.Data.DataSet" /> 表的名称。</param>
      <returns>对新映射的 <see cref="T:System.Data.ITableMapping" /> 对象的引用。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Contains(System.String)">
      <summary>获取一个值，该值指示集合是否包含具有指定源表名称的表映射。</summary>
      <param name="sourceTableName">区分大小写的源表名称。</param>
      <returns>如果存在具有指定源表名称的表映射，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.GetByDataSetTable(System.String)">
      <summary>获取具有指定的 <see cref="T:System.Data.DataSet" /> 表名的 TableMapping 对象。</summary>
      <param name="dataSetTableName">集合中表 <see langword="DataSet" /> 的名称。</param>
      <returns>具有指定的 <see langword="DataSet" /> 表名的 TableMapping 对象。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.IndexOf(System.String)">
      <summary>获取 <see cref="T:System.Data.ITableMapping" /> 对象在集合内的位置。</summary>
      <param name="sourceTableName">区分大小写的源表名称。</param>
      <returns>集合中 <see cref="T:System.Data.ITableMapping" /> 对象的从零开始的位置。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.RemoveAt(System.String)">
      <summary>从集合中移除具有指定 <see cref="P:System.Data.ITableMapping.SourceTable" /> 名称的 <see cref="T:System.Data.ITableMapping" /> 对象。</summary>
      <param name="sourceTableName">区分大小写的 <see langword="SourceTable" /> 名称。</param>
    </member>
    <member name="P:System.Data.ITableMappingCollection.Item(System.String)">
      <summary>获取或设置具有指定 <see cref="P:System.Data.ITableMapping.SourceTable" /> 名称的 <see cref="T:System.Data.ITableMapping" /> 的实例。</summary>
      <param name="index">
        <see cref="T:System.Data.ITableMapping" /> 的 <see langword="SourceTable" /> 名称。</param>
      <returns>具有指定的 <see langword="SourceTable" /> 名称的 <see cref="T:System.Data.ITableMapping" /> 的实例。</returns>
    </member>
    <member name="T:System.Data.KeyRestrictionBehavior">
      <summary>标识由 <see langword="KeyRestrictions" /> 属性标识的连接字符串参数的列表，这些参数或者是被允许的，或者是不被允许的。</summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.AllowOnly">
      <summary>默认。 标识唯一允许的其他连接字符串参数。</summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.PreventUsage">
      <summary>标识不允许的其他连接字符串参数。</summary>
    </member>
    <member name="T:System.Data.LoadOption">
      <summary>当使用 <see cref="Overload:System.Data.DataTable.Load" /> 或 <see cref="Overload:System.Data.DataSet.Load" /> 方法时控制数据源中的值如何应用至现有行。</summary>
    </member>
    <member name="F:System.Data.LoadOption.OverwriteChanges">
      <summary>传入此行的值将同时写入每列数据的当前值和原始值版本。</summary>
    </member>
    <member name="F:System.Data.LoadOption.PreserveChanges">
      <summary>传入此行的值将写入每列数据的原始值版本。 每列数据的当前版本不变化。  这是默认设置。</summary>
    </member>
    <member name="F:System.Data.LoadOption.Upsert">
      <summary>传入此行的值将写入每列数据的当前版本。 每列数据的原始版本不变化。</summary>
    </member>
    <member name="T:System.Data.MappingType">
      <summary>指定如何映射 <see cref="T:System.Data.DataColumn" />。</summary>
    </member>
    <member name="F:System.Data.MappingType.Attribute">
      <summary>将列映射到 XML 特性。</summary>
    </member>
    <member name="F:System.Data.MappingType.Element">
      <summary>将列映射到 XML 元素。</summary>
    </member>
    <member name="F:System.Data.MappingType.Hidden">
      <summary>将列映射到内部结构。</summary>
    </member>
    <member name="F:System.Data.MappingType.SimpleContent">
      <summary>将列映射到 <see cref="T:System.Xml.XmlText" /> 节点。</summary>
    </member>
    <member name="T:System.Data.MergeFailedEventArgs">
      <summary>在目标和源 <see langword="DataRow" /> 具有相同的主键值，且将 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 属性设置为“真”时发生。</summary>
    </member>
    <member name="M:System.Data.MergeFailedEventArgs.#ctor(System.Data.DataTable,System.String)">
      <summary>使用 <see cref="T:System.Data.MergeFailedEventArgs" /> 和合并冲突说明来初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 对象。</param>
      <param name="conflict">合并冲突的说明。</param>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Conflict">
      <summary>返回合并冲突的说明。</summary>
      <returns>合并冲突的说明。</returns>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Table">
      <summary>返回 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 对象。</returns>
    </member>
    <member name="T:System.Data.MergeFailedEventHandler">
      <summary>表示用来处理 <see cref="E:System.Data.DataSet.MergeFailed" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件的数据。</param>
    </member>
    <member name="T:System.Data.MissingMappingAction">
      <summary>确定源表或源列中缺少映射时发生的操作。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Error">
      <summary>如果缺少指定的列映射，则生成 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Ignore">
      <summary>忽略没有映射的列或表。 返回 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Passthrough">
      <summary>创建源列或源表，并使用其原始名称将其添加到 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="T:System.Data.MissingPrimaryKeyException">
      <summary>表示在尝试访问没有主键的表中的行时引发的异常。</summary>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化信息初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象时所需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="T:System.Data.MissingSchemaAction">
      <summary>指定在将数据添加到 <see cref="T:System.Data.DataSet" /> 而缺少要求的 <see cref="T:System.Data.DataTable" /> 或 <see cref="T:System.Data.DataColumn" /> 时要采取的操作。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Add">
      <summary>添加必需的列以完成架构。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.AddWithKey">
      <summary>添加必需的列和主键信息以完成架构。 有关如何将主键信息添加到 <see cref="T:System.Data.DataTable" /> 的更多信息，请参见 <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />。为与用于 OLE DB 的 .NET Framework 数据提供程序一起正确运行，<see langword="AddWithKey" /> 要求本机 OLE DB 提供程序通过设置 DBPROP_UNIQUEROWS 属性获得必需的主键信息，然后通过检查 IColumnsRowset 中的 DBCOLUMN_KEYCOLUMN 确定哪些列是主键列。 作为一种备选方法，用户可以在每个 <see cref="T:System.Data.DataTable" /> 上显式设置主键约束。 这将确保对与现有记录匹配的传入记录进行更新，而不是追加。 当使用 <see langword="AddWithKey" /> 时，用于 SQL Server 的 .NET Framework 数据提供程序将 FOR BROWSE 子句追加到正在执行的语句。 用户应该注意潜在的副作用，例如对 SET FMTONLY ON 语句的使用产生的干扰。 有关详细信息，请参阅 SET FMTONLY (Transact-SQL)。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Error">
      <summary>如果缺少指定的列映射，则生成 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Ignore">
      <summary>忽略额外列。</summary>
    </member>
    <member name="T:System.Data.NoNullAllowedException">
      <summary>表示在尝试将 NULL 值插入 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 设置为 <see langword="false" /> 的列中时引发的异常。</summary>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor">
      <summary>初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化信息初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象时所需的数据。</param>
      <param name="context">指定的序列化流的源和目标的说明。</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="T:System.Data.OrderedEnumerableRowCollection`1">
      <summary>表示从查询返回的有序 <see cref="T:System.Data.DataRow" /> 对象的集合。</summary>
      <typeparam name="TRow">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
    </member>
    <member name="T:System.Data.ParameterDirection">
      <summary>指定查询内的有关 <see cref="T:System.Data.DataSet" /> 的参数的类型。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Input">
      <summary>该参数为输入参数。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.InputOutput">
      <summary>参数既能输入，也能输出。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Output">
      <summary>该参数为输出参数。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.ReturnValue">
      <summary>该参数表示从某操作（如存储过程、内置函数或用户定义的函数）返回的值。</summary>
    </member>
    <member name="T:System.Data.PropertyCollection">
      <summary>表示可以添加到 <see cref="T:System.Data.DataColumn" />、<see cref="T:System.Data.DataSet" /> 或 <see cref="T:System.Data.DataTable" /> 的属性集合。</summary>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.PropertyCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Data.PropertyCollection" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象所需的数据。</param>
      <param name="context">给定序列化流的源和目标。</param>
    </member>
    <member name="M:System.Data.PropertyCollection.Clone">
      <summary>创建 <see cref="T:System.Data.PropertyCollection" /> 对象的卷影副本。</summary>
      <returns>返回 <see cref="T:System.Object" />，它是 <see cref="T:System.Data.PropertyCollection" /> 对象的浅表副本。</returns>
    </member>
    <member name="T:System.Data.ReadOnlyException">
      <summary>表示在尝试更改只读列的值时引发的异常。</summary>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.ReadOnlyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化信息初始化 <see cref="T:System.Data.ReadOnlyException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象时所需的数据。</param>
      <param name="context">指定的序列化流的源和目标的说明。</param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.ReadOnlyException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.ReadOnlyException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="T:System.Data.RowNotInTableException">
      <summary>表示尝试在不位于 <see cref="T:System.Data.DataRow" /> 中的 <see cref="T:System.Data.DataTable" /> 上执行操作时引发的异常。</summary>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor">
      <summary>初始化 <see cref="T:System.Data.RowNotInTableException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化信息初始化 <see cref="T:System.Data.RowNotInTableException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象时所需的数据。</param>
      <param name="context">指定的序列化流的源和目标的说明。</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.RowNotInTableException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.RowNotInTableException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="T:System.Data.Rule">
      <summary>指示强制执行 <see cref="T:System.Data.ForeignKeyConstraint" /> 时发生的操作。</summary>
    </member>
    <member name="F:System.Data.Rule.Cascade">
      <summary>删除或更新相关的行。 这是默认设置。</summary>
    </member>
    <member name="F:System.Data.Rule.None">
      <summary>不对相关的行采取任何操作。</summary>
    </member>
    <member name="F:System.Data.Rule.SetDefault">
      <summary>将相关的行中的值设置为 <see cref="P:System.Data.DataColumn.DefaultValue" /> 属性中包含的值。</summary>
    </member>
    <member name="F:System.Data.Rule.SetNull">
      <summary>将相关的行中的值设置为 <see langword="DBNull" />。</summary>
    </member>
    <member name="T:System.Data.SchemaSerializationMode">
      <summary>指示类型化 <see cref="T:System.Data.DataSet" /> 的架构序列化模式。</summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.ExcludeSchema">
      <summary>跳过类型化 <see cref="T:System.Data.DataSet" /> 的架构序列化。</summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.IncludeSchema">
      <summary>包括类型化 <see cref="T:System.Data.DataSet" /> 的架构序列化。 默认值。</summary>
    </member>
    <member name="T:System.Data.SchemaType">
      <summary>指定在执行 <see cref="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> 操作时如何处理现有的架构映射。</summary>
    </member>
    <member name="F:System.Data.SchemaType.Mapped">
      <summary>将任何现有的表映射应用到传入架构。 用转换的架构配置 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.SchemaType.Source">
      <summary>忽略 DataAdapter 上的任何表映射。 使用传入架构配置 <see cref="T:System.Data.DataSet" />，而不应用任何转换。</summary>
    </member>
    <member name="T:System.Data.SerializationFormat">
      <summary>确定 <see cref="T:System.Data.DataSet" /> 的序列化格式。</summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Binary">
      <summary>作为二进制内容序列化。 仅可在 ADO.NET 2.0 中使用。</summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Xml">
      <summary>作为 XML 内容序列化。 默认值。</summary>
    </member>
    <member name="T:System.Data.SqlDbType">
      <summary>指定要用于 <see cref="T:System.Data.SqlClient.SqlParameter" /> 中的字段和属性的 SQL Server 特定的数据类型。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.BigInt">
      <summary>
        <see cref="T:System.Int64" />。 64 位带符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Binary">
      <summary>
        <see cref="T:System.Array" />类型<see cref="T:System.Byte" />。 二进制数据的固定长度流，范围在 1 到 8,000 个字节之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Bit">
      <summary>
        <see cref="T:System.Boolean" />。 无符号数值，可为 0、1 或 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Char">
      <summary>
        <see cref="T:System.String" />。 非 Unicode 字符的固定长度流，范围在 1 到 8,000 个字符之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Date">
      <summary>日期数据，值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime">
      <summary>
        <see cref="T:System.DateTime" />。 日期和时间数据，值范围从 1753 年 1 月 1 日到 9999 年 12 月 31 日，精度为 3.33 毫秒。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime2">
      <summary>日期和时间数据。 日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTimeOffset">
      <summary>显示时区的日期和时间数据。 日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。 时区值范围从 -14:00 到 +14:00。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Decimal">
      <summary>
        <see cref="T:System.Decimal" />。 固定精度和小数位数数值，在 -10 38 -1 和 10 38 -1 之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Float">
      <summary>
        <see cref="T:System.Double" />。 浮点数在 -1.79E +308 到 1.79E +308 的范围内。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Image">
      <summary>
        <see cref="T:System.Array" />类型<see cref="T:System.Byte" />。 二进制数据的可变长度流，范围在 0 到 2 31 -1（即 2,147,483,647）字节之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Int">
      <summary>
        <see cref="T:System.Int32" />。 32 位带符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Money">
      <summary>
        <see cref="T:System.Decimal" />。 货币值，范围在 -2 63（即 -922,337,203,685,477.5808）到 2 63 -1（即 +922,337,203,685,477.5807）之间，精度为千分之十个货币单位。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NChar">
      <summary>
        <see cref="T:System.String" />。 Unicode 字符的固定长度流，范围在 1 到 4,000 个字符之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NText">
      <summary>
        <see cref="T:System.String" />。 Unicode 数据的可变长度流，最大长度为 2 30 - 1（即 1,073,741,823）个字符。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NVarChar">
      <summary>
        <see cref="T:System.String" />。 Unicode 字符的可变长度流，范围在 1 到 4,000 个字符之间。 如果字符串大于 4,000 个字符，则隐式转换将失败。 使用长度超过 4,000 个字符的字符串时，请显式设置对象。 当数据库列为 <see langword="nvarchar(max)" /> 时，使用 <see cref="F:System.Data.SqlDbType.NVarChar" />。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Real">
      <summary>
        <see cref="T:System.Single" />。 -3.40E +38 到 3.40E +38 范围内的浮点数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallDateTime">
      <summary>
        <see cref="T:System.DateTime" />。 日期和时间数据，值范围从 1900 年 1 月 1 日到 2079 年 6 月 6 日，精度为 1 分钟。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallInt">
      <summary>
        <see cref="T:System.Int16" />。 16 位带符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallMoney">
      <summary>
        <see cref="T:System.Decimal" />。 货币值，范围在 -214,748.3648 到 +214,748.3647 之间，精度为千分之十个货币单位。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Structured">
      <summary>一种特殊数据类型，用于指定表值参数中包含的构造数据。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Text">
      <summary>
        <see cref="T:System.String" />。 非 Unicode 数据的可变长度流，最大长度为 2 31 -1（即 2,147,483,647）个字符。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Time">
      <summary>基于 24 小时制的时间数据。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。 对应于 SQL Server <see langword="time" /> 值。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Timestamp">
      <summary>
        <see cref="T:System.Array" />类型<see cref="T:System.Byte" />。 自动生成的二进制数字，保证在数据库中是唯一的。 通常将 <see langword="timestamp" /> 用作版本标记表行的机制。 存储大小为 8 个字节。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.TinyInt">
      <summary>
        <see cref="T:System.Byte" />。 8 位无符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Udt">
      <summary>SQL Server 用户定义类型 (UDT)。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.UniqueIdentifier">
      <summary>
        <see cref="T:System.Guid" />。 全局唯一标识符（或 GUID）。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarBinary">
      <summary>
        <see cref="T:System.Array" />类型<see cref="T:System.Byte" />。 二进制数据的可变长度流，范围在 1 到 8,000 个字节之间。 如果字节数组大于 8,000 个字节，则隐式转换将失败。 使用大于 8000 个字节的字节数组时，请显式设置对象。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarChar">
      <summary>
        <see cref="T:System.String" />。 非 Unicode 字符的可变长度流，范围在 1 到 8,000 个字符之间。 当数据库列为 <see langword="varchar(max)" /> 时，使用 <see cref="F:System.Data.SqlDbType.VarChar" />。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Variant">
      <summary>
        <see cref="T:System.Object" />。 特殊数据类型，可以包含数值、字符串、二进制或日期数据，以及 SQL Server 值 Empty 和 Null，后两个值在未声明其他类型的情况下采用。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Xml">
      <summary>XML 值。 使用 <see cref="M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)" /> 方法或 <see cref="P:System.Data.SqlTypes.SqlXml.Value" /> 属性获取字符串形式的 XML，或通过调用 <see cref="M:System.Data.SqlTypes.SqlXml.CreateReader" /> 方法获取 <see cref="T:System.Xml.XmlReader" /> 形式的 XML。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.INullable">
      <summary>所有 <see cref="N:System.Data.SqlTypes" /> 对象和结构均实现 <see langword="INullable" /> 接口。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.INullable.IsNull">
      <summary>指示结构是否为 null。 此属性为只读。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />
        <see langword="true" /> 如果此对象的值为 null。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlAlreadyFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类的新实例。</summary>
      <param name="message">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类的新实例。</summary>
      <param name="message">引发异常时显示的字符串。</param>
      <param name="e">对内部异常的引用。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBinary">
      <summary>表示要存储在数据库中或从数据库中检索的二进制数据的可变长度流。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBinary.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 结构的此实例的 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的新实例，将 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性设置为已提供的字节数组的内容。</summary>
      <param name="value">要存储或检索的字节数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>串联两个指定的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值以创建一个新的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />，为 x 和 y 的串联值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与所提供的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象进行比较，并返回其相对值的指示值。</summary>
      <param name="value">要与此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象进行比较的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>有符号的数，指示此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象的值小于该对象。</description></item><item><term> 零</term><description> 此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与对象相同。</description></item><item><term> 大于零</term><description> 此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象大于对象，或者该对象为空引用。</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与所提供的对象进行比较，并返回其相对值的指示值。</summary>
      <param name="value">要与此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构比较的对象。</param>
      <returns>有符号的数，指示此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象的值小于该对象。</description></item><item><term> 零</term><description> 此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与对象相同。</description></item><item><term> 大于零</term><description> 此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象大于对象，或者该对象为空引用。</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>串联两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>
        <paramref name="x" /> 和 <paramref name="y" /> 参数的串联值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。 如果任一实例为 null，则 <see langword="SqlBinary" /> 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 对象的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 属性进行比较。</summary>
      <param name="value">要比较的对象。</param>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的实例并且两者相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetHashCode">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否大于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否小于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否小于或等于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>串连两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>
        <paramref name="x" /> 和 <paramref name="y" /> 参数的串联值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Byte[]">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构转换为 <see cref="T:System.Byte" /> 数组。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>
        <see cref="T:System.Byte" /> 数组。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlBinary">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否大于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Implicit(System.Byte[])~System.Data.SqlTypes.SqlBinary">
      <summary>将字节数组转换为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <param name="x">要转换的字节数组。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，它表示已转换的字节数组。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否小于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否小于或等于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchema" /> 实例。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToSqlGuid">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的此实例转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象转换为字符串。</summary>
      <returns>一个包含 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的字符串。 如果 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 为 null，字符串将包含“null”。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构是否为 null。 此属性为只读。</summary>
      <returns>如果是 <see langword="null" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Item(System.Int32)">
      <summary>从 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性获取单字节，该属性位于整数参数 <paramref name="index" /> 指示的位置。 如果 <paramref name="index" /> 指示位置位于字节数组的结尾以外，将引发 <see cref="T:System.Data.SqlTypes.SqlNullValueException" />。 此属性为只读。</summary>
      <param name="index">要检索的字节的位置。</param>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 时，读取该属性。  
  
- 或 - 
<paramref name="index" /> 参数指示超过字节数组长度（由 <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 属性指示）的位置。</exception>
      <returns>位于整数参数指示的位置的字节。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Length">
      <summary>获取 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性的长度（以字节为单位）。 此属性为只读。</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 属性包含 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 时，读取 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 属性。</exception>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性中的二进制数据的长度。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的值。 此属性是只读的。</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当属性包含 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 时，读取 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 属性。</exception>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的值。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBoolean">
      <summary>表示要存储在数据库中或者从数据库中检索的整数值，为 1 或 0。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.False">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 结构实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 属性的“假”值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 结构的此实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.One">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 属性的 1 值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.True">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 结构实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 属性的“真”值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Zero">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 结构实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 属性的零值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Boolean)">
      <summary>使用提供的布尔值初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的新实例。</summary>
      <param name="value">新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值，为 <see langword="true" /> 或 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Int32)">
      <summary>使用指定的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的新实例。</summary>
      <param name="value">其值用于新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行按位 AND 运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>逻辑 AND 运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象与所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象进行比较，并返回其相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /><see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象，或空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
      <returns>有符号数，指示实例和值的相对值。  
  
 <list type="table"><listheader><term> 值</term><description> 说明</description></listheader><item><term> 负整数</term><description> 此实例小于 <paramref name="value" />。</description></item><item><term> 零</term><description> 此实例等于 <paramref name="value" />。</description></item><item><term> 正整数</term><description> 此实例大于 <paramref name="value" /> ，或 <paramref name="value" /> (Visual Basic) 中为空引用 <see langword="Nothing" /> 。</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构与指定对象进行比较，并返回它们的相对值指示。</summary>
      <param name="value">要比较的对象，或 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
      <returns>有符号数，指示实例和值的相对值。  
  
 <list type="table"><listheader><term> 值</term><description> 说明</description></listheader><item><term> 负整数</term><description> 此实例小于 <paramref name="value" />。</description></item><item><term> 零</term><description> 此实例等于 <paramref name="value" />。</description></item><item><term> 正整数</term><description> 此实例大于 <paramref name="value" /> ，或 <paramref name="value" /> (Visual Basic) 中为空引用 <see langword="Nothing" /> 。</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>如果两个实例相等，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；如果两个实例不相等，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 比较。</summary>
      <param name="value">要比较的对象。</param>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的实例并且两者相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>如果第一个实例大于第二个实例，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否则，返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>如果第一个实例大于或等于第二个实例，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>如果第一个实例小于第二个实例，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否则，返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>如果第一个实例小于或等于第二个实例，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否则，返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>如果两个实例不相等，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；如果两个实例相等，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>对提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行 1 的求补运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 one 的补码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行按位 AND 运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>逻辑 AND 运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对其操作数执行按位“或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>逻辑 OR 运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>如果两个实例相等，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；如果两个实例不相等，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对提供的参数执行按位“异或”(XOR) 运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>逻辑 XOR 运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Boolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 转换为布尔值。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>设置为 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的布尔值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的值等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的值等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的值等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_False(System.Data.SqlTypes.SqlBoolean)">
      <summary>可以使用“假”运算符来测试 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定它是否为“假”。</summary>
      <param name="x">要测试的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>如果所提供的参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 <see langword="false" />，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构进行比较，以确定第一个结构是否大于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象。</param>
      <returns>如果第一个实例大于第二个实例，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否则，返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>如果第一个实例大于或等于第二个实例，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Implicit(System.Boolean)~System.Data.SqlTypes.SqlBoolean">
      <summary>将提供的字节值转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的字节值。</param>
      <returns>包含 0 或 1 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>如果两个实例不相等，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；如果两个实例相等，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>如果第一个实例小于第二个实例，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>如果第一个实例小于或等于第二个实例，则返回 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LogicalNot(System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 执行 NOT 运算。</summary>
      <param name="x">将要对其执行 NOT 运算的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果参数为 true，则其 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；如果参数为 NULL，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />；其他情况为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>对提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行 1 的求补运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 one 的补码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_True(System.Data.SqlTypes.SqlBoolean)">
      <summary>可以使用“真”运算符来测试 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定它是否为真。</summary>
      <param name="x">要测试的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>如果所提供的参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 <see langword="true" />，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行按位“或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其“值”是按位“或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Parse(System.String)">
      <summary>将逻辑值的指定 <see cref="T:System.String" /> 表示形式转换为它的等效 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <param name="s">要转换的 <see cref="T:System.String" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，包含已分析的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" />，则新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值为 1。 否则，新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" />，则新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 1。 否则，新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" />，则新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值为 1。 否则，新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see langword="SqlInt16" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" />，则新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值为 1。 否则，新的 <see langword="SqlInt16" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see langword="SqlInt32" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" />，则新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值为 1。 否则，新的 <see langword="SqlInt32" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see langword="SqlInt64" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" />，则新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的值为 1。 否则，新的 <see langword="SqlInt64" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值为 <see langword="true" />，则新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 1。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="false" />，则新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值既不是 1 也不是 0，则新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其值为 1 或 0。  
  
如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 1；否则新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 <see langword="true" />，那么 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的值为 1。 否则，新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为字符串。</summary>
      <returns>一个字符串，它包含 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的值。 如果值为 null，字符串将包含“null”。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>逻辑 XOR 运算的结果。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.ByteValue">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的以字节表示的值。</summary>
      <returns>表示 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值的字节。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsFalse">
      <summary>指示当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 是否为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</summary>
      <returns>如果 <see langword="true" /> 为 <see langword="Value" />，则为 <see langword="False" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构是否为 null。</summary>
      <returns>
        <see langword="true" /> 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构为 null，则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsTrue">
      <summary>获取一个值，该值指示当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 是否为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。</summary>
      <returns>如果 <see langword="true" /> 为 <see langword="Value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值。 此属性为只读。</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该属性设置为 null。</exception>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlByte">
      <summary>表示要存储在数据库中或从数据库中检索的 8 位无符号整数，此整数在 0 到 255 范围内。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MaxValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MinValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的最小可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 结构的此实例的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Zero">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 结构实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性的零值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.#ctor(System.Byte)">
      <summary>使用指定的字节值初始化 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的新实例。</summary>
      <param name="value">要存储在新 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性中的字节值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see langword="Value" /> 属性包含加法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位 AND 运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>按位 AND 运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位“或”计算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>按位“或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)">
      <summary>将此实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象进行比较，并返回其相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Object)">
      <summary>将此实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以其第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。 如果任一实例为 null，则 <see langword="SqlByte" /> 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Object)">
      <summary>将提供的 <see cref="T:System.Object" /> 参数与 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 对象的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性进行比较。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的实例并且两者相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数后所得的余数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 包含该余数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 值相除，并返回余数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含该乘法运算的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>二进制反码运算符对其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位二进制反码运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的二进制反码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含两个操作数的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位 AND 运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>按位 AND 运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位“或”计算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>按位“或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以其第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>按位“异或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlByte">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" />，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于提供的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Byte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为字节。</summary>
      <param name="x">要转换为字节的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个字节，其值等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlByte">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 参数的 <see langword="SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlByte">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see langword="SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see langword="SqlString" /> 类的实例。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示的数值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see langword="SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Implicit(System.Byte)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的字节值转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的字节值。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于提供的参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数后所得的余数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 包含该余数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含该乘法运算的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>二进制反码运算符对其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位二进制反码运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的二进制反码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数中减去第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>从第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数中减去第二个操作数所得的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 8 位无符号整数。</summary>
      <param name="s">要分析的 <see langword="String" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，包含 <see langword="String" /> 参数表示的 8 位数字。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数中减去第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>从第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数中减去第二个操作数所得的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 不是零，则为 <see langword="true" />；如果为零，则为 <see langword="false" />；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个 <see langword="SqlDecimal" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>与此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 具有相同值的 <see langword="SqlDouble" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>与此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 具有相同值的 <see langword="SqlInt16" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>与此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 具有相同值的 <see langword="SqlInt32" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个 <see langword="SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于此 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个 <see langword="SqlMoney" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个 <see langword="SqlSingle" /> 结构，它与此 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 结构具有相同的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的此实例转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see langword="SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个包含 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的字符串。 如果 <see langword="Value" /> 为空，<see langword="String" /> 将为空字符串。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>该 XOR 运算的结果。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值。 此属性是只读的。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBytes">
      <summary>表示包装 <see cref="P:System.Data.SqlTypes.SqlBytes.Buffer" /> 或 <see cref="P:System.Data.SqlTypes.SqlBytes.Stream" /> 的可变引用类型。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Byte[])">
      <summary>根据指定的字节数组初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类的新实例。</summary>
      <param name="buffer">无符号字节的数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Data.SqlTypes.SqlBinary)">
      <summary>根据指定的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 类的新实例。</summary>
      <param name="value">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.IO.Stream)">
      <summary>根据指定的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 值初始化 <see cref="T:System.IO.Stream" /> 类的新实例。</summary>
      <param name="s">
        <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个指示指定的 <see langword="XmlSchemaSet" /> 的 XSD 的 <see langword="string" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlBytes">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。</summary>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBytes)~System.Data.SqlTypes.SqlBinary">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中的字节复制到传入缓冲区中并返回复制的字节数。</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 实例中包含的值的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 长值偏移量。</param>
      <param name="buffer">要在其中执行“复制到”操作的字节数组缓冲区。</param>
      <param name="offsetInBuffer">缓冲区中的一个 <see cref="T:System.Int32" /> 整数偏移量，以启动“复制到”操作。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 整数，表示要复制的字节数。</param>
      <returns>一个 <see cref="T:System.Int64" /> 长值，表示已复制的字节数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetLength(System.Int64)">
      <summary>设置此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例的长度。</summary>
      <param name="value">表示长度的 <see cref="T:System.Int64" /> 长值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetNull">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例设置为 null。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>获取序列化信息以及包含重新实例化此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例所需的所有数据。</summary>
      <param name="info">用序列化信息填充的对象。</param>
      <param name="context">序列化的目标上下文。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>此成员支持 .NET Framework 结构，不能在代码中直接使用。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="r">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.ToSqlBinary">
      <summary>从此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 实例构造和返回一个 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</summary>
      <returns>来自此实例的 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将传入缓冲区中的字节复制到此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中。</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 实例中包含的值的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 长值偏移量。</param>
      <param name="buffer">要在其中执行“复制到”操作的字节数组缓冲区。</param>
      <param name="offsetInBuffer">缓冲区中的一个 <see cref="T:System.Int32" /> 整数偏移量，以启动“复制到”操作。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 整数，表示要复制的字节数。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Buffer">
      <summary>返回一个对内部缓冲区的引用。</summary>
      <returns>对内部缓冲区的引用。 对于在非托管指针上创建的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例，将返回内部缓冲区的托管副本。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 是否为 null。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 为 null，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Item(System.Int64)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。</summary>
      <param name="offset">一个 <see cref="T:System.Int64" /> 值。</param>
      <returns>一个 <see cref="T:System.Byte" /> 值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Length">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中包含的值的长度。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，表示 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中包含的值的长度。  
  
如果没有可由实例使用的缓冲区，或者如果该值为 null，则返回 -1。  
  
返回流包装实例的 <see cref="P:System.IO.Stream.Length" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.MaxLength">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的内部缓冲区的值的最大长度。</summary>
      <returns>一个长值，表示内部缓冲区的值的最大长度。 对于流包装的 <see cref="T:System.Data.SqlTypes.SqlBytes" />，将返回 -1。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Null">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的 null 实例。</summary>
      <returns>其 <see cref="P:System.Data.SqlTypes.SqlBytes.IsNull" /> 属性返回的实例 <see langword="true" /> 。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Storage">
      <summary>返回有关此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例的存储状态的信息。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.StorageState" /> 枚举。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Stream">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的数据作为流进行获取或设置。</summary>
      <returns>包含 SqlBytes 数据的流。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Value">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 保存的值的托管副本。</summary>
      <returns>此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的值，为字节数组。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlChars">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 是一个可变引用类型，可包装 <see cref="T:System.Char" /> 数组或 <see cref="T:System.Data.SqlTypes.SqlString" /> 实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Char[])">
      <summary>根据指定的字符数组初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类的新实例。</summary>
      <param name="buffer">
        <see cref="T:System.Char" /> 数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Data.SqlTypes.SqlString)">
      <summary>根据指定的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlChars)~System.Data.SqlTypes.SqlString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlChars">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。</summary>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Read(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中的字符复制到传入缓冲区中，并返回复制的字符数。</summary>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中所含值的 <see cref="T:System.Int64" /><see langword="long" /> 值偏移量。</param>
      <param name="buffer">向其复制的字符数组缓冲区。</param>
      <param name="offsetInBuffer">缓冲区中的一个 <see cref="T:System.Int32" /> 整数偏移量，以启动“复制到”操作。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 整数值，表示要复制的字符数。</param>
      <returns>表示已复制字节数的 <see cref="T:System.Int64" /><see langword="long" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetLength(System.Int64)">
      <summary>设置此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例的长度。</summary>
      <param name="value">表示长度的 <see cref="T:System.Int64" /><see langword="long" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetNull">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例设置为 null。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>获取序列化信息以及包含重新实例化此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例所需的所有数据。</summary>
      <param name="info">用序列化信息填充的对象。</param>
      <param name="context">序列化的目标上下文。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>此成员支持 .NET Framework 结构，不能在代码中直接使用。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="r">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示形式。</summary>
      <returns>此类的 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Write(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>将传入缓冲区中的字符复制到此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中。</summary>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中所含值的 <see langword="long" /> 值偏移量。</param>
      <param name="buffer">向其复制的字符数组缓冲区。</param>
      <param name="offsetInBuffer">缓冲区中的一个 <see cref="T:System.Int32" /> 整数偏移量，以启动“复制到”操作。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 整数，表示要复制的字符数。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Buffer">
      <summary>返回一个对内部缓冲区的引用。</summary>
      <returns>对内部缓冲区的引用。 对于在非托管指针上创建的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例，将返回内部缓冲区的托管副本。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 是否为 null。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlChars" /> 为 null，则返回 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Item(System.Int64)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。</summary>
      <param name="offset">一个 <see cref="T:System.Int64" /> 值。</param>
      <returns>一个 <see cref="T:System.Char" /> 值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Length">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中包含的值的长度。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指示 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中包含的值的长度（以字符为单位）。  
  
如果没有可由该实例使用的缓冲区，或者该值为 null，则返回 -1。  
  
返回流包装实例的 <see cref="P:System.IO.Stream.Length" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.MaxLength">
      <summary>获取内部缓冲区可保存的值的最大长度（以双字节字符为单位）。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，表示内部缓冲区的值的最大长度（以双字节为单位）。  
  
对于流包装的 <see cref="T:System.Data.SqlTypes.SqlChars" />，将返回 -1。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Null">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的 null 实例。</summary>
      <returns>其 <see cref="P:System.Data.SqlTypes.SqlChars.IsNull" /> 属性返回的实例 <see langword="true" /> 。 有关详细信息，请参阅 处理 Null 值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Storage">
      <summary>返回有关此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例的存储状态的信息。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.StorageState" /> 枚举。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Value">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 保存的值的托管副本。</summary>
      <returns>此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的值，为字符数组。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlCompareOptions">
      <summary>为 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构指定比较选项值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort">
      <summary>指定排序应基于字符数值（而非其字母值）。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort2">
      <summary>执行二进制排序。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreCase">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略大小写。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreKanaType">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略假名类型。 假名类型是指日语平假名和片假名字符，它们表示日语中的语音。 平假名用于表示日语自有的短语和字词，而片假名用于表示从其他语言借用的字词，如“computer”或“Internet”。 语音既可以用平假名也可以用片假名表示。 如果选择该值，则认为一个语音的平假名字符等于同一语音的片假名字符。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreNonSpace">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略非空格组合字符，比如音调符号。 Unicode 标准将组合字符定义为与基字符组合起来产生新字符的字符。 非空格组合字符在呈现时本身不占用字符空间。 有关非空格组合字符的更多信息，请参阅 https://www.unicode.org 上的 Unicode 标准。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreWidth">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略字符宽度。 例如，日语片假名字符可以写为全角或半角形式；如果选择该值，则认为写为全角形式的片假名字符等于写为半角形式的同一字符。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.None">
      <summary>为 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较指定默认选项设置。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDateTime">
      <summary>表示要存储在数据库中或从数据库中检索的日期和时间数据，值范围介于 1753 年 1 月 1 日到 9999 年 12 月 31 日之间，精度为 3.33 毫秒。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构具有与其相应的 .NET Framework 类型 <see cref="T:System.DateTime" /> 不同的基础数据类型，该结构可以表示 12:00:00 AM 1/1/0001 和 11:59:59 PM 12/31/9999 之间的任何时间，精度可达到 100 毫微秒。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 实际上存储的是相对于 00:00:00 AM 1/1/1900 的差值。 因此，将“00:00:00 AM 1/1/1900”转换为整数将返回 0。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MaxValue">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的最大有效日期值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MinValue">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的最小有效日期值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 结构的此实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerHour">
      <summary>值为等效于 1 小时的刻度数的常数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerMinute">
      <summary>值为等效于 1 分钟的刻度数的常数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerSecond">
      <summary>值为等效于 1 秒的刻度数的常数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.DateTime)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="value">
        <see langword="DateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32)">
      <summary>使用提供的参数初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="dayTicks">将日期表示为刻度数的整数值。</param>
      <param name="timeTicks">将时间表示为刻度数的整数值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>通过使用提供的参数初始化年、月、日，来初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="year">一个整数，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的年份值。</param>
      <param name="month">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的月份值。</param>
      <param name="day">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的日值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>通过使用所提供的参数初始化新结构的年、月、日、小时、分钟和秒，来初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="year">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的年份值。</param>
      <param name="month">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的月份值。</param>
      <param name="day">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中月份的第几天的值。</param>
      <param name="hour">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的小时值。</param>
      <param name="minute">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的分钟值。</param>
      <param name="second">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的秒钟值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>通过使用所提供的参数初始化新结构的年、月、日、小时、分钟、秒和毫秒，来初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="year">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的年份值。</param>
      <param name="month">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的月份值。</param>
      <param name="day">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中月份的第几天的值。</param>
      <param name="hour">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的小时值。</param>
      <param name="minute">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的分钟值。</param>
      <param name="second">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的秒钟值。</param>
      <param name="millisecond">一个双精度型值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的毫秒值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>通过使用所提供的参数初始化新结构的年、月、日、小时、分钟、秒和毫秒，来初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="year">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的年份值。</param>
      <param name="month">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的月份值。</param>
      <param name="day">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的日值。</param>
      <param name="hour">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的小时值。</param>
      <param name="minute">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的分钟值。</param>
      <param name="second">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的秒钟值。</param>
      <param name="bilisecond">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的毫秒（千分之一毫秒）。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Add(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>向指定的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 添加一个 <see langword="TimeSpan" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</param>
      <param name="t">一个 <see langword="Timespan" /> 值。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Data.SqlTypes.SqlDateTime)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构与提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构进行比较，并返回其相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</description></item><item><term> 零</term><description> 此实例与 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 相同。</description></item><item><term> 大于零</term><description> 此实例大于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。  
  
- 或 - 
 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构与提供的 <see cref="T:System.Object" /> 进行比较，并返回其相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 对象的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 属性进行比较。</summary>
      <param name="value">要比较的对象。</param>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的实例并且两者相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.NotEquals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例执行逻辑比较，确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Addition(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>将提供的 <see cref="T:System.TimeSpan" /> 参数 <paramref name="t" /> 指示的一段时间添加到提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="t">
        <see cref="T:System.TimeSpan" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。 如果任一参数为 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />，则新的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 将是 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Equality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.DateTime">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构转换为 <see cref="T:System.DateTime" /> 结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.DateTime" /> 对象，其 <see cref="P:System.DateTime.Date" /> 和 <see cref="P:System.DateTime.TimeOfDay" /> 属性与提供的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 属性包含相同的日期和时间值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDateTime">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的日期和时间。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null，则新创建的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的 <see langword="Value" /> 将为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Implicit(System.DateTime)~System.Data.SqlTypes.SqlDateTime">
      <summary>将 <see cref="T:System.DateTime" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</summary>
      <param name="value">
        <see langword="DateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 等于提供的 <see cref="P:System.DateTime.Date" /> 结构的 <see cref="P:System.DateTime.TimeOfDay" /> 和 <see cref="T:System.DateTime" /> 属性的组合。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Inequality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例执行逻辑比较，确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Subtraction(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>从提供的 <see cref="T:System.TimeSpan" /> 结构中减去提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构 <paramref name="t" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="t">
        <see cref="T:System.TimeSpan" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，它表示该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Parse(System.String)">
      <summary>将日期和时间的指定的 <see cref="T:System.String" /> 表示形式转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 形式。</summary>
      <param name="s">要分析的 <see langword="string" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，它等于指定的 <see langword="string" /> 表示的日期和时间。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Subtract(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>从此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 实例中减去指定的 <see langword="Timespan" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</param>
      <param name="t">一个 <see langword="Timespan" /> 值。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see langword="SqlString" /> 结构，其值是表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中包含的日期和时间的字符串。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 <see langword="String" />，它表示此 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 属性。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.DayTicks">
      <summary>获取刻度数，它表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的日期。</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 <see langword="Value" /> 结构的 <see cref="N:System.Data.SqlTypes" /> 属性设置为 null 时所引发的异常。</exception>
      <returns>刻度数，表示此 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 属性中包含的日期。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.TimeTicks">
      <summary>获取表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的时间的刻度数。</summary>
      <returns>表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的时间的刻度数。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的值。 此属性是只读的。</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 <see langword="Value" /> 结构的 <see cref="N:System.Data.SqlTypes" /> 属性设置为 null 时所引发的异常。</exception>
      <returns>此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的值。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDecimal">
      <summary>表示具有固定精度和小数位数的数值，该数值介于 - 10^38 +1 和 10^38 - 1 之间。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxPrecision">
      <summary>一个常数，它表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Precision" /> 属性的可能的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxScale">
      <summary>一个常数，它表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Scale" /> 属性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MinValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的最小值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 类的此实例的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用提供的参数初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="bPrecision">可用来表示新 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 属性的最大位数。</param>
      <param name="bScale">新 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 属性将解析为的小数位数。</param>
      <param name="fPositive">一个布尔值，它指示新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构是表示正数还是负数。</param>
      <param name="data1">一个 32 位无符号整数，它将与 data2、data3 和 data4 结合，以组成一个 128 位无符号整数，该整数表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
      <param name="data2">一个 32 位无符号整数，它将与 data1、data3 和 data4 结合，以组成一个 128 位无符号整数，该整数表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
      <param name="data3">一个 32 位无符号整数，它将与 data1、data2 和 data4 结合，以组成一个 128 位无符号整数，该整数表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
      <param name="data4">一个 32 位无符号整数，它将与 data1、data2 和 data3 结合，以组成一个 128 位无符号整数，该整数表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32[])">
      <summary>使用提供的参数初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="bPrecision">可用来表示新 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 属性的最大位数。</param>
      <param name="bScale">新 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 属性将解析为的小数位数。</param>
      <param name="fPositive">一个布尔值，它指示新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构是表示正数还是负数。</param>
      <param name="bits">128 位无符号整数，提供新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Decimal)">
      <summary>使用提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 值初始化 <see cref="T:System.Decimal" /> 结构的新实例。</summary>
      <param name="value">要作为 <see cref="T:System.Decimal" /> 结构存储的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Double)">
      <summary>使用提供的 double 类型的参数初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="dVal">一个双精度型值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int32)">
      <summary>使用提供的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="value">提供的整数值，它将用作新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int64)">
      <summary>使用提供的长整数值初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="value">提供的长整型值，它将用作新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Abs(System.Data.SqlTypes.SqlDecimal)">
      <summary>Abs 方法获取 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的绝对值。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的绝对值的无符号数字。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Add(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.AdjustScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Boolean)">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数的小数位数调整为位数参数指示的位数。 取决于 fRound 参数的值，该值将舍入到适当的位数或者截断。</summary>
      <param name="n">要调整的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="digits">已调整的结构的位数。</param>
      <param name="fRound">如果此参数是 <see langword="true" />，将舍入新值，如果为 <see langword="false" />，将截断该值。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含调整后的数字。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Ceiling(System.Data.SqlTypes.SqlDecimal)">
      <summary>返回大于或等于指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的最小整数。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，将要计算其最大值。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，表示大于或等于指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的最小整数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Data.SqlTypes.SqlDecimal)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 对象进行比较，并返回其相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ConvertToPrecScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数的值调整为指定精度和小数位数。</summary>
      <param name="n">将要调整其值的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="precision">新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的精度。</param>
      <param name="scale">新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的小数位数。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值已经调整为参数中指定的精度和小数位数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Divide(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>该除法运算符计算将第一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数除以第二个操作数所得的结果。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。 如果任一实例为 null，则 <see langword="SqlDecimal" /> 的值将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Object)">
      <summary>将提供的 <see cref="T:System.Object" /> 参数与 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 实例的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 属性进行比较。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的实例并且两者相等，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Floor(System.Data.SqlTypes.SqlDecimal)">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 数字舍入为下一个较小的整数。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，将要计算其最小值。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其中包含此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构执行逻辑比较，以确定第一个结构是否大于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构执行逻辑比较，以确定第一个结构是否小于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>该乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该乘法运算的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.NotEquals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Addition(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Division(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>该除法运算符计算将第一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数除以第二个操作数所得的结果。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Equality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Decimal">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Decimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see langword="Decimal" /> 结构，它的值等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Double)~System.Data.SqlTypes.SqlDecimal">
      <summary>将 <see cref="T:System.Double" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Double" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的值等于 <see cref="T:System.Double" /> 参数的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构执行逻辑比较，以确定第一个结构是否大于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 SqlDecimal。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDecimal">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 操作数转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlDecimal">
      <summary>将 <see cref="T:System.Decimal" /> 值转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Decimal" /> 值。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see langword="Decimal" /> 参数的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Int64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Int64" /> 结构。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="T:System.Int64" /> 参数的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Inequality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构执行逻辑比较，以确定第一个结构是否小于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>该乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该乘法运算的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Subtraction(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算从第一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数中减去第二个操作数所得的结果。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的“值”属性包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_UnaryNegation(System.Data.SqlTypes.SqlDecimal)">
      <summary>一元负运算符对 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数求反。</summary>
      <param name="x">需求反的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值包含求反的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 形式。</summary>
      <param name="s">要分析的 <see langword="String" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Power(System.Data.SqlTypes.SqlDecimal,System.Double)">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值乘到指定的幂。</summary>
      <param name="n">要乘幂的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="exp">一个 double 类型值，指示数字应乘到的幂。</param>
      <returns>一个包含结果的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Round(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>以指定精度获取与指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值最接近的数字。</summary>
      <param name="n">要舍入的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="position">返回值中的有效小数位数（精度）。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其中包含该舍入运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Sign(System.Data.SqlTypes.SqlDecimal)">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的符号。</summary>
      <param name="n">要计算其符号的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个指示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的符号的数字。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Subtract(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算从第一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数中减去第二个操作数所得的结果。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的“值”属性包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToDouble">
      <summary>返回等于此实例的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的内容的双精度型值。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的小数表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 不是零，则为 <see langword="true" />；如果为零，则为 <see langword="false" />；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 <see langword="Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see langword="Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 <see langword="true" />，则 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see langword="Value" /> 将为 1。 否则，<see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see langword="Value" /> 将为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，它的值是一个表示此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构中包含的值的字符串。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个新的 <see cref="T:System.String" /> 对象，其中包含 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Truncate(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值截断到希望的位置。</summary>
      <param name="n">要截断的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="position">数字将要截断到的小数位置。</param>
      <returns>为 <paramref name="position" /> 参数提供一个负值，以便将该值截断到小数点左侧对应的位置。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.BinData">
      <summary>以字节数组形式获取此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值的二进制表示形式。</summary>
      <returns>一个字节数组，其中包含 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值的二进制表示形式。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Data">
      <summary>以整数数组形式获取此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的二进制表示形式。</summary>
      <returns>一个整数数组，其中包含此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的二进制表示形式。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构是否为 null。</summary>
      <returns>如果此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构为 null，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsPositive">
      <summary>指示此 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 是否大于零。</summary>
      <returns>如果将 Null 赋给了 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Precision">
      <summary>获取用于表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的最大位数。</summary>
      <returns>用于表示此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see langword="Value" /> 的最大位数。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Scale">
      <summary>获取 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 解析为的小数位数。</summary>
      <returns>
        <see langword="Value" /> 属性解析后的小数位数。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。 此属性是只读的。</summary>
      <returns>介于 -79,228,162,514,264,337,593,543,950,335 到 79,228,162,514,162,514,264,337,593,543,950,335 之间的数字。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDouble">
      <summary>表示要存储在数据库中或从数据库中检索的浮点数字，该数字介于 -1.79E+308 到 1.79E+308 的范围内。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MaxValue">
      <summary>一个常数，表示 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MinValue">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的最小可能值的常数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 结构的此实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Zero">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 结构实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 属性的零值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.#ctor(System.Double)">
      <summary>通过使用提供的双精度型参数设置新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 属性，从而初始化 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 结构的新实例。</summary>
      <param name="value">一个双精度型值，其值用于新 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该加法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数除以第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它包含该除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 对象的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 属性进行比较。</summary>
      <param name="value">要比较的对象。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetHashCode">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定它们是否不等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该加法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数除以第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它包含该除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 为 0 或 1，取决于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 属性。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为双精度型值。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>等效于指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值的双精度型值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示的数值。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 <see cref="F:System.Data.SqlTypes.SqlString.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlByte" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 <see cref="F:System.Data.SqlTypes.SqlByte.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 <see cref="F:System.Data.SqlTypes.SqlDecimal.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 <see cref="F:System.Data.SqlTypes.SqlInt16.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 <see cref="F:System.Data.SqlTypes.SqlInt64.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 <see cref="F:System.Data.SqlTypes.SqlSingle.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的字节值转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">要转换的双精度型值。</param>
      <returns>与指定双精度型参数具有相同值的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数中减去第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)">
      <summary>返回指定 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的求反值。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，包含求反的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效双精度浮点数字。</summary>
      <param name="s">要分析的 <see langword="String" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />，包含 <see langword="String" /> 所表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数中减去第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>.NET 框架所使用的 XML 架构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>一个 <see langword="SqlBoolean" /> 结构，如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 为非零，其 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为零，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />；如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see langword="SqlByte" /> 结构，其 <see langword="Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 <see langword="Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see langword="SqlDecimal" /> 结构，其转换后的值等于此 <see langword="SqlDouble" /> 的舍入值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其 <see langword="Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构值的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其 <see langword="Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构值的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see langword="Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构值的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see langword="SqlMoney" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see langword="SqlSingle" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于此 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see langword="SqlString" />，表示此 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为字符串。</summary>
      <returns>表示此 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的字符串。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.IsNull">
      <summary>返回一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例是否为 null。</summary>
      <returns>如果 <see langword="true" /> 为 null，则为 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。 此属性是只读的。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlGuid">
      <summary>表示要存储在数据库中或要从数据库中检索的 GUID。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlGuid.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 结构的此实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Byte[])">
      <summary>使用提供的字节数组参数初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的新实例。</summary>
      <param name="value">一个字节数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Guid)">
      <summary>使用指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数初始化 <see cref="T:System.Guid" /> 结构的新实例。</summary>
      <param name="g">一个 <see cref="T:System.Guid" /></param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的值初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的新实例。</summary>
      <param name="a">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的开头四个字节。</param>
      <param name="b">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下两个字节。</param>
      <param name="c">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下两个字节。</param>
      <param name="d">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="e">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="f">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="g">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="h">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="i">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="j">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="k">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.String)">
      <summary>使用指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数初始化 <see cref="T:System.String" /> 结构的新实例。</summary>
      <param name="s">
        <see cref="T:System.String" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Data.SqlTypes.SqlGuid)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构与提供的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 进行比较，并返回其相对值的指示值。 不仅仅是比较最后 6 个字节，但会将最后 6 个字节视为比较中最重要的字节。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于对象。</description></item><item><term> 零</term><description> 此实例等于对象。</description></item><item><term> 大于零</term><description> 此实例大于对象 
- 或 - 
对象是 null 引用 (<see langword="Nothing" />)。</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构与所提供的对象进行比较，并返回其相对值的指示。 不仅仅是比较最后 6 个字节，但会将最后 6 个字节视为比较中最重要的字节。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于对象。</description></item><item><term> 零</term><description> 此实例等于对象。</description></item><item><term> 大于零</term><description> 此实例大于对象 
- 或 - 
对象是 null 引用 (<see langword="Nothing" />)</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。 如果任一实例为 null，则 <see langword="SqlGuid" /> 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 对象的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 属性进行比较。</summary>
      <param name="value">要比较的对象。</param>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的实例并且两者相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetHashCode">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.NotEquals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Equality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlGuid">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="x">
        <see langword="SqlBinary" /> 对象。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlGuid" />，它的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Guid">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数转换为 <see cref="T:System.Guid" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Guid" />，它等于 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlGuid">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Implicit(System.Guid)~System.Data.SqlTypes.SqlGuid">
      <summary>将提供的 <see cref="T:System.Guid" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="x">
        <see cref="T:System.Guid" />。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlGuid" />，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等于 <see cref="T:System.Guid" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Inequality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Parse(System.String)">
      <summary>将指定的 <see cref="T:System.String" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="s">要分析的 <see langword="String" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToByteArray">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为字节数组。</summary>
      <returns>一个字节数组，表示此 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlBinary">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</summary>
      <returns>一个 <see langword="SqlBinary" /> 结构，包含 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构中的字节。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，包含 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" /> 结构，包含 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的字符串表示形式。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构是否为 null。</summary>
      <returns>如果 <see langword="null" />，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的值。 此属性是只读的。</summary>
      <returns>
        <see cref="T:System.Guid" /> 结构。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt16">
      <summary>表示要在数据库中存储或检索的 16 位有符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MaxValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MinValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的最小可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 结构的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Zero">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 结构实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 属性的零值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.#ctor(System.Int16)">
      <summary>使用提供的短整型参数初始化 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的新实例。</summary>
      <param name="value">短整型。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Add(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数执行按位 AND 运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位 AND 运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数执行按位“或”计算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位“或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Data.SqlTypes.SqlInt16)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象，或者该对象为空引用（Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
对象为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Divide(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。 如果任一实例为 null，则 <see langword="SqlInt16" /> 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Object)">
      <summary>将指定对象与 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 对象的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 属性进行比较。</summary>
      <param name="value">要比较的对象。</param>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的实例并且两者相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see cref="T:System.String" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构进行比较，以确定第一个结构是否小于或等于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Mod(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算将其第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数后所得的余数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含该余数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值相除，并返回余数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</param>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含两个参数的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.NotEquals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 运算符对它的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位二进制反码运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含指定 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的二进制反码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Addition(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数执行按位 AND 运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位 AND 运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数执行按位“或”计算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位“或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Division(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Equality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_ExclusiveOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位“异或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Int16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为短整型。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>短整型，其值等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于提供的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象参数表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Int16)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的短整型转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">短整型值。</param>
      <returns>与指定的短整型具有相同值的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Inequality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构进行比较，以确定第一个结构是否小于或等于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算将其第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数后所得的余数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含该余数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含两个参数的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 运算符对它的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位二进制反码运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含指定 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的二进制反码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Subtraction(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数中减去第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_UnaryNegation(System.Data.SqlTypes.SqlInt16)">
      <summary>一元负运算符对 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 操作数的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 求反。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，包含求反的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 16 位有符号整数。</summary>
      <param name="s">要分析的 <see langword="String" />。</param>
      <returns>一个 16 位有符号整数，它等效于指定的 <see cref="T:System.String" /> 中包含的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Subtract(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数中减去第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>.NET 框架所使用的 XML 架构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 不是零，则为 <see langword="true" />；如果为零，则为 <see langword="false" />；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的值小于 0 或大于 255，则将发生 <see cref="T:System.OverflowException" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 <see langword="Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其 <see langword="Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其 <see langword="Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see langword="Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其 <see langword="Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其 <see langword="Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 表示 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" /> 对象，它表示 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Xor(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它包含该“异或”运算的结果。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 <see langword="true" />。 否则为 <see langword="false" />。 有关详细信息，请参阅 处理 Null 值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的此实例的值。 此属性为只读。</summary>
      <returns>表示此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值的短整型。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt32">
      <summary>表示要在数据库中存储或检索的 32 位有符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MaxValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MinValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的最小可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 类的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Zero">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 结构实例的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 属性的零值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.#ctor(System.Int32)">
      <summary>使用提供的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的新实例。</summary>
      <param name="value">要转换的整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Add(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含指定 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数执行按位 AND 运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“与”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Data.SqlTypes.SqlInt32)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Divide(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数除以第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。 如果任一实例为 null，则 <see langword="SqlInt32" /> 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 对象的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 属性进行比较。</summary>
      <param name="value">要比较的对象。</param>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的实例并且两者相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否大于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否小于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Mod(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数除以第二个参数后所得的余数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含该余数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值相除，并返回余数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</param>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含两个参数的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.NotEquals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位二进制反码运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含二进制求补运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Addition(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含指定 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数执行按位 AND 运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“与”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Division(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数除以第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Equality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_ExclusiveOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“异或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“异或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Int32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为整数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>已转换的整数值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 参数的 <see langword="SqlInt64" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否大于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Int32)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 转换为整数。</summary>
      <param name="x">一个整数值。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其 Value 属性等于整数参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Inequality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否小于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数除以第二个参数后所得的余数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含该余数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含两个参数的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位二进制反码运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含二进制求补运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Subtraction(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数中减去第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_UnaryNegation(System.Data.SqlTypes.SqlInt32)">
      <summary>对 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 操作数的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 求反。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，包含求反的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 32 位有符号整数。</summary>
      <param name="s">要分析的 <see cref="T:System.String" />。</param>
      <returns>一个 32 位有符号整数，它等效于指定的 <see cref="T:System.String" /> 中包含的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Subtract(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数中减去第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 不是零，则为 <see langword="true" />；如果为零，则为 <see langword="false" />；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 <see langword="Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的 <see langword="Value" />。 如果 <see langword="SqlInt32" /> 的值小于 0 或大于 255，则将发生 <see cref="T:System.OverflowException" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Xor(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“异或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“异或”运算的结果。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构是否为 null。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 为 Null，则此属性为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值。 此属性为只读。</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">此属性包含 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />。</exception>
      <returns>表示此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值的整数。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt64">
      <summary>表示要在数据库中存储或检索的 64 位有符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MaxValue">
      <summary>一个常数，表示 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的可能的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MinValue">
      <summary>一个常数，表示 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的可能的最小值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 结构的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Zero">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 结构实例的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 属性的零值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)">
      <summary>使用提供的长整型初始化 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的新实例。</summary>
      <param name="value">长整型。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位 AND 运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“与”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位“或”计算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。 如果任一实例为 null，则 <see langword="SqlInt64" /> 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 对象的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 属性进行比较。</summary>
      <param name="value">要比较的对象。</param>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的实例并且两者相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数后所得的余数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该余数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值相除，并返回余数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</param>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 SqlInt64 参数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>对它的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位二进制反码运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的二进制反码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位 AND 运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“与”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位“或”计算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“异或”运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为长值。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新长值，它等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64">
      <summary>将长参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">长整型值。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于长参数的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 SqlInt64 参数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数后所得的余数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该余数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>对它的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位二进制反码运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的二进制反码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数中减去第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)">
      <summary>一元负运算符对 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 操作数的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 求反。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 参数的求反 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 64 位有符号整数。</summary>
      <param name="s">要分析的 <see cref="T:System.String" />。</param>
      <returns>一个 64 位有符号整数，它等效于指定的 <see cref="T:System.String" /> 中包含的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数中减去第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 不是零，则为 <see langword="true" />；如果为零，则为 <see langword="false" />；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 <see langword="Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的 <see langword="Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，表示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的此实例转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" />，表示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“异或”运算的结果。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的值。 此属性为只读。</summary>
      <returns>一个长整型，表示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的值。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlMoney">
      <summary>表示要存储在数据库中或要从数据库中检索的货币值，范围介于 -2 63 （或 -922,337,203,685,477.5808） to 2 63 -1 （或 +922,337,203,685,477.5807）之间，精度为千分之十货币单位。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MaxValue">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 类实例的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 属性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MinValue">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 类实例的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 属性的最小值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 类的此实例的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Zero">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 类实例的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 属性的零值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Decimal)">
      <summary>使用指定的 <see cref="T:System.Decimal" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Double)">
      <summary>使用指定的双精度型值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int32)">
      <summary>用指定的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int64)">
      <summary>使用指定的长整型值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Add(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Data.SqlTypes.SqlMoney)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Divide(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数除以第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。 如果任一实例为 null，则 <see langword="SqlMoney" /> 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 对象的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 属性进行比较。</summary>
      <param name="value">要比较的对象。</param>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的实例并且两者相等，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该乘法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.NotEquals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Addition(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Division(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数除以第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Equality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符可将所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Decimal">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Decimal" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Decimal" /> 结构，它的值等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Double)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符可将所提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符可将所提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符可将所提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符可将所提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符可将所提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlMoney">
      <summary>将 <see cref="T:System.Decimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Decimal" /> 值。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于 <see cref="T:System.Decimal" /> 参数的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符可将所提供的 <see cref="T:System.Int64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Int64" /> 结构。</param>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Int64" /> 参数的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Inequality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该乘法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Subtraction(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数中减去第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_UnaryNegation(System.Data.SqlTypes.SqlMoney)">
      <summary>一元负运算符对 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数求反。</summary>
      <param name="x">需求反的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含求反的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 形式。</summary>
      <param name="s">要分析的 <see langword="String" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Subtract(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数中减去第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDecimal">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的此实例的值转换为 <see cref="T:System.Decimal" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Decimal" /> 结构，它的值等于此 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Double" />。</summary>
      <returns>一个双精度型，它的值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Int32" />。</summary>
      <returns>一个 32 位整数，其值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的值转换为 <see cref="T:System.Int64" />。</summary>
      <returns>一个 64 位整数，其值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的值为零，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，它的值是一个表示此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值的字符串。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的此实例转换为字符串。</summary>
      <returns>一个字符串，它的值是此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值的字符串表示形式。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.IsNull">
      <summary>返回一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的实例的货币值。 此属性为只读。</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该属性设置为 null。</exception>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的实例的货币值。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNotFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。</summary>
      <param name="message">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。</summary>
      <param name="message">引发异常时显示的字符串。</param>
      <param name="e">对内部异常的引用。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNullValueException">
      <summary>当 <see langword="Value" /> 结构的 <see cref="N:System.Data.SqlTypes" /> 属性设置为 null 时所引发的异常。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor">
      <summary>使用说明错误的系统提供的消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String)">
      <summary>使用说明错误的指定消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="e">导致当前异常的异常。 如果 <c>innerException</c> 参数不为 <see langword="null" />，则当前异常会在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlSingle">
      <summary>表示要存储在数据库中或从数据库中检索的浮点数，范围在 -3.40E+38 到 3.40E+38 之间。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MaxValue">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 类实例的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 属性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MinValue">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 类实例的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 属性的最小值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 结构的此实例的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Zero">
      <summary>表示可分配给 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 类实例的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 属性的零值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Double)">
      <summary>使用提供的 double 类型的参数初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的新实例。</summary>
      <param name="value">一个双精度型值，它将用作新 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Single)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的新实例。</summary>
      <param name="value">一个浮点数，它将用作新 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Add(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Data.SqlTypes.SqlSingle)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Divide(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构除以第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see langword="SqlInt64" /> 结构，包含该除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。 如果任一实例为 null，则 <see langword="SqlSingle" /> 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 对象的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 属性进行比较。</summary>
      <param name="value">要比较的对象。</param>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的实例并且两者相等，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构执行逻辑比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该乘法运算的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.NotEquals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Addition(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Division(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构除以第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Equality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 SqlSingle 参数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlSingle">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Single">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为浮点型。</summary>
      <param name="x">要转换为浮点型的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 值。</param>
      <returns>一个 float 类型值，包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构执行逻辑比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlSingle">
      <summary>此隐式运算符将 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 参数的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Single)~System.Data.SqlTypes.SqlSingle">
      <summary>将指定的浮点值转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的浮点值。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含指定浮点型的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Inequality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的乘积。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该乘法运算的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Subtraction(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构中减去第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_UnaryNegation(System.Data.SqlTypes.SqlSingle)">
      <summary>对指定 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 求反。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含求反的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Parse(System.String)">
      <summary>将指定 <see cref="T:System.String" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</summary>
      <param name="s">要分析的 <see cref="T:System.String" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Subtract(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构中减去第二个结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 不是零，则为 <see langword="true" />；如果为零，则为 <see langword="false" />；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 <see langword="Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 <see langword="Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 <see langword="true" />，则 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see langword="Value" /> 将为 1。 否则，<see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see langword="Value" /> 将为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see langword="SqlDecimal" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see langword="SqlDouble" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see langword="SqlInt16" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，表示此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个表示此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值的 <see langword="String" /> 对象。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值。 此属性为只读。</summary>
      <returns>一个浮点值，介于 -3.40E+38 到 3.40E+38 的范围内。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlString">
      <summary>表示要存储在数据库中或从数据库中检索的字符的可变长度流。 <see cref="T:System.Data.SqlTypes.SqlString" /> 具有与其相应的 .NET Framework <see cref="T:System.String" /> 数据类型不同的基础数据结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort">
      <summary>指定排序应基于字符数值（而非其字母值）。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort2">
      <summary>指定排序应基于字符数值（而非其字母值）。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreCase">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较应忽略大小写。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreKanaType">
      <summary>指定字符串比较必须忽略假名类型。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreNonSpace">
      <summary>指定字符串比较必须忽略非空格组合字符，比如音调符号。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreWidth">
      <summary>指定字符串比较必须忽略字符宽度。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.Null">
      <summary>表示可指派给 <see cref="T:System.DBNull" /> 结构的此实例的 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])">
      <summary>使用指定的区域设置 ID、比较选项和数据，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="fUnicode">如果是 Unicode 编码，则为 <see langword="true" />。 否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="index">数组中的起始索引。</param>
      <param name="count">要从索引复制的字符数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="index">数组中的起始索引。</param>
      <param name="count">要从索引复制的字符数。</param>
      <param name="fUnicode">如果是 Unicode 编码，则为 <see langword="true" />。 否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="data">要存储的字符串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)">
      <summary>使用指定的字符串和区域设置 ID 值，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="data">要存储的字符串。</param>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)">
      <summary>使用指定字符串、区域设置 ID 和比较选项值，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="data">要存储的字符串。</param>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串联两个指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 值以创建一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它是 <paramref name="x" /> 与 <paramref name="y" /> 的串联值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Clone">
      <summary>创建此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象的一个副本。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，其中所有的属性值都与原始值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)">
      <summary>获取与指定 <see cref="T:System.Globalization.CompareOptions" /> 值等效的 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 枚举。</summary>
      <param name="compareOptions">一个 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值，该值描述此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <returns>一个 <see langword="CompareOptions" /> 值，该值对应于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的 <see langword="SqlCompareOptions" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 进行比较，并返回二者相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象与所提供的 <see cref="T:System.Object" /> 进行比较，并返回其相对值的指示值。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。  
  
 <list type="table"><listheader><term> 返回值</term><description> 条件</description></listheader><item><term> 小于零</term><description> 此实例小于该对象。</description></item><item><term> 零</term><description> 此实例等于该对象。</description></item><item><term> 大于零</term><description> 此实例大于该对象 
- 或 - 
该对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串连两个指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它包含表示两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数内容的新串联的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>如果两个值相等，则为 <see langword="true" />。 否则为 <see langword="false" />。 如果任一实例为 null，则 <see langword="SqlString" /> 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 对象的 <see cref="T:System.Data.SqlTypes.SqlString" /> 属性进行比较。</summary>
      <param name="value">要比较的对象。</param>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlString" /> 的实例并且两者相等，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetNonUnicodeBytes">
      <summary>获取字节的数组，其中包含 <see cref="T:System.Data.SqlTypes.SqlString" /> ANSI 格式的内容。</summary>
      <returns>一个字节数组，包含 <see cref="T:System.Data.SqlTypes.SqlString" /> ANSI 格式的内容。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetUnicodeBytes">
      <summary>获取字节的数组，其中包含 <see cref="T:System.Data.SqlTypes.SqlString" /> Unicode 格式的内容。</summary>
      <returns>一个字节数组，包含 <see cref="T:System.Data.SqlTypes.SqlString" /> Unicode 格式的内容。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于或等于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于或等于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串连两个指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它包含表示两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数内容的新串联的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 参数的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see langword="SqlDecimal" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see langword="SqlDecimal" /> 参数的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它的值是指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 SqlInt32 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)~System.String">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see langword="String" />，它的内容与 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于或等于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Implicit(System.String)~System.Data.SqlTypes.SqlString">
      <summary>将 <see cref="T:System.String" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.String" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，包含指定的 <see langword="String" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于或等于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>
        <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 不是零，则为 <see langword="true" />；如果为零，则为 <see langword="false" />；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个新的 <see langword="SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构所表示的数字。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDateTime">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <returns>一个新的 <see langword="SqlDateTime" /> 结构，其中包含此 <see cref="T:System.Data.SqlTypes.SqlString" /> 所表示的日期值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，其中包含此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlGuid">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 是此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构所表示的 <see langword="Guid" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象转换为 <see cref="T:System.String" />。</summary>
      <returns>与此 <see cref="T:System.String" /> 结构具有相同值的 <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CompareInfo">
      <summary>获取 <see cref="T:System.Globalization.CompareInfo" /> 对象，该对象定义如何对此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构执行字符串比较。</summary>
      <returns>一个 <see langword="CompareInfo" /> 对象，该对象定义此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的字符串比较。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CultureInfo">
      <summary>获取 <see cref="T:System.Globalization.CultureInfo" /> 结构，它表示有关此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象的区域性信息。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" /> 结构，描述有关此 SqlString 结构的区域性的信息，包括区域性的名称、书写体系和使用的日历，还包括对特定于区域性对象的访问，这些对象提供常规运算的方法，例如格式化日期和排序字符串。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构是否为 null。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 为 <see cref="F:System.Data.SqlTypes.SqlString.Null" />，则返回 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.LCID">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</summary>
      <returns>存储在 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性中的字符串的区域设置 ID。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.SqlCompareOptions">
      <summary>一个或多个 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 枚举值的组合，它们表示此 <see cref="T:System.Data.SqlTypes.SqlString" /> 与其他 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较方式。</summary>
      <returns>一个值，它指定如何将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 与其他 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构进行比较。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.Value">
      <summary>获取存储在此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构中的字符串。 此属性为只读。</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">字符串的值是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />。</exception>
      <returns>存储的字符串。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTruncateException">
      <summary>在将值设置到 <see cref="N:System.Data.SqlTypes" /> 结构中会截断该值时引发的异常。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 的引用来初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="e">对内部 <see cref="T:System.Exception" /> 的引用。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTypeException">
      <summary>
        <see cref="N:System.Data.SqlTypes" /> 的基异常类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
      <param name="si">承载序列化对象数据的对象。</param>
      <param name="sc">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="e">导致当前异常的异常。 如果 <c>innerException</c> 参数不为 <see langword="null" />，则当前异常会在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlXml">
      <summary>表示存储在服务器中的或从服务器中检索的 XML 数据。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor">
      <summary>创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.IO.Stream)">
      <summary>创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例，以提供来自所提供的 <see cref="T:System.IO.Stream" /> 派生实例中的 XML 值。</summary>
      <param name="value">一个 <see cref="T:System.IO.Stream" /> 派生实例（如 <see cref="T:System.IO.FileStream" />），要从该实例加载 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的 XML 内容。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.Xml.XmlReader)">
      <summary>创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例，并将其与提供的 <see cref="T:System.Xml.XmlReader" /> 的内容关联起来。</summary>
      <param name="value">一个要用作新 <see cref="T:System.Xml.XmlReader" /> 实例的值的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 派生类实例。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.CreateReader">
      <summary>作为 <see cref="T:System.Data.SqlTypes.SqlXml" /> 来获取此 <see cref="T:System.Xml.XmlReader" /> 的 XML 内容的值。</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">曾尝试访问 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的 null 实例上的此属性。</exception>
      <returns>一个包含 XML 内容的 <see cref="T:System.Xml.XmlReader" /> 派生实例。 根据信息的内部表示方式，服务器上的实际类型会有所不同（例如，返回值可能为 <see cref="T:System.Xml.XmlTextReader" />）。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的字符串。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>由 <see cref="T:System.Xml.Schema.XmlSchema" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法使用的对象的 XML 表示形式的 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="r">XmlReader。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">一个 XmlWriter</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.IsNull">
      <summary>指示此实例是否表示一个 null <see cref="T:System.Data.SqlTypes.SqlXml" /> 值。</summary>
      <returns>如果 <see langword="true" /> 为 null，则为 <see langword="Value" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Null">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型的 null 实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型的 null 实例。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的 XML 内容的字符串表示形式。</summary>
      <returns>XML 内容的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.StorageState">
      <summary>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 枚举不用作独立组件，而是用作其他类从中派生标准功能的枚举。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Buffer">
      <summary>缓冲区大小。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Stream">
      <summary>流。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.UnmanagedBuffer">
      <summary>非托管缓冲区。</summary>
    </member>
    <member name="T:System.Data.StateChangeEventArgs">
      <summary>提供 .NET Framework 数据提供程序的状态更改事件数据。</summary>
    </member>
    <member name="M:System.Data.StateChangeEventArgs.#ctor(System.Data.ConnectionState,System.Data.ConnectionState)">
      <summary>在给定对象的原始状态和当前状态的情况下，初始化 <see cref="T:System.Data.StateChangeEventArgs" /> 类的新实例。</summary>
      <param name="originalState">
        <see cref="T:System.Data.ConnectionState" /> 值之一。</param>
      <param name="currentState">
        <see cref="T:System.Data.ConnectionState" /> 值之一。</param>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.CurrentState">
      <summary>获取连接的新状态。 在激发该事件时，连接对象将处于新状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.OriginalState">
      <summary>获取连接的原始状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值之一。</returns>
    </member>
    <member name="T:System.Data.StateChangeEventHandler">
      <summary>表示用来处理 <see cref="E:System.Data.Common.DbConnection.StateChange" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.StateChangeEventArgs" />。</param>
    </member>
    <member name="T:System.Data.StatementCompletedEventArgs">
      <summary>为 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件提供附加信息。</summary>
    </member>
    <member name="M:System.Data.StatementCompletedEventArgs.#ctor(System.Int32)">
      <summary>创建 <see cref="T:System.Data.StatementCompletedEventArgs" /> 类的新实例。</summary>
      <param name="recordCount">指示受导致 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件发生的语句影响的行数。</param>
    </member>
    <member name="P:System.Data.StatementCompletedEventArgs.RecordCount">
      <summary>指示受导致 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件发生的语句影响的行数。</summary>
      <returns>受影响的行数。</returns>
    </member>
    <member name="T:System.Data.StatementCompletedEventHandler">
      <summary>
        <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件的事件处理程序的委托类型。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件的数据。</param>
    </member>
    <member name="T:System.Data.StatementType">
      <summary>指定由 <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" />、<see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" />、<see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" /> 或 <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" /> 类使用的 SQL 查询的类型。</summary>
    </member>
    <member name="F:System.Data.StatementType.Batch">
      <summary>SQL 查询，它是批处理语句。</summary>
    </member>
    <member name="F:System.Data.StatementType.Delete">
      <summary>SQL 查询，它是 DELETE 语句。</summary>
    </member>
    <member name="F:System.Data.StatementType.Insert">
      <summary>SQL 查询，它是 INSERT 语句。</summary>
    </member>
    <member name="F:System.Data.StatementType.Select">
      <summary>SQL 查询，它是 SELECT 语句。</summary>
    </member>
    <member name="F:System.Data.StatementType.Update">
      <summary>SQL 查询，它是 UPDATE 语句。</summary>
    </member>
    <member name="T:System.Data.StrongTypingException">
      <summary>在用户访问 <see langword="DBNull" /> 值时，强类型 <see cref="T:System.Data.DataSet" /> 引发的异常。</summary>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor">
      <summary>初始化 <see cref="T:System.Data.StrongTypingException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.Data.StrongTypingException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构。</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.StrongTypingException" /> 类的新实例。</summary>
      <param name="message">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字符串和内部异常初始化 <see cref="T:System.Data.StrongTypingException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
      <param name="innerException">对内部异常的引用。</param>
    </member>
    <member name="T:System.Data.SyntaxErrorException">
      <summary>表示当 <see cref="T:System.Data.DataColumn" /> 的 <see cref="P:System.Data.DataColumn.Expression" /> 属性包含语法错误时引发的异常。</summary>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象所需的数据。</param>
      <param name="context">特定序列化流的源和目标。</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="T:System.Data.TypedTableBase`1">
      <summary>Visual Studio 和 XSD.exe .NET Framework 工具将此类型用作特型 <see cref="T:System.Data.DataTable" /> 对象生成的基类，并且不能直接从代码中使用此类型。</summary>
      <typeparam name="T">源序列中由表格表示的对象的类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
    </member>
    <member name="M:System.Data.TypedTableBase`1.#ctor">
      <summary>初始化新的 <see cref="T:System.Data.TypedTableBase`1" />。 此方法支持通过 Visual Studio 和 XSD.exe .NET Framework 工具生成类型化 <see cref="T:System.Data.DataTable" /> 对象。 不应直接从代码中使用此类型。</summary>
    </member>
    <member name="M:System.Data.TypedTableBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化新的 <see cref="T:System.Data.TypedTableBase`1" />。 此方法支持通过 Visual Studio 和 XSD.exe .NET Framework 工具生成类型化 <see cref="T:System.Data.DataTable" /> 对象。 此方法不能直接在代码中使用。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含用于构造对象的数据。</param>
      <param name="context">要进行反序列化的对象的流式处理上下文。</param>
    </member>
    <member name="M:System.Data.TypedTableBase`1.Cast``1">
      <summary>将 <see cref="T:System.Data.TypedTableBase`1" /> 的元素转换为指定的类型。 此方法支持通过 Visual Studio 和 XSD.exe .NET Framework 工具生成类型化 <see cref="T:System.Data.DataTable" /> 对象。 此方法不能直接在代码中使用。</summary>
      <typeparam name="TResult">元素要转换为的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.EnumerableRowCollection" />，其中包含已转换为指定类型的源序列的每个元素。</returns>
    </member>
    <member name="M:System.Data.TypedTableBase`1.GetEnumerator">
      <summary>返回类型化 <see cref="T:System.Data.DataRow" /> 的枚举数。 此方法支持通过 Visual Studio 和 XSD.exe .NET Framework 工具生成类型化 <see cref="T:System.Data.DataTable" /> 对象。 此方法不能直接在代码中使用。</summary>
      <returns>一个实现 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 接口的对象。</returns>
    </member>
    <member name="M:System.Data.TypedTableBase`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回类型化 <see cref="T:System.Data.DataRow" /> 的枚举数。 此方法支持通过 Visual Studio 和 XSD.exe .NET Framework 工具生成类型化 <see cref="T:System.Data.DataTable" /> 对象。 此方法不能直接在代码中使用。</summary>
      <returns>一个实现 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 接口的对象。</returns>
    </member>
    <member name="T:System.Data.TypedTableBaseExtensions">
      <summary>包含 <see cref="T:System.Data.TypedTableBase`1" /> 类的扩展方法。</summary>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.AsEnumerable``1(System.Data.TypedTableBase{``0})">
      <summary>枚举 <see cref="T:System.Data.TypedTableBase`1" /> 的数据行元素并返回一个 <see cref="T:System.Data.EnumerableRowCollection`1" /> 对象，其中泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" />。 此对象可用在 LINQ 表达式或方法查询中。</summary>
      <param name="source">可枚举的源 <see cref="T:System.Data.TypedTableBase`1" />。</param>
      <typeparam name="TRow">源中的元素要转换成的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.EnumerableRowCollection`1" /> 对象，其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.ElementAtOrDefault``1(System.Data.TypedTableBase{``0},System.Int32)">
      <summary>返回序列中指定行处的元素；如果行超出范围，则返回默认值。</summary>
      <param name="source">要从中返回元素的可枚举对象。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TRow">数组或行的类型。</typeparam>
      <returns>序列中指定行处的元素。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>按指定键升序排序 <see cref="T:System.Data.TypedTableBase`1" /> 的行。</summary>
      <param name="source">一个 <see cref="T:System.Data.TypedTableBase`1" />，其中包含要排序的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键排序。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>按指定键和比较器升序排序 <see cref="T:System.Data.TypedTableBase`1" /> 的行。</summary>
      <param name="source">一个 <see cref="T:System.Data.TypedTableBase`1" />，其中包含要排序的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键和比较器排序。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>按指定键降序排序 <see cref="T:System.Data.TypedTableBase`1" /> 的行。</summary>
      <param name="source">一个 <see cref="T:System.Data.TypedTableBase`1" />，其中包含要排序的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键排序。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>按指定键和比较器降序排序 <see cref="T:System.Data.TypedTableBase`1" /> 的行。</summary>
      <param name="source">一个 <see cref="T:System.Data.TypedTableBase`1" />，其中包含要排序的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型，通常为 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其元素按指定键和比较器排序。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.Select``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>将 <see cref="T:System.Data.TypedTableBase`1" /> 中的每个元素投影到新窗体。</summary>
      <param name="source">一个 <see cref="T:System.Data.TypedTableBase`1" />，其中包含要对其调用转换函数的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="selector">要应用于每个元素的转换函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型 <see cref="T:System.Data.DataRow" />。</typeparam>
      <typeparam name="S" />
      <returns>一个 <see cref="T:System.Data.EnumerableRowCollection`1" />，其元素是对 <paramref name="source" /> 的每个元素调用转换函数的结果。</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.Where``1(System.Data.TypedTableBase{``0},System.Func{``0,System.Boolean})">
      <summary>按指定谓词筛选行序列。</summary>
      <param name="source">一个 <see cref="T:System.Data.TypedTableBase`1" />，其中包含要筛选的 <see cref="T:System.Data.DataRow" /> 元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TRow">
        <paramref name="source" /> 中行元素的类型 <see cref="T:System.Data.DataRow" />。</typeparam>
      <returns>一个 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />，其中包含输入序列中满足该条件的行。</returns>
    </member>
    <member name="T:System.Data.UniqueConstraint">
      <summary>表示对一组列的限制，列中的所有值必须是唯一的。</summary>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn)">
      <summary>使用指定的 <see cref="T:System.Data.UniqueConstraint" /> 初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="column">要约束的 <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn,System.Boolean)">
      <summary>用要约束的 <see cref="T:System.Data.UniqueConstraint" /> 和指定约束是否为主键的值，初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="column">要约束的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="isPrimaryKey">若要指示约束是主键，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[])">
      <summary>用给定的 <see cref="T:System.Data.UniqueConstraint" /> 对象的数组初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="columns">要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[],System.Boolean)">
      <summary>用要约束的 <see cref="T:System.Data.UniqueConstraint" /> 对象的数组和指定约束是否为主键的值，初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="columns">要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="isPrimaryKey">若要指示约束是主键，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn)">
      <summary>使用指定的名称和 <see cref="T:System.Data.UniqueConstraint" /> 初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="name">约束的名称。</param>
      <param name="column">要约束的 <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>用指定名称、要约束的 <see cref="T:System.Data.UniqueConstraint" /> 和指定约束是否为主键的值，初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="name">约束的名称。</param>
      <param name="column">要约束的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="isPrimaryKey">若要指示约束是主键，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[])">
      <summary>用指定的名称和 <see cref="T:System.Data.UniqueConstraint" /> 对象的数组初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="name">约束的名称。</param>
      <param name="columns">要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>用指定名称、要约束的 <see cref="T:System.Data.UniqueConstraint" /> 对象的数组和指定约束是否为主键的值，初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="name">约束的名称。</param>
      <param name="columns">要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="isPrimaryKey">若要指示约束是主键，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.String[],System.Boolean)">
      <summary>用指定名称、要约束的 <see cref="T:System.Data.UniqueConstraint" /> 对象的数组和指定约束是否为主键的值，初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="name">约束的名称。</param>
      <param name="columnNames">要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="isPrimaryKey">若要指示约束是主键，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.Equals(System.Object)">
      <summary>将此约束与第二个约束比较以确定两个约束是否相同。</summary>
      <param name="key2">此 <see cref="T:System.Data.UniqueConstraint" /> 将与之比较的对象。</param>
      <returns>如果约束相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.UniqueConstraint.GetHashCode">
      <summary>获取 <see cref="T:System.Data.UniqueConstraint" /> 对象的此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.Columns">
      <summary>获取此约束影响的列的数组。</summary>
      <returns>一个 <see cref="T:System.Data.DataColumn" /> 对象数组。</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.IsPrimaryKey">
      <summary>获取一个值，该值指示约束是否在主键上。</summary>
      <returns>如果约束在主键上，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.Table">
      <summary>获取此约束所属的表。</summary>
      <returns>此约束所属的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="T:System.Data.UpdateRowSource">
      <summary>指定如何将查询命令结果应用于正在更新的行。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.Both">
      <summary>将输出参数和第一个返回行都映射到 <see cref="T:System.Data.DataSet" /> 中的已更改的行。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.FirstReturnedRecord">
      <summary>将第一个返回行中的数据映射到 <see cref="T:System.Data.DataSet" /> 中的已更改的行。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.None">
      <summary>忽略任何返回的参数或行。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.OutputParameters">
      <summary>将输出参数映射到 <see cref="T:System.Data.DataSet" /> 中的已更改的行。</summary>
    </member>
    <member name="T:System.Data.UpdateStatus">
      <summary>指定在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期间对当前行和其余行采取的操作。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.Continue">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> 应继续处理行。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.ErrorsOccurred">
      <summary>事件处理程序报告：应将更新作为错误对待。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipAllRemainingRows">
      <summary>将不更新当前行和所有其余行。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipCurrentRow">
      <summary>将不更新当前行。</summary>
    </member>
    <member name="T:System.Data.VersionNotFoundException">
      <summary>表示尝试返回已删除的 <see cref="T:System.Data.DataRow" /> 版本时引发的异常。</summary>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化信息初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象时所需的数据。</param>
      <param name="context">指定的序列化流的源和目标的说明。</param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类的新实例。</summary>
      <param name="s">引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="T:System.Data.XmlReadMode">
      <summary>指定如何将 XML 数据和关系架构读入 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Auto">
      <summary>默认的读取模式。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.DiffGram">
      <summary>读取 DiffGram，将 DiffGram 中的更改应用到 <see cref="T:System.Data.DataSet" />。 语义与 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 操作的语义相同。 与 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 操作一样，保留 <see cref="P:System.Data.DataRow.RowState" /> 值。 对 <see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" /> 的 DiffGram 输入只能使用 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> 中的 DiffGram 输出来获得。
        
目标 <see cref="T:System.Data.DataSet" /> 必须与在其中将 <see cref="Overload:System.Data.DataSet.WriteXml" /> 作为 DiffGram 调用的 <see cref="T:System.Data.DataSet" /> 具有相同架构。 否则，DiffGram 合并操作会失败并引发异常。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Fragment">
      <summary>针对 SQL Server 的实例读取 XML 片段（例如，通过执行 FOR XML 查询生成的 XML 片段）。 当 <see cref="T:System.Data.XmlReadMode" /> 设置为 <see langword="Fragment" /> 时，将默认命名空间作为内联架构读取。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.IgnoreSchema">
      <summary>忽略任何内联架构并将数据读入现有的 <see cref="T:System.Data.DataSet" /> 架构。 如果任何数据与现有架构不匹配，就会丢弃这些数据（包括为 <see cref="T:System.Data.DataSet" /> 定义的不同命名空间中的数据）。 如果数据是 DiffGram，<see langword="IgnoreSchema" /> 与 <see langword="DiffGram" /> 具有相同的功能。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferSchema">
      <summary>忽略任何内联架构，从数据推断出架构并加载数据。 如果 <see cref="T:System.Data.DataSet" /> 已包含架构，通过添加新表或将列添加到现有表来扩展当前架构。 如果推断表已经存在，但命名空间不同，或者任何推断列与现有列冲突，则会引发异常。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferTypedSchema">
      <summary>忽略任何内联架构，从数据推断出强类型架构并加载数据。 如果无法从数据中推断出类型，则将其解释为字符串数据。 如果 <see cref="T:System.Data.DataSet" /> 已包含架构，则通过添加新表或向现有表添加列来扩展当前架构。 如果推断表已经存在，但命名空间不同，或者任何推断列与现有列冲突，则会引发异常。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.ReadSchema">
      <summary>读取任何内联架构并加载数据。 如果 <see cref="T:System.Data.DataSet" /> 已包含架构，则可将新表添加到架构中，但是如果内联架构中的任何表在 <see cref="T:System.Data.DataSet" /> 中已经存在，则会引发异常。</summary>
    </member>
    <member name="T:System.Data.XmlWriteMode">
      <summary>指定如何从 <see cref="T:System.Data.DataSet" /> 写入 XML 数据和关系架构。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.DiffGram">
      <summary>以 DiffGram 形式编写整个 <see cref="T:System.Data.DataSet" />，包括原始值和当前值。 若要生成只包含已更改的值的 DiffGram，请调用 <see cref="M:System.Data.DataSet.GetChanges" />，然后在返回的 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> 上作为 DiffGram 调用 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.IgnoreSchema">
      <summary>以 XML 数据形式写入 <see cref="T:System.Data.DataSet" /> 的当前内容，不带 XSD 架构。 如果无数据加载到 <see cref="T:System.Data.DataSet" /> 中，则不写入任何内容。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.WriteSchema">
      <summary>以 XML 数据形式写入 <see cref="T:System.Data.DataSet" /> 的当前内容，以关系结构作为内联 XSD 架构。 如果 <see cref="T:System.Data.DataSet" /> 只有架构而无数据，那么只写入内联架构。 如果 <see cref="T:System.Data.DataSet" /> 没有当前架构，则不写入任何内容。</summary>
    </member>
    <member name="T:System.Xml.XmlDataDocument">
      <summary>允许通过相关的 <see cref="T:System.Data.DataSet" /> 存储、检索和操作结构化数据。</summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlDataDocument" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDataDocument" /> 初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
      <param name="dataset">要加载到 <see langword="DataSet" /> 的 <see langword="XmlDataDocument" />。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CloneNode(System.Boolean)">
      <summary>创建当前节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 <see langword="true" />；若仅克隆节点本身，则为 <see langword="false" />。</param>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)">
      <summary>创建具有指定 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的元素。</summary>
      <param name="prefix">新元素的前缀。 如果为 String.Empty 或 <see langword="null" />，则没有前缀。</param>
      <param name="localName">新元素的本地名称。</param>
      <param name="namespaceURI">新元素的命名空间统一资源标识符 (URI)。 如果为 String.Empty 或 <see langword="null" />，则没有 namespaceURI。</param>
      <returns>一个新的 <see cref="T:System.Xml.XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateEntityReference(System.String)">
      <summary>创建具有指定名称的 <see cref="T:System.Xml.XmlEntityReference" />。</summary>
      <param name="name">实体引用的名称。</param>
      <exception cref="T:System.NotSupportedException">调用此方法。</exception>
      <returns>具有指定名称的 <see cref="T:System.Xml.XmlEntityReference" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>创建一个用于导航此文档的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。 <see langword="XPathNavigator" /> 定位在 <paramref name="node" /> 参数中指定的节点上。</summary>
      <param name="node">希望导航器最初定位在的 <see cref="T:System.Xml.XmlNode" />。</param>
      <returns>用于文档导航的 <see langword="XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementById(System.String)">
      <summary>获取具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。 <see cref="T:System.Xml.XmlDataDocument" /> 类不支持该方法。 调用此方法将引发异常。</summary>
      <param name="elemId">要匹配的属性 ID。</param>
      <exception cref="T:System.NotSupportedException">调用此方法。</exception>
      <returns>具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)">
      <summary>检索与指定 <see cref="T:System.Xml.XmlElement" /> 关联的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="r">想要检索其关联 <see langword="DataRow" /> 的 <see langword="XmlElement" />。</param>
      <returns>包含指定 <see langword="XmlElement" /> 的表示形式的 <see langword="DataRow" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementsByTagName(System.String)">
      <summary>返回一个 <see cref="T:System.Xml.XmlNodeList" />，它包含与指定 <see cref="P:System.Xml.XmlDocument.Name" /> 匹配的所有子代元素的列表。</summary>
      <param name="name">要匹配的限定名称。 它针对匹配节点的 <see cref="P:System.Xml.XmlDocument.Name" /> 属性进行匹配。 特殊值“*”匹配所有标记。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有匹配节点的列表。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)">
      <summary>检索与指定 <see cref="T:System.Data.DataRow" /> 关联的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <param name="e">想要检索其关联 <see langword="XmlElement" /> 的 <see langword="DataRow" />。</param>
      <returns>包含 <see langword="DataRow" /> 的表示形式的 <see langword="XmlElement" />；如果没有与 <see langword="null" /> 关联的 <see langword="DataRow" />，则为 <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.Stream)">
      <summary>从指定的流加载 <see langword="XmlDataDocument" />。</summary>
      <param name="inStream">包含要加载的 XML 文档的流。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.TextReader)">
      <summary>从指定的 <see cref="T:System.IO.TextReader" /> 加载 <see langword="XmlDataDocument" />。</summary>
      <param name="txtReader">用于将 XML 数据输送到文档中的 <see langword="TextReader" />。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.String)">
      <summary>使用指定的 URL 加载 <see langword="XmlDataDocument" />。</summary>
      <param name="filename">文件的 URL，该文件包含要加载的 XML 文档。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 加载 <see langword="XmlDataDocument" />。</summary>
      <param name="reader">包含要加载的 XML 文档的 <see langword="XmlReader" />。</param>
      <exception cref="T:System.NotSupportedException">正在加载的 XML 包含实体引用，而该读取器不能解析实体。</exception>
    </member>
    <member name="P:System.Xml.XmlDataDocument.DataSet">
      <summary>获取 <see cref="T:System.Data.DataSet" />，该数据集提供 <see langword="XmlDataDocument" /> 中数据的关系表示形式。</summary>
      <returns>
        <see langword="DataSet" />，该数据集可用于访问使用关系模型的 <see langword="XmlDataDocument" /> 中的数据。</returns>
    </member>
  </members>
</doc>