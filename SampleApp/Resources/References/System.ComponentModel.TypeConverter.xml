<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary>为 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary>不使用任何参数初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary>使用指定的对象作为新项初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 类的新实例。</summary>
      <param name="newObject">要用作新项的值的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary>获取或设置要添加到绑定列表的对象。</summary>
      <returns>要作为新项添加到关联的集合中的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary>表示用来处理 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件的方法。</summary>
      <param name="sender">事件的源，通常为数据容器或数据绑定集合。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>指定要传递给属性的值，以使该属性从另一个源中获取其值。 这称为“环境”**。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个布尔值的情况下，初始化该实例。</summary>
      <param name="value">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 8 位无符号整数的情况下，初始化该实例。</summary>
      <param name="value">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 Unicode 字符的情况下，初始化该实例。</summary>
      <param name="value">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个双精度浮点数字的情况下，初始化该实例。</summary>
      <param name="value">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 16 位有符号整数的情况下，初始化该实例。</summary>
      <param name="value">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 32 位有符号整数的情况下，初始化该实例。</summary>
      <param name="value">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 64 位有符号整数的情况下，初始化该实例。</summary>
      <param name="value">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个对象的情况下，初始化该实例。</summary>
      <param name="value">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个单精度浮点数字的情况下，初始化该实例。</summary>
      <param name="value">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个字符串的情况下，初始化该实例。</summary>
      <param name="value">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>在提供值和其类型的情况下，初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例。</summary>
      <param name="type">
        <paramref name="value" /> 参数的 <see cref="T:System.Type" />。</param>
      <param name="value">此特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 是否等同于当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</summary>
      <param name="obj">要与当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</param>
      <returns>如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />，则为 <see cref="T:System.ComponentModel.AmbientValueAttribute" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>获取对象，该对象是此 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的值。</summary>
      <returns>是此 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的值的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>提供将 <see cref="T:System.Array" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ArrayConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>获取由值参数指定的数组类型的属性集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组的类型。</param>
      <param name="attributes">一个将用作筛选器的 <see cref="T:System.Attribute" /> 类型的数组。</param>
      <returns>一个具有为数组公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>由于应调用 <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 来查找此对象的属性，因此为 <see langword="true" />。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>表示特性的集合。</summary>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>指定一个可以使用的空集合，而不是创建一个新集合。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 类的新实例。</summary>
      <param name="attributes">一个为此集合提供特性的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>确定该特性集合是否具有指定的特性。</summary>
      <param name="attribute">要在集合中查找的 <see cref="T:System.Attribute" />。</param>
      <returns>如果集合包含该特性或是该类型特性的默认特性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>确定该特性集合是否包含特性数组中所有指定的特性。</summary>
      <param name="attributes">要在集合中查找的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <returns>如果该集合包含所有特性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>从指定的索引开始，将集合复制到数组。</summary>
      <param name="array">要将集合复制到的 <see cref="T:System.Array" />。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary>从现有的 <see cref="T:System.ComponentModel.AttributeCollection" /> 创建新的 <see cref="T:System.ComponentModel.AttributeCollection" />。</summary>
      <param name="existing">要从其创建副本的 <see cref="T:System.ComponentModel.AttributeCollection" />。</param>
      <param name="newAttributes">一个为此集合提供特性的类型 <see cref="T:System.Attribute" /> 的数组。 可以为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="existing" /> 为 <see langword="null" />。</exception>
      <returns>新的 <see cref="T:System.ComponentModel.AttributeCollection" />，它是 <paramref name="existing" /> 的副本。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>返回给定 <see cref="T:System.Attribute" /> 的默认 <see cref="T:System.Type" />。</summary>
      <param name="attributeType">要检索的特性的 <see cref="T:System.Type" />。</param>
      <returns>给定 <paramref name="attributeType" /> 的默认 <see cref="T:System.Attribute" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>获取此集合的枚举器。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>确定指定的特性是否与集合中的特性相同。</summary>
      <param name="attribute">要与集合中的特性进行比较的 <see cref="T:System.Attribute" /> 的实例。</param>
      <returns>如果特性包含在集合中，且其值与集合中该特性的值相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>确定指定数组中的特性是否与集合中的特性相同。</summary>
      <param name="attributes">要与此集合中的特性进行比较的 <see cref="T:System.CodeDom.MemberAttributes" /> 的数组。</param>
      <returns>如果数组中的所有特性都包含在集合中，且其值与集合中特性的值相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 的一个 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary>获取特性集合。</summary>
      <returns>特性集合。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>获取特性的数目。</summary>
      <returns>特性的数目。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>获取具有指定索引号的特性。</summary>
      <param name="index">
        <see cref="T:System.ComponentModel.AttributeCollection" /> 的从零开始的索引。</param>
      <returns>具有指定索引号的 <see cref="T:System.Attribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>获取具有指定类型的特性。</summary>
      <param name="attributeType">要从集合中获取的 <see cref="T:System.Type" /> 的 <see cref="T:System.Attribute" />。</param>
      <returns>具有指定类型的 <see cref="T:System.Attribute" />；如果该特性不存在，则为该特性类型的默认值。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否已同步（线程安全）。</summary>
      <returns>如果同步对集合的访问（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary>启用特性重定向。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary>用给定的类型名称初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 类的新实例。</summary>
      <param name="typeName">要指定的类型的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary>用给定的类型名称和属性名称初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 类的新实例。</summary>
      <param name="typeName">要指定的类型的名称。</param>
      <param name="propertyName">将为其检索特性的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary>用给定的类型初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 类的新实例。</summary>
      <param name="type">要指定的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary>获取将为其检索特性的属性的名称。</summary>
      <returns>将为其检索特性的属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary>获取传入构造函数的程序集限定类型名称。</summary>
      <returns>构造函数中指定的类型的程序集限定名称。</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>提供非浮点数字类型的基类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定该转换器是否可以将给定源类型的对象转换为转换器的本机类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，它表示要对其进行转换的类型。</param>
      <returns>如果此转换器能够执行该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回指示该转换器能否使用上下文将对象转换为给定目标类型的值。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">表示要转换为的类型的<see cref="T:System.Type" />。</param>
      <returns>如果此转换器能够执行该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定对象转换为转换器的本机类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">指定表示数字的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.Exception">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的对象转换为其他类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">指定表示数字的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>指定成员是否通常用于绑定。 此类不能被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.BindableAttribute" /> 的默认值，即 <see cref="F:System.ComponentModel.BindableAttribute.No" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>指定属性通常不用于绑定。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>指定属性通常用于绑定。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>用布尔值初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="bindable">若要将属性用于绑定，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary>初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="bindable">若要将属性用于绑定，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.BindingDirection" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>使用其中一个 <see cref="T:System.ComponentModel.BindableSupport" /> 值初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary>初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> 值之一。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.BindingDirection" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.BindableAttribute" /> 对象是否相等。</summary>
      <param name="obj">要比较的对象。</param>
      <returns>如果指定的 <see cref="T:System.ComponentModel.BindableAttribute" /> 等于当前的 <see cref="T:System.ComponentModel.BindableAttribute" />，则为 <see langword="true" />；如果不等，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary>用作 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的哈希函数。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.BindableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary>确定此特性是否为默认特性。</summary>
      <returns>如果此特性是此特性类的默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>获取指示某个属性通常用于绑定的值。</summary>
      <returns>如果该属性通常用于绑定，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary>获取指示此属性的数据绑定方向的值。</summary>
      <returns>此属性的数据绑定的方向。</returns>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>指定值来表示是否可以将属性绑定到数据元素或另一个属性。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>该属性被设置为默认值。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>该属性在设计时不可绑定。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>该属性在设计时可绑定。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary>指定模板是否可以用一种方式或两种方式绑定。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary>该模板只能接受属性值。 与泛型 <see cref="T:System.Web.UI.ITemplate" /> 一起使用。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary>该模板可以接受和公开属性值。 与 <see cref="T:System.Web.UI.IBindableTemplate" /> 一起使用。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary>提供支持数据绑定的泛型集合。</summary>
      <typeparam name="T">列表中元素的类型。</typeparam>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary>在将项添加到该列表之前发生。</summary>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary>当列表或列表中的项更改时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>使用指定列表初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 类的新实例。</summary>
      <param name="list">要包含在 <see cref="T:System.Collections.Generic.IList`1" /> 中的项的 <see cref="T:System.ComponentModel.BindingList`1" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary>将新项添加到集合。</summary>
      <exception cref="T:System.InvalidOperationException">将 <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> 属性设置为 <see langword="false" />。  
  
- 或 - 
未能找到当前项目类型的公共无参数构造函数。</exception>
      <returns>添加到列表的项。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary>将新项添加到集合末尾。</summary>
      <exception cref="T:System.InvalidCastException">新项的类型与包含在 <see cref="T:System.ComponentModel.BindingList`1" /> 中的对象的类型不同。</exception>
      <returns>已添加到集合中的项。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>如果已在派生类中重写，则对项进行排序；否则将引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="prop">指定要用于排序的属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
      <exception cref="T:System.NotSupportedException">方法未在派生类中重写。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary>丢弃挂起的新项。</summary>
      <param name="itemIndex">要添加的新项的索引</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary>从集合中删除所有元素。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary>向集合提交挂起的新项。</summary>
      <param name="itemIndex">要添加的新项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>如果在派生类中实现了搜索，则用指定值搜索具有指定属性说明符的项的索引；否则将引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="prop">要搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">要匹配的 <paramref name="prop" /> 值。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> 未在派生类中重写。</exception>
      <returns>与属性说明符匹配并包含指定值的项的从零开始的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary>将指定的项插入到列表中的指定索引位置。</summary>
      <param name="index">要插入该项的位置的从零开始的索引。</param>
      <param name="item">要插入列表的项。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.BindingList`1.AddingNew" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary>删除指定索引处的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">您正在移除一个新添加的项而 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> 设置为 <see langword="false" />。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary>如果在派生类中实现排序，则移除通过 <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 应用的任何排序；否则将引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">方法未在派生类中重写。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary>引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 类型的 <see cref="F:System.ComponentModel.ListChangedType.Reset" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary>为位于指定位置的项引发类型为 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 的 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 事件。</summary>
      <param name="position">要重置的项的从零开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary>使用指定项替换指定索引处的项。</summary>
      <param name="index">要替换的项的从零开始的索引。</param>
      <param name="item">位于指定索引处的项的新值。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  
  
- 或 - 
 <paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="prop">要作为搜索条件添加的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary>将新项添加到列表。 有关详细信息，请参阅 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
      <returns>添加到列表的项。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>根据 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 对列表进行排序。 有关此成员的完整说明，请参见 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。</summary>
      <param name="prop">以其为根据进行排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</summary>
      <param name="prop">要对其进行搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">要搜索的 <paramref name="prop" /> 参数的值。</param>
      <returns>具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="prop">要从用于搜索的索引中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /></summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary>获取或设置一个值，该值指示该列表中的项是否可以编辑。</summary>
      <returns>如果列表项可以编辑，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary>获取或设置一个值，该值指示是否可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法向列表中添加项。</summary>
      <returns>如果可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法向列表中添加项，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值视列表中所包含的基础类型而定。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary>获取或设置一个值，该值指示是否可以从集合中移除项。</summary>
      <returns>如果可以使用 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法从列表中移除项，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary>获取一个值，指示列表是否已排序。</summary>
      <returns>如果列表已排序，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary>获取或设置一个值，该值指示在列表中添加或移除项时是否会引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <returns>如果添加或移除项时引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary>获取列表的排序方向。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。 默认值为 <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary>如果在派生类中实现了排序，则获取用于对列表排序的属性说明符；否则返回 <see langword="null" />。</summary>
      <returns>用于对列表排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary>获取一个值，该值指示是否启用 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <returns>如果支持 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary>获取一个值，该值指示列表是否支持搜索。</summary>
      <returns>如果列表支持搜索，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary>获取一个值，该值指示列表是否支持排序。</summary>
      <returns>如果列表支持排序，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary>获取一个值，该值指示是否可以编辑列表中的项。</summary>
      <returns>如果列表项可以编辑，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary>获取一个值，该值指示是否可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法向列表中添加新项。</summary>
      <returns>如果可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法向列表中添加项，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值视列表中所包含的基础类型而定。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary>获取一个值，该值指示是否可以从列表中移除项。</summary>
      <returns>如果可以使用 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法从列表中移除项，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns>如果已调用 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> 并且未调用 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns>正在用于排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns>如果当列表更改或项更改时引发了 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns>如果列表支持使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法进行搜索，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns>如果列表支持排序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary>获取一个值，该值指示项属性值更改是否会引发类型为 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 的 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 事件。 不能在派生类中重写此成员。</summary>
      <returns>
        <see langword="true" /> 如果列表类型实现 <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> ，则为; 否则为 <see langword="false" /> 。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>提供将 <see cref="T:System.Boolean" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.BooleanConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为布尔对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns>如果此对象可以执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定值对象转换为布尔对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">指定要转换成的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取布尔数据类型的标准值的集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，它包含一组标准有效值。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示从 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法返回的标准值的列表是否为独占列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>返回 <see langword="true" />，因为从 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 返回的 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能的值的穷举列表。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可从列表中选取的标准值集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>返回 <see langword="true" />，因为可调用 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 来查找对象支持的一组公共值。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>提供用于在 8 位无符号整数对象与其他各种表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ByteConverter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>表示处理可取消事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>提供用于在 Unicode 字符对象与其他各种表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CharConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为 Unicode 字符对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定对象转换为 Unicode 字符对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用这些参数将给定值对象转换为 Unicode 字符对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>指定如何更改集合。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>指定已将某个元素添加到集合。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>指定已更改整个集合。 使用操作整个集合的方法（如 <see cref="M:System.Collections.CollectionBase.Clear" />）时会导致此情况。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>指定已从集合中移除一个元素。</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>为 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> 类的新实例。</summary>
      <param name="action">指定集合如何更改的 <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值之一。</param>
      <param name="element">
        <see cref="T:System.Object" />，它指定发生更改的集合实例。</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>获取指定集合如何更改的操作。</summary>
      <returns>
        <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值之一。</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>获取包含更改的集合实例。</summary>
      <returns>表示包含更改的集合实例的 <see cref="T:System.Object" />；如果刷新集合，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>表示处理将元素添加到集合中或从集合中移除元素时引发的 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>提供用于在集合对象与其他各种表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CollectionConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">要将 <paramref name="value" /> 转换成的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。 此参数必须从 <see cref="T:System.Collections.ICollection" /> 继承。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的上下文和特性获取由值参数指定的数组类型的属性集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组的类型。</param>
      <param name="attributes">一个将用作筛选器的 <see cref="T:System.Attribute" /> 类型的数组。</param>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 <see langword="null" />。 此方法始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>返回 <see langword="false" />，因为不应调用 <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 来查找此对象的属性。 此方法从不返回 <see langword="true" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary>指定一个组件的数据源和数据成员属性，该组件支持复杂数据绑定。 此类不能被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary>不使用任何参数初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary>使用指定的数据源初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类的新实例。</summary>
      <param name="dataSource">要用作数据源的属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的数据源和数据成员初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类的新实例。</summary>
      <param name="dataSource">要用作数据源的属性的名称。</param>
      <param name="dataMember">要用作数据源的属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 实例。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Object" /> 实例进行比较的 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />。</param>
      <returns>如果该对象等同于当前的实例，则为 <see langword="true" />；否则为 <see langword="false" />，指示两者不等同。</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary>获取 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所绑定组件的数据成员属性的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所绑定组件的数据成员属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary>获取 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所绑定组件的数据源属性的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所绑定组件的数据源属性的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>提供将组件与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.ComponentConverter" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，它表示与此组件转换器关联的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>获取由值参数指定的组件类型的属性集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要获取其属性的组件类型。</param>
      <param name="attributes">一个将用作筛选器的 <see cref="T:System.Attribute" /> 类型的数组。</param>
      <returns>具有为此组件公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否使用指定的上下文支持属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>由于应调用 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 来查找此对象的属性，因此为 <see langword="true" />。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>提供自定义组件编辑器的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ComponentEditor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>编辑组件并返回一个值，用以指示是否已根据给定上下文修改了组件。</summary>
      <param name="context">可用于获得有关编辑更多信息的可选上下文对象。</param>
      <param name="component">要编辑的组件。</param>
      <returns>如果组件已被修改，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>编辑该组件并返回一个表示是否修改了该组件的值。</summary>
      <param name="component">要编辑的组件。</param>
      <returns>如果组件已被修改，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary>提供组件或对象的枚举资源的简单功能。 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 类是一个 <see cref="T:System.Resources.ResourceManager" />。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary>创建一个 <see cref="T:System.ComponentModel.ComponentResourceManager" />，它根据指定的 <see cref="T:System.Type" /> 中的信息在附属程序集内查找资源。</summary>
      <param name="t">一个 <see cref="T:System.Type" />，<see cref="T:System.ComponentModel.ComponentResourceManager" /> 将从其中派生所有用于查找资源文件的信息。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary>将资源的值应用于对象相应的属性。</summary>
      <param name="value">一个 <see cref="T:System.Object" />，它包含要应用的属性值。</param>
      <param name="objectName">一个 <see cref="T:System.String" />，它包含要在资源中查找的对象名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="objectName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>将资源的值应用于对象相应的属性。</summary>
      <param name="value">一个 <see cref="T:System.Object" />，它包含要应用的属性值。</param>
      <param name="objectName">一个 <see cref="T:System.String" />，它包含要在资源中查找的对象名称。</param>
      <param name="culture">要应用资源的区域性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="objectName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>封装零个或更多个组件。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Container" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>将指定的 <see cref="T:System.ComponentModel.Component" /> 添加到 <see cref="T:System.ComponentModel.Container" />。 该组件未命名。</summary>
      <param name="component">要添加的组件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>将指定的 <see cref="T:System.ComponentModel.Component" /> 添加到 <see cref="T:System.ComponentModel.Container" /> 并为其分配名称。</summary>
      <param name="component">要添加的组件。</param>
      <param name="name">要给该组件分配的唯一的、区分大小写的名称。  
  
- 或 - 
 <see langword="null" />，它使组件保持未命名状态。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是唯一的。</exception>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>为给定的 <see cref="T:System.ComponentModel.ISite" /> 创建一个站点 <see cref="T:System.ComponentModel.IComponent" />，并将给定名称分配给该站点。</summary>
      <param name="component">要为其创建站点的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name">要分配给 <paramref name="component" /> 的名称，或者为 <see langword="null" /> 以跳过名称分配。</param>
      <returns>新创建的站点。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Container" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Container" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary>在通过垃圾回收将 <see cref="T:System.ComponentModel.Container" /> 回收之前，释放非托管资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>获取指定类型的服务对象（如果可用）。</summary>
      <param name="service">要检索的服务的 <see cref="T:System.Type" />。</param>
      <returns>实现所请求服务的 <see cref="T:System.Object" />；或者在无法解决服务的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>从 <see cref="T:System.ComponentModel.Container" /> 中移除组件。</summary>
      <param name="component">要移除的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary>从 <see cref="T:System.ComponentModel.Container" /> 中移除组件，不将 <see cref="P:System.ComponentModel.IComponent.Site" /> 设置为 <see langword="null" />。</summary>
      <param name="component">要移除的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary>确定组件名称对此容器是否唯一。</summary>
      <param name="component">命名的组件。</param>
      <param name="name">要验证的组件名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是唯一的。</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>获取 <see cref="T:System.ComponentModel.Container" /> 中的所有组件。</summary>
      <returns>包含 <see cref="T:System.ComponentModel.Container" /> 中的组件的集合。</returns>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary>为容器筛选服务提供基类。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ContainerFilterService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary>筛选组件集合。</summary>
      <param name="components">要筛选的组件集合。</param>
      <returns>表示已修改集合的 <see cref="T:System.ComponentModel.ComponentCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>提供将 <see cref="T:System.Globalization.CultureInfo" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CultureInfoConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定的值对象转换为 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">指定要转换成的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定无效的区域性。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">指定要转换成的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary>检索指定区域性的名称。</summary>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，它指定要获取其名称的区域性。</param>
      <returns>指定区域性的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文获取 <see cref="T:System.Globalization.CultureInfo" /> 对象的标准值集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>含有一组标准的有效值的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果数据类型不支持一组标准值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示从 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 返回的标准值的列表是否为穷举列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>返回 <see langword="false" />，因为从 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 返回的 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 不是可能的值的穷举列表（换言之，其他值也是可能的）。 此方法从不返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可使用指定上下文从列表中选取的标准值集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>返回 <see langword="true" />，因为应当调用 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 来查找对象支持的一组公共值。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary>提供 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 接口的简单默认实现。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>使用父级自定义类型说明符初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 类的新实例。</summary>
      <param name="parent">父级自定义类型说明符。</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary>返回此类型说明符表示的类型的自定义特性集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.AttributeCollection" />，包含该类型的特性。 默认值为 <see cref="F:System.ComponentModel.AttributeCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary>返回由此类型描述符表示的类的完全限定名。</summary>
      <returns>包含此类型描述符所描述类型的完全限定类名的 <see cref="T:System.String" />。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary>返回此类型说明符表示的类的名称。</summary>
      <returns>一个 <see cref="T:System.String" />，包含此类型说明符说明的组件实例的名称。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary>返回此类型说明符表示的类型的类型转换器。</summary>
      <returns>此类型说明符表示的类型的 <see cref="T:System.ComponentModel.TypeConverter" />。 默认为新创建的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary>返回此类型说明符表示的对象的默认事件的事件说明符。</summary>
      <returns>此类型说明符表示的对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary>返回此类型说明符表示的对象的默认属性的属性描述符。</summary>
      <returns>此类型说明符表示的对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary>返回要与此类型说明符表示的类关联的指定类型的编辑器。</summary>
      <param name="editorBaseType">要检索的编辑器的基类型。</param>
      <returns>要与此类型说明符表示的类关联的给定类型的编辑器。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary>返回此类型说明符所表示对象的事件说明符的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含此类型说明符所表示的对象的事件说明符。 默认值为 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>返回此类型说明符所表示的对象的已筛选事件说明符集合。</summary>
      <param name="attributes">用作筛选器的特性数组。 它可以是 <see langword="null" />。</param>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含此类型说明符所表示的对象的事件说明。 默认值为 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary>返回此类型说明符所表示对象的属性说明符的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含此类型说明符所表示的对象的属性说明。 默认值为 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>返回此类型说明符所表示的对象的已筛选属性描述符的集合。</summary>
      <param name="attributes">用作筛选器的特性数组。 它可以是 <see langword="null" />。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含此类型说明符所表示的对象的属性说明。 默认值为 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回一个对象，该对象包含指定的属性描述符所描述的属性。</summary>
      <param name="pd">要检索其所属对象的属性描述符。</param>
      <returns>一个 <see cref="T:System.Object" />，拥有该类型说明符指定的给定属性。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary>将某一类型标识为适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象的对象。 此类不能被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary>指示该类适合在设计时绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类的默认值，该值指示该类适合在设计时绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary>指定该类不适合在设计时绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类的新实例，并指示某一对象是否适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。</summary>
      <param name="isDataObject">如果该对象适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary>确定此 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 实例是否符合另一对象的模式。</summary>
      <param name="obj">与 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 实例进行比较的对象。</param>
      <returns>如果该实例与 <paramref name="obj" /> 参数所指定的实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该特性的当前值是否为该特性的默认值。</summary>
      <returns>如果该特性的当前值是默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary>获取一个值，该值指示是否应将某一对象视为适合在设计时绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。</summary>
      <returns>如果将该对象视为适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary>为表示数据字段的属性提供元数据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类的新实例，并指示该字段是否是数据行的主键。</summary>
      <param name="primaryKey">为 <see langword="true" /> 指示该字段在数据行的主键中；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类的新实例，并指示该字段是否是数据行的主键，以及该字段是否是数据库标识字段。</summary>
      <param name="primaryKey">为 <see langword="true" /> 指示该字段在数据行的主键中；否则为 <see langword="false" />。</param>
      <param name="isIdentity">为 <see langword="true" /> 指示该字段是唯一标识数据行的标识字段；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类的新实例，并指示该字段是否是数据行的主键，该字段是否是数据库标识字段，以及该字段是否可以为空。</summary>
      <param name="primaryKey">为 <see langword="true" /> 指示该字段在数据行的主键中；否则为 <see langword="false" />。</param>
      <param name="isIdentity">为 <see langword="true" /> 指示该字段是唯一标识数据行的标识字段；否则为 <see langword="false" />。</param>
      <param name="isNullable">为 <see langword="true" /> 指示该字段在数据存储区中可以为空；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类的新实例，指示该字段是否是数据行的主键，该字段是否是数据库标识字段以及该字段是否可以为空，并设置该字段的长度。</summary>
      <param name="primaryKey">为 <see langword="true" /> 指示该字段在数据行的主键中；否则为 <see langword="false" />。</param>
      <param name="isIdentity">为 <see langword="true" /> 指示该字段是唯一标识数据行的标识字段；否则为 <see langword="false" />。</param>
      <param name="isNullable">为 <see langword="true" /> 指示该字段在数据存储区中可以为空；否则为 <see langword="false" />。</param>
      <param name="length">字段的长度（以字节为单位）。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">与 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 实例进行比较的对象。</param>
      <returns>如果该实例与 <paramref name="obj" /> 参数所指定的实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary>获取一个值，该值指示某一属性是否表示基础数据中的标识字段。</summary>
      <returns>如果该属性表示基础数据中的标识字段，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary>获取一个值，该值指示某一属性表示的字段在基础数据存储区中是否可以为空。</summary>
      <returns>如果该属性表示的字段在基础数据存储区中可以为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary>获取属性的长度（以字节为单位）。</summary>
      <returns>该属性的长度（以字节为单位）；如果未设置，则为 -1。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary>获取一个值，该值指示某一属性是否在基础数据的主键中。</summary>
      <returns>如果该属性在数据存储区的主键中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary>标识由某一类型公开的数据操作方法，该方法所执行的操作类型以及该方法是否是默认的数据方法。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 类的新实例，并标识该方法所执行的数据操作类型。</summary>
      <param name="methodType">
        <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值之一，这些值描述该方法所执行的数据操作。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 类的新实例，标识该方法所执行的数据操作类型，并标识该方法是否是该数据对象公开的默认数据方法。</summary>
      <param name="methodType">
        <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值之一，这些值描述该方法所执行的数据操作。</param>
      <param name="isDefault">为 <see langword="true" /> 指示该特性所应用于的方法是指定的 <paramref name="methodType" /> 的数据对象的默认方法；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">与 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 实例进行比较的对象。</param>
      <returns>如果该实例与 <paramref name="obj" /> 参数所指定的实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary>获取一个值，该值指示此实例是否与指定特性共享一个通用模式。</summary>
      <param name="obj">与 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 实例进行比较的对象。</param>
      <returns>如果该实例与 <paramref name="obj" /> 参数所指定的实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary>获取一个值，该值指示 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 所应用于的方法是否是由特定方法类型的数据对象所公开的默认数据方法。</summary>
      <returns>如果该方法是由方法类型的对象所公开的默认方法，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary>获取一个 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，该值指示该方法所执行的数据操作类型。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值之一，这些值标识 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 所应用于的方法所执行的数据操作类型。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary>根据应用于某方法的 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 的指定，标识该方法所执行的数据操作类型。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary>指示某一方法是否用于删除数据的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary>指示某一方法是否用于填充 <see cref="T:System.Data.DataSet" /> 对象的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary>指示某一方法是否用于插入数据的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary>指示某一方法是否用于检索数据的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary>指示某一方法是否用于更新数据的数据操作。</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>提供将 <see cref="T:System.DateTime" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DateTimeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns>如果此对象可以执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定的值对象转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用这些参数将给定的值对象转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>提供将 <see cref="T:System.DateTimeOffset" /> 结构与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DateTimeOffsetConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回一个值，该值指示是否可将指定源类型的对象转换为 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="context">日期格式上下文。</param>
      <param name="sourceType">要检查的源类型。</param>
      <returns>如果可以将指定的类型转换为 <see cref="T:System.DateTimeOffset" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回一个值，该值指示是否可将 <see cref="T:System.DateTimeOffset" /> 转换为指定类型的对象。</summary>
      <param name="context">日期格式上下文。</param>
      <param name="destinationType">要检查的目标类型。</param>
      <returns>如果可以将 <see cref="T:System.DateTimeOffset" /> 转换为指定的类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定对象转换为 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="context">日期格式上下文。</param>
      <param name="culture">日期区域性。</param>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>表示指定对象的 <see cref="T:System.DateTimeOffset" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.DateTimeOffset" /> 转换为指定类型的对象。</summary>
      <param name="context">日期格式上下文。</param>
      <param name="culture">日期区域性。</param>
      <param name="value">要转换的 <see cref="T:System.DateTimeOffset" />。</param>
      <param name="destinationType">要转换为的类型。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个表示 <see cref="T:System.DateTimeOffset" /> 的指定类型的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>提供将 <see cref="T:System.Decimal" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DecimalConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用这些参数将给定的值对象转换为 <see cref="T:System.Decimal" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary>指定组件的默认绑定属性。 此类不能被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary>不使用任何参数初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary>使用指定的属性名称初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">默认绑定属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 实例。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Object" /> 实例进行比较的 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />。</param>
      <returns>如果该对象等同于当前的实例，则为 <see langword="true" />；否则为 <see langword="false" />，指示两者不等同。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary>获取 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 所绑定组件的默认绑定属性的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 所绑定组件的默认绑定属性的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>指定组件的默认事件。</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 的默认值，即 <see langword="null" />。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 类的新实例。</summary>
      <param name="name">该特性所绑定到组件的默认事件的名称。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultEventAttribute" />。</summary>
      <param name="obj">要进行值的相等性测试的对象。</param>
      <returns>如果给定对象的值等于当前对象的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>获取该特性所绑定到组件的默认事件的名称。</summary>
      <returns>该特性所绑定到组件的默认事件的名称。 默认值是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>指定组件的默认属性。</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 的默认值，即 <see langword="null" />。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">该特性所绑定到组件的默认属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />。</summary>
      <param name="obj">要进行值的相等性测试的对象。</param>
      <returns>如果给定对象的值等于当前对象的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>获取该特性所绑定到组件的默认属性的名称。</summary>
      <returns>该特性所绑定到组件的默认属性的名称。 默认值是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>为 <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> 类的新实例。</summary>
      <param name="oldDesigner">正在失活的文档。</param>
      <param name="newDesigner">正在激活的文档。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>获取正在激活的文档。</summary>
      <returns>此 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 表示正在激活的文档。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>获取正在失活的文档。</summary>
      <returns>此 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 表示正在失活的文档。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>表示用来处理 <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>当签出已签入源代码管理程序中的文件的尝试已取消或失败时将引发的异常。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例，该类指定签出已取消。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>在不使用任何关联消息或错误代码的情况下初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="info">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="message">描述异常的消息。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的详细说明和指定的异常初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="message">该错误的详细说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>使用指定的消息和错误代码初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="message">描述异常的消息。</param>
      <param name="errorCode">要传递的错误代码。</param>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>表示唯一的命令标识符，此标识符由一个命令 ID 数字和一个 GUID 菜单组标识符组成。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>使用指定的菜单组 GUID 和命令 ID 号初始化 <see cref="T:System.ComponentModel.Design.CommandID" /> 类的新实例。</summary>
      <param name="menuGroup">此菜单命令所属组的 GUID。</param>
      <param name="commandID">此菜单命令的数字标识符。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.Design.CommandID" /> 实例是否相等。</summary>
      <param name="obj">要比较的对象。</param>
      <returns>如果指定的对象与其相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>返回表示当前对象的 <see cref="T:System.String" />。</summary>
      <returns>包含命令 ID 信息（包括 GUID 和整数标识符）的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>获取由此 <see cref="T:System.ComponentModel.Design.CommandID" /> 标识的菜单命令所属菜单组的 GUID。</summary>
      <returns>此命令所属命令组的 GUID。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>获取命令数字 ID。</summary>
      <returns>命令 ID 号。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件提供数据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> 类的新实例。</summary>
      <param name="component">已更改的组件。</param>
      <param name="member">表示已更改的成员的 <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <param name="oldValue">已更改成员的旧值。</param>
      <param name="newValue">已更改成员的新值。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>获取已修改的组件。</summary>
      <returns>表示已修改的组件的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>获取已更改的成员。</summary>
      <returns>指示已更改的成员的 <see cref="T:System.ComponentModel.MemberDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>获取已更改成员的新值。</summary>
      <returns>已更改成员的新值。 此属性可为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>获取已更改成员的旧值。</summary>
      <returns>已更改成员的旧值。 此属性可为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>表示用来处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件提供数据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 类的新实例。</summary>
      <param name="component">将要更改的组件。</param>
      <param name="member">指示将要更改的组件成员的 <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>获取将要更改的组件或作为将要更改的成员的父容器的组件。</summary>
      <returns>将要更改成员的组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>获取将要更改的成员。</summary>
      <returns>指示将要更改的成员的 <see cref="T:System.ComponentModel.MemberDescriptor" />（如果已知），或者为 <see langword="null" />（如果未知）。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>表示用来处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 事件。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> 类的新实例。</summary>
      <param name="component">作为事件源的组件。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>获取与该事件关联的组件。</summary>
      <returns>与该事件关联的组件。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>表示将处理为组件级事件引发的下列事件的方法：<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> 类的新实例。</summary>
      <param name="component">要重命名的组件。</param>
      <param name="oldName">组件的旧名称。</param>
      <param name="newName">组件的新名称。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>获取所命名的组件。</summary>
      <returns>所命名的组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>获取组件在重命名事件发生后的名称。</summary>
      <returns>组件在重命名事件发生后的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>获取组件在重命名事件发生前的名称。</summary>
      <returns>组件先前的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>表示用来处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>表示设计器的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>初始化包含指定设计器集的 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 类的新实例。</summary>
      <param name="designers">包含要添加的设计器集合的列表。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>初始化包含指定设计器的 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 类的新实例。</summary>
      <param name="designers">要存储的 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 对象数组。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>获取此集合的新枚举数。</summary>
      <returns>枚举集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从集合复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>获取此集合的新枚举数。</summary>
      <returns>枚举集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>获取集合中的设计器数。</summary>
      <returns>集合中的设计器数。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>获取指定索引处的设计器。</summary>
      <param name="index">要返回的设计器的索引。</param>
      <returns>指定索引处的设计器。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>提供有关 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 事件的数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> 类的新实例。</summary>
      <param name="host">文档的 <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>获取文档的宿主。</summary>
      <returns>文档的 <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>表示要处理 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 事件的方法，这两种事件在创建或释放文档时引发。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary>提供用于获取和设置设计器选项值的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerOptionService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary>使用给定名称创建新的 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 并将其添加到给定父级。</summary>
      <param name="parent">父设计器选项集合。 除根对象集合外，所有集合都有父项。</param>
      <param name="name">此集合的名称。</param>
      <param name="value">提供此集合的属性的对象。 如果集合不应提供任何属性，则可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> 或 <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是一个空字符串。</exception>
      <returns>具有给定名称的新 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>填充 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</summary>
      <param name="options">要填充的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary>显示给定对象的选项对话框。</summary>
      <param name="options">包含要调用的对象的选项集合。</param>
      <param name="optionObject">实际选项对象。</param>
      <returns>如果显示对话框，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary>获取在此包中定义的选项的值。</summary>
      <param name="pageName">将选项绑定到的页面。</param>
      <param name="valueName">选项值的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 为 <see langword="null" />。</exception>
      <returns>名为 <paramref name="valueName" /> 的选项的值。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary>设置在此包中定义的选项的值。</summary>
      <param name="pageName">将选项绑定到的页面。</param>
      <param name="valueName">选项值的名称。</param>
      <param name="value">选项的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary>获取此服务的选项集合。</summary>
      <returns>用可用的设计器选项进行填充的 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary>包含设计器选项的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>从目标数组的指定索引处开始，将整个集合复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从集合复制的元素的目标数组。 <paramref name="array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary>返回可用于循环访问此集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>可用于循环访问此集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>返回在此集合范围内给定值的第一个匹配项的索引。</summary>
      <param name="value">要在集合中定位的对象。</param>
      <returns>如果在整个集合中找到匹配项，则为第一个匹配项的索引；否则为该集合的下限减 1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary>显示对话框用户界面 (UI)，用户可以通过它配置此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 中的选项。</summary>
      <returns>如果可以显示对话框，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>新元素的插入位置。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定集合中是否包含特定值。</summary>
      <param name="value">要在集合中定位的 <see cref="T:System.Object" />。</param>
      <returns>如果在集合中找到 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集合中特定项的索引。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.Object" />。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将一项插入集合中指定索引处。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到集合中的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引处的集合项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary>获取此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 包含的子选项集合的数量。</summary>
      <returns>此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 包含的子选项集合的数量。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary>在给定索引处获取子集合。</summary>
      <param name="index">要获取的子集合的索引（索引从零开始）。</param>
      <returns>指定索引处的子集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary>在给定名称处获取子集合。</summary>
      <param name="name">子集合的名称。</param>
      <returns>带有由 <paramref name="name" /> 参数指定的名称的子集合，如果未找到该名称，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary>获取此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名称。</summary>
      <returns>此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary>获取父集合对象。</summary>
      <returns>父集合对象，如果不存在父级，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary>获取由此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 提供的属性集合，以及它的所有子级。</summary>
      <returns>由此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 提供的属性集合，以及它的所有子级。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否经过同步因而是线程安全的。</summary>
      <returns>如果对集合的访问是同步的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>如果该集合具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>提供一种方法来对一系列的设计时操作进行分组，从而提高性能并能撤销大多数类型的更改。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>在不使用说明的情况下初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>使用指定的事务说明初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 类的新实例。</summary>
      <param name="description">此事务的说明。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>取消事务并尝试回滚由事务的事件作出的更改。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>提交此事务。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary>释放与此对象关联的资源。 如果此事务尚未提交，则此重写方法将提交此事务。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>引发 <see langword="Cancel" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>执行提交事务的实际工作。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 使用的所有资源。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>获取一个值，该值指示是否已取消事务。</summary>
      <returns>如果事务已取消，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>获取一个值，该值指示是否已提交事务。</summary>
      <returns>如果事务已提交，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>获取事务的说明。</summary>
      <returns>事务的说明。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>提供有关 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>使用指示设计器是否已对事务调用 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 的指定值来初始化 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 类的新实例。</summary>
      <param name="commit">指示事务是否已提交的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 类的新实例。</summary>
      <param name="commit">指示事务是否已提交的值。</param>
      <param name="lastTransaction">如果这是最后要关闭的事务，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary>获取一个值，该值指示这是不是最后要关闭的事务。</summary>
      <returns>如果这是最后要关闭的事务，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>指示设计器是否已对事务调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</summary>
      <returns>如果设计器已对事务调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>表示处理设计器的 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>表示可从设计器中调用的谓词。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类的新实例。</summary>
      <param name="text">显示给用户的菜单命令的文本。</param>
      <param name="handler">执行谓词的操作的事件处理程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类的新实例。</summary>
      <param name="text">显示给用户的菜单命令的文本。</param>
      <param name="handler">执行谓词的操作的事件处理程序。</param>
      <param name="startCommandID">此谓词的起始命令 ID。 默认情况下，设计器结构将为谓词保留一系列命令 ID。 您可以通过提供自定义的命令 ID 来将其重写。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary>重写 <see cref="M:System.Object.ToString" />。</summary>
      <returns>谓词的文本，如果文本字段为空，则为空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary>获取或设置谓词菜单项的说明。</summary>
      <returns>描述菜单项的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>获取菜单上的谓词命令的文本说明。</summary>
      <returns>谓词命令的说明。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>表示 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 对象集合。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>使用指定的 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 对象的数组，初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类的新实例。</summary>
      <param name="value">指示要在集合中包含的谓词的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>将指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 添加到集合。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns>集合中添加谓词处的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>向集合中添加指定的设计器谓词组。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>将指定的设计器谓词集合添加到集合中。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>获取一个值，用以指示集合中是否存在指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="value">要在集合中搜索的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns>如果集合中存在指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>从指定的目标索引开始，将集合成员复制到指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 数组中。</summary>
      <param name="array">要将集合成员复制到的数组。</param>
      <param name="index">开始复制的目标索引。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>获取指定 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 的索引。</summary>
      <param name="value">要在集合中获取索引的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns>指定对象的索引（如果在列表中找到）；否则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>在指定索引处插入指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="index">集合中要插入谓词的索引。</param>
      <param name="value">要在集合中插入的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>引发 <see langword="Clear" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>引发 <see langword="Insert" /> 事件。</summary>
      <param name="index">插入项处的索引。</param>
      <param name="value">要插入的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>引发 <see langword="Remove" /> 事件。</summary>
      <param name="index">移除项处的索引。</param>
      <param name="value">要移除的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>引发 <see langword="Set" /> 事件。</summary>
      <param name="index">设置项处的索引。</param>
      <param name="oldValue">旧对象。</param>
      <param name="newValue">新对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>引发 <see langword="Validate" /> 事件。</summary>
      <param name="value">要验证的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>从集合中移除指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="index">获取或设置 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 处的索引。</param>
      <returns>集合中每个有效索引处的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>表示可在设计时支持许可证提供程序的设计时许可证上下文。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>获取已保存的许可证密钥。</summary>
      <param name="type">许可证密钥的类型。</param>
      <param name="resourceAssembly">要从其中获取密钥的程序集。</param>
      <returns>匹配指定类型且已保存的许可证密钥。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>获取已保存的许可证密钥。</summary>
      <param name="type">许可证密钥的类型。</param>
      <param name="key">许可证密钥。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>获取许可证用法模式。</summary>
      <returns>指示上下文的许可模式的 <see cref="T:System.ComponentModel.LicenseUsageMode" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>为设计时许可证上下文序列化提供支持。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>使用指定的密钥和输出流将指定设计时许可证上下文中的许可证序列化。</summary>
      <param name="o">要输出到的流。</param>
      <param name="cryptoKey">要用于加密的密钥。</param>
      <param name="context">指示许可证上下文的 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>定义标识符，用以指示有关帮助信息请求所源自的上下文的信息。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>常规上下文。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>选项。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>工具窗口选项。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>窗口。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary>为类或成员指定上下文关键字。 此类不能被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 的默认值。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的新实例。</summary>
      <param name="keyword">“帮助”关键字值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary>初始化给定类型的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的新实例。</summary>
      <param name="t">将采用“帮助”关键字的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 实例是否相等。</summary>
      <param name="obj">要与当前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。</param>
      <returns>如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />，则为 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary>确定“帮助”关键字是否为 <see langword="null" />。</summary>
      <returns>如果“帮助”关键字为 <see langword="true" />，则为 <see langword="null" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary>获取此属性提供的帮助关键字。</summary>
      <returns>此属性提供的帮助关键字。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>定义用于指示帮助关键字类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>按 F1 请求其帮助的关键字。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>筛选关键字。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>常规关键字。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>提供一个接口来为添加、更改、移除或重命名组件的事件添加和移除事件处理程序，并提供方法来引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 或 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>在组件已添加时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>在添加组件的过程中发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>在组件已更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>在更改组件的过程中发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>在组件已移除时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>在移除组件的过程中发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>在组件已重命名时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>向组件更改服务通知特定组件已更改。</summary>
      <param name="component">已更改的组件。</param>
      <param name="member">已更改的成员。 如果此更改与单个成员无关，则它将为 <see langword="null" />。</param>
      <param name="oldValue">该成员的旧值。 仅当成员不为 <see langword="null" /> 时它才有效。</param>
      <param name="newValue">该成员的新值。 仅当成员不为 <see langword="null" /> 时它才有效。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>向组件更改服务通知特定组件正在发生更改。</summary>
      <param name="component">将要更改的组件。</param>
      <param name="member">正在更改的成员。 如果此更改与单个成员无关，则它将为 <see langword="null" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary>启用组件的设计时枚举。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>获取可用组件类型的列表。</summary>
      <param name="designerHost">提供设计时服务的设计器宿主。 可以为 <see langword="null" />。</param>
      <param name="baseType">指定要检索的组件的基类型。 可以为 <see langword="null" />。</param>
      <returns>可用组件类型的列表。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary>在组件创建期间提供一组推荐的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>将组件的实例还原为其默认状态。</summary>
      <param name="defaultValues">默认属性值（即名称/值对）的字典，用于重置组件的状态。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>使用一组推荐值初始化新组件。</summary>
      <param name="defaultValues">默认属性值（即名称/值对）的字典，用于初始化组件的状态。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>提供用于生成自定义设计器的基本框架。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>执行此设计器的默认行为。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>用指定的组件初始化设计器。</summary>
      <param name="component">与此设计器相关联的组件。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>获取此设计器正在设计的基组件。</summary>
      <returns>表示此设计器所设计的基组件的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>获取设计器支持的设计时谓词的集合。</summary>
      <returns>包含设计器支持的谓词的 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />；如果组件没有谓词，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>出现以下情况时提供事件通知：添加和移除根设计器、更改选定的组件、更改当前的根设计器。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>在更改当前根设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>在创建根设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>在释放文档的根设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>在更改当前设计器视图选择时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>获取当前活动文档的根设计器。</summary>
      <returns>当前处于活动状态的文档，在没有活动文档的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>获取当前在开发环境中处于活动状态的设计文档的根设计器的集合。</summary>
      <returns>包含已创建且尚未释放的根设计器的 <see cref="T:System.ComponentModel.Design.DesignerCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>提供使设计器能够访问和筛选 <see cref="T:System.ComponentModel.TypeDescriptor" /> 字典的接口，它存储组件设计器可以向设计时环境公开的属性、特性和事件说明符。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>当在派生类中被重写后，允许设计器更改或移除它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的特性集中的项。</summary>
      <param name="attributes">组件的类的 <see cref="T:System.Attribute" /> 对象。 特性字典中的关键字是特性的 <see cref="P:System.Attribute.TypeId" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>当在派生类中重写后，允许设计器更改或移除它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件集中的项。</summary>
      <param name="events">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 对象，它表示组件的类的事件。 事件字典中的关键字是事件名。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>当在派生类中重写后，允许设计器更改或移除它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性集中的项。</summary>
      <param name="properties">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象，它表示组件的类的属性。 属性字典中的关键字是属性名。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>当在派生类中被重写时，允许设计器将项添加到它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的特性集中。</summary>
      <param name="attributes">组件的类的 <see cref="T:System.Attribute" /> 对象。 特性字典中的关键字是特性的 <see cref="P:System.Attribute.TypeId" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>当在派生类中被重写时，允许设计器将项添加到它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件集中。</summary>
      <param name="events">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 对象，它表示组件的类的事件。 事件字典中的关键字是事件名。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>当在派生类中被重写时，允许设计器将项添加到它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性集中。</summary>
      <param name="properties">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象，它表示组件的类的属性。 属性字典中的关键字是属性名。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>提供用于管理设计器事务和组件的接口。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>在激活此设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>在停用此设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>在此设计器加载完文档时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>添加 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 事件的事件处理程序。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>添加 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的事件处理程序。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>添加 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" /> 事件的事件处理程序。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>添加 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" /> 事件的事件处理程序。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>激活此宿主所承载的设计器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>创建指定类型的组件，并将其添加到设计文档中。</summary>
      <param name="componentClass">要创建的组件的类型。</param>
      <returns>新创建的组件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>创建指定类型和名称的组件，并将其添加到设计文档中。</summary>
      <param name="componentClass">要创建的组件的类型。</param>
      <param name="name">组件的名称。</param>
      <returns>新创建的组件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>创建 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />，它可封装事件序列以提高性能并启用撤消和重复支持功能。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 的新实例。 在完成事务中的步骤后，应对此对象调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>使用指定的事务说明创建 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />，它可封装事件序列以提高性能并启用撤消和重复支持功能。</summary>
      <param name="description">新创建的事务的标题或说明。</param>
      <returns>一个新的 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />。 在完成事务中的步骤后，应对此对象调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>销毁指定组件并将其从设计器容器中移除。</summary>
      <param name="component">要销毁的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>获取包含指定组件的设计器实例。</summary>
      <param name="component">要为其检索设计器的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" />；或者在指定组件没有设计器的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>获取指定的完全限定类型名称的实例。</summary>
      <param name="typeName">要加载的类型的名称。</param>
      <returns>指定类型名称的类型对象，或者在无法找到该类型的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>获取此设计器宿主的容器。</summary>
      <returns>此宿主的 <see cref="T:System.ComponentModel.IContainer" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>获取一个值，该值指示设计器宿主当前是否在事务中。</summary>
      <returns>如果事务正在进行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>获取一个值，该值指示设计器宿主当前是否正在加载文档。</summary>
      <returns>如果设计器宿主当前正在加载文档，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>获取用作当前设计的根组件的基类的实例。</summary>
      <returns>根组件类的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>获取所设计的类的完全限定名。</summary>
      <returns>基组件类的完全限定名。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>获取当前事务的说明。</summary>
      <returns>当前事务的说明。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary>指定设计器宿主用于报告事务状态的方法。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary>获取一个值，该值指示设计器宿主是否正在关闭事务。</summary>
      <returns>如果设计器正在关闭事务，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>提供对设计器选项的访问；在 Visual Studio 开发环境中，设计器选项位于“选项”命令下的“工具”菜单上********。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>获取指定的 Windows 窗体设计器选项的值。</summary>
      <param name="pageName">定义该选项的页的名称。</param>
      <param name="valueName">该选项属性的名称。</param>
      <returns>指定选项的值。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>设置指定的 Windows 窗体设计器选项的值。</summary>
      <param name="pageName">定义该选项的页的名称。</param>
      <param name="valueName">该选项属性的名称。</param>
      <param name="value">新值。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>在设计器可用来存储用户定义数据的服务中提供基本的、组件站点特定的键值对字典。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>获取对应于指定值的键。</summary>
      <param name="value">要在字典中查找的值。</param>
      <returns>关联键，或者在不存在关联键的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>获取对应于指定键的值。</summary>
      <param name="key">要为其查找值的键。</param>
      <returns>关联值，或者在不存在关联值的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>设置指定的键值对。</summary>
      <param name="key">用作与值相关联的键的对象。</param>
      <param name="value">要存储的值。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>为注册组件事件的事件处理程序提供服务。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>为指定组件和事件的事件处理程序方法创建唯一的名称。</summary>
      <param name="component">事件连接到的组件实例。</param>
      <param name="e">要为其创建名称的事件。</param>
      <returns>为此事件的事件处理程序方法建议的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>获取其方法签名与指定事件兼容的事件处理程序方法的集合。</summary>
      <param name="e">要为其获取兼容事件处理程序方法的事件。</param>
      <returns>字符串的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>为指定属性说明符（如果它表示事件）所表示的事件获取 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="property">表示事件的属性。</param>
      <returns>属性所表示的事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者在属性不表示事件的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>将一组事件说明符转换为一组属性说明符。</summary>
      <param name="events">要转换为属性的事件。</param>
      <returns>对事件集进行描述的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象数组。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>将单个事件说明符转换为属性说明符。</summary>
      <param name="e">要转换的事件。</param>
      <returns>对事件进行描述的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>显示设计器的用户代码。</summary>
      <returns>如果显示该代码，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>显示指定事件的用户代码。</summary>
      <param name="component">事件要连接到组件。</param>
      <param name="e">要显示的事件。</param>
      <returns>如果显示该代码，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>在指定行显示设计器的用户代码。</summary>
      <param name="lineNumber">要放置插入符号的行号。</param>
      <returns>如果显示该代码，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>提供可列出扩展程序提供程序的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>获取组件的扩展程序提供程序集。</summary>
      <returns>列出处于活动状态的扩展程序提供程序的 <see cref="T:System.ComponentModel.IExtenderProvider" /> 类型的数组。 如果没有提供程序，则返回空数组。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>提供一个接口，用于在设计时添加和移除扩展程序提供程序。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>添加指定的扩展程序提供程序。</summary>
      <param name="provider">要添加的扩展程序提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>移除指定的扩展程序提供程序。</summary>
      <param name="provider">要移除的扩展程序提供程序。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>提供在设计时显示“帮助”主题和添加及移除“帮助”关键字的方法。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>向该文档添加上下文特性。</summary>
      <param name="name">要添加的特性的名称。</param>
      <param name="value">属性的值。</param>
      <param name="keywordType">
        <see cref="T:System.ComponentModel.Design.HelpKeywordType" /> 枚举中的关键字类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>从文档中移除所有现有的上下文特性。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>创建用于管理子上下文的局部 <see cref="T:System.ComponentModel.Design.IHelpService" />。</summary>
      <param name="contextType">要添加的子上下文的优先级类型。</param>
      <returns>新创建的 <see cref="T:System.ComponentModel.Design.IHelpService" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>移除先前添加的上下文特性。</summary>
      <param name="name">要移除的属性的名称。</param>
      <param name="value">要移除的特性的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>移除用 <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" /> 创建的上下文。</summary>
      <param name="localContext">要移除的局部上下文 <see cref="T:System.ComponentModel.Design.IHelpService" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>显示对应于指定关键字的帮助主题。</summary>
      <param name="helpKeyword">要显示的帮助主题的关键字。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>显示对应于指定 URL 的帮助主题。</summary>
      <param name="helpUrl">要显示帮助主题的 URL。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>提供了一组用于标识组件中所含组件的方法。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>在指定的组件中搜索实现 <see cref="T:System.ComponentModel.IComponent" /> 接口的字段，并将它们逐一添加到指定的容器，同时存储它们的继承级别，继承级别可以使用 <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" /> 方法检索。</summary>
      <param name="component">要搜索的 <see cref="T:System.ComponentModel.IComponent" />。 从这个组件开始搜索。</param>
      <param name="container">要向其添加组件的 <see cref="T:System.ComponentModel.IContainer" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>获取指定组件的继承特性。</summary>
      <param name="component">要为其检索继承特性的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns>一个 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的实例，用于描述指定组件的继承级别。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>提供的方法用于管理设计模式下可用的全局设计器谓词和菜单命令，以及显示某些类型的快捷菜单。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>将指定的标准菜单命令添加到菜单中。</summary>
      <param name="command">要添加的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
      <exception cref="T:System.InvalidOperationException">菜单上已存在指定 <see cref="T:System.ComponentModel.Design.CommandID" /> 的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>将指定的设计器谓词添加到全局设计器谓词集中。</summary>
      <param name="verb">要添加的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>搜索指定的命令 ID 并返回与之关联的菜单命令。</summary>
      <param name="commandID">要搜索的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns>与该命令 ID 相关联的 <see cref="T:System.ComponentModel.Design.MenuCommand" />，或者在未找到命令的情况下返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>调用与指定的命令 ID 匹配的菜单或设计器谓词命令。</summary>
      <param name="commandID">要搜索和执行的命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns>如果成功地找到并调用命令，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>从菜单移除指定的标准菜单命令。</summary>
      <param name="command">要移除的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>从全局设计器谓词的集合中移除指定的设计器谓词。</summary>
      <param name="verb">要移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>在指定位置显示指定的快捷菜单。</summary>
      <param name="menuID">要显示的快捷菜单的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <param name="x">屏幕上的 x 坐标，菜单此处显示。</param>
      <param name="y">屏幕上的 y 坐标，菜单此处显示。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>获取当前可用的设计器谓词的集合。</summary>
      <returns>包含当前可用的设计器谓词的 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>提供的接口用于：按名称或类型获取对项目内对象的引用、获取指定对象的名称、在设计器项目内定位指定对象的父对象。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>获取包含指定组件的组件。</summary>
      <param name="reference">为其检索父组件的对象。</param>
      <returns>包含指定对象的基 <see cref="T:System.ComponentModel.IComponent" />，如果不存在父组件，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>获取指定组件的名称。</summary>
      <param name="reference">要返回其名称的对象。</param>
      <returns>所引用对象的名称，或者在对象引用无效的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>获取对其名称与指定名称匹配的组件的引用。</summary>
      <param name="name">要返回其引用的组件的名称。</param>
      <returns>指定名称所引用的对象，或者在未找到引用的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>获取对项目组件的所有可用的引用。</summary>
      <returns>带有可用于 <see cref="T:System.ComponentModel.Design.IReferenceService" /> 的引用的所有对象的数组。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>获取对指定类型组件的所有可用引用。</summary>
      <param name="baseType">要返回对其实例引用的对象类型。</param>
      <returns>指定类型的所有可用对象的数组。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>为设计器提供访问特定 <see cref="T:System.Globalization.CultureInfo" /> 资源类型的资源读取器和编写器的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>查找并返回指定区域性的资源阅读器。</summary>
      <param name="info">要为其检索资源阅读器的资源的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>包含区域性资源的 <see cref="T:System.Resources.IResourceReader" /> 接口，或者在区域性没有相应资源的情况下为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>查找并返回指定区域性的资源编写器。</summary>
      <param name="info">要为其创建资源编写器的资源的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>指定区域性的 <see cref="T:System.Resources.IResourceWriter" /> 接口。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>提供对根级设计器视图技术的支持。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>获取指定视图技术的视图对象。</summary>
      <param name="technology">指示特定视图技术的 <see cref="T:System.ComponentModel.Design.ViewTechnology" />。</param>
      <exception cref="T:System.ArgumentException">指定的视图技术不受支持或不存在。</exception>
      <returns>表示此设计器的视图的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>获取此设计器可为其显示提供支持的技术集。</summary>
      <returns>受支持的 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 值的数组。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>为设计器提供用于选择组件的接口。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>当前所选内容更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>在将要更改当前选择时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>获取一个值，该值指示当前是否选定指定组件。</summary>
      <param name="component">要测试的组件。</param>
      <returns>如果该组件是用户当前选择的一部分，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>获取当前选定的组件的集合。</summary>
      <returns>表示当前选定的组件集的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>选择指定的组件集合。</summary>
      <param name="components">要选择的组件的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>从匹配指定选择类型的指定组件集合中选择组件。</summary>
      <param name="components">要选择的组件的集合。</param>
      <param name="selectionType">
        <see cref="T:System.ComponentModel.Design.SelectionTypes" /> 枚举中的一个值。 默认值为 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>获取当前为主选定对象的对象。</summary>
      <returns>当前为主选定对象的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>获取选定对象的计数。</summary>
      <returns>选定对象的数目。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>提供服务的容器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>将指定的服务添加到服务容器中。</summary>
      <param name="serviceType">要添加的服务的类型。</param>
      <param name="callback">用于创建服务的回调对象。 这可以将服务声明为可用，但在请求服务之前延迟创建对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>将指定的服务添加到服务容器，并将此服务提升到父级服务容器（可选）。</summary>
      <param name="serviceType">要添加的服务的类型。</param>
      <param name="callback">用于创建服务的回调对象。 这可以将服务声明为可用，但在请求服务之前延迟创建对象。</param>
      <param name="promote">如果为 <see langword="true" />，则将此请求提升到任何父级服务容器；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>将指定的服务添加到服务容器中。</summary>
      <param name="serviceType">要添加的服务的类型。</param>
      <param name="serviceInstance">要添加的服务类型的实例。 此对象必须实现 <paramref name="serviceType" /> 参数所指示的类型或从其继承。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>将指定的服务添加到服务容器，并将此服务提升到任何父级服务容器（可选）。</summary>
      <param name="serviceType">要添加的服务的类型。</param>
      <param name="serviceInstance">要添加的服务类型的实例。 此对象必须实现 <paramref name="serviceType" /> 参数所指示的类型或从其继承。</param>
      <param name="promote">如果为 <see langword="true" />，则将此请求提升到任何父级服务容器；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>从服务容器中删除指定的服务类型。</summary>
      <param name="serviceType">要删除的服务类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>从服务容器中删除指定的服务类型，并将此服务提升到父级服务容器（可选）。</summary>
      <param name="serviceType">要删除的服务类型。</param>
      <param name="promote">如果为 <see langword="true" />，则将此请求提升到任何父级服务容器；否则为 <see langword="false" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary>为建立一组相关的自定义设计器提供支持。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary>获取子设计器的集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，其中包含当前设计器的 <see cref="T:System.ComponentModel.Design.IDesigner" /> 子对象的集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary>获取父设计器。</summary>
      <returns>表示父设计器的 <see cref="T:System.ComponentModel.Design.IDesigner" />，如果没有父设计器，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>提供在设计模式下修改组件的成员描述符集的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的特性。</summary>
      <param name="component">要筛选其属性的组件。</param>
      <param name="attributes">可修改的属性字典。</param>
      <returns>如果将缓存经过筛选的特性集，则为 <see langword="true" />；如果筛选服务必须再次查询，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件。</summary>
      <param name="component">要为其筛选事件的组件。</param>
      <param name="events">可修改的事件字典。</param>
      <returns>如果将缓存经过筛选的事件集，则为 <see langword="true" />；如果筛选服务必须再次查询，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性。</summary>
      <param name="component">要为其筛选属性的组件。</param>
      <param name="properties">可修改的属性字典。</param>
      <returns>如果将缓存经过筛选的属性集，则为 <see langword="true" />；如果筛选服务必须再次查询，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary>发现设计时可用的类型。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary>检索可用类型的列表。</summary>
      <param name="baseType">要匹配的基类型。 可以为 <see langword="null" />。</param>
      <param name="excludeGlobalTypes">指示是否应检查来自所有引用程序集的类型。</param>
      <returns>与 <paramref name="baseType" /> 和 <paramref name="excludeGlobalTypes" /> 指定的条件相匹配的类型的集合。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>提供按名称检索程序集或类型的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>获取请求的程序集。</summary>
      <param name="name">要检索的程序集的名称。</param>
      <returns>所请求的程序集的实例，或者如果找不到任何程序集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>获取请求的程序集。</summary>
      <param name="name">要检索的程序集的名称。</param>
      <param name="throwOnError">如果在无法找到程序集时此方法应引发异常，则为 <see langword="true" />；否则为 <see langword="false" />，而且当无法找到程序集时，此方法将返回 <see langword="null" />。</param>
      <returns>所请求的程序集的实例，或者如果找不到任何程序集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>获取从中加载程序集的文件的路径。</summary>
      <param name="name">程序集的名称。</param>
      <returns>从中加载程序集的文件的路径。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>用指定的名称加载类型。</summary>
      <param name="name">类型的名称。 如果类型名不是指示程序集的完全限定名，则此服务将搜索其引用的程序集的内部集合。</param>
      <returns>与指定名称对应的 <see cref="T:System.Type" /> 的实例，或者如果找不到任何类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>用指定的名称加载类型。</summary>
      <param name="name">类型的名称。 如果类型名不是指示程序集的完全限定名，则此服务将搜索其引用的程序集的内部集合。</param>
      <param name="throwOnError">如果在无法找到程序集时此方法应引发异常，则为 <see langword="true" />；否则为 <see langword="false" />，而且当无法找到程序集时，此方法将返回 <see langword="null" />。</param>
      <returns>与指定名称对应的 <see cref="T:System.Type" /> 的实例，或者如果找不到任何类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>用指定的名称加载类型。</summary>
      <param name="name">类型的名称。 如果类型名不是指示程序集的完全限定名，则此服务将搜索其引用的程序集的内部集合。</param>
      <param name="throwOnError">如果在无法找到程序集时此方法应引发异常，则为 <see langword="true" />；否则为 <see langword="false" />，而且当无法找到程序集时，此方法将返回 <see langword="null" />。</param>
      <param name="ignoreCase">如果为 <see langword="true" />，则在搜索类型时忽略大小写；否则为 <see langword="false" />。</param>
      <returns>与指定名称对应的 <see cref="T:System.Type" /> 的实例，或者如果找不到任何类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>将引用添加到指定程序集中。</summary>
      <param name="name">此 <see cref="T:System.Reflection.AssemblyName" /> 指示要引用的程序集。</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>表示 Windows 菜单项或工具栏命令项。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>在菜单命令出现更改时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 类的新实例。</summary>
      <param name="handler">在用户选择菜单项或工具栏按钮时引发的事件。</param>
      <param name="command">将此菜单命令链接到环境菜单的唯一命令 ID。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>调用该命令。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary>使用给定参数调用命令。</summary>
      <param name="arg">供该命令使用的可选参数。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>返回此菜单命令的字符串表示形式。</summary>
      <returns>一个字符串，它包含 <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> 属性的值并附加所设置的任何标志的名称，两者用竖线 (|) 分隔。 这些标志属性包括 <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> 和 <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>获取或设置一个值，用以指示是否选中此菜单项。</summary>
      <returns>如果选中该项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>获取与此菜单命令相关联的 <see cref="T:System.ComponentModel.Design.CommandID" />。</summary>
      <returns>与此菜单命令相关联的 <see cref="T:System.ComponentModel.Design.CommandID" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>获取一个值，该值指示此菜单项是否可用。</summary>
      <returns>如果已启用此项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>获取此菜单项的 OLE 命令状态代码。</summary>
      <returns>一个整数，由反映此菜单项状态的状态标志组合而成。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary>获取与 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 关联的公共属性。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 包含 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 的公共属性。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>获取或设置一个值，用以指示是否支持此菜单项。</summary>
      <returns>如果支持此项（默认情况），则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>获取或设置一个值，用以指示此菜单项是否可见。</summary>
      <returns>如果此项可见，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>定义用于指示选择类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary>表示添加所选内容，它向当前所选内容中添加选择的组件，以保持当前选定组件的集合。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary>表示常规选择。 此选择服务对 Ctrl 和 Shift 键作出响应，以支持在所选内容中添加或移除组件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>表示当用户单击组件时发生的选择。 如果新选择的组件已被选定，则将该组件提升为主选定组件，而不是取消选择。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>表示当鼠标指针位于组件上时，用户按下鼠标按钮所发生的选择。 如果已选定指针下的组件，则将该组件提升为主选定组件，而不是取消选择。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>表示选定组件后用户立即释放鼠标按钮时发生的选择。 如果新选择的组件已被选定，则将该组件提升为主选定组件，而不是取消选择。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>表示常规选择。 此选择服务对 Ctrl 和 Shift 键作出响应，以支持在所选内容中添加或移除组件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary>表示当用户单击组件时发生的主选择。 如果所选内容列表中的组件已被选定，则将该组件提升为主所选内容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary>表示移除所选内容，它从当前所选内容中移除选择的组件，以保持当前选定组件的集合。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>表示当选择的内容被替换时发生的选择。 此选择服务用替换内容替换当前选定的内容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary>表示切换所选内容，它在当前所选内容与所提供的所选内容之间切换。 如果组件已被选定并且以选择类型 <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> 传入 <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />，则该组件选择将被取消。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>将有效选择类型标识为 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> 或 <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary>提供用于将一组组件或可序列化的对象序列化到序列化存储区的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary>创建一个新的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <returns>一个新创建的序列化存储区。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>将给定存储区反序列化以产生一个对象集合。</summary>
      <param name="store">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
      <returns>根据存储状态创建的对象集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>将给定存储区反序列化，并使用反序列化的 <see cref="T:System.ComponentModel.IContainer" /> 对象填充给定的 <see cref="T:System.ComponentModel.IComponent" />。</summary>
      <param name="store">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IContainer" /> 对象将要添加到的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
      <returns>根据存储状态创建的对象集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>将给定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 反序列化为给定的容器。</summary>
      <param name="store">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> 对象将要添加到的容器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary>将给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 反序列化为给定容器，还可以验证回收类型。</summary>
      <param name="store">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> 对象将要添加到的容器。</param>
      <param name="validateRecycledTypes">为 <see langword="true" /> 时，保证只有在应用于同类型对象时，反序列化才起作用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>将给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 反序列化为给定容器，还可以应用默认属性值。</summary>
      <param name="store">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> 对象将要添加到的容器。</param>
      <param name="validateRecycledTypes">为 <see langword="true" /> 时，保证只有在应用于同类型对象时，反序列化才起作用。</param>
      <param name="applyDefaults">为 <see langword="true" /> 时，表示应当应用默认属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>从流中加载 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <param name="stream">将要从中加载存储区的 <see cref="T:System.IO.Stream" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> 不包含由前面某个对 <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" /> 的调用保存的数据。</exception>
      <returns>新 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 实例。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>将给定的对象序列化为给定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <param name="store">
        <paramref name="value" /> 的状态将写入的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="value">要序列化的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或 <paramref name="store" /> 不是序列化存储区支持的类型。 使用由 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>根据默认属性值序列化给定对象。</summary>
      <param name="store">
        <paramref name="value" /> 的状态将序列化到的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="value">要序列化的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或 <paramref name="store" /> 不是序列化存储区支持的类型。 使用由 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>在给定对象上序列化给定成员。</summary>
      <param name="store">
        <paramref name="member" /> 的状态将序列化到的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="owningObject">在其上附加 <paramref name="member" /> 的对象。</param>
      <param name="member">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> 指定要序列化的成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或 <paramref name="store" /> 不是序列化存储区支持的类型。 使用由 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>根据默认属性值，序列化给定对象上的给定成员。</summary>
      <param name="store">
        <paramref name="member" /> 的状态将序列化到的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="owningObject">在其上附加 <paramref name="member" /> 的对象。</param>
      <param name="member">要序列化的成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或 <paramref name="store" /> 不是序列化存储区支持的类型。 使用由 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>提供堆栈对象，序列化程序可使用该对象向嵌套的序列化程序提供信息。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary>将对象追加到堆栈的结尾，而不是将其推到堆栈的顶部。</summary>
      <param name="context">要追加到堆栈中的上下文对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>从堆栈中移除当前对象并返回其值。</summary>
      <returns>已从堆栈中移除的对象；如果堆栈中没有对象，则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>将指定对象推入（即放置）到堆栈上。</summary>
      <param name="context">推入到堆栈上的上下文对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>获取堆栈上的当前对象。</summary>
      <returns>堆栈上的当前对象，或者如果未推入任何对象则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>获取堆栈上指定级别的对象。</summary>
      <param name="level">要在堆栈上检索的对象的级别。 级别 0 是堆栈的顶级，级别 1 是接下来的一级，依次类推。 此级别必须大于或等于 0。 如果级别大于该堆栈上的级别数，它返回 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="level" /> 小于 0。</exception>
      <returns>堆栈上指定级别的对象，或者在该级别不存在任何对象则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>获取堆栈上从指定类型继承或者实现指定类型的第一个对象。</summary>
      <param name="type">要从上下文堆栈检索的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <returns>堆栈上从指定类型继承或者实现指定类型的第一个对象，或者如果在堆栈上没有任何对象实现此类型则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 特性被放置在序列化程序上，以指示要用作该类型序列化程序的默认提供程序的类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary>用命名的提供程序类型初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 类的新实例。</summary>
      <param name="providerTypeName">序列化提供程序类型的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerTypeName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary>使用给定的提供程序类型初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 类的新实例。</summary>
      <param name="providerType">序列化提供程序的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary>获取序列化提供程序的类型名。</summary>
      <returns>包含提供程序名称的字符串。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>提供可用于实现自定义设计器加载程序的基本设计器加载程序接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>开始加载一个设计器。</summary>
      <param name="host">此加载程序用来加载组件的加载程序宿主。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>将缓存的更改写入设计器的加载位置。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>获取一个值，该值指示加载程序当前是否正在加载文档。</summary>
      <returns>如果加载程序当前正加载一个文档，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>提供一个接口，该接口可扩展设计器宿主以支持从序列化状态加载。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>结束设计器加载操作。</summary>
      <param name="baseClassName">此设计器正在设计的文档的基类的完全限定名。</param>
      <param name="successful">如果设计器已成功加载，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="errorCollection">包含加载期间遇到的错误（如果有的话）的集合。 如果没有遇到任何错误，则传递空集合或 <see langword="null" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>重新加载设计文档。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary>提供扩展 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> 的接口，以指定在加载设计文档时是否允许发生错误。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary>获取或设置一个值，以指示发生错误时是否可以重新加载。</summary>
      <returns>如果设计器加载程序在检测到错误时可以重新加载设计文档，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary>获取或设置一个值，以指示在调用 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> 时是否应忽略错误。</summary>
      <returns>如果设计器加载程序在重新加载时将忽略错误，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>提供一个接口，该接口可以扩展设计器加载程序以支持外部组件的异步加载。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>将外部组件注册为由此接口管理的加载进程的一部分。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>发出信号表示已完成依赖加载。</summary>
      <param name="successful">如果设计器的加载成功，则为 <see langword="true" />；如果出现的错误阻止了加载完成，则为 <see langword="false" />。</param>
      <param name="errorCollection">加载期间发生的错误（如果有的话）的集合。 如果没有发生任何错误，则传递空集合或 <see langword="null" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>重新加载设计文档。</summary>
      <returns>如果接受重新加载请求，则为 <see langword="true" />；如果加载程序不允许重新加载，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>提供可以管理设计时序列化的接口。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>当 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> 无法在序列化管理器的名称表中找到指定名称时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>在序列化完成时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>向序列化管理器添加指定的序列化提供程序。</summary>
      <param name="provider">要添加的序列化提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>创建指定类型的实例并将其添加到已命名实例的集合中。</summary>
      <param name="type">要创建的数据类型。</param>
      <param name="arguments">要传递到此类型的构造函数的参数。</param>
      <param name="name">对象的名称。 此名称可用于以后通过 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" /> 访问该对象。 如果传递了 <see langword="null" />，则仍将创建该对象，但无法按名称访问它。</param>
      <param name="addToContainer">如果为 <see langword="true" />，则该对象将被添加到设计容器中。 该对象必须实现 <see cref="T:System.ComponentModel.IComponent" /> 才能使此功能生效。</param>
      <returns>新创建的对象实例。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>获取指定名称的已创建对象的实例，如果该对象不存在则为 <see langword="null" />。</summary>
      <param name="name">要检索的对象的名称。</param>
      <returns>具有给定名称的对象的实例，如果按该名称无法找到任何对象则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>获取指定对象的名称，如果该对象不具有名称则为 <see langword="null" />。</summary>
      <param name="value">要检索其名称的对象。</param>
      <returns>对象的名称，如果对象是未命名的，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>为指定对象类型获取所请求类型的序列化程序。</summary>
      <param name="objectType">要为其获取序列化程序的对象类型。</param>
      <param name="serializerType">要检索的序列化程序的类型。</param>
      <returns>请求的序列化程序的实例，如果不能找到任何适当的序列化程序，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>获取指定名称的类型。</summary>
      <param name="typeName">要加载的类型的完全限定名。</param>
      <returns>该类型的实例，如果无法加载该类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>从序列化管理器移除自定义的序列化提供程序。</summary>
      <param name="provider">要移除的提供程序。 该对象必须已使用 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" /> 添加过。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>报告序列化中的错误。</summary>
      <param name="errorInformation">要报告的错误。 该信息对象可以是任何对象类型。 如果它是一个异常，则将提取该异常的消息并报告给用户。 如果它是任何其他类型，则将调用 <see cref="M:System.Object.ToString" /> 以向用户显示该信息。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>设置指定的现有对象的名称。</summary>
      <param name="instance">要命名的对象实例。</param>
      <param name="name">提供给实例的名称。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>获取基于堆栈的、用户定义的存储区域，该区域对于序列化程序之间的通信十分有用。</summary>
      <returns>存储数据的 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>指示可利用可用序列化程序进行序列化的自定义属性。</summary>
      <returns>包含要进行序列化的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>提供一个支持访问序列化程序的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>获取使用指定特性的序列化程序。</summary>
      <param name="manager">请求序列化程序的序列化管理器。</param>
      <param name="currentSerializer">指定类型的当前序列化程序的实例。 如果不存在指定类型的序列化程序，则这可能为 <see langword="null" />。</param>
      <param name="objectType">要序列化的对象的数据类型。</param>
      <param name="serializerType">要创建的序列化程序的数据类型。</param>
      <returns>所请求类型的序列化程序的实例，如果不能满足该请求则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>提供一个可调用序列化和反序列化的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>反序列化指定的序列化数据对象并返回由这些数据表示的对象的集合。</summary>
      <param name="serializationData">包含序列化的数据的对象。</param>
      <returns>从指定的序列化数据对象重新生成的对象的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>序列化指定的对象集合并将其存储在序列化数据对象中。</summary>
      <param name="objects">要序列化的对象的集合。</param>
      <returns>包含指定的对象集合的序列化状态的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>提供可以生成对象的唯一名称的服务。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>创建一个新名称，该名称对于指定容器中的所有组件来说是唯一的。</summary>
      <param name="container">将新对象添加到的容器。</param>
      <param name="dataType">接收该名称的对象的数据类型。</param>
      <returns>数据类型的唯一名称。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>获取一个值，该值指示指定名称是否有效。</summary>
      <param name="name">要验证的名称。</param>
      <returns>如果该名称有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>获取一个值，该值指示指定名称是否有效。</summary>
      <param name="name">要验证的名称。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>提供创建对象的实例所需的信息。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>使用指定的成员信息和参数初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 类的新实例。</summary>
      <param name="member">说明符的成员信息。 它可以是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />。 如果这是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，则它必须表示 <see langword="static" /> 成员。</param>
      <param name="arguments">要向该成员传递的参数的集合。 如果没有自变量，则此参数可以为 <see langword="null" /> 或空集合。 该集合也可以由 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的其他实例组成。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 的类型为 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，并不表示一个 <see langword="static" /> 成员。  

- 或 - 
<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.PropertyInfo" /> 而且不可读。  

- 或 - 
<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" />，而且 <paramref name="arguments" /> 中的参数数目与 <paramref name="member" /> 的签名不匹配。

- 或 -

<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.ConstructorInfo" /> 并表示一个 <see langword="static" /> 成员。  

- 或 - 
<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.FieldInfo" />，而且 <paramref name="arguments" /> 中的参数数目不为零。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>使用指定的成员信息、参数以及指示指定的信息是否完全描述该实例的值，初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 类的新实例。</summary>
      <param name="member">说明符的成员信息。 它可以是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />。 如果这是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，则它必须表示 <see langword="static" /> 成员。</param>
      <param name="arguments">要向该成员传递的参数的集合。 如果没有自变量，则此参数可以为 <see langword="null" /> 或空集合。 该集合也可以由 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的其他实例组成。</param>
      <param name="isComplete">如果指定的信息完全描述该实例，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 的类型为 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，并不表示一个 <see langword="static" /> 成员 
 <paramref name="member" /> 的类型为 <see cref="T:System.Reflection.PropertyInfo" /> 而且不可读。  
  
 <paramref name="member" /> 的类型为 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" />，而且 <paramref name="arguments" /> 中的参数数目与 <paramref name="member" /> 的签名不匹配。  
  
 <paramref name="member" /> 的类型为 <see cref="T:System.Reflection.ConstructorInfo" /> 并表示一个 <see langword="static" /> 成员。 
 <paramref name="member" /> 的类型为 <see cref="T:System.Reflection.FieldInfo" />，而且 <paramref name="arguments" /> 中的参数数目不为零。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>调用此实例说明符并返回该说明符所描述的对象。</summary>
      <returns>该实例说明符所描述的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>获取参数的集合，这些参数可用于重新构造此实例说明符所表示的对象的实例。</summary>
      <returns>可用于创建该对象的参数的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>获取一个值，该值指示此 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的内容是否完全标识该实例。</summary>
      <returns>如果该实例被完全描述，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>获取描述与此说明符关联的实例的成员信息。</summary>
      <returns>一个 <see cref="T:System.Reflection.MemberInfo" />，描述与此对象关联的实例。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary>表示某个对象和某个成员之间的单一关系。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary>表示空成员关系。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 类的新实例。</summary>
      <param name="owner">拥有 <paramref name="member" /> 的对象。</param>
      <param name="member">要与 <paramref name="owner" /> 相关的成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 或 <paramref name="member" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 实例是否相等。</summary>
      <param name="obj">要与当前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 进行比较的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />。</param>
      <returns>如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />，则为 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>测试两个指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否等效。</summary>
      <param name="left">相等运算符左侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <param name="right">相等运算符右侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <returns>如果这两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构等同，则此运算符返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>测试两个指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否不同。</summary>
      <param name="left">不等运算符左侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <param name="right">不等运算符右侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <returns>如果这两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构不同，则此运算符返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary>获取一个值，指示该关系是否等同于 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 关系。</summary>
      <returns>如果该关系等同于 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 关系，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary>获取相关成员。</summary>
      <returns>传递至 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> 的成员。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary>获取所属对象。</summary>
      <returns>传递至 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> 的所属对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary>提供用于将一个成员与另一个成员相关的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>获取到给定源关系的关系。</summary>
      <param name="source">源关系。</param>
      <returns>到 <paramref name="source" /> 的关系，如果不存在关系，则为 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>在源对象和目标关系之间创建关系。</summary>
      <param name="source">源关系。</param>
      <param name="relationship">要设置到源中的关系。</param>
      <exception cref="T:System.ArgumentException">服务不支持该关系。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>获取一个值，指示是否支持给定关系。</summary>
      <param name="source">源关系。</param>
      <param name="relationship">要设置到源中的关系。</param>
      <returns>如果支持给定的两个对象之间的关系，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>建立源对象与目标对象之间的关系。</summary>
      <param name="source">源关系。 这是关系分配的左侧。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 为空，或者该服务不支持这种关系。</exception>
      <returns>与 <paramref name="source" /> 关联的当前关系，如果不存在关系，则为 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>建立源对象与目标对象之间的关系。</summary>
      <param name="sourceOwner">源关系的所有者。</param>
      <param name="sourceMember">源关系的成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 为空，或者该服务不支持这种关系。</exception>
      <returns>封装源对象和目标对象之间关系的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构，如果不存在关系，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> 类的新实例。</summary>
      <param name="name">要解析的名称。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>获取要解析的对象的名称。</summary>
      <returns>要解析的对象的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>获取或设置与该名称匹配的对象。</summary>
      <returns>与该名称相关联的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>表示处理序列化管理器的 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>指示用于根设计器对象的基序列化程序。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>使用指定特性初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerTypeName">序列化程序的数据类型的完全限定名。</param>
      <param name="baseSerializerTypeName">序列化程序的基类型的名称。 一个类可以包含多个序列化程序，因为所有序列化程序都具有不同的基类型。</param>
      <param name="reloadable">如果此序列化程序支持动态重新加载文档，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>使用指定特性初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerTypeName">序列化程序的数据类型的完全限定名。</param>
      <param name="baseSerializerType">序列化程序的基类型的名称。 一个类可以包含多个序列化程序，因为所有序列化程序都具有不同的基类型。</param>
      <param name="reloadable">如果此序列化程序支持动态重新加载文档，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>使用指定特性初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerType">序列化程序的数据类型。</param>
      <param name="baseSerializerType">序列化程序的基类型。 一个类可以包含多个序列化程序，因为所有序列化程序都具有不同的基类型。</param>
      <param name="reloadable">如果此序列化程序支持动态重新加载文档，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>获取一个值，该值指示根序列化程序是否支持在不首先释放设计器宿主的条件下即可重新加载设计文档。</summary>
      <returns>如果根序列化程序支持重新加载，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>获取序列化程序的基类型的完全限定类型名。</summary>
      <returns>序列化程序的基类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>获取序列化程序的完全限定类型名。</summary>
      <returns>序列化程序的类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary>获取此特性类型的唯一 ID。</summary>
      <returns>一个包含此特性类型的唯一 ID 的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary>提供用于存储 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 序列化数据的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary>关闭序列化存储区。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary>将存储区保存到给定流。</summary>
      <param name="stream">作为存储区序列化目标的流。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 使用的所有资源。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary>获取序列化或反序列化过程中发生的错误集合。</summary>
      <returns>包含序列化或反序列化过程中发生的错误的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>提供 <see cref="T:System.ComponentModel.Design.IServiceContainer" /> 接口的简单实现。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>使用指定的父服务提供程序初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 类的新实例。</summary>
      <param name="parentProvider">父服务提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>将指定的服务添加到服务容器中。</summary>
      <param name="serviceType">要添加的服务的类型。</param>
      <param name="callback">可创建该服务的回调对象。 它允许将服务声明为可用，但是会将对象的创建延迟到请求该服务之后。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">容器中已存在类型为 <paramref name="serviceType" /> 的服务。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>将指定的服务添加到服务容器中。</summary>
      <param name="serviceType">要添加的服务的类型。</param>
      <param name="callback">可创建该服务的回调对象。 它允许将服务声明为可用，但是会将对象的创建延迟到请求该服务之后。</param>
      <param name="promote">如果应将此服务添加到任何父服务容器，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">容器中已存在类型为 <paramref name="serviceType" /> 的服务。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>将指定的服务添加到服务容器中。</summary>
      <param name="serviceType">要添加的服务的类型。</param>
      <param name="serviceInstance">要添加的服务的实例。 此对象必须实现 <paramref name="serviceType" /> 参数所指示的类型或从其继承。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">容器中已存在类型为 <paramref name="serviceType" /> 的服务。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>将指定的服务添加到服务容器中。</summary>
      <param name="serviceType">要添加的服务的类型。</param>
      <param name="serviceInstance">要添加的服务类型的实例。 此对象必须实现 <paramref name="serviceType" /> 参数所指示的类型或从其继承。</param>
      <param name="promote">如果应将此服务添加到任何父服务容器，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">容器中已存在类型为 <paramref name="serviceType" /> 的服务。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary>释放此服务容器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary>释放此服务容器。</summary>
      <param name="disposing">如果 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 正在被释放的过程中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>获取请求的服务。</summary>
      <param name="serviceType">要检索的服务类型。</param>
      <returns>如果可以找到服务，则为该服务的实例；如果未能找到服务，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>从服务容器中删除指定的服务类型。</summary>
      <param name="serviceType">要删除的服务类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>从服务容器中删除指定的服务类型。</summary>
      <param name="serviceType">要删除的服务类型。</param>
      <param name="promote">如果应该从任何父服务容器中移除此服务，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary>获取由 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 直接实现的默认服务。</summary>
      <returns>默认服务。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>提供一种回调机制，它可以即需创建服务的实例。</summary>
      <param name="container">请求创建服务的服务容器。</param>
      <param name="serviceType">要创建的服务的类型。</param>
      <returns>由 <paramref name="serviceType" /> 指定的服务；如果未能创建服务，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>定义可用于大多数应用程序的标准命令集的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>获取“AlignBottom”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>获取“AlignHorizontalCenters”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>获取“AlignLeft”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>获取“AlignRight”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>获取“AlignToGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>获取“AlignTop”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>获取“AlignVerticalCenters”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>获取“ArrangeBottom”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>获取“ArrangeIcons”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>获取“ArrangeRight”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>获取“BringForward”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>获取“BringToFront”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>获取“CenterHorizontally”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>获取“CenterVertically”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>获取“Copy”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>获取“Cut”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>获取“Delete”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary>获取“Document Outline”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>获取“F1Help”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>获取“Group”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>获取“HorizSpaceConcatenate”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>获取“HorizSpaceDecrease”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>获取“HorizSpaceIncrease”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>获取“HorizSpaceMakeEqual”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>获取“LineupIcons”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>获取“LockControls”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>获取“MultiLevelRedo”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>获取“MultiLevelUndo”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>获取“Paste”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>获取“Properties”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>获取“PropertiesWindow”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>获取“Redo”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>获取“Replace”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>获取“SelectAll”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>获取“SendBackward”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>获取“SendToBack”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>获取“ShowGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>获取“ShowLargeIcons”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>获取“SizeToControl”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>获取“SizeToControlHeight”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>获取“SizeToControlWidth”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>获取“SizeToFit”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>获取“SizeToGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>获取“SnapToGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>获取“TabOrder”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>获取“Undo”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>获取“Ungroup”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>获取一组谓词中的第一个。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>获取一组谓词中的最后一个。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>获取“VertSpaceConcatenate”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>获取“VertSpaceDecrease”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>获取“VertSpaceIncrease”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>获取“VertSpaceMakeEqual”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary>获取“ViewCode”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>获取“ViewGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.StandardCommands" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>定义 GUID 标识符，它们对应于在设计环境中提供的标准工具窗口集。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>获取对象浏览器的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>获取输出窗口的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>获取解决方案资源管理器的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>获取“属性”窗口的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>获取相关链接框架的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>获取服务器资源管理器的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>获取任务列表的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>获取工具箱的 GUID。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary>为指定类型提供类型说明提供程序。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary>获取指定对象的类型说明提供程序。</summary>
      <param name="instance">要获取其类型说明提供程序的对象。</param>
      <returns>与 <paramref name="instance" /> 相对应的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary>获取指定类型的类型说明提供程序。</summary>
      <param name="type">要获取其类型说明提供程序的类型。</param>
      <returns>与 <paramref name="type" /> 相对应的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>定义设计器宿主所支持的技术集的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary>指定默认的视图技术支持。
        
根设计器可以返回任何类型的对象，但该对象必须与用于宿主技术的适配器兼容。 诸如 Visual Studio 之类的托管环境提供了一种插入新视图技术适配器的方法。 Windows 窗体设计器的默认视图对象是 <see cref="T:System.Windows.Forms.Control" /> 实例。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>表示将视图对象直接传递给开发环境的模式。
        
视图对象必须实现开发环境所需的任何接口。 Visual Studio 开发环境支持以下视图对象：ActiveX 控件、活动文档，或实现 IVsWindowPane 接口的对象，该接口通过 Visual Studio VSI（Visual Studio 集成）程序提供。 Visual Studio 开发环境为此视图技术提供支持。 并非所有开发环境都支持此视图技术。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>表示由 Windows 窗体控件对象为根设计器提供显示的模式。 设计器宿主使用 Windows 窗体控件填充开发环境文档窗口。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary>
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 标记组件的可见性。 如果存在 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" />，可视化设计器即可在设计器上显示该组件。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary>默认可见性是 <see langword="Yes" />。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary>将组件标记为在可视化设计器中不可见。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary>将组件标记为在可视化设计器中可见。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary>新建一个默认值设置为 <see langword="false" /> 的 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary>创建新的 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />，并将 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 属性设为 <paramref name="visible" /> 中的给定值。</summary>
      <param name="visible">与 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 属性的设置值相反的值。</param>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此实例或 null 引用（ Visual Basic 中的 <see langword="Nothing" />）进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示此实例是否与 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值相等。</summary>
      <returns>如果此实例等于 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary>获取或设置该组件是否应在设计时显示。</summary>
      <returns>如果该组件应在设计时显示，则为 <see langword="true" />，如果不应在设计时显示，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>提供将双精度浮点数字对象与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DoubleConverter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>提供将 <see cref="T:System.Enum" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>为给定类型初始化 <see cref="T:System.ComponentModel.EnumConverter" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 表示与此枚举转换器关联的枚举类型。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为枚举对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定的值对象转换为枚举对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是枚举的有效值。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取此验证器设计用于的数据类型的标准值集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的列表是不是使用指定上下文的独占列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果从 <see langword="true" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可使用指定上下文从列表中选取的标准值集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>返回 <see langword="true" />，因为应当调用 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 来查找对象支持的一组公共值。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>获取一个用于指示给定对象值是否对此类型有效的值。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">要测试的 <see cref="T:System.Object" />。</param>
      <returns>如果指定的值对此对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>获取可用于对枚举的值进行排序的 <see cref="T:System.Collections.IComparer" />。</summary>
      <returns>一个用于对枚举值进行排序的 <see cref="T:System.Collections.IComparer" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>指定与此转换器关联的枚举数的类型。</summary>
      <returns>与此转换器关联的枚举数的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary>获取或设置一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，用来为枚举指定可能的值。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，用来为枚举指定可能的值。</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>提供有关事件的信息。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>使用指定 <see cref="T:System.ComponentModel.EventDescriptor" /> 中的名称和特性初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它包含该事件的名称及其特性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>使用指定 <see cref="T:System.ComponentModel.EventDescriptor" /> 中的名称以及同时出现在 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.ComponentModel.MemberDescriptor" /> 数组中的特性初始化 <see cref="T:System.Attribute" /> 类的新实例。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它具有该成员的名称及其特性。</param>
      <param name="attrs">一个 <see cref="T:System.Attribute" /> 数组，具有要添加到此事件说明的特性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>用指定的名称和特性数组初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 类的新实例。</summary>
      <param name="name">事件的名称。</param>
      <param name="attrs">包含事件特性的类型 <see cref="T:System.Attribute" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>当在派生类中被重写时，将事件绑定到组件。</summary>
      <param name="component">向委托提供事件的组件。</param>
      <param name="value">表示处理事件的方法的委托。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>当在派生类中被重写时，解除委托与组件的绑定，使委托将不再从组件接收事件。</summary>
      <param name="component">委托要绑定到的组件。</param>
      <param name="value">要解除组件绑定的委托。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>当在派生类中被重写时，获取该事件绑定到的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示该事件绑定到的组件的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>当在派生类中被重写时，获取该事件的委托的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示该事件的委托的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>当在派生类中被重写时，获取指示该事件委托是否是多路广播委托的值。</summary>
      <returns>如果事件委托是多路广播的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>表示 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象集合。</summary>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>指定要使用的空集合，而不是创建不具有任何项的新集合。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>用给定的 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 对象的数组初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 类的新实例。</summary>
      <param name="events">为该集合提供事件的类型 <see cref="T:System.ComponentModel.EventDescriptor" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary>用给定的 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 对象的数组初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 类的新实例。 该集合可以是只读的。</summary>
      <param name="events">为该集合提供事件的类型 <see cref="T:System.ComponentModel.EventDescriptor" /> 的数组。</param>
      <param name="readOnly">如果指定一个只读集合，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>将 <see cref="T:System.ComponentModel.EventDescriptor" /> 添加到集合的末尾。</summary>
      <param name="value">要添加到集合的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 在集合中的位置。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>从集合中删除所有对象。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>返回集合是否包含给定的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="value">要在集合内查找的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns>如果该集合包含 <paramref name="value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>获取集合中具有指定名称的事件的说明。</summary>
      <param name="name">要从集合中获取的事件的名称。</param>
      <param name="ignoreCase">如果要忽略事件的大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>具有指定名称的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果该事件不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>获取此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的枚举器。</summary>
      <returns>实现 <see cref="T:System.Collections.IEnumerator" /> 的枚举数。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>返回给定 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</summary>
      <param name="value">要在集合内查找的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns>集合中给定 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>将 <see cref="T:System.ComponentModel.EventDescriptor" /> 插入集合中指定的索引位置。</summary>
      <param name="index">集合中插入 <paramref name="value" /> 参数的索引位置。</param>
      <param name="value">要插入到集合的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 将此 <see cref="T:System.Collections.IComparer" /> 的成员排序。</summary>
      <param name="sorter">用来将此集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象排序的比较器。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>将此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成员排序。 首先应用指定的顺序，然后应用此集合的默认排序，后者通常为字母顺序。</summary>
      <param name="names">字符串的数组，描述此集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象的排序顺序。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>从集合中移除指定的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>从集合中的指定索引处删除 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="index">要移除的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>使用集合的默认排序（通常为字母顺序）对此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成员进行排序。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 将此 <see cref="T:System.Collections.IComparer" /> 的成员排序。</summary>
      <param name="comparer">一个 <see cref="T:System.Collections.IComparer" />，用来对此集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象排序。</param>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>按照指定的排序顺序对此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成员进行排序。</summary>
      <param name="names">字符串的数组，描述集合中 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象的排序顺序。</param>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>按照指定的排序顺序和 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 对此 <see cref="T:System.Collections.IComparer" /> 的成员进行排序。</summary>
      <param name="names">字符串的数组，描述集合中 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象的排序顺序。</param>
      <param name="comparer">一个 <see cref="T:System.Collections.IComparer" />，用来对此集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象排序。</param>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从集合复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>向集合中添加一项。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <returns>新元素的插入位置。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定集合中是否包含特定值。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.Object" />。</param>
      <returns>如果在集合中找到 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集合中特定项的索引。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.Object" />。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将某个项插入到集合中的指定索引处。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到集合中的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>删除指定索引处的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>获取集合中事件说明符的数目。</summary>
      <returns>集合中事件说明符的数目。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>获取或设置具有指定索引号的事件。</summary>
      <param name="index">要获取或设置的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的从零开始的索引号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" /> 的有效索引。</exception>
      <returns>具有指定索引号的 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>获取或设置具有指定名称的事件。</summary>
      <param name="name">要获取或设置的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果该事件不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对集合的访问。</summary>
      <returns>如果已同步对集合的访问，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>如果该集合具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0。  
  
- 或 - 
 <paramref name="index" /> 等于或大于 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。</exception>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>提供在可扩展对象与其他各种表示形式之间实现转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ExpandableObjectConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>获取由值参数指定的对象类型的属性集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要获取其属性的对象类型。</param>
      <param name="attributes">一个将用作筛选器的 <see cref="T:System.Attribute" /> 类型的数组。</param>
      <returns>具有为此组件公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否使用指定的上下文支持属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>由于应调用 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 来查找此对象的属性，因此为 <see langword="true" />。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary>指定由扩展程序提供程序提供的属性。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此实例或 null 引用 （Visual Basic 中的 <see langword="Nothing" />）进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary>指示此实例的值是否是派生类的默认值。</summary>
      <returns>如果此实例是该类的默认属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary>获取正被提供的属性。</summary>
      <returns>封装正被提供的属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary>获取正在提供属性的扩展程序提供程序。</summary>
      <returns>正在提供属性的 <see cref="T:System.ComponentModel.IExtenderProvider" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary>获取可接收属性的对象的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，它描述可接收属性的对象的类型。</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>提供将 <see cref="T:System.Guid" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.GuidConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用上下文将给定源类型的对象转换为 GUID 对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定对象转换为 GUID 对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定对象转换为其他类型。</summary>
      <param name="context">格式化程序上下文。</param>
      <param name="culture">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>被转换的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary>为可在事件处理程序中完整处理的事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary>用 <see cref="T:System.ComponentModel.HandledEventArgs" /> 属性的默认值 <see langword="false" /> 初始化 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary>用 <see cref="T:System.ComponentModel.HandledEventArgs" /> 属性的指定默认值初始化 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 类的新实例。</summary>
      <param name="defaultHandledValue">
        <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 属性的默认值。</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary>获取或设置一个值，该值指示事件处理程序是否已完整处理事件，或者系统是否应该继续本身的处理。</summary>
      <returns>如果事件已完整地被处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary>表示可以处理事件的方法，这些事件在事件处理程序返回后可能需要或不需要进行进一步处理。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.HandledEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>提供在绑定到数据源时支持复杂方案和简单方案所需的功能。</summary>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>当列表或列表中的项更改时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到用于搜索的索引。</summary>
      <param name="property">将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到用于搜索的索引。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>将新项添加到列表。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> 为 <see langword="false" />。</exception>
      <returns>添加到列表的项。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>根据 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 对列表进行排序。</summary>
      <param name="property">以其为根据进行排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>返回具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</summary>
      <param name="property">要对其进行搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">要搜索的 <paramref name="property" /> 参数的值。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> 为 <see langword="false" />。</exception>
      <returns>具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引中移除。</summary>
      <param name="property">要从用于搜索的索引中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>使用 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 移除任何已应用的排序。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>获取是否可更新列表中的项。</summary>
      <returns>如果可以更新列表中的项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>获取是否可以使用 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 向列表中添加项。</summary>
      <returns>如果可以使用 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 向列表中添加项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>获取是否可以使用 <see cref="M:System.Collections.IList.Remove(System.Object)" /> 或 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" /> 从列表中移除项。</summary>
      <returns>如果可以从列表中移除项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>获取是否对列表中的项进行排序。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。</exception>
      <returns>如果已调用 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 并且未调用 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>获取排序的方向。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。</exception>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>获取正在用于排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 <see langword="false" />。</exception>
      <returns>正在用于排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>获取当列表更改或列表中的项更改时是否引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
      <returns>如果当列表更改或项更改时引发了 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>获取列表是否支持使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法进行搜索。</summary>
      <returns>如果列表支持使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法进行搜索，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>获取列表是否支持排序。</summary>
      <returns>如果列表支持排序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary>通过提供高级排序和筛选功能来扩展 <see cref="T:System.ComponentModel.IBindingList" /> 接口。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>根据给定的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 对数据源进行排序。</summary>
      <param name="sorts">包含要应用于数据源的顺序的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary>移除应用于数据源的当前筛选器。</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary>获取或设置筛选器，以用于从数据源返回的项的集合中排除项。</summary>
      <returns>用于在数据源返回的项集合中筛选掉项的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary>获取当前应用于数据源的排序说明的集合。</summary>
      <returns>当前应用于数据源的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary>获取一个值，指示数据源是否支持高级排序。</summary>
      <returns>如果数据源支持高级排序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary>获取一个值，该值指示数据源是否支持筛选。</summary>
      <returns>如果数据源支持筛选，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary>在向集合添加新项时添加事务性功能。</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary>丢弃集合中挂起的新项。</summary>
      <param name="itemIndex">先前添加到集合的项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary>向集合提交挂起的新项。</summary>
      <param name="itemIndex">先前添加到集合的项的索引。</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary>提供 COM 对象和 <see cref="T:System.ComponentModel.TypeDescriptor" /> 之间的顶级映射层。</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary>获取指定组件的特性。</summary>
      <param name="component">要获取其特性的组件。</param>
      <returns>
        <paramref name="component" /> 的特性的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary>获取指定组件的类名称。</summary>
      <param name="component">要获取其类名称的组件。</param>
      <returns>与 <paramref name="component" /> 对应的类的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary>获取指定组件的类型转换器。</summary>
      <param name="component">要获取其 <see cref="T:System.ComponentModel.TypeConverter" /> 的组件。</param>
      <returns>
        <paramref name="component" /> 的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary>获取指定组件的默认事件。</summary>
      <param name="component">要获取其默认事件的组件。</param>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptor" />，表示 <paramref name="component" /> 的默认事件。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary>获取指定组件的默认属性。</summary>
      <param name="component">要获取其默认属性的组件。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示 <paramref name="component" /> 的默认属性。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary>获取指定组件的编辑器。</summary>
      <param name="component">要为其获取编辑器的组件。</param>
      <param name="baseEditorType">
        <paramref name="component" /> 的编辑器的基类型。</param>
      <returns>
        <paramref name="component" /> 的编辑器。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary>获取指定组件的事件。</summary>
      <param name="component">要获取其事件的组件。</param>
      <returns>
        <paramref name="component" /> 的事件描述符的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary>获取指定组件的具有指定特性的事件。</summary>
      <param name="component">要获取其事件的组件。</param>
      <param name="attributes">用于筛选事件的特性。</param>
      <returns>
        <paramref name="component" /> 的事件描述符的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary>获取指定组件的名称。</summary>
      <param name="component">要获取其名称的组件。</param>
      <returns>
        <paramref name="component" /> 的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary>获取指定组件的具有指定特性的属性。</summary>
      <param name="component">要获取其事件的组件。</param>
      <param name="attributes">用于筛选属性的特性。</param>
      <returns>
        <paramref name="component" /> 的属性描述符的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>获取具有指定调度标识符的属性的值。</summary>
      <param name="component">属性所属的对象。</param>
      <param name="dispid">调度标识符。</param>
      <param name="success">一个通过引用传递的 <see cref="T:System.Boolean" />，表示是否检索了属性。</param>
      <returns>具有指定调度标识符的属性的值。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>获取具有指定名称的属性的值。</summary>
      <param name="component">属性所属的对象。</param>
      <param name="propertyName">属性的名称。</param>
      <param name="success">一个通过引用传递的 <see cref="T:System.Boolean" />，表示是否检索了属性。</param>
      <returns>具有指定名称的属性的值。</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>提供为对象提供动态自定义类型信息的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>返回此组件实例的自定义属性的集合。</summary>
      <returns>包含此对象的属性的 <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>返回此组件实例的类名称。</summary>
      <returns>对象的类名称，如果该类没有名称，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>返回某个组件的此实例的名称。</summary>
      <returns>对象的名称，如果该对象不具有名称，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>返回此组件实例的类型转换器。</summary>
      <returns>作为此对象转换器的 <see cref="T:System.ComponentModel.TypeConverter" />，或为 <see langword="null" />（如果此对象不存在任何 <see cref="T:System.ComponentModel.TypeConverter" />）。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>返回某个组件的此实例的默认事件。</summary>
      <returns>表示此对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" /> ；如果该对象没有事件，则为 <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>返回此组件实例的默认属性。</summary>
      <returns>表示此对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果该对象没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>返回此组件实例的指定类型的编辑器。</summary>
      <param name="editorBaseType">表示该对象的编辑器的 <see cref="T:System.Type" />。</param>
      <returns>表示该对象编辑器的指定类型的 <see cref="T:System.Object" />；如果无法找到编辑器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>返回此组件实例的事件。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，表示此组件实例的事件。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>使用指定的属性数组作为筛选器，返回此组件实例的事件。</summary>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>返回此组件实例的属性。</summary>
      <returns>表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>使用特性数组作为筛选器，返回此组件实例的属性。</summary>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它表示此组件实例的已筛选属性。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回一个对象，该对象包含指定的属性描述符所描述的属性。</summary>
      <param name="pd">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。</param>
      <returns>一个 <see cref="T:System.Object" />，表示指定属性的所有者。</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>提供功能，该功能提供用户界面可以绑定的自定义错误信息。</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>获取指示对象何处出错的错误信息。</summary>
      <returns>指示对象何处出错的错误信息。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>获取具有给定名称的属性的错误信息。</summary>
      <param name="columnName">要获取其错误信息的属性的名称。</param>
      <returns>该属性的错误信息。 默认值为空字符串("")。</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>定义将属性扩展到容器中的其他组件的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>指定此对象是否可以将其扩展程序属性提供给指定的对象。</summary>
      <param name="extendee">要接收扩展程序属性的 <see cref="T:System.Object" />。</param>
      <returns>如果此对象可以扩展程序属性提供给指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary>提供便于检索生成器的名称并显示该生成器的界面。</summary>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary>显示生成器。</summary>
      <param name="language">正在调用生成器的语言服务。</param>
      <param name="value">正在被编辑的表达式。</param>
      <param name="newValue">新值。</param>
      <returns>如果应将该值替换为 <paramref name="newValue" />，则为 <see langword="true" />；否则为 <see langword="false" />（例如，如果用户取消）。</returns>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary>获取本地化的名称。</summary>
      <returns>本地化的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>向对象提供返回可以绑定到数据源列表的功能。</summary>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>从不实现 <see cref="T:System.Collections.IList" /> 本身的对象返回可以绑定到数据源的 <see cref="T:System.Collections.IList" />。</summary>
      <returns>对象中可以绑定到数据源的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>获取一个值，该值指示集合是否是 <see cref="T:System.Collections.IList" /> 对象的集合。</summary>
      <returns>如果集合是 <see cref="T:System.Collections.IList" /> 对象集合，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary>提供嵌套容器的功能，嵌套容器逻辑上可包含零个或多个其他组件，且这类容器由父组件拥有。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary>获取嵌套容器的所属组件。</summary>
      <returns>拥有该嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary>提供检索组件的完全嵌套名称的能力。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary>获取此站点内的组件的全名。</summary>
      <returns>此站点内的组件的全名。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>指示是否已从基类继承与此特性关联的组件。 此类不能被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的默认值为 <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>指定该组件会被继承。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>指定该组件会被继承并且是只读的。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>指定组件不被继承。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>使用指定的继承级别初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 类的新实例。</summary>
      <param name="inheritanceLevel">一个 <see cref="T:System.ComponentModel.InheritanceLevel" />，指示要将此特性设置成的继承级别。</param>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary>重写以测试等同性。</summary>
      <param name="value">要测试的对象。</param>
      <returns>如果对象相同，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该特性的当前值是否为该特性的默认值。</summary>
      <returns>如果该特性的当前值是默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary>将此特性转换为一个字符串。</summary>
      <returns>表示此 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>获取或设置存储在此特性中的当前继承级别。</summary>
      <returns>存储在此特性中的 <see cref="T:System.ComponentModel.InheritanceLevel" />。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>定义继承级别类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>该对象会被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>该对象会被继承，但具有只读访问权限。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>该对象不被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>为安装组件的类型指定安装程序。</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>用组件的安装程序的类型名称初始化 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 类的新实例。</summary>
      <param name="typeName">表示此特性绑定到的组件安装程序的 <see cref="T:System.Type" /> 名称。 此类必须实现 <see cref="T:System.ComponentModel.Design.IDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>当给定表示组件安装程序的 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 时，初始化 <see cref="T:System.Type" /> 类的新实例。</summary>
      <param name="installerType">
        <see cref="T:System.Type" />，表示此特性绑定到的组件的安装程序。 此类必须实现 <see cref="T:System.ComponentModel.Design.IDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />。</summary>
      <param name="obj">要进行值的相等性测试的对象。</param>
      <returns>如果给定对象的值等于当前对象的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>获取与此特性关联的安装程序类型。</summary>
      <returns>
        <see cref="T:System.Type" />，表示与此特性关联的安装程序类型；如果安装程序不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary>从 <see cref="T:System.Windows.Forms.PropertyGrid" /> 中的下拉框中创建特定类型属性的实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InstanceCreationEditor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>在派生类中重写时，返回指定类型的实例。</summary>
      <param name="context">上下文信息。</param>
      <param name="instanceType">指定的类型。</param>
      <returns>指定类型的实例或为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary>获取指定的文本。</summary>
      <returns>指定的文本。</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>提供将 16 位有符号整数对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Int16Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>提供用于在 32 位有符号整数对象与其他表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Int32Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>提供用于在 64 位有符号整数对象与其他各种表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Int64Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary>指示类是否将属性更改事件转换为 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary>获取一个值，该值指示 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 对象是否引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
      <returns>如果 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 对象在它的一个属性值发生更改时引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary>允许协调组件及其依赖属性的初始化。</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary>组件初始化完成时出现。</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary>获取一个值，该值指示是否初始化组件。</summary>
      <returns>如果为 <see langword="true" />，说明组件已完成初始化；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>提供有关组件的上下文信息，如其容器和属性描述符。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件。</summary>
      <returns>如果该对象可以更改，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>获取表示此 <see cref="T:System.ComponentModel.TypeDescriptor" /> 请求的容器。</summary>
      <returns>包含此 <see cref="T:System.ComponentModel.IContainer" /> 的对象集的 <see cref="T:System.ComponentModel.TypeDescriptor" />；否则，如果不存在容器，或者如果 <see cref="T:System.ComponentModel.TypeDescriptor" /> 不使用外部对象，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>获取与此类型说明符请求相连接的对象。</summary>
      <returns>调用 <see cref="T:System.ComponentModel.TypeDescriptor" /> 的方法的对象；否则，如果不存在负责调用的对象，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>获取与给定上下文项相关联的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns>描述给定上下文项的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；否则，如果不存在负责调用的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>提供发现可绑定列表架构的功能，其中可用于绑定的属性不同于要绑定到的对象的公共属性。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其表示每一项上用于绑定数据的属性。</summary>
      <param name="listAccessors">要在组合中查找的可绑定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。 它可以是 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其表示每一项上用于绑定数据的属性。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>返回列表名称。</summary>
      <param name="listAccessors">为其返回列表名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。 它可以是 <see langword="null" />。</param>
      <returns>列表名称。</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>为所有许可证提供 <see langword="abstract" /> 基类。 对组件的特定实例授予许可证。</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.License" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>当在派生类中被重写时，释放该许可证使用的资源。</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>当在派生类中被重写时，获取授予该组件的许可证密钥。</summary>
      <returns>授予该组件的许可证密钥。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>指定何时可使用授权的对象，并且提供一种方法，用以获取为支持在其域内运行的许可证所需要的附加服务。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.LicenseContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>当在派生类中被重写时，从指定的资源程序集中为指定类型返回已保存的许可证密钥。</summary>
      <param name="type">表示组件类型的 <see cref="T:System.Type" />。</param>
      <param name="resourceAssembly">带有许可证密钥的 <see cref="T:System.Reflection.Assembly" />。</param>
      <returns>指定类型的 <see cref="P:System.ComponentModel.License.LicenseKey" />。 该方法返回 <see langword="null" />，除非您将其重写。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>获取请求的服务（如果该服务可用的话）。</summary>
      <param name="type">要检索的服务类型。</param>
      <returns>该服务的实例；或者如果找不到该服务，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>当在派生类中被重写时，为指定的类型设置许可证密钥。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示与该许可证密钥相关联的组件。</param>
      <param name="key">为该类型组件保存的 <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>当在派生类中被重写时，获取一个指定何时可使用许可证的值。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值之一，指定您何时可以使用许可证。 默认值为 <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>表示当组件不能被授予许可证时引发的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用给定的 <see cref="T:System.ComponentModel.LicenseException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="info">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>为拒绝向其授予许可证的组件的类型初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>为拒绝向其授予许可证的组件的类型和实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</param>
      <param name="instance">未被授予许可证的组件的实例。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>为拒绝向其授予许可证的组件的类型和实例以及要显示的消息初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</param>
      <param name="instance">未被授予许可证的组件的实例。</param>
      <param name="message">要显示的异常消息。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>为拒绝向其授予许可证的组件的类型和实例以及要显示的消息和最初引发的异常初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</param>
      <param name="instance">未被授予许可证的组件的实例。</param>
      <param name="message">要显示的异常消息。</param>
      <param name="innerException">一个 <see cref="T:System.Exception" />，表示最初的异常。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">用于反序列化的目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>获取未被授予许可证的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>提供属性和方法，用以将许可证添加到组件和管理 <see cref="T:System.ComponentModel.LicenseProvider" />。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>根据可在其中使用已授权实例的上下文，创建指定类型的实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示要创建的类型。</param>
      <param name="creationContext">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定何时可以使用已授权的实例。</param>
      <returns>指定类型的实例。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>根据可在其中使用已授权实例的上下文，用指定的参数创建指定类型的实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示要创建的类型。</param>
      <param name="creationContext">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定何时可以使用已授权的实例。</param>
      <param name="args">表示该类型参数的类型 <see cref="T:System.Object" /> 的数组。</param>
      <returns>具有给定参数数组的指定类型的实例。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>返回给定的类型是否具有有效许可证。</summary>
      <param name="type">为其查找有效许可证的 <see cref="T:System.Type" />。</param>
      <returns>如果给定的类型已授权，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>确定是否可以为指定类型授予有效的许可证。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求 <see cref="T:System.ComponentModel.License" /> 的对象的类型。</param>
      <returns>如果可以授予有效许可证，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>确定是否可以为该类型的指定实例授予有效的许可证。 该方法创建有效的 <see cref="T:System.ComponentModel.License" />。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求许可证的对象的类型。</param>
      <param name="instance">指定类型的对象或从指定类型派生的类型的对象。</param>
      <param name="license">一个作为有效许可证的 <see cref="T:System.ComponentModel.License" />；如果无法颁发有效许可证，则为 <see langword="null" />。</param>
      <returns>如果可以颁发有效的 <see cref="T:System.ComponentModel.License" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>防止对给定对象当前的 <see cref="T:System.ComponentModel.LicenseContext" /> 进行更改。</summary>
      <param name="contextUser">要锁定其当前上下文的对象。</param>
      <exception cref="T:System.InvalidOperationException">上下文已被锁定。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>允许对给定对象当前的 <see cref="T:System.ComponentModel.LicenseContext" /> 进行更改。</summary>
      <param name="contextUser">要取消锁定其当前上下文的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contextUser" /> 不表示在前面对 <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" /> 的调用中指定的用户，而表示另外一个用户。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>确定是否可以为指定类型授予许可证。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求许可证的对象的类型。</param>
      <exception cref="T:System.ComponentModel.LicenseException">不能授予 <see cref="T:System.ComponentModel.License" />。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>确定是否可以为指定类型的实例授予许可证。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求许可证的对象的类型。</param>
      <param name="instance">指定类型的，或从指定类型派生的类型的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ComponentModel.LicenseException">该类型已被授权，但是不能授予 <see cref="T:System.ComponentModel.License" />。</exception>
      <returns>有效的 <see cref="T:System.ComponentModel.License" />。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>获取或设置当前的 <see cref="T:System.ComponentModel.LicenseContext" />，它指定您何时可以使用已授权的对象。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 属性当前被锁定，因而无法更改它。</exception>
      <returns>一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定何时可以使用已授权的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>获取 <see cref="T:System.ComponentModel.LicenseUsageMode" />，它指定何时可以使用 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 的已授权对象。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值之一，这些值是在 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 属性中指定的。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>提供 <see langword="abstract" /> 基类以便实现许可证提供程序。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.LicenseProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>当在派生类中被重写时，获取组件的实例或类型的许可证（如果已给定上下文并确定拒绝许可证是否引发异常）。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定可在何处使用已授权的对象。</param>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求许可证的组件。</param>
      <param name="instance">请求许可证的对象。</param>
      <param name="allowExceptions">如果组件无法授予许可证时应引发 <see cref="T:System.ComponentModel.LicenseException" />，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>有效的 <see cref="T:System.ComponentModel.License" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>指定要与类一起使用的 <see cref="T:System.ComponentModel.LicenseProvider" />。 此类不能被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary>指定默认值，即无提供程序。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>在没有许可证提供程序的情况下，初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>使用指定的类型初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类的新实例。</summary>
      <param name="typeName">许可证提供程序类的完全限定名。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>使用指定类型的许可证提供程序初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示许可证提供程序类的类型。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <param name="value">要比较的另一个对象。</param>
      <returns>如果 <see langword="true" /> 与此实例相等，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>获取必须与该关联类一起使用的许可证提供程序。</summary>
      <returns>
        <see cref="T:System.Type" />，表示许可证提供程序的类型。 默认值是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary>指示此特性类型的唯一 ID。</summary>
      <returns>此特性类型的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>指定何时可以使用 <see cref="T:System.ComponentModel.License" />。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>在设计时由可视化设计器或编译器使用。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>在运行时使用。</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>提供 <see cref="T:System.ComponentModel.LicenseProvider" /> 的实现。 提供程序与 Microsoft .NET Framework 标准授权模型的工作方式相似。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>返回指定类型的密钥。</summary>
      <param name="type">要返回密钥的对象类型。</param>
      <returns>对 <paramref name="type" /> 参数已被授权的确认。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>返回组件实例的许可证（如果有一个可用的话）。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定可在何处使用已授权的对象。</param>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求 <see cref="T:System.ComponentModel.License" /> 的组件。</param>
      <param name="instance">请求 <see cref="T:System.ComponentModel.License" /> 的对象。</param>
      <param name="allowExceptions">如果无法授予组件许可证时应引发 <see cref="T:System.ComponentModel.LicenseException" />，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>有效的 <see cref="T:System.ComponentModel.License" />。 如果该方法未能找到有效的 <see cref="T:System.ComponentModel.License" /> 或有效的 <paramref name="context" /> 参数，它返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>确定 <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> 方法检索的密钥对指定的类型是否有效。</summary>
      <param name="key">要检查的 <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求 <see cref="T:System.ComponentModel.License" /> 的组件。</param>
      <returns>如果该密钥是指定类型的有效 <see cref="P:System.ComponentModel.License.LicenseKey" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>指定列表可被用作数据源。 可视化设计器应该使用该特性来确定是否在数据绑定选择器中显示特定的列表。 此类不能被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的默认值。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>指定该列表不可绑定。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>指定该列表可绑定。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>通过使用值指示该列表是否可绑定来初始化 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 类的新实例。</summary>
      <param name="listBindable">如果该列表为可绑定的，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>通过使用 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 指示该列表是否可绑定来初始化 <see cref="T:System.ComponentModel.BindableSupport" /> 类的新实例。</summary>
      <param name="flags">一个 <see cref="T:System.ComponentModel.BindableSupport" />，指示该列表是否可绑定。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary>返回指示所传递对象是否等同于此 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的值。</summary>
      <param name="obj">要用于测试是否相等的对象。</param>
      <returns>如果传递的对象等同于此 <see cref="T:System.ComponentModel.ListBindableAttribute" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>返回 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 是否被设置为默认值。</summary>
      <returns>如果 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 被设置为默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>获取该列表是否可以绑定。</summary>
      <returns>如果该列表为可绑定的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>如果给定更改类型和受影响的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />，则初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 类的新实例。</summary>
      <param name="listChangedType">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</param>
      <param name="propDesc">添加、移除或更改的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>如果给定更改类型和受影响项的索引，则初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 类的新实例。</summary>
      <param name="listChangedType">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</param>
      <param name="newIndex">添加、更改或移除的项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>如果给定更改类型、受影响项的索引以及描述受影响项的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />，则初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 类的新实例。</summary>
      <param name="listChangedType">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</param>
      <param name="newIndex">添加或更改的项的索引。</param>
      <param name="propDesc">描述该项的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>如果给定更改类型以及被移动项的新索引和旧索引，则初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 类的新实例。</summary>
      <param name="listChangedType">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</param>
      <param name="newIndex">被移动项的新索引。</param>
      <param name="oldIndex">被移动项的旧索引。</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>获取更改类型。</summary>
      <returns>指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>获取受更改影响的项的索引。</summary>
      <returns>受更改影响的项的索引。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>获取已移动的项的旧索引。</summary>
      <returns>已移动的项的旧索引。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary>获取添加、更改或删除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns>受此更改影响的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>表示将处理 <see cref="T:System.ComponentModel.IBindingList" /> 类的 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>指定列表的更改方式。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>添加到列表的项。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含被添加项的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>列表中更改的项。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含被更改项的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>从列表中删除的项。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含被删除项的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>列表中移动的项。 <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> 包含该项以前的索引，而 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含该项的新索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>已添加 <see cref="T:System.ComponentModel.PropertyDescriptor" />，这更改了架构。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>已更改 <see cref="T:System.ComponentModel.PropertyDescriptor" />，这更改了架构。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>已删除 <see cref="T:System.ComponentModel.PropertyDescriptor" />，这更改了架构。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>已更改了列表的许多内容。 任何侦听控件都应该根据该列表刷新其所有数据。</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary>提供对应用于数据源的排序操作的说明。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>使用指定的属性说明和方向初始化 <see cref="T:System.ComponentModel.ListSortDescription" /> 类的新实例。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，描述作为数据源排序依据的属性。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDescription" /> 值之一。</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary>获取或设置与此 <see cref="T:System.ComponentModel.ListSortDescription" /> 关联的类属性的抽象说明</summary>
      <returns>与此 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 关联的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary>获取或设置与此 <see cref="T:System.ComponentModel.ListSortDescription" /> 关联的排序操作的方向。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary>表示 <see cref="T:System.ComponentModel.ListSortDescription" /> 对象集合。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary>用 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 对象的指定数组初始化 <see cref="T:System.ComponentModel.ListSortDescription" /> 类的新实例。</summary>
      <param name="sorts">要包含在集合中的 <see cref="T:System.ComponentModel.ListSortDescription" /> 对象的数组。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary>确定 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 是否包含特定值。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.Object" />。</param>
      <returns>如果在集合中找到 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>从指定目标数组索引处开始，将集合中的内容复制到指定数组中。</summary>
      <param name="array">从集合复制的项的目标数组。</param>
      <param name="index">开始复制的目标数组的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary>返回集合中指定项的索引。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.Object" />。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>获取可用于循环访问该集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>向集合中添加一项。</summary>
      <param name="value">要添加到集合的项。</param>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
      <returns>新元素的插入位置。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将某个项插入到集合中的指定索引处。</summary>
      <param name="index">要在集合中获取或设置的 <see cref="T:System.ComponentModel.ListSortDescription" /> 的从零开始的索引</param>
      <param name="value">要插入到集合中的项。</param>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除某项的第一个匹配项。</summary>
      <param name="value">要从集合中移除的项。</param>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除集合中指定索引处的项。</summary>
      <param name="index">要从集合中移除的 <see cref="T:System.ComponentModel.ListSortDescription" /> 的从零开始的索引</param>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary>获取集合中的项数。</summary>
      <returns>集合中项的数目。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary>获取或设置指定的 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <param name="index">要在集合中获取或设置的 <see cref="T:System.ComponentModel.ListSortDescription" /> 的从零开始的索引。</param>
      <exception cref="T:System.InvalidOperationException">在 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />（只读）中设置项。</exception>
      <returns>具有指定索引的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，用于指示对集合的访问是否是线程安全的。</summary>
      <returns>在所有情况下均为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的当前实例。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 的当前实例。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>在所有情况下均为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>在所有情况下均为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取指定的 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <param name="index">要从集合中获取的 <see cref="T:System.ComponentModel.ListSortDescription" /> 的从零开始的索引</param>
      <returns>具有指定索引的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>指定排序操作的方向。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>按升序排序。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>按降序排序。</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary>指定支持基于查找的绑定的属性。 此类不能被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary>不使用任何参数初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类的新实例。</summary>
      <param name="dataSource">要用作数据源的属性的名称。</param>
      <param name="displayMember">要用作显示名称的属性的名称。</param>
      <param name="valueMember">要用作值的源的属性的名称。</param>
      <param name="lookupMember">要用于查找的属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 实例。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Object" /> 实例进行比较的 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />。</param>
      <returns>如果该对象等同于当前的实例，则为 <see langword="true" />；否则为 <see langword="false" />，指示两者不等同。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary>获取 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的数据源属性的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的数据源属性。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary>获取 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的显示成员属性的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的显示成员属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary>获取此特性所绑定组件的查找成员的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的查找成员的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary>获取 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的值成员属性的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的值成员属性的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>实现 <see cref="T:System.ComponentModel.IComponent" /> 并提供可远程控制的组件的基实现，该组件是由值封送的（传递序列化对象的副本）。</summary>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>添加用于侦听组件的 <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> 事件的事件处理程序。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary>在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>获取 <see cref="T:System.IServiceProvider" /> 的实施者。</summary>
      <param name="service">一个 <see cref="T:System.Type" />，表示所需服务的类型。</param>
      <returns>一个 <see cref="T:System.Object" />，表示 <see cref="T:System.IServiceProvider" /> 的实施者。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary>返回包含 <see cref="T:System.ComponentModel.Component" /> 的名称的 <see cref="T:System.String" />（如果有）。 不应重写此方法。</summary>
      <returns>包含该 <see cref="T:System.String" /> 的名称的 <see cref="T:System.ComponentModel.Component" />（如果有的话）。  
  
 如果 <see cref="T:System.ComponentModel.Component" /> 未命名，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>获取组件的容器。</summary>
      <returns>实现表示组件容器的 <see cref="T:System.ComponentModel.IContainer" /> 接口的对象；如果组件不具有位置，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>获取指示组件当前是否处于设计模式的值。</summary>
      <returns>如果组件处于设计模式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>获取附加到该组件的事件处理程序的列表。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventHandlerList" />，它提供此组件的委托。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>获取或设置组件的站点。</summary>
      <returns>实现表示组件位置的 <see cref="T:System.ComponentModel.ISite" /> 接口的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary>表示可由支持掩码的任何数量的控件（如 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 控件）使用的掩码分析服务。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary>使用指定的掩码初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary>使用指定的掩码和 ASCII 限制值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。</param>
      <param name="restrictToAscii">如果将输入限制为与 ASCII 兼容的字符，则为 <see langword="true" />；如果允许使用整个 Unicode 字符集，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary>使用指定的掩码、密码字符和用法提示值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。</param>
      <param name="passwordChar">将为输入到密码字符串中的字符显示的 <see cref="T:System.Char" />。</param>
      <param name="allowPromptAsInput">如果允许将提示字符作为输入，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>使用指定的掩码和区域性初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用于设置区分区域的分隔符。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary>使用指定的掩码、区域性和 ASCII 限制值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用于设置区分区域的分隔符。</param>
      <param name="restrictToAscii">如果将输入限制为与 ASCII 兼容的字符，则为 <see langword="true" />；如果允许使用整个 Unicode 字符集，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary>使用指定的掩码、区域性、用法提示值、提示字符、密码字符和 ASCII 限制值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用于设置区分区域的分隔符。</param>
      <param name="allowPromptAsInput">一个 <see cref="T:System.Boolean" /> 值，指定是否应允许提示字符作为有效的输入字符。</param>
      <param name="promptChar">一个将显示为用户输入占位符的 <see cref="T:System.Char" />。</param>
      <param name="passwordChar">将为输入到密码字符串中的字符显示的 <see cref="T:System.Char" />。</param>
      <param name="restrictToAscii">如果将输入限制为与 ASCII 兼容的字符，则为 <see langword="true" />；如果允许使用整个 Unicode 字符集，则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">掩码参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。  
  
- 或 - 
掩码包含一个或多个不可打印字符。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary>使用指定的掩码、区域性、密码字符和用法提示值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用于设置区分区域的分隔符。</param>
      <param name="passwordChar">将为输入到密码字符串中的字符显示的 <see cref="T:System.Char" />。</param>
      <param name="allowPromptAsInput">如果允许将提示字符作为输入，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary>将指定的输入字符添加到带格式字符串的末尾。</summary>
      <param name="input">一个要追加到带格式字符串的 <see cref="T:System.Char" /> 值。</param>
      <returns>如果输入字符添加成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>将指定输入字符添加到带格式字符串的末尾，然后输出位置和描述性信息。</summary>
      <param name="input">一个要追加到带格式字符串的 <see cref="T:System.Char" /> 值。</param>
      <param name="testPosition">带格式的字符串中尝试添加字符的位置（从零开始计）。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。 一个输出参数。</param>
      <returns>如果输入字符添加成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary>将指定输入字符串中的字符添加到带格式字符串的末尾。</summary>
      <param name="input">一个 <see cref="T:System.String" />，包含要追加到带格式字符串的字符值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 <see langword="null" />。</exception>
      <returns>如果已成功添加输入字符串中的所有字符，则为 <see langword="true" />；否则为 <see langword="false" />，以指示没有添加任何字符。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>将指定的输入字符串中的字符添加到带格式字符串的末尾，然后输出位置和描述性信息。</summary>
      <param name="input">一个 <see cref="T:System.String" />，包含要追加到带格式字符串的字符值。</param>
      <param name="testPosition">带格式的字符串中尝试添加字符的位置（从零开始计）。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。 一个输出参数。</param>
      <returns>如果已成功添加输入字符串中的所有字符，则为 <see langword="true" />；否则为 <see langword="false" />，以指示没有添加任何字符。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary>通过用提示字符替换可编辑输入字符，从带格式字符串中清除所有可编辑输入字符。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary>通过用提示字符替换可编辑输入字符，从带格式字符串中清除所有可编辑输入字符，然后输出描述性信息。</summary>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。 一个输出参数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary>创建当前 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 的副本。</summary>
      <returns>此方法创建的强制转换为某对象的 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之后第一个已赋值的可编辑位置的位置。</summary>
      <param name="position">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个已赋值可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之间第一个赋值可编辑位置的位置。</summary>
      <param name="startPosition">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="endPosition">带格式的字符串中的搜索结束位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个已赋值可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之后第一个可编辑位置的位置。</summary>
      <param name="position">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之间第一个可编辑位置的位置。</summary>
      <param name="startPosition">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="endPosition">带格式的字符串中的搜索结束位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之后第一个不可编辑位置的位置。</summary>
      <param name="position">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个原义字符的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之间第一个不可编辑位置的位置。</summary>
      <param name="startPosition">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="endPosition">带格式的字符串中的搜索结束位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个原义字符的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之后第一个未赋值可编辑位置的位置。</summary>
      <param name="position">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个未赋值可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之间第一个未赋值可编辑位置的位置。</summary>
      <param name="startPosition">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="endPosition">带格式的字符串中的搜索结束位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；<see langword="true" /> 表示向前搜索，<see langword="false" /> 表示向后搜索。</param>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个未赋值可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary>确定指定的 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 表示成功还是失败。</summary>
      <param name="hint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 值，通常作为上一个操作的输出参数获取。</param>
      <returns>如果指定的 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 值表示成功，则为 <see langword="true" />；如果表示失败，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary>在带格式字符串中的指定位置插入指定字符。</summary>
      <param name="input">要插入的 <see cref="T:System.Char" />。</param>
      <param name="position">带格式的字符串中要插入字符的位置（从零开始计）。</param>
      <returns>如果插入成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>在带格式字符串中的指定位置插入指定的字符，同时返回最后一个插入位置和操作的状态。</summary>
      <param name="input">要插入的 <see cref="T:System.Char" />。</param>
      <param name="position">带格式的字符串中要插入字符的位置（从零开始计）。</param>
      <param name="testPosition">如果该方法成功，则为最后一个插入字符的位置；否则为第一次插入失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述插入操作的结果。 一个输出参数。</param>
      <returns>如果插入成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary>在带格式字符串中的指定位置插入指定的字符串。</summary>
      <param name="input">要插入的 <see cref="T:System.String" />。</param>
      <param name="position">带格式的字符串中要插入输入字符串的位置（从零开始计）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 <see langword="null" />。</exception>
      <returns>如果插入成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>将指定的字符串插入到带格式字符串中的指定位置，同时返回最后一个插入位置和操作的状态。</summary>
      <param name="input">要插入的 <see cref="T:System.String" />。</param>
      <param name="position">带格式的字符串中要插入输入字符串的位置（从零开始计）。</param>
      <param name="testPosition">如果该方法成功，则为最后一个插入字符的位置；否则为第一次插入失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述插入操作的结果。 一个输出参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 <see langword="null" />。</exception>
      <returns>如果插入成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary>确定指定位置是否可赋值。</summary>
      <param name="position">掩码中要测试的位置（从零开始计）。</param>
      <returns>如果带格式字符串中的指定位置为可编辑并且尚未赋值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary>确定指定的位置是否为可编辑。</summary>
      <param name="position">掩码中要测试的位置（从零开始计）。</param>
      <returns>如果带格式字符串中的指定位置为可编辑，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary>确定指定的字符是否为有效的输入字符。</summary>
      <param name="c">要测试的 <see cref="T:System.Char" /> 值。</param>
      <returns>如果指定的字符包含有效的输入值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary>确定指定的字符是否为有效的掩码字符。</summary>
      <param name="c">要测试的 <see cref="T:System.Char" /> 值。</param>
      <returns>如果指定的字符包含有效的掩码值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary>确定指定的字符是否为有效的密码字符。</summary>
      <param name="c">要测试的 <see cref="T:System.Char" /> 值。</param>
      <returns>如果指定的字符包含有效的密码值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary>从带格式的字符串中移除最后一个赋值的字符。</summary>
      <returns>如果该字符已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>从带格式字符串中移除最后一个赋值的字符，然后输出移除位置和描述性信息。</summary>
      <param name="testPosition">带格式字符串中实际移除字符的位置（从零开始计）。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。 一个输出参数。</param>
      <returns>如果该字符已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary>从带格式的字符串中移除位于指定位置的赋值字符。</summary>
      <param name="position">要移除的赋值字符的位置（从零开始计）。</param>
      <returns>如果该字符已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary>从带格式的字符串中移除指定位置之间的赋值的字符。</summary>
      <param name="startPosition">要移除的第一个赋值的字符的从零开始的索引。</param>
      <param name="endPosition">要移除的最后一个赋值的字符的从零开始的索引。</param>
      <returns>如果该字符已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>从带格式的字符串中移除指定位置之间的赋值的字符，然后输出移除位置和描述性信息。</summary>
      <param name="startPosition">要移除的第一个赋值的字符的从零开始的索引。</param>
      <param name="endPosition">要移除的最后一个赋值的字符的从零开始的索引。</param>
      <param name="testPosition">如果成功，则为带格式的字符串中实际移除字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。 一个输出参数。</param>
      <returns>如果该字符已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary>用指定的字符值替换指定位置或指定位置后面的单个字符。</summary>
      <param name="input">用于替换现有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="position">用于搜索将要替换的第一个可编辑字符的位置（从零开始计）。</param>
      <returns>如果已成功替换该字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>在指定的开始和结束位置之间使用指定的字符值替换单个字符，然后输出移除位置和描述性信息。</summary>
      <param name="input">用于替换现有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="startPosition">带格式的字符串中的替换起始位置（从零开始计）。</param>
      <param name="endPosition">带格式的字符串中的替换结束位置（从零开始计）。</param>
      <param name="testPosition">如果成功，则为带格式字符串中实际替换最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述替换操作的结果。 一个输出参数。</param>
      <returns>如果已成功替换该字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>用指定的字符值替换指定位置或指定位置后面的单个字符，然后输出移除位置和描述性信息。</summary>
      <param name="input">用于替换现有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="position">用于搜索将要替换的第一个可编辑字符的位置（从零开始计）。</param>
      <param name="testPosition">如果成功，则为带格式字符串中实际替换最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述替换操作的结果。 一个输出参数。</param>
      <returns>如果已成功替换该字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary>从指定位置开始使用指定字符串替换一定范围的可编辑字符。</summary>
      <param name="input">用于替换现有可编辑字符的 <see cref="T:System.String" /> 值。</param>
      <param name="position">用于搜索将要替换的第一个可编辑字符的位置（从零开始计）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 <see langword="null" />。</exception>
      <returns>如果所有的字符已成功替换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>在指定的开始位置和结束位置之间的范围内使用指定的字符串替换可编辑字符，然后输出移除位置和描述性信息。</summary>
      <param name="input">用于替换现有可编辑字符的 <see cref="T:System.String" /> 值。</param>
      <param name="startPosition">带格式的字符串中的替换起始位置（从零开始计）。</param>
      <param name="endPosition">带格式的字符串中的替换结束位置（从零开始计）。</param>
      <param name="testPosition">如果成功，则为带格式字符串中实际替换最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述替换操作的结果。 一个输出参数。</param>
      <returns>如果所有的字符已成功替换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>从指定位置开始使用指定字符串替换一定范围的可编辑字符，然后输出移除位置和描述性信息。</summary>
      <param name="input">用于替换现有可编辑字符的 <see cref="T:System.String" /> 值。</param>
      <param name="position">用于搜索将要替换的第一个可编辑字符的位置（从零开始计）。</param>
      <param name="testPosition">如果成功，则为带格式字符串中实际替换最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述替换操作的结果。 一个输出参数。</param>
      <returns>如果所有的字符已成功替换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary>将带格式的字符串设置为指定的输入字符串。</summary>
      <param name="input">用于设置带格式字符串的 <see cref="T:System.String" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 <see langword="null" />。</exception>
      <returns>如果所有的字符已成功设置，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>将带格式的字符串设置为指定的输入字符串，然后输出移除位置和描述性信息。</summary>
      <param name="input">用于设置带格式字符串的 <see cref="T:System.String" /> 值。</param>
      <param name="testPosition">如果成功，则为带格式字符串中实际设置最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述设置操作的结果。 一个输出参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 <see langword="null" />。</exception>
      <returns>如果所有的字符已成功设置，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary>以可显示的形式返回带格式字符串。</summary>
      <returns>带格式的 <see cref="T:System.String" />，包含提示和掩码原义字符。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary>返回包含所有赋值的字符值的带格式字符串。</summary>
      <returns>带格式的 <see cref="T:System.String" />，其中包含所有赋值的字符值。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary>返回带格式的字符串，还可以选择包含密码字符。</summary>
      <param name="ignorePasswordChar">如果为 <see langword="true" />，则返回实际的可编辑字符；如果为 <see langword="false" />，则指示将接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性。</param>
      <returns>带格式的 <see cref="T:System.String" />，包含原义字符、提示字符，还可以选择包含密码字符。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary>返回带格式的字符串，还可以选择包含提示字符和原义字符。</summary>
      <param name="includePrompt">如果在返回字符串中包括提示字符，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="includeLiterals">如果在返回字符串中包括原义字符，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>带格式的 <see cref="T:System.String" />，包含所有赋值的字符值，还可以选择包含原义字符和提示字符。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>返回带格式字符串的子字符串，可以选择包含提示字符、原义字符和密码字符。</summary>
      <param name="ignorePasswordChar">如果为 <see langword="true" />，则返回实际的可编辑字符；如果为 <see langword="false" />，则指示将接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性。</param>
      <param name="includePrompt">如果在返回字符串中包括提示字符，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="includeLiterals">如果在返回字符串中包括原义字符，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="startPosition">带格式的字符串中的起始输出位置（从零开始计）。</param>
      <param name="length">要返回的字符数。</param>
      <returns>如果成功，则返回带格式的 <see cref="T:System.String" /> 的子字符串（包含所有赋值的字符值，还可以选择包含原义字符、提示字符和密码字符）；否则返回 <see cref="F:System.String.Empty" /> 字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>返回带格式字符串的子字符串，也可以选择包含提示字符和原义字符。</summary>
      <param name="includePrompt">如果在返回字符串中包括提示字符，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="includeLiterals">如果在返回字符串中包括原义字符，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="startPosition">带格式的字符串中的起始输出位置（从零开始计）。</param>
      <param name="length">要返回的字符数。</param>
      <returns>如果成功，则返回带格式的 <see cref="T:System.String" /> 的子字符串（包含所有赋值的字符值，还可以选择包含原义字符和提示字符）；否则返回 <see cref="F:System.String.Empty" /> 字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary>返回带格式字符串的子字符串，也可以选择包含密码字符。</summary>
      <param name="ignorePasswordChar">如果为 <see langword="true" />，则返回实际的可编辑字符；如果为 <see langword="false" />，则指示将接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性。</param>
      <param name="startPosition">带格式的字符串中的起始输出位置（从零开始计）。</param>
      <param name="length">要返回的字符数。</param>
      <returns>如果成功，则返回带格式的 <see cref="T:System.String" /> 的子字符串（包含原义字符、提示字符，还可以选择包含密码字符）；否则返回 <see cref="F:System.String.Empty" /> 字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary>返回带格式字符串的子字符串。</summary>
      <param name="startPosition">带格式的字符串中的起始输出位置（从零开始计）。</param>
      <param name="length">要返回的字符数。</param>
      <returns>如果成功，则返回带格式的 <see cref="T:System.String" /> 的子字符串（包含所有赋值的字符值），否则返回 <see cref="F:System.String.Empty" /> 字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary>测试指定的字符是否可以在指定位置成功设置。</summary>
      <param name="input">要测试的 <see cref="T:System.Char" /> 值。</param>
      <param name="position">测试输入字符时所根据的掩码位置。</param>
      <param name="hint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。 一个输出参数。</param>
      <returns>如果指定的字符对指定位置有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary>测试指定的字符是否将在指定位置转义。</summary>
      <param name="input">要测试的 <see cref="T:System.Char" /> 值。</param>
      <param name="position">测试输入字符时所根据的掩码位置。</param>
      <returns>如果指定的字符将在指定位置转义，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary>测试指定的字符串是否可以成功设置。</summary>
      <param name="input">要测试的 <see cref="T:System.String" /> 值。</param>
      <returns>如果指定的字符串表示有效输入，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>测试指定的字符串是否可以成功设置，然后输出位置和描述性信息。</summary>
      <param name="input">要测试的 <see cref="T:System.String" /> 值。</param>
      <param name="testPosition">如果成功，则为实际测试的最后一个字符的位置（从零开始计）；否则为测试第一次失败时所处的位置。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述测试操作的结果。 一个输出参数。</param>
      <returns>如果指定的字符串表示有效输入，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary>获取一个值，该值指示是否应将提示字符视为有效的输入字符。</summary>
      <returns>如果用户可将 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> 输入到控件，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary>获取一个值，指示掩码是否接受 ASCII 字符集之外的字符。</summary>
      <returns>如果仅接受 ASCII，则为 <see langword="true" />；如果 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 可接受任意 Unicode 字符，则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary>获取已成功赋予输入值的可编辑字符位置的数目。</summary>
      <returns>一个 <see cref="T:System.Int32" />，包含输入掩码中的可编辑字符位置数（这些字符位置已在带格式字符串中赋予了字符值）。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary>获取输入掩码中尚未赋予输入值的可编辑字符位置的数目。</summary>
      <returns>一个 <see cref="T:System.Int32" />，包含尚未赋予字符值的可编辑字符位置的数目。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary>获取输入掩码中确定可本地化的分隔符和占位符的值的区域性。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，包含与输入掩码关联的区域性信息。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary>获取用于遮盖用户输入的默认密码字符。</summary>
      <returns>一个表示默认的密码字符的 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary>获取带格式字符串中的可编辑位置数。</summary>
      <returns>包含带格式字符串中可编辑位置数的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary>获取为带格式字符串中的可编辑位置新创建的枚举数。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，支持对带格式字符串中的可编辑位置进行枚举。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary>获取或设置一个值，该值指示输入掩码中的原义字符是否应包含在带格式的字符串中。</summary>
      <returns>如果包含原义字符，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary>获取或设置一个值，该值指示当显示带格式的字符串时是否使用 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> 来表示缺少的用户输入。</summary>
      <returns>如果提示字符用于表示未提供用户输入的位置，则为 <see langword="true" />；否则为 <see langword="false" />. 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary>获取无效索引范围的上限。</summary>
      <returns>一个表示最大无效索引的值，由提供程序实现确定。 例如，如果最小的有效索引为 0，则此属性将返回 -1。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary>获取或设置一个值，该值确定是否应将密码保护应用于带格式的字符串。</summary>
      <returns>如果要将输入字符串作为密码字符串进行处理，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary>获取带格式字符串中位于指定位置的元素。</summary>
      <param name="index">要检索的元素的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于零或大于等于掩码的 <see cref="P:System.ComponentModel.MaskedTextProvider.Length" />。</exception>
      <returns>带格式字符串中位于指定位置的 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary>获取已赋给掩码的最靠右的输入字符在掩码中的索引。</summary>
      <returns>如果已为掩码至少赋予了一个输入字符，则为包含最靠右的已赋值位置的索引的 <see cref="T:System.Int32" />；如果没有已赋值的位置，则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary>获取掩码的长度，不包括任何掩码修饰符字符。</summary>
      <returns>一个包含掩码中位置数（不包括修改掩码输入的字符）的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary>获取输入掩码。</summary>
      <returns>一个包含完整掩码的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary>获取一个值，该值指示是否所有必需的输入均已输入到带格式的字符串中。</summary>
      <returns>如果所有的必需输入均已输入到掩码中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary>获取一个值，该值指示是否所有必需和可选的输入均已输入到带格式的字符串中。</summary>
      <returns>如果所有的必需和可选输入均已输入，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary>获取或设置要替代实际输入字符的字符。</summary>
      <exception cref="T:System.InvalidOperationException">设置此属性时指定的密码字符与当前提示字符 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> 相同。 这两者之间必须存在差异。</exception>
      <exception cref="T:System.ArgumentException">根据 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法判定，设置此属性时指定的字符不是有效的密码字符。</exception>
      <returns>用作密码字符的 <see cref="T:System.Char" /> 值。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary>为所有可用的编辑位置获取或设置用于表示缺少用户输入的字符。</summary>
      <exception cref="T:System.InvalidOperationException">设置此属性时指定的提示字符与当前密码字符 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 相同。 这两者之间必须存在差异。</exception>
      <exception cref="T:System.ArgumentException">根据 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法判定，设置此属性时指定的字符不是有效的密码字符。</exception>
      <returns>用于提示用户进行输入的字符。 默认为下划线 (_)。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary>获取或设置一个值，该值确定应如何处理与提示字符匹配的输入字符。</summary>
      <returns>如果输入的提示字符会导致掩码中的当前可编辑位置被重置，则为 <see langword="true" />；否则为 <see langword="false" />，以指示要将提示字符作为正常输入字符进行处理。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary>获取或设置一个值，该值确定应如何处理空白输入字符。</summary>
      <returns>如果空白输入字符将导致重置掩码中的当前可编辑位置，则为 <see langword="true" />；否则为 <see langword="false" />，以指示要将其作为正常输入字符进行处理。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary>获取或设置一个值，该值指示掩码中的原义字符位置是否可由其相同的值覆盖。</summary>
      <returns>如果允许往回添加原义字符，则为 <see langword="true" />；如果不允许用户覆盖原义字符，则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary>指定简洁描述掩码文本分析操作结果的值。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary>操作未成功。输入字符中包含非字母数字字符。 。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary>操作未成功。输入字符中包含非 ASCII 字符集成员的字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary>成功。 操作成功，因为文本、提示或空格字符是转义字符。 有关转义字符的更多信息，请参见 <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary>操作未成功。 输入字符中包含非数字字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary>操作未成功。 程序遇到无效的输入字符。 有关无效字符的更多信息，请参见 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary>操作未成功。 输入字符中包含非字母字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary>成功。 主操作未执行，因为不需要；因此，未产生任何副作用。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary>操作未成功。 格式化字符串中的当前位置为原义字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary>操作未成功。 指定的位置未在目标字符串范围内；通常小于零或大于目标字符串的长度。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary>操作未成功。 输入的提示字符无效，可能是由于 <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> 属性设置为 <see langword="false" /> 所致。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary>成功。 主操作未执行，因为不需要，但该方法产生了副作用。 例如，<see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> 方法可能删除未赋值的编辑位置，这会引起格式化字符串中顺序字符的左移。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary>操作未成功。 输入字符中包含不是有符号数字的字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary>成功。 主操作成功。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary>操作未成功。 没有足够的可用编辑位置来满足请求。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary>未知。 操作结果未能确定。</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>表示一个类成员，例如某个属性或事件。 这是一个抽象基类。</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.MemberDescriptor" /> 初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它包含该成员的名称及其特性。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>用指定的 <see cref="T:System.ComponentModel.MemberDescriptor" /> 中的名称以及同时出现在旧 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.ComponentModel.MemberDescriptor" /> 数组中的特性初始化 <see cref="T:System.Attribute" /> 类的新实例。</summary>
      <param name="oldMemberDescriptor">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它具有该成员的名称及其特性。</param>
      <param name="newAttributes">
        <see cref="T:System.Attribute" /> 对象的数组，这些对象具有要添加到成员的特性。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>用指定的成员名称初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="name">成员名。</param>
      <exception cref="T:System.ArgumentException">该名称为空字符串 ("") 或 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>用指定的成员名称和特性数组初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="name">成员名。</param>
      <param name="attributes">包含成员特性的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <exception cref="T:System.ArgumentException">该名称为空字符串 ("") 或 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>使用传递到构造函数的特性数组创建特性的集合。</summary>
      <returns>一个新 <see cref="T:System.ComponentModel.AttributeCollection" />，包含 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 特性。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>将该实例与给定的对象进行比较以了解它们是否等效。</summary>
      <param name="obj">要与当前类型进行比较的对象。</param>
      <returns>如果等效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>当在派生类中被重写时，将继承类的特性添加到父类中指定的特性列表。</summary>
      <param name="attributeList">一个列出父类中特性的 <see cref="T:System.Collections.IList" />。 最初，它是空的。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>通过反射查找给定的方法，只搜索公共方法。</summary>
      <param name="componentClass">包含该方法的组件。</param>
      <param name="name">要查找的方法的名称。</param>
      <param name="args">该方法的参数数组，用于在重载方法之间进行选择。</param>
      <param name="returnType">为该方法返回的类型。</param>
      <returns>一个表示该方法的 <see cref="T:System.Reflection.MethodInfo" />；如果找不到该方法，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>带一个仅搜索公共方法的选项，通过反射查找给定的方法。</summary>
      <param name="componentClass">包含该方法的组件。</param>
      <param name="name">要查找的方法的名称。</param>
      <param name="args">该方法的参数数组，用于在重载方法之间进行选择。</param>
      <param name="returnType">为该方法返回的类型。</param>
      <param name="publicOnly">是否限制搜索公共方法。</param>
      <returns>一个表示该方法的 <see cref="T:System.Reflection.MethodInfo" />；如果找不到该方法，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.MemberDescriptor" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>检索应在成员调用期间使用的对象。</summary>
      <param name="type">调用目标的 <see cref="T:System.Type" />。</param>
      <param name="instance">潜在的调用目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="instance" /> 为 <see langword="null" />。</exception>
      <returns>成员调用期间使用的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>获取在其上调用方法的组件。</summary>
      <param name="componentClass">一个 <see cref="T:System.Type" />，表示该 <see cref="T:System.ComponentModel.MemberDescriptor" /> 要绑定到的组件的类型。 例如，如果此 <see cref="T:System.ComponentModel.MemberDescriptor" /> 描述一个属性，则该参数应该是在其上声明属性的类。</param>
      <param name="component">要调用的对象的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentClass" /> 或 <paramref name="component" /> 为 <see langword="null" />。</exception>
      <returns>要调用的组件的实例。 当属性附加到可视化设计器时，此方法返回一个可视化设计器。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>获取给定组件的组件位置。</summary>
      <param name="component">要查找其位置的组件。</param>
      <returns>该组件的位置，或者如果位置不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>获取或设置属性的数组。</summary>
      <returns>包含成员特性的类型 <see cref="T:System.Attribute" /> 的数组。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>获取该成员的特性集合。</summary>
      <returns>一个提供此成员的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />；如果 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 中没有特性，则为空集合。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>获取该成员所属的类别的名称，如 <see cref="T:System.ComponentModel.CategoryAttribute" /> 中所指定的。</summary>
      <returns>该成员所属的类别的名称。 如果没有 <see cref="T:System.ComponentModel.CategoryAttribute" />，类别名将被设置为默认类别 <see langword="Misc" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>获取成员的说明，如 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 中所指定的。</summary>
      <returns>成员的说明。 如果没有 <see cref="T:System.ComponentModel.DescriptionAttribute" />，属性值被设置为默认值，它是一个空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>获取是否只能在设计时设置该成员，如 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 中所指定的。</summary>
      <returns>如果只能在设计时设置该成员，则为 <see langword="true" />；如果可以在运行时设置该成员，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>获取可以显示在窗口（如“属性”窗口）中的名称。</summary>
      <returns>为该成员显示的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>获取一个指示该成员是否可浏览的值，如 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 中所指定的。</summary>
      <returns>如果成员可以浏览，则为 <see langword="true" />；否则为 <see langword="false" />。 如果没有 <see cref="T:System.ComponentModel.BrowsableAttribute" />，则将属性值设置为默认值 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>获取此成员的名称。</summary>
      <returns>成员名。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>获取此成员名称的哈希代码，如 <see cref="M:System.String.GetHashCode" /> 中所指定的。</summary>
      <returns>该成员名称的哈希代码。</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>提供用于将多行字符串转换成单行字符串的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.MultilineStringConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将给定值对象转换为指定的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 <see langword="null" />，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值参数转换为的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的上下文和特性返回由 <paramref name="value" /> 参数指定的数组类型的属性的集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。</param>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>通过使用指定的上下文，返回此对象是否支持属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果应调用 <see langword="true" /> 来查找此对象的属性，则为 <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary>提供 <see cref="T:System.ComponentModel.INestedContainer" /> 接口的基实现，该接口使容器可以拥有一个所属组件。</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary>初始化 <see cref="T:System.ComponentModel.NestedContainer" /> 类的新实例。</summary>
      <param name="owner">拥有此嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>为容器中的组件创建站点。</summary>
      <param name="component">要为其创建站点的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name">要分配给 <paramref name="component" /> 的名称，或者为 <see langword="null" /> 以跳过名称分配。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <returns>新创建的 <see cref="T:System.ComponentModel.ISite" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary>释放由嵌套容器使用的资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary>获取指定类型的服务对象（如果可用）。</summary>
      <param name="service">要检索的服务的 <see cref="T:System.Type" />。</param>
      <returns>实现所请求服务的 <see cref="T:System.Object" />，或者，如果无法解析服务，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary>获取此嵌套容器的所属组件。</summary>
      <returns>拥有此嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary>获取所属组件的名称。</summary>
      <returns>所属组件的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>提供可以为 null 的类型与其基础基元类型之间的自动转换。</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.NullableConverter" /> 类的新实例。</summary>
      <param name="type">指定的可以为 null 的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是可以为 null 的类型。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回该转换器是否可以使用指定上下文将给定类型的对象转换为此转换器的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器能否使用指定上下文将对象转换为指定类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示你希望转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将给定值对象转换为指定的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值参数转换为的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>给定该对象的一组属性值，使用指定上下文创建与此 <see cref="T:System.ComponentModel.TypeConverter" /> 相关联的类型的实例。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="propertyValues">新属性值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>如果表示给定 <see cref="T:System.Collections.IDictionary" />，则为 <see cref="T:System.Object" />，或如果无法创建对象，则为 <see langword="null" />。 此方法始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>返回一个结果，即更改此对象上的某个值是否需要调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 以使用指定的上下文创建新值。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果更改此对象上的某属性需要调用 <see langword="true" /> 以创建新值，则为 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的上下文和特性返回由该值参数指定的数组类型的属性集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。</param>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>通过使用指定的上下文，返回此对象是否支持属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果应调用 <see langword="true" /> 来查找此对象的属性，则为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>当与格式上下文一起提供时，返回此类型转换器设计用于的数据类型的标准值集合。</summary>
      <param name="context">提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用来提取有关从中调用此转换器的环境的附加信息。 此参数或其属性可以为 <see langword="null" />。</param>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文返回从 <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为可能值的独占列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果从 <see langword="true" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文返回此对象是否支持可以从列表中选取的标准值集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果应调用 <see langword="true" /> 来查找对象支持的一组公共值，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回给定的值对象是否对此类型和对指定的上下文有效。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">要测试其有效性的 <see cref="T:System.Object" />。</param>
      <returns>如果指定的值对此对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>获取可以为 null 的类型。</summary>
      <returns>表示可以为 null 的类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>获取基础类型。</summary>
      <returns>表示基础类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>获取基础类型转换器。</summary>
      <returns>表示基础类型转换器的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary>指示对象的文本表示形式被星号等字符隐匿。 此类不能被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的默认值。</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary>指定文本属性并不作为密码使用。 此 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />）字段为只读字段。</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary>指定将文本属性作为密码使用。 此 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />）字段为只读字段。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 类的新实例，有选择地显示密码文本。</summary>
      <param name="password">若要指示属性应作为密码文本显示，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 实例是否相等。</summary>
      <param name="o">要与当前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。</param>
      <returns>如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />，则为 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary>返回此实例值是否为默认值的指示。</summary>
      <returns>如果此实例是该类的默认属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary>获取一个值，该值指示为其定义了 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的属性是否应作为密码文本显示。</summary>
      <returns>如果属性应作为密码文本显示，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>提供类的属性的抽象。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>使用指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 中的名称和特性初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它包含该属性的名称及其特性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>使用指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 中的名称以及同时出现在 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.ComponentModel.MemberDescriptor" /> 数组中的特性初始化 <see cref="T:System.Attribute" /> 类的新实例。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，包含成员的名称及其特性。</param>
      <param name="attrs">一个 <see cref="T:System.Attribute" /> 数组，包含要和该属性关联的特性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>使用指定的名称和特性来初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 类的新实例。</summary>
      <param name="name">属性的名称。</param>
      <param name="attrs">包含属性特性的类型 <see cref="T:System.Attribute" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>使其他对象在此属性更改时能得到通知。</summary>
      <param name="component">为其添加处理程序的组件。</param>
      <param name="handler">要作为侦听器添加的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="handler" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>当在派生类中被重写时，返回重置对象时是否更改其值。</summary>
      <param name="component">要测试重置功能的组件。</param>
      <returns>如果重置组件更改其值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>创建指定类型的实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示要创建的类型。</param>
      <returns>该类型的新实例。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>将此对象与另一个对象进行比较，看看它们是否相等。</summary>
      <param name="obj">与此 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 进行比较的对象。</param>
      <returns>如果值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的特性添加到父类中的指定特性列表中。</summary>
      <param name="attributeList">一个列出父类中特性的 <see cref="T:System.Collections.IList" />。 最初，它是空的。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>返回默认的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <returns>属性描述符的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>通过将指定的特性数组用作筛选器，返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="filter">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有与指定的特性匹配的属性。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>返回给定对象的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="instance">要为其获取属性的组件。</param>
      <returns>具有指定组件的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>通过将指定的特性数组用作筛选器，返回给定对象的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="instance">要为其获取属性的组件。</param>
      <param name="filter">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <returns>具有与指定组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>获取指定类型的编辑器。</summary>
      <param name="editorBaseType">编辑器的基类型，用于区分属性所支持的多个编辑器。</param>
      <returns>请求的编辑器类型的实例，或者，如果未能找到编辑器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary>返回此对象的哈希代码。</summary>
      <returns>此对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>此方法返回应在成员调用期间使用的对象。</summary>
      <param name="type">调用目标的 <see cref="T:System.Type" />。</param>
      <param name="instance">潜在的调用目标。</param>
      <returns>应在成员调用期间使用的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>返回使用其名称的类型。</summary>
      <param name="typeName">要检索的类型的程序集限定名称。</param>
      <returns>与给定类型名称匹配的 <see cref="T:System.Type" />，或者，如果未能找到匹配，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>当在派生类中被重写时，获取组件上的属性的当前值。</summary>
      <param name="component">具有为其检索值的属性的组件。</param>
      <returns>给定组件的属性的值。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary>检索特定组件的 <c>ValueChanged</c> 事件处理程序的当前集合。</summary>
      <param name="component">要为其检索事件处理程序的组件。</param>
      <returns>一个组合多路广播事件处理程序，如果当前没有为 <paramref name="component" /> 分配的事件处理程序，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>引发已实现的 <c>ValueChanged</c> 事件。</summary>
      <param name="component">引发事件的对象。</param>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>使其他对象在此属性更改时能得到通知。</summary>
      <param name="component">要移除其处理程序的组件。</param>
      <param name="handler">要作为侦听器移除的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="handler" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>当在派生类中被重写时，将组件的此属性的值重置为默认值。</summary>
      <param name="component">具有要重置为默认值的属性值的组件。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>当在派生类中被重写时，将组件的值设置为一个不同的值。</summary>
      <param name="component">具有要进行设置的属性值的组件。</param>
      <param name="value">新值。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>当在派生类中被重写时，确定一个值，该值指示是否需要永久保存此属性的值。</summary>
      <param name="component">具有要检查其持久性的属性的组件。</param>
      <returns>如果属性应该被永久保存，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>当在派生类中被重写时，获取该属性绑定到的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示该属性绑定到的组件的类型。 当调用 <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> 或 <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> 方法时，指定的对象可以是此类型的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>获取该属性的类型转换器。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter" />，用于转换该属性的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>获取指示是否应该本地化该属性的值，如 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 中所指定的值。</summary>
      <returns>如果在标记成员时将 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 设置为 <see langword="true" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>当在派生类中被重写时，获取指示该属性是否为只读的值。</summary>
      <returns>如果该属性只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>当在派生类中被重写时，获取该属性的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示属性的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>获取指示是否应该序列化该属性的值，如 <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> 中所指定的值。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 枚举值之一，指定是否应该序列化该属性。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary>获取一个值，该值指示此属性的值更改通知是否源自属性说明符的外部。</summary>
      <returns>如果值更改通知可能源自属性说明符的外部，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>表示 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象集合。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>指定一个可以使用的空集合，而不是创建一个不带任何项的新集合。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 类的新实例。</summary>
      <param name="properties">提供该集合属性的类型 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 类的新实例，该类可以是只读类。</summary>
      <param name="properties">提供该集合属性的类型 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的数组。</param>
      <param name="readOnly">如果为 <see langword="true" />，则指定该集合无法修改。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>将指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到集合。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <returns>要添加到集合的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>从集合中删除所有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>返回集合是否包含给定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>如果该集合包含给定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>从指定的索引号开始，将整个集合复制到数组。</summary>
      <param name="array">要将集合元素复制到的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。</param>
      <param name="index">
        <paramref name="array" /> 参数的索引，复制从此位置开始。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>返回具有指定名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，使用布尔值指示是否忽略大小写。</summary>
      <param name="name">要从集合中返回的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的名称。</param>
      <param name="ignoreCase">如果要忽略属性名称的大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>具有指定名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，或者如果该属性不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>返回该类的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>返回给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</summary>
      <param name="value">要返回其索引的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到集合中指定的索引号位置。</summary>
      <param name="index">向集合中其所在位置添加 <paramref name="value" /> 参数的索引。</param>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 对此集合中的成员排序。</summary>
      <param name="sorter">用来将此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象排序的比较器。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>对此集合中的成员排序。 首先应用指定的顺序，然后应用此集合的默认排序，后者通常为字母顺序。</summary>
      <param name="names">字符串的数组，描述此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的排序顺序。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>从集合中移除指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>从集合中的指定索引处删除 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="index">要从集合中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>使用该集合的默认排序（通常为字母顺序）对集合中的成员进行排序。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它包含排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 对此集合中的成员排序。</summary>
      <param name="comparer">用来将此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象排序的比较器。</param>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它包含排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>对此集合中的成员排序。 首先应用指定的顺序，然后应用此集合的默认排序，后者通常为字母顺序。</summary>
      <param name="names">字符串的数组，描述此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的排序顺序。</param>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它包含排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>对此集合中的成员排序。 首先应用指定的顺序，然后使用指定的 <see cref="T:System.Collections.IComparer" /> 进行排序。</summary>
      <param name="names">字符串的数组，描述此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的排序顺序。</param>
      <param name="comparer">用来将此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象排序的比较器。</param>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它包含排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>向 <see cref="T:System.Collections.IDictionary" /> 添加一个带有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <param name="value">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定是否 <see cref="T:System.Collections.IDictionary" /> 包含带有指定键的元素。</summary>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。</param>
      <returns>如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary>返回该类的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 的一个 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要添加到集合的项。</param>
      <returns>新元素的插入位置。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定集合中是否包含特定值。</summary>
      <param name="value">要在集合中定位的项。</param>
      <returns>如果在集合中找到该项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集合中指定项的索引。</summary>
      <param name="value">要在集合中定位的项。</param>
      <returns>如果在列表中找到了，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将某个项插入到集合中的指定索引处。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到集合中的项。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除指定的值的第一个匹配项。</summary>
      <param name="value">要从集合中移除的项。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>删除指定索引处的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>获取集合中属性说明符的数目。</summary>
      <returns>集合中属性说明符的数目。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="index">要获取或设置的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 参数不是 <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" /> 的有效索引。</exception>
      <returns>具有指定索引号的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>获取或设置具有指定名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="name">要从集合中获取的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，或者如果该属性不存在，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>如果对集合的访问是同步的（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。</summary>
      <returns>如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="key">要获取或设置的元素的键。</param>
      <returns>带有指定键的元素。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary>获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的键。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>如果该集合具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的集合中的项。</summary>
      <param name="index">要获取或设置的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0。  
  
- 或 - 
 <paramref name="index" /> 等于或大于 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。</exception>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>标识要为指定的类显示的属性选项卡。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>使用指定的选项卡类名称初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
      <param name="tabClassName">要创建的选项卡类型的程序集限定名。 有关这种格式约定的示例，请参见 <see cref="P:System.Type.AssemblyQualifiedName" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>使用指定的选项卡类名和选项卡范围初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
      <param name="tabClassName">要创建的选项卡类型的程序集限定名。 有关这种格式约定的示例，请参见 <see cref="P:System.Type.AssemblyQualifiedName" />。</param>
      <param name="tabScope">
        <see cref="T:System.ComponentModel.PropertyTabScope" />指示此选项卡的范围的。如果范围为 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> ，则仅为具有相应的组件显示它 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 。 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，则将为该文档的所有组件显示它。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>使用指定的选项卡类型初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
      <param name="tabClass">要创建的选项卡的类型。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>使用指定的选项卡类型和选项卡范围初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
      <param name="tabClass">要创建的选项卡的类型。</param>
      <param name="tabScope">
        <see cref="T:System.ComponentModel.PropertyTabScope" />指示此选项卡的范围的。如果范围为 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> ，则仅为具有相应的组件显示它 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 。 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，则将为该文档的所有组件显示它。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary>返回一个值，该值指示此实例是否与指定的特性相等。</summary>
      <param name="other">要与此实例进行比较的 <see cref="T:System.ComponentModel.PropertyTabAttribute" />，或 <see langword="null" />。</param>
      <exception cref="T:System.TypeLoadException">找不到 <paramref name="other" /> 参数的 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性指定的类型。</exception>
      <returns>如果 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 实例相等，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="other">要与此示例比较的对象，或 <see langword="null" />。</param>
      <exception cref="T:System.TypeLoadException">未能找到 <paramref name="other" /> 参数的 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性指定的类型。</exception>
      <returns>如果 <paramref name="other" /> 引用相同的 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 实例，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary>获取此对象的哈希代码。</summary>
      <returns>该特性所属对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>使用指定的选项卡类名称和选项卡范围数组初始化该特性。</summary>
      <param name="tabClassNames">类型的完全限定类型名的数组，这些类型是为“属性”窗口上的选项卡创建的。</param>
      <param name="tabScopes">每个选项卡的范围。如果范围为 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> ，则仅为具有相应的组件显示它 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 。 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，则将为该文档的所有组件显示它。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScopes" /> 中的一个或多个值不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。  
  
- 或 - 
<paramref name="tabClassNames" /> 的长度和 <paramref name="tabScopes" /> 数组的长度不匹配。  
  
- 或 - 
 <paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>使用指定的选项卡类名称和选项卡范围数组初始化该特性。</summary>
      <param name="tabClasses">要创建的选项卡的类型。</param>
      <param name="tabScopes">每个选项卡的范围。如果范围为 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> ，则仅为具有相应的组件显示它 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 。 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，则将为该文档的所有组件显示它。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScopes" /> 中的一个或多个值不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。  
  
- 或 - 
<paramref name="tabClassNames" /> 的长度和 <paramref name="tabScopes" /> 数组的长度不匹配。  
  
- 或 - 
 <paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>获取此特性使用的选项卡的类型。</summary>
      <exception cref="T:System.TypeLoadException">未能找到 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性指定的类型。</exception>
      <returns>指示此特性使用的选项卡类型的类型数组。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>获取此特性使用的选项卡类的名称。</summary>
      <returns>此特性使用的选项卡类的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>获取该 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 的每个选项卡的选项卡范围数组。</summary>
      <returns>指示选项卡范围的 <see cref="T:System.ComponentModel.PropertyTabScope" /> 对象的数组。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>定义指示“属性”窗口中选项卡的持续范围的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>此选项卡是当前组件专用的。 此选项卡只被添加到当前组件的“属性”窗口中，当不再选定该组件时，此选项卡被移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>此选项卡是当前文档专用的。 此选项卡被添加到“属性”窗口中，在当前选定文档更改时，此选项卡被移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>此选项卡被添加到“属性”窗口中，并且只能由父组件将其显式移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>此选项卡被添加到“属性”窗口中，并且不能被移除。</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>指定 <see cref="T:System.ComponentModel.IExtenderProvider" /> 的实施者提供给其他组件的属性的名称。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>用该属性的名称和它的接收器类型初始化 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 类的新实例。</summary>
      <param name="propertyName">扩展到指定类型对象的属性名称。</param>
      <param name="receiverTypeName">此属性可以扩展的数据类型的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>用该属性的名称和它的 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 初始化 <see cref="T:System.Type" /> 类的新实例。</summary>
      <param name="propertyName">扩展到指定类型对象的属性名称。</param>
      <param name="receiverType">可以接收此属性的对象的数据类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />。</summary>
      <param name="obj">要进行值的相等性测试的对象。</param>
      <returns>如果给定对象的值等于当前对象的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>获取该类提供的属性的名称。</summary>
      <returns>该类提供的属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>获取此属性可以扩展的数据类型的名称。</summary>
      <returns>此属性可以扩展的数据类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary>获取此特性的唯一标识符。</summary>
      <returns>一个表示该属性的唯一标识符的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>指定该属性可以用作应用程序设置。</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 的默认值，即 <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>指定属性不能用作应用程序设置。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>指定属性能用作应用程序设置。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 类的新实例。</summary>
      <param name="recommendedAsConfigurable">如果该特性所绑定到的属性可以作为应用程序设置使用，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <param name="obj">要比较的另一个对象。</param>
      <returns>如果 <see langword="true" /> 与此实例相等，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary>指示此实例的值是否为该类的默认值。</summary>
      <returns>如果此实例是该类的默认属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>获取一个值，该值指示该特性绑定到的属性是否可用作应用程序设置。</summary>
      <returns>如果该特性所绑定到的属性可以作为应用程序设置使用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>提供将对象引用与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.ReferenceConverter" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.Type" />，它表示与此引用转换器关联的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为引用对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns>如果此对象可以执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定对象转换为引用类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，它指定用于表示该字体的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定上下文和参数将给定值对象转换为引用类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，它指定用于表示该字体的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>被转换的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取引用数据类型的标准值的集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示从 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 返回的标准值的列表是否为独占列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>返回 <see langword="true" />，因为从 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 返回的 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能的值的穷举列表。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可从列表中选取的标准值集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>返回 <see langword="true" />，因为可调用 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 来查找对象支持的一组公共值。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回一个值，该值指示某个特定值是否可以添加到标准值集合中。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供附加上下文。</param>
      <param name="value">要检查的值。</param>
      <returns>如果该值是允许值并可以添加到标准值集合中，则为 <see langword="true" />；如果该值不能添加到标准值集合中，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>用已更改的组件初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 类的新实例。</summary>
      <param name="componentChanged">已更改的组件。</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>用已更改的组件类型初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 类的新实例。</summary>
      <param name="typeChanged">已更改的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>获取已更改属性、事件或扩展程序的组件。</summary>
      <returns>已更改其属性、事件或扩展程序的组件；如果同一类型的所有组件都已更改，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>获取已更改属性或事件的 <see cref="T:System.Type" />。</summary>
      <returns>已更改属性或事件的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>表示处理当 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 或组件在设计时被更改时引发的 <see cref="T:System.Type" /> 事件的方法。</summary>
      <param name="e">包含被更改的组件或 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>指定在安装程序集时是否应调用 Visual Studio 自定义操作安装程序或 Installutil.exe （安装程序工具）。</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary>指定默认可见性，即 <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>指定在安装程序集时不应调用 Visual Studio 自定义操作安装程序或 Installutil.exe （安装程序工具）。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>指定在安装程序集时应调用 Visual Studio 自定义操作安装程序或 Installutil.exe （安装程序工具）。 此 <see langword="static" /> 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 类的新实例。</summary>
      <param name="runInstaller">如果在程序集安装过程中应调用某安装程序，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的值是否与当前的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 等效。</summary>
      <param name="obj">要比较的对象。</param>
      <returns>如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.RunInstallerAttribute" />，则为 <see cref="T:System.ComponentModel.RunInstallerAttribute" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary>生成当前 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary>确定此特性是否为默认特性。</summary>
      <returns>如果此特性是此特性类的默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>获取一个值，该值指示在程序集安装期间是否调用某安装程序。</summary>
      <returns>如果在程序集安装过程中应调用某安装程序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>提供用于在 8 位无符号整数对象与字符串之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.SByteConverter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary>指定何时可将组件属性绑定到应用程序设置。</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary>指定不适合将属性绑定到设置。</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary>指定适合将属性绑定到设置。</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.SettingsBindableAttribute" /> 类的新实例。</summary>
      <param name="bindable">若要指定适合将属性绑定到设置，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此实例或 null 引用 （Visual Basic 中的 <see langword="Nothing" />）进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary>获取一个值，该值指示是否适合将属性绑定到设置。</summary>
      <returns>如果适合将属性绑定到设置，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>提供将单精度浮点数字对象与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.SingleConverter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>提供用于在字符串对象与其他表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.StringConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以使用指定的上下文将给定源类型中的对象转换为字符串。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定的值对象转换为 <see cref="T:System.String" /> 对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">要使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">转换未能执行。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary>提供方法来验证计算机名称和路径是否符合特定语法。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary>检查计算机名称的语法以确认它不包含“\”。</summary>
      <param name="value">一个字符串，包含要检查的计算机名称。</param>
      <returns>如果 <paramref name="value" /> 与正确的计算机名称格式匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary>检查路径的语法以查看它是否以“\\”开头。</summary>
      <param name="value">一个字符串，包含要检查的路径。</param>
      <returns>如果 <paramref name="value" /> 与正确的路径格式匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary>检查路径的语法以查看它是否以“\”或驱动器号“C:”开头。</summary>
      <param name="value">一个字符串，包含要检查的路径。</param>
      <returns>如果 <paramref name="value" /> 与正确的路径格式匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>提供将 <see cref="T:System.TimeSpan" /> 对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TimeSpanConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为 <see cref="T:System.TimeSpan" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定对象转换为 <see cref="T:System.TimeSpan" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定对象转换为其他类型。</summary>
      <param name="context">格式化程序上下文。</param>
      <param name="culture">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <returns>被转换的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>表示工具箱项的特性。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例并将类型设置为默认值 <see cref="T:System.Drawing.Design.ToolboxItem" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例并将类型设置为 <see langword="null" />。 此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例，并指定是否使用默认初始化值。</summary>
      <param name="defaultType">如果为 <see langword="true" />，则创建默认类型的工具箱项特性；如果为 <see langword="false" />，则不为该特性关联默认工具箱项支持。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>使用指定的类型名称初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例。</summary>
      <param name="toolboxItemTypeName">工具箱项的类型名称和包含该类型的程序集的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>使用工具箱项的指定类型初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例。</summary>
      <param name="toolboxItemType">工具箱项的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此实例或 null 引用 （Visual Basic 中的 <see langword="Nothing" />）进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该特性的当前值是否为该特性的默认值。</summary>
      <returns>如果该特性的当前值是默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>获取或设置工具箱项的类型。</summary>
      <exception cref="T:System.ArgumentException">找不到此类型。</exception>
      <returns>工具箱项的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>获取或设置当前 <see cref="T:System.Drawing.Design.ToolboxItem" /> 的类型名称。</summary>
      <returns>当前工具箱项的完全限定类型名称。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>为工具箱项指定要使用的筛选器字符串和筛选器类型。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>使用指定的筛选器字符串初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 类的新实例。</summary>
      <param name="filterString">工具箱项的筛选器字符串。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>使用指定的筛选器字符串和类型初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 类的新实例。</summary>
      <param name="filterString">工具箱项的筛选器字符串。</param>
      <param name="filterType">
        <see cref="T:System.ComponentModel.ToolboxItemFilterType" />，它指示筛选器的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此实例或 null 引用 （Visual Basic 中的 <see langword="Nothing" />）进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>指示指定对象是否有匹配的筛选器字符串。</summary>
      <param name="obj">针对其是否有匹配的筛选器字符串来进行测试的对象。</param>
      <returns>如果指定对象有匹配的筛选器字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>获取工具箱项的筛选器字符串。</summary>
      <returns>工具箱项的筛选器字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>获取筛选器的类型。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ToolboxItemFilterType" />，它指示筛选器的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>获取特性的类型 ID。</summary>
      <returns>此特性的类型 ID。 所有带有相同 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 筛选器字符串的对象都返回相同的类型 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>定义用于指示 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 使用的筛选器类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>指示某个工具箱项筛选器字符串是允许的，但不是必需的。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>指示需要自定义处理来确定是否使用工具箱项筛选器字符串。 它通常在根设计器类上指定，用于指示设计器希望通过代码接受或拒绝工具箱项。 设计器必须实现 <see cref="T:System.Drawing.Design.IToolboxUser" /> 接口的 <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>指示某个工具箱项筛选器字符串不被允许。 如果设计器和组件类都具有筛选器字符串，并且其中一个的值为 <c>ToolboxItemFilterType.Prevent</c>，则工具箱项将不可用。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>指示若要启用工具箱项，必须存在工具箱项筛选器字符串。  若要启用筛选器类型为 <c>Require</c> 的工具箱项，设计器和组件类都必须具有匹配的筛选字符串。 此外，若要启用工具箱项，设计器或组件类都不能具有 <c>Prevent</c> 筛选器类型。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>提供一种将值的类型转换为其他类型以及访问标准值和子属性的统一方法。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回该转换器是否可以使用指定上下文将给定类型的对象转换为此转换器的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>返回该转换器是否可以将给定类型的对象转换为此转换器的类型。</summary>
      <param name="sourceType">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器能否使用指定上下文将对象转换为指定类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示你希望转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>返回此转换器是否可将该对象转换为指定的类型。</summary>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示你希望转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>将给定值转换为此转换器的类型。</summary>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>使用不变区域性和指定上下文将给定字符串转换为此转换器的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="text">要转换的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>使用不变区域性将给定字符串转换为此转换器的类型。</summary>
      <param name="text">要转换的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>使用指定的上下文和区域性信息将给定的文本转换为对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 <see langword="null" />，则采用当前区域性。</param>
      <param name="text">要转换的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>使用指定的上下文将给定的文本转换为对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="text">要转换的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>将指定文本转换为对象。</summary>
      <param name="text">要转换的对象的文本表示形式。</param>
      <exception cref="T:System.NotSupportedException">该字符串不能转换为适当的对象。</exception>
      <returns>一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将给定值对象转换为指定的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 <see langword="null" />，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <paramref name="value" /> 参数要转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>使用参数将给定的值对象转换为指定的类型。</summary>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <paramref name="value" /> 参数要转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>使用指定的上下文将指定的值转换为区域性不变的字符串表示形式。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>
        <see cref="T:System.String" />，表示已转换的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>将指定值转换为区域性不变的字符串表示形式。</summary>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>
        <see cref="T:System.String" />，表示已转换的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将给定的值转换为字符串表示形式。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 <see langword="null" />，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>使用给定的上下文将给定的值转换为字符串表示形式。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>将指定值转换为字符串表示形式。</summary>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>在给定 <see cref="T:System.Object" /> 的一组属性值的情况下重新创建该对象。</summary>
      <param name="propertyValues">一个 <see cref="T:System.Collections.IDictionary" />，表示新属性值的字典。</param>
      <returns>如果表示给定 <see cref="T:System.Collections.IDictionary" />，则为 <see cref="T:System.Object" />，或如果无法创建对象，则为 <see langword="null" />。 此方法始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>给定该对象的一组属性值，使用指定上下文创建与此 <see cref="T:System.ComponentModel.TypeConverter" /> 相关联的类型的实例。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="propertyValues">新属性值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>如果表示给定 <see cref="T:System.Collections.IDictionary" />，则为 <see cref="T:System.Object" />，或如果无法创建对象，则为 <see langword="null" />。 此方法始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>返回当转换无法执行时所引发的异常。</summary>
      <param name="value">要转换的 <see cref="T:System.Object" />，或者，如果该对象不可用，则为 <see langword="null" />。</param>
      <exception cref="T:System.NotSupportedException">由此方法自动引发。</exception>
      <returns>一个 <see cref="T:System.Exception" />，表示当无法执行转换时引发的异常。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>返回当转换无法执行时所引发的异常。</summary>
      <param name="value">要转换的 <see cref="T:System.Object" />，或者，如果该对象不可用，则为 <see langword="null" />。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示转换尝试转换到的类型。</param>
      <exception cref="T:System.NotSupportedException">由此方法自动引发。</exception>
      <returns>一个 <see cref="T:System.Exception" />，表示当无法执行转换时引发的异常。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>返回更改此对象的值是否求调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 方法来创建新值。</summary>
      <returns>如果更改此对象上的某属性需要调用 <see langword="true" /> 以创建新值，则为 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>返回一个结果，即更改此对象上的某个值是否需要调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 以使用指定的上下文创建新值。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果更改此对象上的某属性需要调用 <see langword="true" /> 以创建新值，则为 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>使用指定的上下文返回值参数指定的数组类型的属性的集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。</param>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的上下文和特性返回由该值参数指定的数组类型的属性集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。</param>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>返回由值参数指定的数组类型的属性集合。</summary>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。</param>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>返回此对象是否支持属性。</summary>
      <returns>如果应调用 <see langword="true" /> 来查找此对象的属性，则为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>通过使用指定的上下文，返回此对象是否支持属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果应调用 <see langword="true" /> 来查找此对象的属性，则为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>从默认的上下文返回此类型转换器设计用于的数据类型的标准值集合。</summary>
      <returns>含有一组标准的有效值的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果数据类型不支持一组标准值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>当与格式上下文一起提供时，返回此类型转换器设计用于的数据类型的标准值集合。</summary>
      <param name="context">提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用来提取有关从中调用此转换器的环境的附加信息。 此参数或其属性可以为 <see langword="null" />。</param>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>返回从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为独占列表。</summary>
      <returns>如果从 <see langword="true" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文返回从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为可能值的独占列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果从 <see langword="true" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>返回此对象是否支持可以从列表中选取的标准值集。</summary>
      <returns>如果应调用 <see langword="true" /> 来查找对象支持的一组公共值，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文返回此对象是否支持可以从列表中选取的标准值集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果应调用 <see langword="true" /> 来查找对象支持的一组公共值，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回给定的值对象是否对此类型和对指定的上下文有效。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">要测试其有效性的 <see cref="T:System.Object" />。</param>
      <returns>如果指定的值对此对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>返回给定值对象对于此类型是否有效。</summary>
      <param name="value">要测试其有效性的对象。</param>
      <returns>如果指定的值对此对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>对属性的集合进行排序。</summary>
      <param name="props">具有要排序的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</param>
      <param name="names">按您要属性在集合中出现的顺序排列的名称的数组。</param>
      <returns>包含已排序属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>表示一个 <see langword="abstract" /> 类，该类为没有属性的对象提供属性。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 类的新实例。</summary>
      <param name="componentType">一个 <see cref="T:System.Type" />，表示此属性说明符绑定到的组件的类型。</param>
      <param name="name">属性的名称。</param>
      <param name="propertyType">一个 <see cref="T:System.Type" />，表示此属性的数据类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 类的新实例。</summary>
      <param name="componentType">一个 <see cref="T:System.Type" />，表示此属性说明符绑定到的组件的类型。</param>
      <param name="name">属性的名称。</param>
      <param name="propertyType">一个 <see cref="T:System.Type" />，表示此属性的数据类型。</param>
      <param name="attributes">一个 <see cref="T:System.Attribute" /> 数组，具有要与该属性关联的特性。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>返回重置组件是否会更改该组件的值。</summary>
      <param name="component">要测试重置功能的组件。</param>
      <returns>如果重置组件更改该组件的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>重置组件的此属性的值。</summary>
      <param name="component">具有要重置的属性值的组件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>返回此属性的值是否可以持续。</summary>
      <param name="component">具有要检查持久性的属性的组件。</param>
      <returns>如果属性的值可以持续，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>获取该属性说明符绑定到的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示此属性绑定到的组件的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>获取指示该属性是否为只读的值。</summary>
      <returns>如果该属性为只读，则为 <see langword="true" />；如果该属性为读/写，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>获取属性的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示属性的类型。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary>表示值的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 类的新实例。</summary>
      <param name="values">一个 <see cref="T:System.Collections.ICollection" />，表示要放入集合的对象。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>将该集合的内容复制到数组。</summary>
      <param name="array">一个 <see cref="T:System.Array" />，表示要复制到的数组。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>返回该集合的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>获取集合中的对象数。</summary>
      <returns>集合中 对象的数目。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>获取指定索引号位置的对象。</summary>
      <param name="index">要从集合中获取的 <see cref="T:System.Object" /> 的从零开始的索引。</param>
      <returns>具有指定索引的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>在所有情况下均为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>在所有情况下均为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary>向 <see cref="T:System.ComponentModel.TypeDescriptor" /> 提供补充元数据。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary>使用父类型说明提供程序初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类的新实例。</summary>
      <param name="parent">父类型说明提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>创建可替换为另一种数据类型的对象。</summary>
      <param name="provider">可选的服务提供程序。</param>
      <param name="objectType">要创建的对象的类型。 此参数决不能为 <see langword="null" />。</param>
      <param name="argTypes">可选的类型数组，其中的类型表示要传递给对象的构造函数的参数类型。 此数组可为 <see langword="null" /> 或长度为零。</param>
      <param name="args">要传递给对象的构造函数的可选参数值数组。</param>
      <returns>替代用 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary>获取每个对象均对应有的缓存，此缓存可作为键/值对的 <see cref="T:System.Collections.IDictionary" /> 进行访问。</summary>
      <param name="instance">要获取与其对应的缓存的对象。</param>
      <returns>如果提供的对象支持缓存，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>为给定的对象获取扩展的自定义类型说明符。</summary>
      <param name="instance">要为其获取扩展类型说明符的对象。</param>
      <returns>可以为对象提供扩展元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary>获取指定对象的扩展程序提供程序。</summary>
      <param name="instance">要为其获取扩展程序提供程序的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
      <returns>
        <paramref name="instance" /> 的扩展程序提供程序的数组。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary>获取指定的组件的名称，如果指定的组件没有名称，则为 <see langword="null" />。</summary>
      <param name="component">指定的组件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <returns>指定组件的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary>针对给定对象执行正常反射。</summary>
      <param name="instance">类型的实例（不应为 <see langword="null" />）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
      <returns>此 <paramref name="instance" /> 的反射的类型。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary>针对某个类型执行正常反射。</summary>
      <param name="objectType">要为其检索 <see cref="T:System.Reflection.IReflect" /> 的对象的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> 为 <see langword="null" />。</exception>
      <returns>此 <paramref name="objectType" /> 的反射的类型。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary>针对具有给定类型的给定对象执行正常反射。</summary>
      <param name="objectType">要为其检索 <see cref="T:System.Reflection.IReflect" /> 的对象的类型。</param>
      <param name="instance">该类型的实例。 可以为 <see langword="null" />。</param>
      <returns>此 <paramref name="objectType" /> 的反射的类型。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary>将反射类型转换为运行时类型。</summary>
      <param name="reflectionType">要转换为其运行时等效项的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reflectionType" /> 为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Type" />，表示 <paramref name="reflectionType" /> 的运行时等效项。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary>获取给定对象的自定义类型说明符。</summary>
      <param name="instance">该类型的实例。 如果没有向 <see cref="T:System.ComponentModel.TypeDescriptor" /> 传递任何实例，则可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
      <returns>可以为该类型提供元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary>获取给定类型的自定义类型说明符。</summary>
      <param name="objectType">要为其检索类型说明符的对象的类型。</param>
      <returns>可以为该类型提供元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>获取给定类型和对象的自定义类型说明符。</summary>
      <param name="objectType">要为其检索类型说明符的对象的类型。</param>
      <param name="instance">该类型的实例。 如果没有向 <see cref="T:System.ComponentModel.TypeDescriptor" /> 传递任何实例，则可以是 <see langword="null" />。</param>
      <returns>可以为该类型提供元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary>获取一个值，该值指示指定的类型是否与类型说明及其类型说明提供程序链兼容。</summary>
      <param name="type">要测试兼容性的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <returns>如果 <paramref name="type" /> 与类型说明及其类型说明提供程序链兼容，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>提供有关组件特征的信息，如组件的特性、属性和事件。 此类不能被继承。</summary>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>清除了组件的缓存时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary>向目标组件实例添加类级别属性。</summary>
      <param name="instance">目标组件的实例。</param>
      <param name="attributes">要添加到组件的类的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
      <returns>用于添加指定属性的新创建的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary>向目标组件类型添加类级别属性。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="attributes">要添加到组件的类的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
      <returns>用于添加指定属性的新创建的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary>为给定的编辑器基类型添加编辑器表。</summary>
      <param name="editorBaseType">要添加编辑器表的编辑器基类型。 如果针对此类型的表已存在，此方法将不起作用。</param>
      <param name="table">要添加的 <see cref="T:System.Collections.Hashtable" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>为某个组件的单个实例添加类型描述提供程序。</summary>
      <param name="provider">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>为组件类添加类型说明提供程序。</summary>
      <param name="provider">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>为某个组件的单个实例添加类型描述提供程序。</summary>
      <param name="provider">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>为组件类添加类型说明提供程序。</summary>
      <param name="provider">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary>在两个对象之间创建主要和辅助关联。</summary>
      <param name="primary">主要 <see cref="T:System.Object" />。</param>
      <param name="secondary">辅助 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="primary" /> 等于 <paramref name="secondary" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>创建与指定组件关联的具有特定类型的设计器的实例。</summary>
      <param name="component">指定要与设计器关联的组件的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="designerBaseType">表示要创建的设计器的类型的 <see cref="T:System.Type" />。</param>
      <returns>如果找到组件的设计器实例，则为 <see cref="T:System.ComponentModel.Design.IDesigner" />；如果未找到设计器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>当传递现有的 <see cref="T:System.ComponentModel.EventDescriptor" /> 时，创建和现有事件描述符相同的新的事件描述符。</summary>
      <param name="componentType">要为其创建新事件的组件类型。</param>
      <param name="oldEventDescriptor">现有事件信息。</param>
      <param name="attributes">新属性。</param>
      <returns>将指定元数据属性与现有元数据属性进行合并的新 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>通过从类型上的指定事件动态生成描述符信息，创建与现有事件描述符相同的新事件描述符。</summary>
      <param name="componentType">该事件依赖的组件的类型。</param>
      <param name="name">事件的名称。</param>
      <param name="type">处理该事件的委托的类型。</param>
      <param name="attributes">此事件的属性。</param>
      <returns>绑定到类型的 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>创建可替换为另一种数据类型的对象。</summary>
      <param name="provider">提供 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 服务的服务提供程序。 此参数可以为 <see langword="null" />。</param>
      <param name="objectType">要创建的对象的 <see cref="T:System.Type" />。</param>
      <param name="argTypes">要传递给对象的构造函数的可选参数类型数组。 此参数可以是 <see langword="null" /> 或长度为零的数组。</param>
      <param name="args">要传递给对象的构造函数的可选参数值数组。 如果不是 <see langword="null" />，元素数则必须与 <paramref name="argTypes" /> 相同。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> 是 <see langword="null" />，或者，当 <paramref name="argTypes" /> 不是 <see langword="null" /> 时，则 <paramref name="args" /> 是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argTypes" /> 和 <paramref name="args" /> 具有不同的元素数。</exception>
      <returns>如果找到关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />，则为替代数据类型的实例；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>使用指定的现有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和特性数组，从现有的属性描述符创建一个新的属性描述符。</summary>
      <param name="componentType">属性是其一个成员的组件的 <see cref="T:System.Type" />。</param>
      <param name="oldPropertyDescriptor">现有的属性描述符。</param>
      <param name="attributes">此属性的新特性。</param>
      <returns>一个将指定的元数据属性与现有的元数据属性进行合并的新 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>使用指定的属性名称、类型和属性数组创建属性描述符，并将其动态地绑定到类型。</summary>
      <param name="componentType">属性是其一个成员的组件的 <see cref="T:System.Type" />。</param>
      <param name="name">属性的名称。</param>
      <param name="type">属性的 <see cref="T:System.Type" />。</param>
      <param name="attributes">此属性的新特性。</param>
      <returns>绑定到指定类型并具有与现有元数据属性合并的指定元数据属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary>返回与指定的主要对象关联的类型的实例。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="primary">关联的主要对象。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
      <returns>如果存在关联，则为已与主要对象相关联的辅助类型的一个实例；否则，如果不存在指定的关联，为 <paramref name="primary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>返回指定组件的属性的集合。</summary>
      <param name="component">要为其获取特性的组件。</param>
      <returns>包含该组件的属性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果 <paramref name="component" /> 为 <see langword="null" />，则此方法返回一个空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>为指定组件返回特性集合，并且创建了一个指示自定义类型描述符的布尔值。</summary>
      <param name="component">要为其获取特性的组件。</param>
      <param name="noCustomTypeDesc">如果 <paramref name="component" /> 的类型是 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，使用自定义类型说明符中特性的基准要求集时为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>具有组件的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果组件为 <see langword="null" />，则此方法返回一个空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>返回指定组件类型的属性集合。</summary>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <returns>具有该组件类型的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果组件为 <see langword="null" />，则此方法返回一个空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>使用默认类型描述符，返回指定组件的类的名称。</summary>
      <param name="component">需要其类名的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <returns>一个包含指定组件的类的名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>使用自定义类型描述符返回指定组件的类的名称。</summary>
      <param name="component">需要其类名的 <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>一个包含指定组件的类的名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary>返回指定类型的类的名称。</summary>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> 为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.String" />，其中包含指定组件类型的类的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>使用默认类型描述符返回指定组件的名称。</summary>
      <param name="component">需要其类名的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>包含指定组件的名称的 <see cref="T:System.String" />，如果没有任何组件名，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>使用自定义类型描述符返回指定组件的名称。</summary>
      <param name="component">需要其类名的 <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>为指定组件的类名，或者，如果不存在任何组件名，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>返回指定组件类型的类型转换器。</summary>
      <param name="component">要为其获取转换器的组件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>指定组件的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>为具有自定义类型描述符的指定组件类型返回一个类型转换器。</summary>
      <param name="component">要为其获取转换器的组件。</param>
      <param name="noCustomTypeDesc">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>指定组件的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>返回指定类型的类型转换器。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <returns>指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>返回指定组件的默认事件。</summary>
      <param name="component">要获取其事件的组件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>如果有默认事件，则为 <see cref="T:System.ComponentModel.EventDescriptor" />，或者，如果没有任何事件，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>返回具有自定义类型描述符的组件的默认事件。</summary>
      <param name="component">要获取其事件的组件。</param>
      <param name="noCustomTypeDesc">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>如果有默认事件，则为 <see cref="T:System.ComponentModel.EventDescriptor" />，或者，如果没有任何事件，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>返回指定组件类型的默认事件。</summary>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> 为 <see langword="null" />。</exception>
      <returns>如果有默认事件，则为 <see cref="T:System.ComponentModel.EventDescriptor" />，或者，如果没有任何事件，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>返回指定组件的默认属性。</summary>
      <param name="component">要获取其默认属性的组件。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>使用自定义类型描述符返回指定组件的默认属性。</summary>
      <param name="component">要获取其默认属性的组件。</param>
      <param name="noCustomTypeDesc">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>返回指定类型组件的默认属性。</summary>
      <param name="componentType">表示要获取其属性的类的 <see cref="T:System.Type" />。</param>
      <returns>具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果没有属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>获取指定组件的具有指定基类型的编辑器。</summary>
      <param name="component">要为其获取编辑器的组件。</param>
      <param name="editorBaseType">表示要查找的编辑器的基类型的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>可转换为指定编辑器类型的编辑器的一个实例，如果找不到请求类型的编辑器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>为指定组件返回具有指定基类型和自定义类型描述符的编辑器。</summary>
      <param name="component">要为其获取编辑器的组件。</param>
      <param name="editorBaseType">表示要查找的编辑器的基类型的 <see cref="T:System.Type" />。</param>
      <param name="noCustomTypeDesc">表示是否应考虑自定义类型描述信息的标志。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>可转换为指定编辑器类型的编辑器的一个实例，如果找不到请求类型的编辑器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>返回具有指定基类型的指定类型的编辑器。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="editorBaseType">表示要查找的编辑器的基类型的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="editorBaseType" /> 为 <see langword="null" />。</exception>
      <returns>可转换为指定基类型的编辑器对象的一个实例，如果找不到请求类型的编辑器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>返回指定组件的事件的集合。</summary>
      <param name="component">要为其获取事件的组件。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>通过将指定的属性数组用作筛选器来返回指定组件的事件集合。</summary>
      <param name="component">要为其获取事件的组件。</param>
      <param name="attributes">可以用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>具有匹配此组件指定属性的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>通过使用指定的属性数组作为筛选器，并使用自定义类型描述符来返回指定组件的事件集合。</summary>
      <param name="component">要为其获取事件的组件。</param>
      <param name="attributes">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <param name="noCustomTypeDesc">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>具有匹配此组件指定属性的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>对具有自定义类型描述符的指定组件，返回事件集合。</summary>
      <param name="component">要为其获取事件的组件。</param>
      <param name="noCustomTypeDesc">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>返回指定组件类型的事件的集合。</summary>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <returns>具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>通过将指定的属性数组用作筛选器来返回指定组件类型的事件的集合。</summary>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="attributes">可以用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <returns>具有匹配此组件指定属性的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary>返回组件的完全限定名。</summary>
      <param name="component">要为其查找名称的 <see cref="T:System.ComponentModel.Component" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 <see langword="null" />。</exception>
      <returns>如果组件没有名称，则为指定组件的完全限定名称，或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>返回指定组件的属性的集合。</summary>
      <param name="component">要为其获取属性的组件。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>具有指定组件的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>通过将指定的属性数组用作筛选器来返回指定组件的属性的集合。</summary>
      <param name="component">要为其获取属性的组件。</param>
      <param name="attributes">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>具有与指定组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>通过使用指定的属性数组作为筛选器，并使用自定义类型描述符来返回指定组件的属性集合。</summary>
      <param name="component">要为其获取属性的组件。</param>
      <param name="attributes">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <param name="noCustomTypeDesc">如果为 <see langword="true" />，则考虑自定义类型描述信息；否则为 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>具有与指定组件的指定属性相匹配的事件的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>使用默认类型描述符为指定组件返回属性集合。</summary>
      <param name="component">要为其获取属性的组件。</param>
      <param name="noCustomTypeDesc">若不考虑自定义类型描述信息时，为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
      <returns>具有指定组件的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>返回指定组件类型的属性的集合。</summary>
      <param name="componentType">一个 <see cref="T:System.Type" />，表示要为其获取属性的组件。</param>
      <returns>具有指定组件类型的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>通过将指定的属性数组用作筛选器来为指定类型的组件返回属性的集合。</summary>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="attributes">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <returns>具有与该类型组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary>返回指定组件的类型说明提供程序。</summary>
      <param name="instance">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
      <returns>一个与特定的组件关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary>返回指定类型的类型说明提供程序。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <returns>与指定类型关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary>如果给定对象，则返回可用于执行反射的 <see cref="T:System.Type" />。</summary>
      <param name="instance">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
      <returns>所指定对象的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary>如果给定类类型，则返回可用于执行反射的 <see cref="T:System.Type" />。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <returns>指定类的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>从缓存中清除指定组件的属性和事件。</summary>
      <param name="component">已更改属性或事件的组件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>从缓存中清除指定程序集的属性和事件。</summary>
      <param name="assembly">表示要刷新的程序集的 <see cref="T:System.Reflection.Assembly" />。 将刷新此程序集中的每个 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>从缓存中清除指定模块的属性和事件。</summary>
      <param name="module">表示要刷新的模块的 <see cref="T:System.Reflection.Module" />。 将刷新此模块中的每个 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>从缓存中清除指定类型的组件的属性和事件。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary>删除两个对象之间的关联。</summary>
      <param name="primary">主要 <see cref="T:System.Object" />。</param>
      <param name="secondary">辅助 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary>删除主要对象的所有关联。</summary>
      <param name="primary">关联中的主要 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primary" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>移除以前添加的与指定对象关联的类型说明提供程序。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>删除以前添加的与指定类型关联的类型说明提供程序。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>移除以前添加的与指定对象关联的类型说明提供程序。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>删除以前添加的与指定类型关联的类型说明提供程序。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>使用描述符的名称对描述符排序。</summary>
      <param name="infos">一个 <see cref="T:System.Collections.IList" />，其中包含要排序的描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="infos" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary>获取或设置用于目标组件的组件对象模型 (COM) 类型信息的提供程序。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> 实例，表示 COM 类型的信息提供程序实例。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary>获取由目标组件表示的组件对象模型 (COM) 对象的类型。</summary>
      <returns>由此组件表示的 COM 对象的 <see cref="T:System.Type" />，或非 COM 对象的 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary>获取一个类型，它表示所有接口类型的类型说明提供程序。</summary>
      <returns>一个 <see cref="T:System.Type" />，它表示所有接口类型的自定义类型说明提供程序。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>提供可用于在列表框中填充可用类型的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>将类型数组用作可用的类型来初始化 <see cref="T:System.ComponentModel.TypeListConverter" /> 类的新实例。</summary>
      <param name="types">用作可用类型的类型 <see cref="T:System.Type" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以使用给定上下文转换源对象的指定 <see cref="T:System.Type" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">源对象的 <see cref="T:System.Type" />。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定对象转换为转换器的本机类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，它指定用于表示该字体的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取此验证器设计用于的数据类型的标准值集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示从 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法返回的标准值的列表是否为独占列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>返回 <see langword="true" />，因为从 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 返回的 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能的值的穷举列表。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可使用指定上下文从列表中选取的标准值集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>返回 <see langword="true" />，因为应当调用 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 来查找对象支持的一组公共值。 此方法从不返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>提供用于在 16 位无符号整数对象与其他表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.UInt16Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>提供用于在 32 位无符号整数对象与其他各种表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.UInt32Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>提供将 64 位无符号整数对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.UInt64Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary>提供将 <see cref="T:System.Version" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.VersionConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可将给定源类型的对象转换为 <see cref="T:System.Version" />。</summary>
      <param name="context">提供上下文信息的对象。</param>
      <param name="sourceType">要转换的对象的类型。</param>
      <returns>如果此转换器可以将 sourceType 转换为 <see cref="T:System.Version" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context">提供上下文信息的对象。</param>
      <param name="destinationType">转换的目标类型。</param>
      <returns>如果转换器可将对象转换为给定目标类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定对象转换为 <see cref="T:System.Version" />。</summary>
      <param name="context">提供上下文信息的对象。</param>
      <param name="culture">用于转换的区域性。</param>
      <param name="value">要转换为 <see cref="T:System.Version" /> 的值。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的 <see cref="T:System.Version" /> 字符串。</exception>
      <returns>已转换为 <see cref="T:System.Version" /> 的 <paramref name="value" /> 值。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定上下文和参数将指定的值转换为指定目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">区域性，它提供转换的格式设置信息。</param>
      <param name="value">要转换的值。</param>
      <param name="destinationType">value 参数所要转换成的类型。</param>
      <returns>一个对象，表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回一个值，该值指示给定值对象对于此类型和此指定的上下文是否有效。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">要测试其有效性的对象。</param>
      <returns>如果指定的值对此对象有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>指定按警告（而不是错误）处理的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="info">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>使用指定消息（但不带帮助文件）初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="message">显示给最终用户的消息。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary>使用指定的详细说明和指定的异常初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="message">该错误的详细说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>使用指定消息和对指定帮助文件的访问权限初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="message">显示给最终用户的消息。</param>
      <param name="helpUrl">要在用户请求帮助时显示的帮助文件。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>使用指定消息和对指定帮助文件和主题的访问权限初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="message">显示给最终用户的消息。</param>
      <param name="helpUrl">要在用户请求帮助时显示的帮助文件。</param>
      <param name="helpTopic">要在用户请求帮助时显示的帮助主题。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用参数名和其他异常信息来设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">存储正用于序列化或反序列化正由 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> 序列化或反序列化的对象的数据。</param>
      <param name="context">描述生成该异常的流的源和目标，以及用于保留该上下文和附加的由调用方定义的上下文的序列化方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>获取与该警告关联的帮助主题。</summary>
      <returns>与该警告关联的帮助主题。</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>获取与该警告关联的帮助文件。</summary>
      <returns>与该警告关联的帮助文件。</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary>将颜色从一种数据类型转换为另一种数据类型。 通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 访问此类。</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.ColorConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定该转换器是否可以将给定源类型的对象转换为转换器的本机类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。 可使用此对象获取有关从中调用此转换器的环境的附加信息。</param>
      <param name="sourceType">要从其转换的类型。</param>
      <returns>如果此对象可以执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回指示该转换器能否使用上下文将对象转换为给定目标类型的值。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">表示要转换为的类型的<see cref="T:System.Type" />。</param>
      <returns>如果此转换器能够执行该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定对象转换为转换器的本机类型。</summary>
      <param name="context">一个提供格式上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。 可使用此对象获取有关从中调用此转换器的环境的附加信息。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" />，指定表示该颜色的区域性。</param>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentException">无法执行转换。</exception>
      <returns>表示已转换的值的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的对象转换为其他类型。</summary>
      <param name="context">格式化程序上下文。 使用此对象提取有关从中调用此转换器的环境的附加信息。 始终检查此值是否为 <see langword="null" />。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" />，指定表示该颜色的区域性。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationtype" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>表示已转换的值的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>检索一个集合，该集合包含适用于此验证程序的数据类型的标准值集。 如果该数据类型不支持标准值集，这将返回 <see langword="null" />。</summary>
      <param name="context">格式化程序上下文。 使用此对象提取有关从中调用此转换器的环境的附加信息。 始终检查此值是否为 <see langword="null" />。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <returns>包含 <see langword="null" /> 或标准有效值集的集合。 默认实现始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>确定该对象是否支持可以从列表中选取的标准值集。</summary>
      <param name="context">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns>如果必须调用 <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> 才能找到对象支持的一组公共值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary>将 <see cref="T:System.Drawing.Point" /> 对象从一种数据类型转换为另一种数据类型。</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.PointConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定该转换器是否可以将给定源类型的对象转换为转换器的本机类型。</summary>
      <param name="context">格式化程序上下文。 此对象可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="sourceType">要从其进行转换的类型。</param>
      <returns>如果此对象可以执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context">一个提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 对象，它表示您希望转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定对象转换为 <see cref="T:System.Drawing.Point" /> 对象。</summary>
      <param name="context">格式化程序上下文。 此对象可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture">包含区域性特定信息（如语言、日历和与特定区域性关联的区域性约定）的对象。 它基于 RFC 1766 标准。</param>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">无法完成转换。</exception>
      <returns>被转换的对象。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的对象转换成指定的类型。</summary>
      <param name="context">格式化程序上下文。 此对象可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture">包含区域性特定信息（如语言、日历和与特定区域性关联的区域性约定）的对象。 它基于 RFC 1766 标准。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.NotSupportedException">无法完成转换。</exception>
      <returns>被转换的对象。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>已知对象的属性值集，创建此类型的实例。</summary>
      <param name="context">可通过其提供附加上下文的类型说明符。</param>
      <param name="propertyValues">新属性值的字典。 该字典包括一系列名称-值对，每对对应一个从 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 返回的属性。</param>
      <returns>新创建的对象；如果未能创建该对象，则为 <see langword="null" />。 默认实现返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>确定更改此对象的值是否需要调用 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 以创建新值。</summary>
      <param name="context">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns>如果在更改此对象的一个或多个属性时应当调用 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>检索此类型的属性集。 默认情况下，类型不返回任何属性。</summary>
      <param name="context">可通过其提供附加上下文的类型说明符。</param>
      <param name="value">要获取其属性的对象的值。</param>
      <param name="attributes">描述属性的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <returns>为该数据类型公开的属性集。 如果未公开任何属性，则此方法可能返回 <see langword="null" />。 默认实现始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>确定该对象是否支持属性。 默认情况下，该属性为 <see langword="false" />。</summary>
      <param name="context">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns>如果应调用 <see langword="true" /> 来查找此对象的属性，则为 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary>将矩形从一种数据类型转换为另一种数据类型。 通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 访问此类。</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.RectangleConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定该转换器是否可以将给定源类型的对象转换为转换器的本机类型。</summary>
      <param name="context">格式化程序上下文。 此对象可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="sourceType">要从其进行转换的类型。</param>
      <returns>如果此对象可以执行转换，则此方法返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context">一个提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 对象。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能 <see langword="null" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 对象，它表示您希望转换为的类型。</param>
      <returns>如果此转换器可以执行转换，则此方法返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定对象转换为 <see cref="T:System.Drawing.Rectangle" /> 对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture">包含区域性特定信息的 <see cref="T:System.Globalization.CultureInfo" />，这些信息可以是语言、日历以及与特定区域性关联的区域性约定等。 它基于 RFC 1766 标准。</param>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">无法完成转换。</exception>
      <returns>被转换的对象。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的对象转换成指定的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture">包含区域性特定信息的 <see cref="T:System.Globalization.CultureInfo" />，这些信息可以是语言、日历以及与特定区域性关联的区域性约定等。 它基于 RFC 1766 标准。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.NotSupportedException">无法完成转换。</exception>
      <returns>被转换的对象。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>已知对象的属性值集，创建此类型的实例。 这对于不可变但仍要提供可变属性的对象很有用。</summary>
      <param name="context">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues">新属性值的字典。 该字典包含一系列名称-值对，分别与对 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 方法的调用所返回的每个属性相对应。</param>
      <returns>新创建的对象；如果未能创建该对象，则为 <see langword="null" />。 默认实现返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>确定更改此对象的值是否需要调用 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 以创建新值。</summary>
      <param name="context">可通过其提供附加上下文的类型说明符。</param>
      <returns>如果在更改此对象的一个或多个属性时应当调用 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />，则此方法返回 <see langword="true" />；否则，此方法返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>检索此类型的属性集。 默认情况下，类型不返回任何属性。</summary>
      <param name="context">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">要获取其属性的对象的值。</param>
      <param name="attributes">描述属性的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <returns>应向此数据类型公开的属性集。 如果不应公开任何属性，则该方法可返回 <see langword="null" />。 默认实现始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>确定该对象是否支持属性。 默认情况下，该属性为 <see langword="false" />。</summary>
      <param name="context">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>如果为了查找此对象的属性而应当调用 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />，则此方法返回 <see langword="true" />；否则，此方法返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary>
        <see cref="T:System.Drawing.SizeConverter" /> 类用于从一种数据类型转换为另一种类型。 通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 对象访问此类。</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary>初始化新的 <see cref="T:System.Drawing.SizeConverter" /> 对象。</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定此转换器是否可以将指定源类型的对象转换为转换器的本机类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="sourceType">要从其进行转换的类型。</param>
      <returns>如果此对象可以执行转换，则此方法返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用于获取有关从中调用此转换器的环境的附加信息。 此参数可能为 <see langword="null" />，因此总是需要检查。 同样，上下文对象的属性可以返回 <see langword="null" />。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示你希望转换为的类型。</param>
      <returns>如果此转换器可以执行转换，则此方法返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定对象转换为转换器的本机类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 对象，包含区域性特定信息，例如，语言、日历和与特定区域性关联的区域性约定。 它基于 RFC 1766 标准。</param>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">无法完成转换。</exception>
      <returns>被转换的对象。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的对象转换成指定的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用于获取有关从中调用此转换器的环境的附加信息。 这可能为 <see langword="null" />，因此应总是对其进行检查。 同样，上下文对象上的属性也可能返回 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 对象，包含区域性特定信息，例如，语言、日历和与特定区域性关联的区域性约定。 它基于 RFC 1766 标准。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.NotSupportedException">无法完成转换。</exception>
      <returns>被转换的对象。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>通过为对象使用一组指定的属性值来创建此类型的对象。 这有助于创建具有可更改属性的不可更改对象。</summary>
      <param name="context">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <param name="propertyValues">新属性值的字典。 该字典包含一系列名称值对，分别与从 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 方法返回的每个属性相对应。</param>
      <returns>新创建的对象；如果未能创建该对象，则为 <see langword="null" />。 默认实现返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>确定更改此对象上的值是否需要调用 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 方法以创建新值。</summary>
      <param name="context">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns>如果在更改此对象的一个或多个属性时应当调用 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 对象，则为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>检索此类型的属性集。 默认情况下，类型没有任何要返回的属性。</summary>
      <param name="context">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <param name="value">要获取其属性的对象的值。</param>
      <param name="attributes">描述属性的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <returns>应向此数据类型公开的属性集。 如果不应公开任何属性，则该方法可返回 <see langword="null" />。 默认实现始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>确定此对象是否支持属性。 默认情况下，该属性为 <see langword="false" />。</summary>
      <param name="context">通过其可提供附加上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns>如果应调用 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 来查找此对象的属性，则为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary>将 <see cref="T:System.Drawing.SizeF" /> 对象从一种类型转换成另一种类型。</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.SizeFConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回一个值，该值指示该转换器使用指定的上下文是否可以从指定的类型转换到 <see cref="T:System.Drawing.SizeF" /> 类型。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用来提供附加上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns>如果该转换可以执行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回一个值，该值指示 <see cref="T:System.Drawing.SizeFConverter" /> 是否可以将 <see cref="T:System.Drawing.SizeF" /> 转换到指定的类型。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用来提供附加上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将给定值对象转换为指定的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 null，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值参数转换为的 <see cref="T:System.Type" />。</param>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>使用指定的上下文创建带有指定属性值的 <see cref="T:System.Drawing.SizeF" /> 的实例。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用来提供附加上下文。</param>
      <param name="propertyValues">包含属性名称和值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>一个 <see cref="T:System.Object" />，表示新的 <see cref="T:System.Drawing.SizeF" />；或者如果无法创建该对象，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>返回一个值，该值指示更改此对象的值是否需要调用 <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> 方法来创建新值。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。 这可能是 <see langword="null" />。</param>
      <returns>始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的上下文和特性检索 <see cref="T:System.Drawing.SizeF" /> 类型的属性集。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用来提供附加上下文。</param>
      <param name="value">要为其返回属性的 <see cref="T:System.Object" />。</param>
      <param name="attributes">描述属性的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <returns>包含属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>返回此 <see cref="T:System.Drawing.SizeF" /> 类型是否支持属性。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用来提供附加上下文。</param>
      <returns>始终返回 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 类表示服务器用来验证传入客户端连接的扩展保护策略的类型转换器。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器是否可将该对象转换为指定的类型。</summary>
      <param name="context">要转换的对象。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示你希望转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将对象转换为指定类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 对象。 如果传递 <see langword="null" />，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。 应当为 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 对象。</param>
      <param name="destinationType">要将值参数转换为的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">转换未能执行。</exception>
      <returns>一个表示已转换的 <paramref name="value" /> 参数的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>为 <see cref="E:System.Timers.Timer.Elapsed" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>获取引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的日期/时间。</summary>
      <returns>引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的时间。</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Timers.Timer.Elapsed" /> 的 <see cref="T:System.Timers.Timer" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Timers.ElapsedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>在设定的间隔之后生成事件，带有生成重复事件的选项。</summary>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>达到间隔时发生。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将所有属性设置为初始值。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将 <see cref="P:System.Timers.Timer.Interval" /> 属性设置为指定的毫秒数。</summary>
      <param name="interval">事件之间经过的时间（以毫秒为单位）。 该值必须大于零且小于或等于 <see cref="F:System.Int32.MaxValue" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="interval" /> 参数的值小于或等于零，或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>开始用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>释放由 <see cref="T:System.Timers.Timer" /> 占用的资源。</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary>释放由当前 <see cref="T:System.Timers.Timer" /> 使用的所有资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>结束用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</summary>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="true" /> 开始引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">创建 <see cref="T:System.Timers.Timer" />，使其时间间隔等于或大于 <see cref="F:System.Int32.MaxValue" /> + 1，或将其时间间隔设置为小于零。</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 <see langword="false" /> 停止引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>获取或设置一个布尔值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应只引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件（(<see langword="false" />) 或重复 (<see langword="true" />)）。</summary>
      <returns>如果 <see cref="T:System.Timers.Timer" /> 应在每次间隔结束时引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；如果它仅在间隔第一次结束后引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
      <exception cref="T:System.ObjectDisposedException">计时器已释放，无法设置此属性。</exception>
      <exception cref="T:System.ArgumentException">在定时器启用之前，<see cref="P:System.Timers.Timer.Interval" /> 属性设置为大于 <see cref="F:System.Int32.MaxValue" /> 的值。</exception>
      <returns>如果 <see cref="T:System.Timers.Timer" /> 应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>获取或设置引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的间隔（以毫秒为单位）。</summary>
      <exception cref="T:System.ArgumentException">间隔小于或等于零。  
  
- 或 - 
间隔大于 <see cref="F:System.Int32.MaxValue" />，计时器当前已启用。 （如果当前未启用计时器，则在启用它之前不会引发异常。）</exception>
      <returns>
        <see cref="E:System.Timers.Timer.Elapsed" /> 事件之间经过的时间（以毫秒为单位）。 该值必须大于零并小于或等于 <see cref="F:System.Int32.MaxValue" />。 默认值为 100 毫秒。</returns>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary>获取或设置在设计模式中将 <see cref="T:System.Timers.Timer" /> 绑定到其容器的站点。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> 界面，此界面表示将 <see cref="T:System.Timers.Timer" /> 对象绑定到其容器的站点。</returns>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>获取或设置对象，该对象用于在间隔过后封送发出的事件处理程序调用。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它表示对象，该对象用于在间隔过后封送发出的事件处理程序调用。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>设置可视化设计器在引用事件、扩展程序或属性时可以显示的说明。</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Timers.TimersDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">要使用的说明。</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>设置可视化设计器在引用事件、扩展程序或属性时可以显示的说明。</summary>
      <returns>事件、扩展程序或属性的说明。</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>将 <see cref="T:System.String" /> 类型转换为 <see cref="T:System.Uri" /> 类型，反之亦然。</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.UriTypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回该转换器是否可以将给定类型的对象转换为此转换器的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> 参数为 <see langword="null" />。</exception>
      <returns>如果 <paramref name="sourceType" /> 是 <see cref="T:System.String" /> 类型，或者可以从 <paramref name="sourceType" /> 分配 <see cref="T:System.Uri" /> 类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器能否使用指定上下文将对象转换为指定类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示要转换到的类型。</param>
      <returns>如果 <paramref name="destinationType" /> 为 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />、<see cref="T:System.String" /> 或 <see cref="T:System.Uri" /> 类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将给定的值对象转换为指定的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 <see langword="null" />，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <paramref name="value" /> 参数要转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
      <returns>一个 <see cref="T:System.Object" />，它表示转换后的值。</returns>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回给定值对象是 <see cref="T:System.Uri" />，还是可以从该对象创建 <see cref="T:System.Uri" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">要测试其有效性的 <see cref="T:System.Object" />。</param>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Uri" />，或者是可以从中创建 <see cref="T:System.String" /> 的 <see cref="T:System.Uri" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
  </members>
</doc>