<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Serialization.Formatters</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.Formatter">
      <summary>提供公共语言运行时序列化格式化程序的基本功能。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatter.m_idGenerator">
      <summary>包含与当前格式化程序一起使用的 <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" />。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatter.m_objectQueue">
      <summary>包含要序列化的对象的 <see cref="T:System.Collections.Queue" />。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Formatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.Deserialize(System.IO.Stream)">
      <summary>当在派生类中重写时，将连接到格式化程序的流反序列化（在创建该流时），以创建与最初序列化为该流的图形相同的对象图形。</summary>
      <param name="serializationStream">要反序列化的流。</param>
      <returns>对象的反序列化图形的顶级对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.GetNext(System.Int64@)">
      <summary>从格式化程序的内部工作队列返回下一个要序列化的对象。</summary>
      <param name="objID">要在序列化过程中分配给当前对象的 ID。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">从工作队列检索的下一个对象不具有已分配的 ID。</exception>
      <returns>下一个要序列化的对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.Schedule(System.Object)">
      <summary>安排对象在稍后进行序列化。</summary>
      <param name="obj">要安排序列化的对象。</param>
      <returns>要分配给对象的对象 ID。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.Serialize(System.IO.Stream,System.Object)">
      <summary>当在派生类中重写时，将具有指定根的对象图形序列化为已经连接到格式化程序的流。</summary>
      <param name="serializationStream">对象要序列化为的流。</param>
      <param name="graph">位于要序列化图形的根位置的对象。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteArray(System.Object,System.String,System.Type)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个数组。</summary>
      <param name="obj">要写入的数组。</param>
      <param name="name">数组的名称。</param>
      <param name="memberType">数组包含的元素的类型。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteBoolean(System.Boolean,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个 Boolean 值。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteByte(System.Byte,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个 8 位无符号整数。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteChar(System.Char,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个 Unicode 字符。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteDateTime(System.DateTime,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteDecimal(System.Decimal,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteDouble(System.Double,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个双精度浮点数字。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteInt16(System.Int16,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个 16 位有符号整数。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteInt32(System.Int32,System.String)">
      <summary>当在派生类中重写时，向流中写入一个 32 位有符号整数。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteInt64(System.Int64,System.String)">
      <summary>当在派生类中重写时，向流中写入一个 64 位有符号整数。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteMember(System.String,System.Object)">
      <summary>检查所接收的数据的类型，并调用相应的 <see langword="Write" /> 方法向已经连接到格式化程序的流中写入对象。</summary>
      <param name="memberName">要序列化的成员的名称。</param>
      <param name="data">要向连接到格式化程序的流中写入的对象。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteObjectRef(System.Object,System.String,System.Type)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个对象引用。</summary>
      <param name="obj">要写入的对象引用。</param>
      <param name="name">成员名。</param>
      <param name="memberType">引用指向的对象的类型。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteSByte(System.SByte,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个 8 位有符号整数。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteSingle(System.Single,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个单精度浮点数字。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteTimeSpan(System.TimeSpan,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个 <see cref="T:System.TimeSpan" /> 值。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteUInt16(System.UInt16,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个 16 位无符号整数。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteUInt32(System.UInt32,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个 32 位无符号整数。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteUInt64(System.UInt64,System.String)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入一个 64 位无符号整数。</summary>
      <param name="val">要写入的值。</param>
      <param name="name">成员名。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteValueType(System.Object,System.String,System.Type)">
      <summary>当在派生类中重写时，向已经连接到格式化程序的流中写入给定类型的值。</summary>
      <param name="obj">表示值类型的对象。</param>
      <param name="name">成员名。</param>
      <param name="memberType">值类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Formatter.Binder">
      <summary>当在派生类中重写时，获取或设置与当前格式化程序一起使用的 <see cref="T:System.Runtime.Serialization.SerializationBinder" />。</summary>
      <returns>与当前格式化程序一起使用的 <see cref="T:System.Runtime.Serialization.SerializationBinder" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Formatter.Context">
      <summary>当在派生类中重写时，获取或设置用于当前序列化的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <returns>用于当前序列化的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Formatter.SurrogateSelector">
      <summary>当在派生类中重写时，获取或设置与当前格式化程序一起使用的 <see cref="T:System.Runtime.Serialization.ISurrogateSelector" />。</summary>
      <returns>与当前格式化程序一起使用的 <see cref="T:System.Runtime.Serialization.ISurrogateSelector" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.FormatterConverter">
      <summary>表示 <see cref="T:System.Runtime.Serialization.IFormatterConverter" /> 接口的基实现，该接口使用 <see cref="T:System.Convert" /> 类和 <see cref="T:System.IConvertible" /> 接口。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.FormatterConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.Convert(System.Object,System.Type)">
      <summary>将值转换为给定的 <see cref="T:System.Type" />。</summary>
      <param name="value">要转换的对象。</param>
      <param name="type">
        <paramref name="value" /> 将转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.Convert(System.Object,System.TypeCode)">
      <summary>将值转换为给定的 <see cref="T:System.TypeCode" />。</summary>
      <param name="value">要转换的对象。</param>
      <param name="typeCode">
        <paramref name="value" /> 将转换成的 <see cref="T:System.TypeCode" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToBoolean(System.Object)">
      <summary>将一个值转换为 <see cref="T:System.Boolean" />。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToByte(System.Object)">
      <summary>将值转换为 8 位无符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToChar(System.Object)">
      <summary>将值转换为 Unicode 字符。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToDateTime(System.Object)">
      <summary>将一个值转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToDecimal(System.Object)">
      <summary>将一个值转换为 <see cref="T:System.Decimal" />。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToDouble(System.Object)">
      <summary>将值转换为双精度浮点数字。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToInt16(System.Object)">
      <summary>将值转换为 16 位带符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToInt32(System.Object)">
      <summary>将值转换为 32 位带符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToInt64(System.Object)">
      <summary>将值转换为 64 位带符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToSByte(System.Object)">
      <summary>将一个值转换为 <see cref="T:System.SByte" />。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToSingle(System.Object)">
      <summary>将值转换为单精度浮点数字。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToString(System.Object)">
      <summary>将指定对象转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToUInt16(System.Object)">
      <summary>将值转换为 16 位无符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToUInt32(System.Object)">
      <summary>将值转换为 32 位无符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToUInt64(System.Object)">
      <summary>将值转换为 64 位无符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <returns>转换的 <paramref name="value" />；或者，如果 <paramref name="type" /> 参数为 <see langword="null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter">
      <summary>以二进制格式序列化和反序列化对象或连接对象的整个图形。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)">
      <summary>使用给定的代理项选择器和流上下文来初始化 <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> 类的新实例。</summary>
      <param name="selector">要使用的 <see cref="T:System.Runtime.Serialization.ISurrogateSelector" />。 可以为 <see langword="null" />。</param>
      <param name="context">序列化数据的源和目标。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(System.IO.Stream)">
      <summary>将指定的流反序列化为对象图形。</summary>
      <param name="serializationStream">要从其中反序列化对象图形的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationStream" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">该 <paramref name="serializationStream" /> 支持查找，但其长度为 0。  
  
或 
输入流不表示格式正确的 <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> 序列化有效负载。
          
或 
反序列化输入流中的对象时出错。
          
<see langword="InnerException" /> 属性可能包含有关根本原因的详细信息。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.NotSupportedException">ASP.NET 5.0 及更高版本：始终引发，除非项目文件中重新启用了 <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> 功能。 有关详细信息，请参阅修复 BinaryFormatter 过时和禁用错误。</exception>
      <returns>对象图的顶级（根）。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(System.IO.Stream,System.Object)">
      <summary>将对象或具有指定顶级（根）的对象图形序列化为给定流。</summary>
      <param name="serializationStream">图形要序列化为的流。</param>
      <param name="graph">位于要序列化图形的根位置的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationStream" /> 为 <see langword="null" />。  
  
或 
<paramref name="graph" /> 为 null。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">序列化期间发生错误，如 <paramref name="graph" /> 参数中的某个对象未标记为可序列化。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.NotSupportedException">ASP.NET 5.0 及更高版本：始终引发，除非项目文件中重新启用了 <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> 功能。 有关详细信息，请参阅修复 BinaryFormatter 过时和禁用错误。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.AssemblyFormat">
      <summary>获取或设置与查找加集有关的反序列化器行为。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> 值之一，它指定反序列化器行为。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Binder">
      <summary>（不安全）获取或设置控制将序列化对象绑定到类型的 <see cref="T:System.Runtime.Serialization.SerializationBinder" /> 类型的对象。</summary>
      <returns>要与此格式化程序一起使用的序列化联编程序。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Context">
      <summary>获取或设置此格式化程序的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <returns>要与此格式化程序一起使用的流上下文。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.FilterLevel">
      <summary>获取或设置 <see cref="T:System.Runtime.Serialization.Formatters.TypeFilterLevel" /> 所执行的自动反序列化的 <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />。</summary>
      <returns>表示当前自动反序列化级别的 <see cref="T:System.Runtime.Serialization.Formatters.TypeFilterLevel" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.SurrogateSelector">
      <summary>获取或设置控制序列化和反序列化过程的类型替换的 <see cref="T:System.Runtime.Serialization.ISurrogateSelector" />.</summary>
      <returns>要与此格式化程序一起使用的代理项选择器。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.TypeFormat">
      <summary>获取或设置类型说明在序列化流中的布局格式。</summary>
      <returns>要使用的类型布局的样式。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle">
      <summary>指示将在反序列化期间用于定位和加载程序集的方法。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Full">
      <summary>在完全模式下，反序列化期间所用的程序集必须与序列化期间所用的程序集完全匹配。 使用 <see cref="T:System.Reflection.Assembly" /> 类的 <see cref="Overload:System.Reflection.Assembly.Load" /> 方法加载程序集。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple">
      <summary>在简单模式下，反序列化期间所用的程序集不需要与序列化期间所用的程序集完全匹配。 具体而言，当 <see cref="Overload:System.Reflection.Assembly.LoadWithPartialName" /> 方法用于加载程序集时，版本号不需要匹配。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.FormatterTypeStyle">
      <summary>指示类型说明在序列化流中的布局格式。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatters.FormatterTypeStyle.TypesAlways">
      <summary>指示类型可以提供给所有对象成员和 <see cref="T:System.Runtime.Serialization.ISerializable" /> 对象成员。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatters.FormatterTypeStyle.TypesWhenNeeded">
      <summary>指示只能为对象数组、<see cref="T:System.Object" /> 类型的对象成员和 <see cref="T:System.Runtime.Serialization.ISerializable" /> 非基元值类型声明类型。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatters.FormatterTypeStyle.XsdString">
      <summary>指示可以采用 XSD 格式（而不是 SOAP 格式）来提供字符串。 不传输任何字符串 ID。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.IFieldInfo">
      <summary>允许访问支持 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口的对象的字段名称和字段类型。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.IFieldInfo.FieldNames">
      <summary>获取或设置序列化对象的字段名称。</summary>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>序列化对象的字段名称。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.IFieldInfo.FieldTypes">
      <summary>获取或设置序列化对象的字段类型。</summary>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>序列化对象的字段类型。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.TypeFilterLevel">
      <summary>指定用于 .NET Framework 远程处理的自动反序列化的级别。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatters.TypeFilterLevel.Full">
      <summary>.NET Framework 远程处理的 Full （完全）反序列化级别。 它支持远程处理在所有情况下支持的所有类型。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatters.TypeFilterLevel.Low">
      <summary>.NET Framework 远程处理的 Low （低）反序列化级别。 它支持与基本远程处理功能相关联的类型。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.FormatterServices">
      <summary>提供静态方法，以协助实现用于序列化的 <see cref="T:System.Runtime.Serialization.Formatter" />。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.CheckTypeSecurity(System.Type,System.Runtime.Serialization.Formatters.TypeFilterLevel)">
      <summary>确定是否能够在 <see cref="T:System.Runtime.Serialization.Formatters.TypeFilterLevel" /> 属性设置为 <see langword="Low" /> 时反序列化指定的 <see cref="T:System.Type" />。</summary>
      <param name="t">要检查反序列化能力的 <see cref="T:System.Type" />。</param>
      <param name="securityLevel">
        <see cref="T:System.Runtime.Serialization.Formatters.TypeFilterLevel" /> 属性值。</param>
      <exception cref="T:System.Security.SecurityException">
        <paramref name="t" /> 参数是高级类型，不能在 <see cref="T:System.Runtime.Serialization.Formatters.TypeFilterLevel" /> 属性设置为 <see langword="Low" /> 时被反序列化。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.GetObjectData(System.Object,System.Reflection.MemberInfo[])">
      <summary>从指定对象提取数据并将其以对象数组的形式返回。</summary>
      <param name="obj">要写入格式化程序的对象。</param>
      <param name="members">要从对象中提取的成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 或 <paramref name="members" /> 参数为 <see langword="null" />。  
  
<paramref name="members" /> 的元素为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="members" /> 的一个元素不表示字段。</exception>
      <returns>
        <see cref="T:System.Object" /> 的数组，它包含存储在 <paramref name="members" /> 中并与 <paramref name="obj" /> 关联的数据。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.GetSafeUninitializedObject(System.Type)">
      <summary>创建指定对象类型的新实例。</summary>
      <param name="type">要创建的对象的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="type" /> 参数不是有效的公共语言运行时类型。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>指定类型的归零对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.GetSerializableMembers(System.Type)">
      <summary>获取指定 <see cref="T:System.Type" /> 的类的所有可序列化成员。</summary>
      <param name="type">正在序列化的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>非瞬态、非静态成员的 <see cref="T:System.Reflection.MemberInfo" /> 类型的数组。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.GetSerializableMembers(System.Type,System.Runtime.Serialization.StreamingContext)">
      <summary>获取属于指定 <see cref="T:System.Type" /> 的类且位于提供的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 中的所有可序列化成员。</summary>
      <param name="type">正在序列化或克隆的类型。</param>
      <param name="context">发生序列化的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>非瞬态、非静态成员的 <see cref="T:System.Reflection.MemberInfo" /> 类型的数组。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.GetSurrogateForCyclicalReference(System.Runtime.Serialization.ISerializationSurrogate)">
      <summary>对指定的 <see cref="T:System.Runtime.Serialization.ISerializationSurrogate" /> 返回序列化代理项。</summary>
      <param name="innerSurrogate">指定的代理项。</param>
      <returns>用于指定 <paramref name="innerSurrogate" /> 的 <see cref="T:System.Runtime.Serialization.ISerializationSurrogate" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.GetTypeFromAssembly(System.Reflection.Assembly,System.String)">
      <summary>在提供的 <see cref="T:System.Reflection.Assembly" /> 中查找指定对象的 <see cref="T:System.Type" />。</summary>
      <param name="assem">要在其中查找对象的程序集。</param>
      <param name="name">对象的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assem" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>命名对象的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)">
      <summary>创建指定对象类型的新实例。</summary>
      <param name="type">要创建的对象的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>指定类型的归零对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.PopulateObjectMembers(System.Object,System.Reflection.MemberInfo[],System.Object[])">
      <summary>使用从对象的数据数组中提取的每个字段的值填充指定的对象。</summary>
      <param name="obj">要填充的对象。</param>
      <param name="members">
        <see cref="T:System.Reflection.MemberInfo" /> 的数组，它描述要填充的字段和属性。</param>
      <param name="data">
        <see cref="T:System.Object" /> 的数组，它指定要填充的每个字段和属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" />、<paramref name="members" /> 或 <paramref name="data" /> 参数为 <see langword="null" />。  
  
<paramref name="members" /> 的元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="members" /> 的长度不匹配 <paramref name="data" /> 的长度。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="members" /> 的一个元素不是 <see cref="T:System.Reflection.FieldInfo" /> 的实例。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>新填充的对象。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.IFormatter">
      <summary>提供用于格式化串行化对象的功能。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatter.Deserialize(System.IO.Stream)">
      <summary>反序列化所提供流中的数据并重新组成对象图形。</summary>
      <param name="serializationStream">包含要反序列化的数据的流。</param>
      <returns>反序列化图形的顶级对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatter.Serialize(System.IO.Stream,System.Object)">
      <summary>将对象或具有给定根的对象图形序列化为所提供的流。</summary>
      <param name="serializationStream">格式化程序在其中放置串行化数据的流。 此流可以引用多种后备存储（如文件、网络、内存等）。</param>
      <param name="graph">要序列化的对象或对象图形的根。 将自动序列化此根对象的所有子对象。</param>
    </member>
    <member name="P:System.Runtime.Serialization.IFormatter.Binder">
      <summary>获取或设置在反序列化过程中执行类型查找的 <see cref="T:System.Runtime.Serialization.SerializationBinder" />。</summary>
      <returns>在反序列化过程中执行类型查找的 <see cref="T:System.Runtime.Serialization.SerializationBinder" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.IFormatter.Context">
      <summary>获取或设置用于序列化和反序列化的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <returns>用于序列化和反序列化的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.IFormatter.SurrogateSelector">
      <summary>获取或设置当前格式化程序所使用的 <see cref="T:System.Runtime.Serialization.SurrogateSelector" />。</summary>
      <returns>当前格式化程序所使用的 <see cref="T:System.Runtime.Serialization.SurrogateSelector" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ISerializationSurrogate">
      <summary>实现序列化代理项选择器，此选择器允许一个对象对另一个对象执行序列化和反序列化。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ISerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化对象所需的数据填充所提供的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="obj">要序列化的对象。</param>
      <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.ISerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 中的信息填充对象。</summary>
      <param name="obj">要填充的对象。</param>
      <param name="info">要填充对象的信息。</param>
      <param name="context">从其中反序列化对象的源。</param>
      <param name="selector">兼容代理项搜索开始处的代理项选择器。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>已填充的反序列化对象。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ISurrogateSelector">
      <summary>指示序列化代理项选择器类。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ISurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)">
      <summary>指定代理项的下一个 <see cref="T:System.Runtime.Serialization.ISurrogateSelector" />，以检查当前实例在指定上下文中是否不具有指定类型和程序集的代理项。</summary>
      <param name="selector">下一个要检查的代理项选择器。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.ISurrogateSelector.GetNextSelector">
      <summary>返回链中的下一个代理项选择器。</summary>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>链中的下一个代理项选择器，或者为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.ISurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
      <summary>从指定序列化上下文的指定代理项选择器开始，查找表示指定对象类型的代理项。</summary>
      <param name="type">需要代理项的对象（类）的 <see cref="T:System.Type" />。</param>
      <param name="context">当前序列化的源或目标上下文。</param>
      <param name="selector">当此方法返回时，将包含一个 <see cref="T:System.Runtime.Serialization.ISurrogateSelector" />，它持有一个指向从中找到合适代理项的代理项选择器引用。 此参数未经初始化即被传递。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>给定上下文中给定类型的适当代理项。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ObjectIDGenerator">
      <summary>生成对象的 ID。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectIDGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectIDGenerator.GetId(System.Object,System.Boolean@)">
      <summary>返回指定对象的 ID，如果指定对象尚未由 <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" /> 识别，则生成新的 ID。</summary>
      <param name="obj">需要其 ID 的对象。</param>
      <param name="firstTime">如果 <paramref name="obj" /> 先前对于 <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" /> 未知，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已要求 <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" /> 跟踪太多的对象。</exception>
      <returns>对象的 ID 用于序列化。 如果是第一次识别对象，则 <paramref name="firstTime" /> 设置为 <see langword="true" />；否则设置为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectIDGenerator.HasId(System.Object,System.Boolean@)">
      <summary>确定是否已经给对象分配 ID。</summary>
      <param name="obj">你所请求的对象。</param>
      <param name="firstTime">如果 <paramref name="obj" /> 先前对于 <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" /> 未知，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 <see langword="null" />。</exception>
      <returns>如果先前对于 <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" /> 已知，则为 <paramref name="obj" /> 的对象 ID；否则为零。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ObjectManager">
      <summary>在对象进行反序列化时对其进行跟踪。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.ObjectManager" /> 类的新实例。</summary>
      <param name="selector">要使用的代理项选择器。 <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> 确定在反序列化给定类型的对象时所使用的正确代理项。 在反序列化时，代理项选择器将利用通过流传输的信息创建对象的新实例。</param>
      <param name="context">流上下文。 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 未被 <see langword="ObjectManager" /> 使用，但却作为参数传递到任何实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 或具有 <see cref="T:System.Runtime.Serialization.ISerializationSurrogate" /> 的对象。 这些对象可以根据要反序列化的信息的源来执行特定的操作。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.DoFixups">
      <summary>执行所有记录的修正。</summary>
      <exception cref="T:System.Runtime.Serialization.SerializationException">修正未成功完成。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.GetObject(System.Int64)">
      <summary>返回具有指定对象 ID 的对象。</summary>
      <param name="objectID">所请求对象的 ID。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="objectID" /> 参数小于或等于零。</exception>
      <returns>如果先前已存储，则返回具有指定对象 ID 的对象；或者，如果尚未注册这种对象，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RaiseDeserializationEvent">
      <summary>对任何实现 <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> 的注册对象引发反序列化事件。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RaiseOnDeserializingEvent(System.Object)">
      <summary>调用使用 <see cref="T:System.Runtime.Serialization.OnDeserializingAttribute" /> 标记的方法。</summary>
      <param name="obj">包含要调用的方法的类型实例。</param>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(System.Int64,System.Int32,System.Int64)">
      <summary>记录数组中一个元素的修正。</summary>
      <param name="arrayToBeFixed">用于记录修正的数组的 ID。</param>
      <param name="index">为其请求修正的 <c>arrayFixup</c> 中的索引。</param>
      <param name="objectRequired">当前数组元素在修正完成后将指向的对象的 ID。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayToBeFixed" /> 或 <paramref name="objectRequired" /> 参数小于或等于零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(System.Int64,System.Int32[],System.Int64)">
      <summary>记录数组中指定元素的修正，以便在稍后执行。</summary>
      <param name="arrayToBeFixed">用于记录修正的数组的 ID。</param>
      <param name="indices">为其请求修正的多维数组中的索引。</param>
      <param name="objectRequired">数组元素在修正完成后将指向的对象的 ID。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayToBeFixed" /> 或 <paramref name="objectRequired" /> 参数小于或等于零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RecordDelayedFixup(System.Int64,System.String,System.Int64)">
      <summary>记录对象成员的修正，以便在稍后执行。</summary>
      <param name="objectToBeFixed">需要对 <paramref name="objectRequired" /> 的引用的对象的 ID。</param>
      <param name="memberName">将在其中执行修正的 <paramref name="objectToBeFixed" /> 的成员名称。</param>
      <param name="objectRequired">
        <paramref name="objectToBeFixed" /> 需要的对象的 ID。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="objectToBeFixed" /> 或 <paramref name="objectRequired" /> 参数小于或等于零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memberName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RecordFixup(System.Int64,System.Reflection.MemberInfo,System.Int64)">
      <summary>记录对象成员的修正，以便在稍后执行。</summary>
      <param name="objectToBeFixed">需要对 <paramref name="objectRequired" /> 对象的引用的对象的 ID。</param>
      <param name="member">将在其中执行修正的 <paramref name="objectToBeFixed" /> 的成员。</param>
      <param name="objectRequired">
        <paramref name="objectToBeFixed" /> 需要的对象的 ID。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="objectToBeFixed" /> 或 <paramref name="objectRequired" /> 参数小于或等于零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64)">
      <summary>在反序列化对象时注册该对象，并将其与 <paramref name="objectID" /> 相关联。</summary>
      <param name="obj">要注册的对象。</param>
      <param name="objectID">要注册的对象的 ID。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="objectID" /> 参数小于或等于零。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="objectID" /> 已为 <paramref name="obj" /> 以外的对象进行了注册。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo)">
      <summary>在反序列化对象时注册该对象，同时将其与 <paramref name="objectID" /> 相关联并记录与其一起使用的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="obj">要注册的对象。</param>
      <param name="objectID">要注册的对象的 ID。</param>
      <param name="info">当 <paramref name="obj" /> 实现 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 或具有 <see cref="T:System.Runtime.Serialization.ISerializable" /> 时使用的 <see cref="T:System.Runtime.Serialization.ISerializationSurrogate" />。 <paramref name="info" /> 将用任何所需的链接地址信息来完成，然后在所需的对象完成时传递给该对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="objectID" /> 参数小于或等于零。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="objectID" /> 已为 <paramref name="obj" /> 以外的对象进行了注册。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo)">
      <summary>在对象成员反序列化时注册该对象成员，同时将其与 <paramref name="objectID" /> 相关联并记录 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="obj">要注册的对象。</param>
      <param name="objectID">要注册的对象的 ID。</param>
      <param name="info">当 <paramref name="obj" /> 实现 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 或具有 <see cref="T:System.Runtime.Serialization.ISerializable" /> 时使用的 <see cref="T:System.Runtime.Serialization.ISerializationSurrogate" />。 <paramref name="info" /> 将用任何所需的链接地址信息来完成，然后在所需的对象完成时传递给该对象。</param>
      <param name="idOfContainingObj">包含 <paramref name="obj" /> 的对象的 ID。 仅当 <paramref name="obj" /> 是值类型时才需要此参数。</param>
      <param name="member">
        <paramref name="obj" /> 所在的包含对象中的字段。 仅当 <paramref name="obj" /> 是值类型时此参数才有意义。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="objectID" /> 参数小于或等于零。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="objectID" /> 已经为 <paramref name="obj" /> 之外的对象注册，或者 <paramref name="member" /> 不为 <see cref="T:System.Reflection.FieldInfo" /> 且 <paramref name="member" /> 不为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo,System.Int32[])">
      <summary>在对象中包含的数组的成员进行反序列化时注册该成员，同时将其与 <paramref name="objectID" /> 相关联并记录 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="obj">要注册的对象。</param>
      <param name="objectID">要注册的对象的 ID。</param>
      <param name="info">当 <paramref name="obj" /> 实现 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 或具有 <see cref="T:System.Runtime.Serialization.ISerializable" /> 时使用的 <see cref="T:System.Runtime.Serialization.ISerializationSurrogate" />。 <paramref name="info" /> 将用任何所需的链接地址信息来完成，然后在所需的对象完成时传递给该对象。</param>
      <param name="idOfContainingObj">包含 <paramref name="obj" /> 的对象的 ID。 仅当 <paramref name="obj" /> 是值类型时才需要此参数。</param>
      <param name="member">
        <paramref name="obj" /> 所在的包含对象中的字段。 仅当 <paramref name="obj" /> 是值类型时此参数才有意义。</param>
      <param name="arrayIndex">如果 <paramref name="obj" /> 为 <see cref="T:System.ValueType" /> 和数组的成员，<paramref name="arrayIndex" /> 则包含 <paramref name="obj" /> 所在数组中的索引。 如果 <paramref name="arrayIndex" /> 不是同时为 <see cref="T:System.ValueType" /> 和数组成员，则将忽略 <paramref name="obj" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="objectID" /> 参数小于或等于零。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="objectID" /> 已经为 <paramref name="obj" /> 之外的对象注册，或者 <paramref name="member" /> 不是 <see cref="T:System.Reflection.FieldInfo" /> 且 <paramref name="member" /> 不是 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationBinder">
      <summary>允许用户控制类加载并指定要加载的类。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationBinder.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.SerializationBinder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationBinder.BindToName(System.Type,System.String@,System.String@)">
      <summary>当在派生类中重写时，控制是否将序列化对象绑定到类型。</summary>
      <param name="serializedType">格式化程序创建其新实例的对象的类型。</param>
      <param name="assemblyName">指定序列化对象的 <see cref="T:System.Reflection.Assembly" /> 名称。</param>
      <param name="typeName">指定序列化对象的 <see cref="T:System.Type" /> 名称。</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationBinder.BindToType(System.String,System.String)">
      <summary>当在派生类中重写时，控制是否将序列化对象绑定到类型。</summary>
      <param name="assemblyName">指定序列化对象的 <see cref="T:System.Reflection.Assembly" /> 名称。</param>
      <param name="typeName">指定序列化对象的 <see cref="T:System.Type" /> 名称。</param>
      <returns>格式化程序创建其新实例的对象的类型。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationObjectManager">
      <summary>在运行时管理序列化过程。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationObjectManager.#ctor(System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.SerializationObjectManager" /> 类的新实例。</summary>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的实例，包含有关当前序列化操作的信息。</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationObjectManager.RaiseOnSerializedEvent">
      <summary>如果该对象的类型有一个 OnSerializing 回调事件，则调用该事件；如果该对象的类型有一个 OnSerialized 事件，则注册该对象以引发该事件。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationObjectManager.RegisterObject(System.Object)">
      <summary>注册将引发事件的对象。</summary>
      <param name="obj">要注册的对象。</param>
    </member>
    <member name="T:System.Runtime.Serialization.SurrogateSelector">
      <summary>帮助格式化程序选择要将序列化或反序列化进程委托给的序列化代理项。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SurrogateSelector.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.SurrogateSelector" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SurrogateSelector.AddSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISerializationSurrogate)">
      <summary>将代理项添加到已检查代理项的列表中。</summary>
      <param name="type">需要其代理项的 <see cref="T:System.Type" />。</param>
      <param name="context">上下文特定的数据。</param>
      <param name="surrogate">要为此类型调用的代理项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="surrogate" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此类型和上下文的代理项已存在。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)">
      <summary>在代理项列表中添加指定的 <see cref="T:System.Runtime.Serialization.ISurrogateSelector" />，它可以处理特定的对象类型。</summary>
      <param name="selector">要添加的代理项选择器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">该选择器已经位于选择器列表中。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SurrogateSelector.GetNextSelector">
      <summary>返回选择器链上的下一个选择器。</summary>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>选择器链上的下一个 <see cref="T:System.Runtime.Serialization.ISurrogateSelector" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.SurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
      <summary>返回特定类型的代理项。</summary>
      <param name="type">为其请求代理项的 <see cref="T:System.Type" />。</param>
      <param name="context">流上下文。</param>
      <param name="selector">要使用的代理项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <returns>特定类型的代理项。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.SurrogateSelector.RemoveSurrogate(System.Type,System.Runtime.Serialization.StreamingContext)">
      <summary>移除与给定类型关联的代理项。</summary>
      <param name="type">要移除其代理项的 <see cref="T:System.Type" />。</param>
      <param name="context">当前代理项的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
    </member>
  </members>
</doc>