<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.CompilerServices.Unsafe</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.Unsafe">
      <summary>包含用于操作指针的通用低级别功能。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)">
      <summary>向给定引用添加元素偏移量。</summary>
      <param name="source">要为其增加偏移量的引用。</param>
      <param name="elementOffset">要增加的偏移量。</param>
      <typeparam name="T">引用的类型。</typeparam>
      <returns>新引用，用于反映向指针添加的偏移量。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)">
      <summary>向给定引用添加元素偏移量。</summary>
      <param name="source">要为其增加偏移量的引用。</param>
      <param name="elementOffset">要增加的偏移量。</param>
      <typeparam name="T">引用的类型。</typeparam>
      <returns>新引用，用于反映向指针添加的偏移量。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)">
      <summary>向给定 void 指针添加元素偏移量。</summary>
      <param name="source">要添加偏移量的 void 指针。</param>
      <param name="elementOffset">要增加的偏移量。</param>
      <typeparam name="T">Void 指针的类型。</typeparam>
      <returns>一个新的 void 指针，反映了向指定指针增加的偏移量。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)">
      <summary>向给定引用添加字节偏移量。</summary>
      <param name="source">要为其增加偏移量的引用。</param>
      <param name="byteOffset">要增加的偏移量。</param>
      <typeparam name="T">引用的类型。</typeparam>
      <returns>新引用，用于反映向指针添加的字节偏移量。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)">
      <summary>确定指定的引用是否指向相同的位置。</summary>
      <param name="left">要比较的第一个引用。</param>
      <param name="right">要比较的第二个引用。</param>
      <typeparam name="T">引用的类型。</typeparam>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 指向相同的位置，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)">
      <summary>将给定对象强制转换为指定类型。</summary>
      <param name="o">要强制转换的对象。</param>
      <typeparam name="T">对象将转换为的类型。</typeparam>
      <returns>原始对象，强制转换为给定类型。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)">
      <summary>将给定引用重新解释为对 <typeparamref name="TTo" /> 类型的值的引用。</summary>
      <param name="source">要重新解释的引用。</param>
      <typeparam name="TFrom">对重新解释的引用的类型。</typeparam>
      <typeparam name="TTo">引用的所需类型。</typeparam>
      <returns>对 <typeparamref name="TTo" /> 类型的值的引用。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)">
      <summary>返回指向给定 by-ref 参数的指针。</summary>
      <param name="value">已获取其指针的对象。</param>
      <typeparam name="T">对象的类型。</typeparam>
      <returns>指向给定值的指针。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)">
      <summary>将给定只读引用重新解释为引用。</summary>
      <param name="source">要重新解释的只读引用。</param>
      <typeparam name="T">引用的类型。</typeparam>
      <returns>对 <typeparamref name="T" /> 类型的值的引用。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)">
      <summary>将给定位置重新解释为对 <typeparamref name="T" /> 类型的值的引用。</summary>
      <param name="source">要引用的值的位置。</param>
      <typeparam name="T">解释的位置的类型。</typeparam>
      <returns>对 <typeparamref name="T" /> 类型的值的引用。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)">
      <summary>确定给定引用从源到目标的字节偏移量。</summary>
      <param name="origin">对源的引用。</param>
      <param name="target">对目标的引用。</param>
      <typeparam name="T">引用的类型。</typeparam>
      <returns>从源到目标的字节偏移量，即 <paramref name="target" /> - <paramref name="origin" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)">
      <summary>将 <typeparamref name="T" /> 类型的值复制到给定位置。</summary>
      <param name="destination">要复制到其中的位置。</param>
      <param name="source">指向要复制的值的指针。</param>
      <typeparam name="T">要复制的值的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)">
      <summary>将 <typeparamref name="T" /> 类型的值复制到给定位置。</summary>
      <param name="destination">要复制到其中的位置。</param>
      <param name="source">对要复制的值的引用。</param>
      <typeparam name="T">要复制的值的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)">
      <summary>将字节从源地址复制到目标地址。</summary>
      <param name="destination">要复制到其中的目标地址。</param>
      <param name="source">要从其中进行复制的源地址。</param>
      <param name="byteCount">要复制的字节数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)">
      <summary>将字节从源地址复制到目标地址。</summary>
      <param name="destination">要复制到其中的目标地址。</param>
      <param name="source">要从其中进行复制的源地址。</param>
      <param name="byteCount">要复制的字节数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)">
      <summary>将字节从源地址复制到目标地址，无需假设地址的结构依赖对齐方式。</summary>
      <param name="destination">要复制到其中的目标地址。</param>
      <param name="source">要从其中进行复制的源地址。</param>
      <param name="byteCount">要复制的字节数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)">
      <summary>将字节从源地址复制到目标地址，无需假设地址的结构依赖对齐方式。</summary>
      <param name="destination">要复制到其中的目标地址。</param>
      <param name="source">要从其中进行复制的源地址。</param>
      <param name="byteCount">要复制的字节数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)">
      <summary>在给定位置使用给定的初始值初始化内存块。</summary>
      <param name="startAddress">要初始化的内存块的起始地址。</param>
      <param name="value">块的初始化值。</param>
      <param name="byteCount">要初始化的字节数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)">
      <summary>在给定位置使用给定的初始值初始化内存块。</summary>
      <param name="startAddress">要初始化的内存块的起始地址。</param>
      <param name="value">块的初始化值。</param>
      <param name="byteCount">要初始化的字节数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)">
      <summary>在给定位置使用给定的初始值初始化内存块，无需假设地址的结构依赖对齐方式。</summary>
      <param name="startAddress">要初始化的内存块的起始地址。</param>
      <param name="value">块的初始化值。</param>
      <param name="byteCount">要初始化的字节数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)">
      <summary>在给定位置使用给定的初始值初始化内存块，无需假设地址的结构依赖对齐方式。</summary>
      <param name="startAddress">要初始化的内存块的起始地址。</param>
      <param name="value">块的初始化值。</param>
      <param name="byteCount">要初始化的字节数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)">
      <summary>返回一个值，该值指示指定的引用是否大于另一个指定的引用。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <typeparam name="T">引用的类型。</typeparam>
      <returns>如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)">
      <summary>返回一个值，该值指示指定的引用是否小于另一个指定的引用。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <typeparam name="T">引用的类型。</typeparam>
      <returns>如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsNullRef``1(``0@)">
      <param name="source" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.NullRef``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)">
      <summary>从给定位置读取 <typeparamref name="T" /> 类型的值。</summary>
      <param name="source">要从中读取的位置。</param>
      <typeparam name="T">要读取的类型。</typeparam>
      <returns>从给定位置读取的 <typeparamref name="T" /> 类型的对象。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)">
      <summary>从给定位置读取 <typeparamref name="T" /> 类型的值，无需假设地址的结构依赖对齐方式。</summary>
      <param name="source">要从中读取的位置。</param>
      <typeparam name="T">要读取的类型。</typeparam>
      <returns>从给定位置读取的 <typeparamref name="T" /> 类型的对象。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)">
      <summary>从给定位置读取 <typeparamref name="T" /> 类型的值，无需假设地址的结构依赖对齐方式。</summary>
      <param name="source">要从中读取的位置。</param>
      <typeparam name="T">要读取的类型。</typeparam>
      <returns>从给定位置读取的 <typeparamref name="T" /> 类型的对象。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1">
      <summary>返回给定类型参数的对象的大小。</summary>
      <typeparam name="T">要检索其大小的对象的类型。</typeparam>
      <returns>
        <typeparamref name="T" /> 类型的对象大小。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SkipInit``1(``0@)">
      <summary>跳过给定值的明确赋值规则。</summary>
      <param name="value">未初始化的对象。</param>
      <typeparam name="T">未初始化对象的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)">
      <summary>从给定引用减去元素偏移量。</summary>
      <param name="source">要从中减去偏移量的引用。</param>
      <param name="elementOffset">要减去的偏移量。</param>
      <typeparam name="T">引用的类型。</typeparam>
      <returns>新引用，用于反映从指针减去的偏移量。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)">
      <summary>从给定引用减去元素偏移量。</summary>
      <param name="source">要从中减去偏移量的引用。</param>
      <param name="elementOffset">要减去的偏移量。</param>
      <typeparam name="T">引用的类型。</typeparam>
      <returns>新引用，用于反映从指针减去的偏移量。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)">
      <summary>从给定的 void 指针减去元素偏移量。</summary>
      <param name="source">要从中减去偏移量的 void 指针。</param>
      <param name="elementOffset">要减去的偏移量。</param>
      <typeparam name="T">Void 指针的类型。</typeparam>
      <returns>一个新的 void 指针，反映了从指定指针减去的偏移量。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)">
      <summary>从给定引用减去字节偏移量。</summary>
      <param name="source">要从中减去偏移量的引用。</param>
      <param name="byteOffset">要减去的偏移量。</param>
      <typeparam name="T">引用的类型。</typeparam>
      <returns>新引用，用于反映从指针减去的字节偏移量。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)">
      <summary>将 <see langword="mutable ref" /> 返回到装箱值。</summary>
      <param name="box">要取消装箱的值。</param>
      <typeparam name="T">要取消装箱的类型。</typeparam>
      <exception cref="T:System.NullReferenceException">
        <paramref name="box" /> 为 <see langword="null" />，<typeparamref name="T" /> 是不可为 null 的值类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="box" /> 不是装箱的值类型。
         
- 或 -

<paramref name="box" /> 不是装箱的 <typeparamref name="T" />。</exception>
      <exception cref="T:System.TypeLoadException">找不到 <typeparamref name="T" />。</exception>
      <returns>
        <see langword="mutable ref" /> 到装箱值 <paramref name="box" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)">
      <summary>将 <typeparamref name="T" /> 类型的值写入给定位置。</summary>
      <param name="destination">要写入到其中的位置。</param>
      <param name="value">要写入的值。</param>
      <typeparam name="T">要写入的值的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)">
      <summary>将 <typeparamref name="T" /> 类型的值写入给定位置，无需假设地址的结构依赖对齐方式。</summary>
      <param name="destination">要写入到其中的位置。</param>
      <param name="value">要写入的值。</param>
      <typeparam name="T">要写入的值的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)">
      <summary>将 <typeparamref name="T" /> 类型的值写入给定位置，无需假设地址的结构依赖对齐方式。</summary>
      <param name="destination">要写入到其中的位置。</param>
      <param name="value">要写入的值。</param>
      <typeparam name="T">要写入的值的类型。</typeparam>
    </member>
  </members>
</doc>