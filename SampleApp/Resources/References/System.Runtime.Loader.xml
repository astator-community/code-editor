<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Loader</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Metadata.AssemblyExtensions" />
    <member name="M:System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Reflection.Assembly,System.Byte*@,System.Int32@)">
      <param name="assembly" />
      <param name="blob" />
      <param name="length" />
    </member>
    <member name="T:System.Runtime.Loader.AssemblyDependencyResolver">
      <summary>允许程序根据给定程序集的依赖关系将程序集和本机库解析为路径。</summary>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyDependencyResolver.#ctor(System.String)">
      <summary>使用组件的程序集的路径初始化 <see cref="T:System.Runtime.Loader.AssemblyDependencyResolver" /> 类的新实例。</summary>
      <param name="componentAssemblyPath">组件或插件的托管入口点的路径。</param>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyDependencyResolver.ResolveAssemblyToPath(System.Reflection.AssemblyName)">
      <summary>基于组件的依赖关系解析具有给定程序集名称的程序集的路径。</summary>
      <param name="assemblyName">要解析的程序集名称。</param>
      <returns>具有组件的 deps.json 文件中的给定名称的程序集路径，或者如果程序集不在 deps.json 文件中或不在 deps.json 文件指定位置的磁盘上，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyDependencyResolver.ResolveUnmanagedDllToPath(System.String)">
      <summary>基于组件的依赖关系解析具有给定名称的本机库的路径。</summary>
      <param name="unmanagedDllName">要解析的本机库的名称。</param>
      <returns>具有组件的 deps.json 文件中的给定名称和当前运行时标识符的本机库路径，或者如果程序集不在 deps.json 文件中或不在 deps.json 文件指定位置的磁盘上，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Runtime.Loader.AssemblyLoadContext">
      <summary>表示程序集加载范围的运行时概念。</summary>
    </member>
    <member name="E:System.Runtime.Loader.AssemblyLoadContext.Resolving">
      <summary>在尝试加载到此程序集加载上下文时，程序集解析失败时发生。</summary>
    </member>
    <member name="E:System.Runtime.Loader.AssemblyLoadContext.ResolvingUnmanagedDll">
      <summary>在解析本机库失败时发生。</summary>
    </member>
    <member name="E:System.Runtime.Loader.AssemblyLoadContext.Unloading">
      <summary>卸载 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 时发生。</summary>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.#ctor(System.Boolean)">
      <summary>使用一个指示是否启用卸载的值来初始化 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 类的新实例。</summary>
      <param name="isCollectible">要启用 <see cref="M:System.Runtime.Loader.AssemblyLoadContext.Unload" />，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />，因为启用卸载会产生性能成本。</param>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.#ctor(System.String,System.Boolean)">
      <summary>使用名称和指示是否启用卸载的值来初始化 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 类的新实例。</summary>
      <param name="name">新实例中 <see cref="P:System.Runtime.Loader.AssemblyLoadContext.Name" /> 的值。 其值可为 <see langword="null" />。</param>
      <param name="isCollectible">要启用 <see cref="M:System.Runtime.Loader.AssemblyLoadContext.Unload" />，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />，因为启用卸载会产生性能成本。</param>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.EnterContextualReflection">
      <summary>将 <see cref="P:System.Runtime.Loader.AssemblyLoadContext.CurrentContextualReflectionContext" /> 设置为 <see langword="this" /><see cref="T:System.Runtime.Loader.AssemblyLoadContext" />。</summary>
      <returns>一个对象，它用于还原 <see cref="P:System.Runtime.Loader.AssemblyLoadContext.CurrentContextualReflectionContext" /> 的先前值。 它将作为 <see cref="T:System.IDisposable" /> 在 <see langword="using" /> 块中使用。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.EnterContextualReflection(System.Reflection.Assembly)">
      <summary>将 <see cref="P:System.Runtime.Loader.AssemblyLoadContext.CurrentContextualReflectionContext" /> 设置为加载了程序集的 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />。</summary>
      <param name="activating">用于确定请求的 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 实例的程序集。</param>
      <returns>一个对象，它用于还原 <see cref="P:System.Runtime.Loader.AssemblyLoadContext.CurrentContextualReflectionContext" /> 的先前值。 它将作为 <see cref="T:System.IDisposable" /> 在 <see langword="using" /> 块中使用。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.Finalize">
      <summary>允许对象在被“垃圾回收”之前尝试释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.GetAssemblyName(System.String)">
      <summary>获取 <see cref="T:System.Reflection.AssemblyName" /> 的程序集路径。</summary>
      <param name="assemblyPath">程序集的路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyPath" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到该程序集。</exception>
      <exception cref="T:System.BadImageFormatException">该程序集不是有效的程序集。</exception>
      <returns>一个对象，该对象包含 <paramref name="assemblyPath" /> 处的程序集的完全解析的程序集名称。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.GetLoadContext(System.Reflection.Assembly)">
      <summary>获取包含指定 <see cref="T:System.Reflection.Assembly" /> 的 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />。</summary>
      <param name="assembly">程序集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 为 <see langword="null" />。</exception>
      <returns>包含 <paramref name="assembly" /> 的程序集加载上下文。 如果在运行时未提供 <paramref name="assembly" />，此方法会返回 NULL。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.Load(System.Reflection.AssemblyName)">
      <summary>当在派生类中重写时，允许根据其 <see cref="T:System.Reflection.AssemblyName" /> 解析和加载程序集。</summary>
      <param name="assemblyName">描述要加载的程序集的对象。</param>
      <returns>已加载程序集或为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)">
      <summary>根据 <see cref="T:System.Reflection.AssemblyName" /> 解析并加载程序集。</summary>
      <param name="assemblyName">描述要加载的程序集的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> 未找到。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。</exception>
      <exception cref="T:System.IO.FileLoadException">加载了与 <paramref name="assemblyName" /> 不匹配的程序集或模块。</exception>
      <returns>已加载程序集或引发事件。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(System.String)">
      <summary>加载指定路径上的程序集文件的内容。</summary>
      <param name="assemblyPath">要加载的文件的完全限定路径。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyPath" /> 参数不是绝对路径。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyPath" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyPath" /> 参数为空字符串 ("") 或不存在。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyPath" /> 不是有效的程序集。</exception>
      <returns>加载的程序集。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.LoadFromNativeImagePath(System.String,System.String)">
      <summary>在指定路径上加载托管程序集文件的本机映像的内容。</summary>
      <param name="nativeImagePath">要加载的文件的完全限定路径。</param>
      <param name="assemblyPath">要加载的文件的 IL 版本的完全限定路径，或为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="nativeImagePath" /> 参数不是绝对路径。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyPath" /> 参数不是绝对路径。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nativeImagePath" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="nativeImagePath" /> 参数为空字符串 ("") 或不存在。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyPath" /> 不是有效的程序集。</exception>
      <returns>加载的程序集。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.LoadFromStream(System.IO.Stream)">
      <summary>加载带有基于通用对象文件格式 (COFF) 的映像的程序集，该映像包含托管程序集。</summary>
      <param name="assembly">字节数组，它是包含托管程序集的基于 COFF 的映像。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assembly" /> 不是有效的程序集。</exception>
      <returns>加载的程序集。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.LoadFromStream(System.IO.Stream,System.IO.Stream)">
      <summary>加载带有基于通用对象文件格式 (COFF) 的映像的程序集，此映像包含托管程序集，并且还可以选择包括程序集的符号。</summary>
      <param name="assembly">字节数组，它是包含托管程序集的基于 COFF 的映像。</param>
      <param name="assemblySymbols">包含表示程序集符号的原始字节的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assembly" /> 不是有效的程序集。</exception>
      <returns>加载的程序集。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.LoadUnmanagedDll(System.String)">
      <summary>允许派生的类按名称加载非托管库。</summary>
      <param name="unmanagedDllName">非托管库的名称。 这通常是不带路径或扩展名的文件名。</param>
      <returns>已加载库的句柄或为 <see cref="F:System.IntPtr.Zero" />。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.LoadUnmanagedDllFromPath(System.String)">
      <summary>从指定路径加载非托管库。</summary>
      <param name="unmanagedDllPath">非托管库的路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unmanagedDllPath" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unmanagedDllPath" /> 参数为空或不是绝对路径。</exception>
      <exception cref="T:System.DllNotFoundException">找不到库。</exception>
      <exception cref="T:System.BadImageFormatException">库无效。</exception>
      <returns>已加载的本机库的 OS 句柄。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.SetProfileOptimizationRoot(System.String)">
      <summary>设置用于存储此加载上下文的优化配置文件的根路径。</summary>
      <param name="directoryPath">存储优化配置文件的目录的完整路径。</param>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.StartProfileOptimization(System.String)">
      <summary>启动指定配置文件的配置文件优化。</summary>
      <param name="profile">优化配置文件的名称。</param>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.ToString">
      <summary>返回此加载上下文的字符串表示形式。</summary>
      <returns>此加载上下文的字符串表示形式。</returns>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.Unload">
      <summary>开始卸载此 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />。</summary>
      <exception cref="T:System.InvalidOperationException">不允许卸载。</exception>
    </member>
    <member name="P:System.Runtime.Loader.AssemblyLoadContext.All">
      <summary>返回一个包含所有 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 实例的集合。</summary>
      <returns>所有实例的集合 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 。</returns>
    </member>
    <member name="P:System.Runtime.Loader.AssemblyLoadContext.Assemblies">
      <summary>返回一个集合，它包含在 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 中加载的 <see cref="T:System.Reflection.Assembly" /> 实例。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" />在中加载的实例的集合 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 。</returns>
    </member>
    <member name="P:System.Runtime.Loader.AssemblyLoadContext.CurrentContextualReflectionContext">
      <summary>获取由最近调用 <see cref="M:System.Runtime.Loader.AssemblyLoadContext.EnterContextualReflection" /> 而设置的 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />。</summary>
      <returns>
        <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />由最近对的调用设置的 <see cref="M:System.Runtime.Loader.AssemblyLoadContext.EnterContextualReflection" /> 。 此值可为 <see langword="null" />。 值存储在中 <see cref="T:System.Threading.AsyncLocal`1" /> ，因此，每个异步上下文的值都是唯一的。</returns>
    </member>
    <member name="P:System.Runtime.Loader.AssemblyLoadContext.Default">
      <summary>获取默认的 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />。 默认上下文包含主应用程序程序集及其静态依赖项。</summary>
      <returns>默认程序集加载上下文。</returns>
    </member>
    <member name="P:System.Runtime.Loader.AssemblyLoadContext.IsCollectible">
      <summary>获取一个值，该值指示此 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 是否可回收。</summary>
      <returns>
        <see langword="true" /> 如果此 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 为可回收，则为; 否则为 <see langword="false" /> 。 如果未在构造函数中指定值，则该值为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Runtime.Loader.AssemblyLoadContext.Name">
      <summary>获取 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 的名称。 其值可为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Runtime.Loader.AssemblyLoadContext.ContextualReflectionScope">
      <summary>提供专用于 <see cref="M:System.Runtime.Loader.AssemblyLoadContext.EnterContextualReflection" /> 的返回类型。 它将作为 <see cref="T:System.IDisposable" /> 在 <see langword="using" /> 块中使用。</summary>
    </member>
    <member name="M:System.Runtime.Loader.AssemblyLoadContext.ContextualReflectionScope.Dispose">
      <summary>将 <see cref="P:System.Runtime.Loader.AssemblyLoadContext.CurrentContextualReflectionContext" /> 设置为返回此实例的 <see cref="M:System.Runtime.Loader.AssemblyLoadContext.EnterContextualReflection" /> 调用前面的值。</summary>
    </member>
  </members>
</doc>